<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Hack Your Design!]]></title>
  <link href="http://blog.toshimaru.net/atom.xml" rel="self"/>
  <link href="http://blog.toshimaru.net/"/>
  <updated>2013-09-09T00:54:19-07:00</updated>
  <id>http://blog.toshimaru.net/</id>
  <author>
    <name><![CDATA[Toshimaru]]></name>
  </author>

  
  <entry>
    <title type="html"><![CDATA[zshでRVMを使うと「RVM is not a function,...」]]></title>
    <link href="http://blog.toshimaru.net/zsh-rvm/"/>
    <updated>2013-08-27T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/zsh-rvm</id>
    <content type="html"><![CDATA[<p>zshでRVM動かそうとして下記のエラーで止まったので対処法をメモ。</p>

<pre><code>➜  ~  rvm use 2.0.0
RVM is not a function, selecting rubies with 'rvm use ...' will not work.

You need to change your terminal emulator preferences to allow login shell.
Sometimes it is required to use `/bin/bash --login` as the command.
Please visit https://rvm.io/integration/gnome-terminal/ for a example.
</code></pre>

<p>下記スクリプトを読み込む一行を .zshrc に追加してやればok.</p>

<pre><code>source ~/.rvm/scripts/rvm
</code></pre>

<p>もう一度動かしてみる。</p>

<pre><code>➜  ~  rvm use 2.0
Using /Users/user/.rvm/gems/ruby-2.0.0-p247
</code></pre>

<p>うむ。OK.</p>

<h2 id="section">参考</h2>
<p><a href="http://stackoverflow.com/questions/9336596/rvm-installation-not-working-rvm-is-not-a-function">rvm installation not working: “RVM is not a function”</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[マイナーJS・CSSライブラリのCDNはcdnjs.comがいい感じ]]></title>
    <link href="http://blog.toshimaru.net/cdn-js/"/>
    <updated>2013-08-17T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/cdn-js</id>
    <content type="html"><![CDATA[<p>Web制作において外部でホストされているライブラリを読み込むことは多いですね。こんな感じで。</p>

<pre><code>&lt;script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"&gt;&lt;/script&gt;
</code></pre>

<p>CDNは安心と信頼のGoogleのCDNを使いたいところですが、メジャーなライブラリしかホストされていません。例えばBackbone.jsとかはホストされていない。</p>

<p>そこで使うべきは <a href="http://cdnjs.com/">cdnjs.com</a>。</p>

<p>マイナーなものでも名前が通ってるライブラリであれば本CDNに登録されている印象です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac購入時に僕がインストールしたアプリや設定を公開するよ]]></title>
    <link href="http://blog.toshimaru.net/mac-setup/"/>
    <updated>2013-08-16T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/mac-setup</id>
    <content type="html"><![CDATA[<p>MacのSSDが逝ってしまいデータが全て吹っ飛びました。その際にMacを再セットアップしたので、その時インストールしたアプリや設定を公開してみたいと思います。</p>

<h3 id="section">ブラウザ</h3>

<ul>
  <li><a href="www.google.com/chrome/‎">Chrome</a></li>
  <li><a href="http://www.mozilla.org/en-US/firefox/new/">Firefox</a></li>
  <li><a href="http://www.opera.com/computer/mac">Opera</a></li>
</ul>

<p>Chromeがメインブラウザなのでインストール。Firefoxもたまに使うことがあるので一応インストールしておく。</p>

<p>Operaはオプションでどうぞ。<a href="http://www.forest.impress.co.jp/docs/news/20130702_606154.html">Operaは15でレンダリングエンジンがWebkitベースになる</a>ので要らない気もしますが、元Operaユーザとしてインストール。</p>

<h3 id="section-1">コミュニケーション</h3>

<ul>
  <li><a href="https://itunes.apple.com/us/app/twitter/id409789998">Twitterクライアント</a></li>
  <li><a href="https://itunes.apple.com/us/app/airmail/id573171375">Airmail</a></li>
  <li><a href="http://www.skype.com/ja/download-skype/skype-for-computer/">Skype</a></li>
</ul>

<p>Skypeの代わりにGoogle Hangoutsとか使ってもいいかも。</p>

<h3 id="section-2">エディタ</h3>

<ul>
  <li><a href="http://www.sublimetext.com/2">Sublime Text 2</a></li>
  <li><a href="https://code.google.com/p/macvim-kaoriya/">MacVim</a></li>
</ul>

<p>メインエディタであるSublimeをインストール。</p>

<h3 id="section-3">クラウドストレージ</h3>

<ul>
  <li><a href="https://evernote.com/">Evernote</a></li>
  <li><a href="https://www.dropbox.com/">Dropbox</a></li>
  <li><a href="http://www.google.com/drive/about.html">Google Drive</a></li>
</ul>

<p>この辺がメジャーですかね。</p>

<h3 id="development">開発/Development</h3>

<ul>
  <li><a href="https://itunes.apple.com/us/app/xcode/id497799835">Xcode</a></li>
  <li><a href="http://mac.github.com/">Github</a></li>
  <li><a href="http://www.sourcetreeapp.com/">Source Tree</a></li>
</ul>

<p>Githubは基本的にコマンド通して使ってますがGUIバージョンもインストール。Source Treeもgit用に。</p>

<h3 id="section-4">フォント</h3>

<ul>
  <li><a href="http://levien.com/type/myfonts/inconsolata.html">Inconsolata</a></li>
  <li><a href="https://github.com/yascentur/Ricty">Ricty</a></li>
  <li><a href="http://dejavu-fonts.org/wiki/Main_Page">DEJA VU SANS MONO</a></li>
</ul>

<p>上２つは有名ですが、最近のお気にはDEJA VU SANS MONO。</p>

<h3 id="section-5">ターミナル設定</h3>

<ul>
  <li><a href="http://brew.sh/">homebrew</a></li>
  <li>zsh + <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a></li>
  <li><a href="https://rvm.io/">RVM</a></li>
</ul>

<p>homebrewは基本ですね。zshもbrewでインストール。RVMも入れときましょう。</p>

<h3 id="section-6">その他</h3>
<ul>
  <li><a href="https://itunes.apple.com/us/app/pocket/id568494494">Pocket</a></li>
  <li><a href="https://itunes.apple.com/jp/app/kindle/id405399194">Kindle</a></li>
  <li><a href="http://www.google.co.jp/ime/">Google日本語入力</a></li>
  <li><a href="http://office.microsoft.com/">Microsoft Office</a></li>
</ul>

<p>この辺は各個人使っているサービスに応じて。MS Officeはサブスクリプション形式のoffice365がいいでしょう。</p>

<h3 id="section-7">導入見送ったやつ</h3>
<ul>
  <li><a href="http://boxen.github.com/">boxen</a> を使った環境構築</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ChromeのDevToolでlocalStrageのデータをイジイジする]]></title>
    <link href="http://blog.toshimaru.net/chrome-dev-tool-localstrage/"/>
    <updated>2013-08-15T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/chrome-dev-tool-localstrage</id>
    <content type="html"><![CDATA[<p>ChromeのDevToolでローカルストレージのデータをイジったことなかったけど、簡単にできたのでメモ。</p>

<p>例えばTODOデータをローカルストレージに保存している<a href="http://todomvc.com/architecture-examples/backbone/">TodoMVC</a>で上記のようにデータを作ってみる。</p>

<p>こんな感じで閲覧できる。</p>

<p><img src="/images/posts/localstrage/ls.png" alt="chrome-localstrage" /></p>

<p>ローカルストレージのデータを<code>TODO1</code>を<code>TODO123</code>に変更してみる。</p>

<p><img src="/images/posts/localstrage/ls2.png" alt="chrome-localstrage" /></p>

<p>ページをリロードしてみる。ローカルストレージからデータの初期化が行われるので、<code>TODO123</code>になっていることが確認できます。</p>

<p><img src="/images/posts/localstrage/ls3.png" alt="chrome-localstrage" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「フロントエンドデベロッパー面接時の質問事項」日本語訳しました]]></title>
    <link href="http://blog.toshimaru.net/Front-end-Developer-Interview-Questions-Japanese/"/>
    <updated>2013-08-06T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/Front-end-Developer-Interview-Questions-Japanese</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/darcyclarke/Front-end-Developer-Interview-Questions">Front-end Job Interview Questions(Github)</a>を日本語訳しました。</p>

<p><a href="https://github.com/darcyclarke/Front-end-Developer-Interview-Questions/tree/master/Japanese">日本語訳はこちら</a></p>

<p>質問項目としては下記のようになります。</p>

<ul>
  <li>一般的な質問事項</li>
  <li>HTMLに関する質問事項</li>
  <li>JSに関する質問事項</li>
  <li>jQueryに関する質問事項</li>
  <li>CSSに関する質問事項</li>
</ul>

<p>フロントエンドデベロッパーの方は自分の実力試し、あるいは知識の復習として回答を考えてみてはいかがでしょうか？  自分もやってみましたが案外知らないこと、うろ覚えになっていることが多かったです。 </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[underscore.jsのテンプレートのデフォルトデリミタを変更する]]></title>
    <link href="http://blog.toshimaru.net/underscore-template-in-erb/"/>
    <updated>2013-08-05T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/underscore-template-in-erb</id>
    <content type="html"><![CDATA[<p>erb内でunderscore.jsのテンプレートを使おうとするとerbのデリミタと競合してしまってエラーになってしまう。そういう時は下記のようにunderscoreテンプレートのデリミタを変更してやればよい。</p>

<pre><code>_.templateSettings = {
  interpolate : /\{\{(.+?)\}\}/g,
  escape: /\{\{-(.+?)\}\}/g
};
</code></pre>

<p>これで<code>{{ hoge }}</code>というmustacheライクなデリミタに変更できる。</p>

<h2 id="section">参考</h2>
<ul>
  <li><a href="http://null.ly/post/20000241563/underscore-js-erb">Underscore.js のテンプレートを ERB の中で使う</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MACアドレスを変更するコマンド]]></title>
    <link href="http://blog.toshimaru.net/change-mac-address/"/>
    <updated>2013-08-02T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/change-mac-address</id>
    <content type="html"><![CDATA[<p>MACアドレスを変更するコマンドが思ったより簡単に実行できたのでご紹介。(MAC OS X 10.8)</p>

<pre><code>sudo ifconfig en0 ether XX:XX:XX:XX:XX:XX
</code></pre>

<p>MACアドレスを適当に生成したければこちらをどうぞ。</p>

<pre><code>openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/.$//'
</code></pre>

<h2 id="section">参考</h2>
<ul>
  <li><a href="http://whatismyipaddress.com/change-mac">How do I change my MAC address?</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macの軽量でミニマルな音楽プレーヤー「Vox」]]></title>
    <link href="http://blog.toshimaru.net/minimal-mac-music-player/"/>
    <updated>2013-08-01T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/minimal-mac-music-player</id>
    <content type="html"><![CDATA[<p>iTunesは良いアプリケーションですが、メモリも食うし機能もゴテゴテしすぎててやや重たい感があります。音楽を聴きたいだけなのに…</p>

<p>そんなときには軽量・ミニマルな音楽アプリケーションが欲しいですよね。そこでおすすめしたいのがVOXという音楽プレーヤー。</p>

<p><a href="https://www.macupdate.com/app/mac/24852/vox">Vox - Vox is a simple little music player for OS X with support for many file types</a></p>

<p>最低限のミニマルな作りが良い感じ。Beta版ってなってますけど問題なく動作してます。</p>

<p><img src="/images/posts/vox/vox2.png" alt="vox2" /></p>

<p>メニューバーからも操作可能です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.jsをそろそろ学習したい人のための学習リソース集（2013年版）]]></title>
    <link href="http://blog.toshimaru.net/backbone-learn/"/>
    <updated>2013-07-30T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/backbone-learn</id>
    <content type="html"><![CDATA[<p>Backbone.jsを週末を使って学習しました。メモがてらそのときに使った学習リソースをまとめてみたいと思います。</p>

<h2 id="section">公式サイト</h2>
<p>まずは公式サイト。ただ公式サイトを眺めただけじゃようわからないので、ざっと眺めるだけでOKだと思います。</p>

<p><a href="http://underscorejs.org/">Backbone.js</a></p>

<h2 id="backbone">動画でBackboneを触ってみる</h2>

<p>ドットインストールのBackbone入門。手を動かしてもいいですし、流し見でもいいでしょう。</p>

<p><a href="http://dotinstall.com/lessons/basic_backbonejs">Backbone.js入門（ドットインストール）</a></p>

<p><img src="/images/posts/backbone/dotinstall.png" alt="dotinstall" /></p>

<p>英語、かつ有料になりますがプログラミング学習サイト、Code Schoolのコンテンツも非常にいいです。</p>

<p><a href="http://www.codeschool.com/courses/anatomy-of-backbonejs">Anatomy of Backbone.js（Code School）</a></p>

<p><img src="/images/posts/backbone/codeschool.png" alt="codeschool" /></p>

<h2 id="backbone-1">文章でBackboneを理解する</h2>

<p>英語になりますがオライリーのBackbone本がWEBで公開されているので読めます。（日本語訳版は現時点で出版されていないようです）</p>

<p><a href="http://addyosmani.github.io/backbone-fundamentals/">Developing Backbone.js Applications</a></p>

<p><img src="/images/posts/backbone/book.png" alt="book" /></p>

<p>日本語だとこちらの本がよいと思います。</p>

<p><a href="http://www.amazon.co.jp/gp/product/4899773501/ref=as_li_tf_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4899773501&amp;linkCode=as2&amp;tag=toshimaru-22"><img border="0" src="http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=4899773501&amp;Format=_SL160_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=toshimaru-22" /></a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=toshimaru-22&amp;l=as2&amp;o=9&amp;a=4899773501" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<h2 id="backbone-2">スライドでBackboneの良さを理解する</h2>

<iframe src="http://www.slideshare.net/slideshow/embed_code/12146222" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""> </iframe>
<div style="margin-bottom:5px"> <strong> <a href="http://www.slideshare.net/iloveigloo/clientside-mvc-with-backbonejs" title="Client-side MVC with Backbone.js " target="_blank">Client-side MVC with Backbone.js </a> </strong> from <strong><a href="http://www.slideshare.net/iloveigloo" target="_blank">iloveigloo</a></strong> </div>

<iframe src="http://www.slideshare.net/slideshow/embed_code/22635630" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""> </iframe>
<div style="margin-bottom:5px"> <strong> <a href="http://www.slideshare.net/kadoppe/backbonejs-22635630" title="いまさら聞けない！？Backbone.js 超入門" target="_blank">いまさら聞けない！？Backbone.js 超入門</a> </strong> from <strong><a href="http://www.slideshare.net/kadoppe" target="_blank">Kohei Kadowaki</a></strong> </div>

<h2 id="section-1">実際に動くサンプルを見る</h2>
<p>「いいから動くサンプルだ！」という方には、いろんなJSフレームワークでTODOアプリを作るプロジェクト、<a href="http://todomvc.com/">TodoMVC</a>のリソースが役立つでしょう。Backbone.jsのプロジェクトはこちら。</p>

<p><a href="http://todomvc.com/architecture-examples/backbone/">Backbone.js(TodoMVC)</a></p>

<p><img src="/images/posts/backbone/todomvc.png" alt="todomvc" /></p>

<p>※Backbone以外にも学習、比較したいJSフレームワークがあるならここで眺めてみるとよいでしょう。 </p>

<h2 id="backbone-3">Backboneの講演を聞いて理解を深める</h2>
<p>Backboneの作者自身による講演です。</p>

<iframe width="560" height="315" src="//www.youtube.com/embed/4udR30JYenA" frameborder="0" allowfullscreen=""></iframe>

<h2 id="backbone-4">Backboneを学習してみて</h2>
<p>railsなどに代表されるサーバサイドのMVCとBackboneでいうところのMVCは似て非なるもの。前者を前提として学習を進めていくと痛い目をみるかもしれません。</p>

<p>BackboneにもModel, View, Collectionという名前があって一瞬勘違いしそうになりますが、CollectionはModelの集積。本がModelだとしたら本棚がCollection。なのでrailsでいうところのModelはBackboneではModel/Collectionが担っていて、View,ControllerはBackboneではViewが担う。</p>

<p>上記を踏まえた上で、それぞれのオブジェクトがどういう役割を担っていて、疎結合に保たれているのかを意識して学習すると良い気がしました。</p>

<p>またBackboneというと自由度の高さが逆に足枷になる場合があって、なかなか「ベスト・プラクティス」なるものが見つけにくいのも悩ましいところです。これはいろいろなサンプルを見るなりして窺い知るくらいしかできないと思っています。</p>

<h2 id="section-2">参考</h2>
<ul>
  <li><a href="http://mawatari.jp/archives/roadmap-for-backbonejs-beginners">Backbone.js入門 – 初学者の為のロードマップ</a></li>
  <li><a href="http://d.hatena.ne.jp/kazuk_i/20110407/1302130947">Backbone.jsを利用したクライアントサイドMVCの導入についてそろそろ書いておくか</a> 【筆者注】やや情報が古いので注意！</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQueryでページ最下部のスクロール時のイベントをキャッチする]]></title>
    <link href="http://blog.toshimaru.net/jquery-bottom-scroll/"/>
    <updated>2013-07-29T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/jquery-bottom-scroll</id>
    <content type="html"><![CDATA[<p>ユースケースとしては、twitterのタイムライン表示ページのように最下部までスクロールしたら、そのイベントをキャッチして次ページのツイートを表示させたい！みたいなとき。</p>

<script src="https://gist.github.com/toshimaru/6102647.js"></script>

<p>上コードでは、ウインドウのスクロール時にスクロール位置が今どれだけなのかを差分を見て計算してる。それが0以下になったら次ページを表示させるようなコードを書けばよい。</p>

<p>上記の例では「最下部」をイベントの発火ポイントにしたけど、「下記○○％に入ったら」とかでもよさそう。</p>

<h2 id="section">参考</h2>
<ul>
  <li><a href="http://www.softel.co.jp/blogs/jquery/archives/742">ページの下までスクロールしたときに何らかの処理を実行する例</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[語学学校を卒業しました]]></title>
    <link href="http://blog.toshimaru.net/graduate-from-langschool/"/>
    <updated>2013-07-28T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/graduate-from-langschool</id>
    <content type="html"><![CDATA[<p>今月上旬にバンクーバーにて２ヶ月間通っていた語学学校を卒業しました。少し振り返ってみたいと思います。</p>

<h2 id="section">勉強漬け生活</h2>
<p>自分が選択したコースは２ヶ月間（8 weeks）のスピーキング強化コースで、短期集中型のコースということもあってかなりハードな勉強期間でした。</p>

<p>毎週個人プレゼンテーションがあるのでその暗記と練習。あわせてグループグループプレゼンテーションも毎週あるのでグループメンバーと内容を擦り合わせ。基本的に毎日なんらかの宿題が課されるので家に帰って宿題。週末の課題も出されるので土日も勉強。と、こんだけ勉強したのは大学受験期ぶりってくらいの内容でした。むしろそれ以上だったかもしれません。</p>

<h2 id="section-1">英語レベルについて</h2>
<p>ハードな勉強に必死に付いていったお陰か、「来て２ヶ月にしては（英語）喋れるほうだね」くらいには言われるレベルにはなりました。またクラス内で自分の英語レベルはかなり低いほうでしたが、なんとか他のクラスメートと同じくらい、またはそれ以上の英語レベルまでにはいくことができました。</p>

<p>自分の弱点はスピーキング、リスニングでしたが、どちらもかなり伸びたと思います。スピーキングは最初、よく喋りながら止まってしまうことが多々ありましたが、今はだいぶ減りました。リスニングもよく聞き取れない部分が減りました。</p>

<p>といってもまだまだネイティブに付いていけるレベルではないので、もっと伸ばしていこうと思います。</p>

<h2 id="section-2">スピーチ賞をゲット！</h2>
<p>終わってみるとあっという間で、気づいたら通常のDiploma(卒業証書)に加えてスピーチ賞をいただきました！！　自分の努力が報われたようで非常に嬉しかったです。</p>

<h2 id="section-3">これから</h2>
<p>身に付けた英語を使って、仕事探しを本格的に始めていこうと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DeferredはjQueryにおける最も重要なクライアントサイドツール]]></title>
    <link href="http://blog.toshimaru.net/jquerydeferred-is-most-important-client/"/>
    <updated>2013-05-08T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/jquerydeferred-is-most-important-client</id>
    <content type="html"><![CDATA[<p><a href="http://blog.toshimaru.net/jquery-ajaxdeferredajax/">jQuery モダンAjaxな書き方を目指して　〜deferredを使ったAJAX〜</a>が結構読んでもらっているみたいなので、今回はdeferred第二弾として、<a href="http://eng.wealthfront.com/2012/12/jquerydeferred-is-most-important-client.html">jQuery.Deferred is the most important client-side tool you have</a>の翻訳をしました。</p>

<hr />

<p>jQueryのdeferredの導入は、近年のjQueryの歴史における最もパワフルな拡張だ。jQuery自体はとくに新しい概念ではないが、deferredの導入は多くのクライアントサイド開発者にとってメリットがある。非同期プロセスにおいてdeferredパターンはシンプルでありながらも、パワフルなツールだ。皆さんご承知の通り、クライアントサイドの開発においてそういった非同期を使う状況は数多く存在する。</p>

<p>ここでは、deferredおよびjQueryによって提供されるAPIについて概観する。読者が理解できるよう多くの例を掲載した。あなたはこの記事を読み終わる頃にはdeferredとは何か、いつ使うべきものかが知ることができよう。</p>

<h2 id="section">概要</h2>

<p>“Deferred”パターンとは、完了するかもしれない、あるいは完了しないかもしれない処理単位のプロキシのように振る舞うオブジェクトを表す。このパターンはどんな非同期処理にでも適応することができる。少し例をあげると、Ajaxリクエスト、アニメーション、Webワーカーだ。ユーザの行動さえも「遅延処理(delayed computation)」の対象とみなすことができるのである。</p>

<p>deferredの最もシンプルな使い方は、処理が終わったときあるいは失敗したときに何が起こるかを明示できるようにすることだ。jQueryの実装だと、deferedがうまく解決(resolve)したとき、あるいはエラーで拒否(reject)されたとき、あるいはいくつかの進行中の処理から解決状態だと通知(notify)されたとき（後述）に走るであろうコールバック関数の登録が可能となる。</p>

<p>おそらく既に皆さんは、このdefrredパターンを使っているだろう。なぜならjQuery Ajax関数はdeferredインターフェースを実装したオブジェクトを返すからだ。それらはAjaxリクエストが成功したときにresolveされ、HTTPリクエストが失敗したときにrejectされる。</p>

<h2 id="section-1">理解すべき１つの重要なこと</h2>
<p>deferredは非同期処理における「いつ」を抽象化する。deferredは無制限に繰り返すことができる。この挙動のポイントは、もしdeferredが既にresolveならば、直ちに登録されているコールバックを実行することだ。あなたは処理単位(たとえばAjaxリクエスト)が終わっているかどうかは気にする必要がない。単純にコールバックをdeferredにバインドし、それが既にresolveであれば実行し、あるいはそれが未来にresolveになったときに実行する。</p>

<h2 id="jquerydeferred">jQueryでdeferredを使ってみる</h2>

<h3 id="resolution--rejection">解決(resolution) &amp; 拒否(rejection)</h3>
<p>jQuery deferred関数の中核は、deferredの解決(resolve)/拒否(reject)を処理することだ。<code>$.Deferred().</code>でdeferredオブジェクトを作成できる。deferredオブジェクトの<code>done()</code>、<code>fail()</code>はそれぞれオブジェクトのresolveされたとき、rejectされたときに実行される関数を登録できる。</p>

<p>deferredをresolve/rejectすることは実際、<code>resolve()</code>,<code>reject()</code>を使うことで実現できる。<code>jQuery.ajax()</code>メソッドは内部的には、リクエストが正常に完了したときにdeferredの<code>resolve()</code>をコールし、リクエストが失敗したとき（例えばhttpステータスコードの404）に<code>reject()</code>をコールする。</p>

<h3 id="deferred-notifyprogress">deferredへ通知する: notify()とprogress()</h3>
<p>jQuery1.7からresolve/rejectに加えて、<code>progress</code>が導入された。、<code>progress()</code>により、deferred内で<code>notify()</code>がコールされたときに実行されるコールバック関数を登録することができ、resolved状態に対する「進捗(progress)」を表現できるようになった。<code>notify()</code>で事前にコールバックを登録しておくことで例えば、ロードに時間がかかるリソースを持つdeferredオブジェクトの定期的に更新されるプログレスバーを描画できる。deferredはロード中に通知(notify)され、ロード完了時に解決(resolve)される。</p>

<h3 id="promise">promise()を返す</h3>
<p>deferred利用時のほとんどの場合、deferredの利用者にresolve/rejectを決めてほしくはないだろう。きっとあなたはそれをあなた自身で管理したいと思うはずだ。そのような場合には、<code>promise()</code>を返すのがよい。</p>

<p>jQuery用語的にいうと、promiseは「read-only deferred」だ。promiseはコールバック登録、deferred状態への問い合わせを可能にするが、状態の変更は不可だ(たとえばresolve/reject状態の変更)。 <code>jQuery.ajax()</code>メソッドはpromise()を返す。なぜならAJAXリクエストが成功したか失敗したかを決定するのは、その内部のコードで完結する話だからだ。</p>

<h3 id="when">非同期イベントの同期化：when()</h3>

<p><code>$.when()</code>は１つ以上のdeferredを受け入れ可能で、それら全てのdeferredオブジェクトが正常に完了(resove)したときにのみresolve状態となる新たなdeferredを作り出す。つまり<code>when()</code>により、非同期イベントを一つに統合することが可能になるのだ。</p>

<p>下記の例を考えてみよう。</p>

<blockquote>
  <p>ある1つのUI表現に対して、2つの分割されたAJAXリクエストのデータが必要であり、UIのレンダリングには、それら２つのリクエストのデータが必須である。</p>
</blockquote>

<p><code>when()</code>がないと、レンダリング前にどちらのリクエストも終わっていることを保証するために、コールバックをネストすることを強要されてしまう。さらに悪いことに、２つのAJAXリクエストが失敗時のエラーハンドリングコードが下記URLに示す通り２つに分散されてしまう。</p>

<iframe width="100%" height="300" src="http://jsfiddle.net/mattbaker/2s4Mg/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>この代替案として、<code>when()</code>が使用可能なのだ。2つのAJAXリクエストによって分割されてしまったdeferredオブジェクトを1つに統合できる。<code>when()</code>はこれら2つの両リクエストが完了したときにのみresolveとなる。成功時のコールバックとしてUI要素のレンダリング処理を登録することができる。さらに、失敗時の処理は1つの箇所にまとめることができる（下記URL参照）。</p>

<iframe width="100%" height="300" src="http://jsfiddle.net/mattbaker/wJ4bm/1/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h3 id="section-2">人間もまた非同期だ</h3>

<p>Webサイトやアプリーケーション上の数多くのモノは非同期である。これにはあなたユーザ自信も含まれてさえいる。考えてみよう、あなたのサイトはユーザにプロフィールを作成するように依頼する。プロフィールを十分にユーザに埋めさせるよう、あなたはどれくらい入力が完了しているかプログレスバーを表示させる。それらが入力が完了するとプログレスバーを変更させ、全て入力し終えたときには「ありがとうございます」というメッセージを表示させるだろう。
この状況では、プロフィールの遅延入力完了という点でdeferredが現れている。プロフィールを作成、「計算」している本質は実際のところ、人間である。このケースは「非同期である」と見做せる状況とはいえないかもしれないが、まさにdeferredが使える有効な状況である。</p>

<p>ユーザーアクション（これは解決への進捗率を示している）によるdeferredを通知するために、<code>notify()</code>が使える。そして<code>resolve()</code>がプロフィール入力完了によるdeferredを通知するのに使える。プログレスバーを更新するには<code>progress()</code>を使ってコールバックをバインドし、ありがとうメッセージを表示するコールバックをバインドするのには<code>done()</code>を使う。</p>

<p>下記に例を示そう。</p>

<iframe width="100%" height="300" src="http://jsfiddle.net/TTUrQ/10/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h3 id="section-3">最後に（訳者より）</h3>

<p>原文にはdeferredの面白い使い方、<code>pipe()</code>も紹介されています。是非こちらも参照してみてください。</p>

<p><a href="http://eng.wealthfront.com/2012/12/jquerydeferred-is-most-important-client.html">jQuery.Deferred is the most important client-side tool you have</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[仕事のデキる人の７つのポイント]]></title>
    <link href="http://blog.toshimaru.net/good-worker/"/>
    <updated>2013-04-21T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/good-worker</id>
    <content type="html"><![CDATA[<p><a href="http://blog.sixapart.jp/2013-04/nine-moments.html">「あ、この人、仕事できるんだろうな」って思う9つの瞬間</a>を受けて僕も「仕事のデキる人」を考えてみた。 (元記事を先に読むことをお薦めします)</p>

<h2 id="section">1.レスポンスが早い</h2>

<p>デキる人はレスポンスが早いです。</p>

<p>まずはメール。メールであればスキマ時間（例えば移動時間）を使って返信できるものなので、デキる人はそれらの時間を有効活用して返信をささっと書いてしまうので、メールのレスポンスが基本的に早い。</p>

<p>デキる人はメール以外にも仕事の返事も早いです。締切りのあるタスクを頼まれた時、現状、タスク全体の何％まで進んでいるのか、遅延はあるか、作業を進める上で何か問題点はないのか、などの一次報告・中間報告をしっかり共有します。これにより上司はタスクの状況を把握できますし、安心して仕事を任せていられます。</p>

<h2 id="section-1">2.時間・締切りを守る</h2>
<p>時間を守る、締切りを守るなんて社会人にとって当然すぎることですが、世の中で出来ていない人の多いこと。</p>

<p>Time is Money、時は金なり、その予定のためにみなが大切な時間を割いているわけです。その時間を守らない人がどうして人から信用されるでしょうか。</p>

<p>彼らはまた、締切りも守ります。その締切りがとりあえず設定した締切りであろうと、マストな締切りであろうと守ります。時間と同じく、締切りを守る人は他から信用が厚いものです。</p>

<h2 id="section-2">3.先読みして行動する</h2>

<p>先読み力とでもいいでしょうか。一般的なワードでいうなら想像力と言ってもいいかもしれません。</p>

<p>話者と聞き手の関係であれば聞き手が反論したくなるようなところを予想して事前にロジックを準備しておく。書き手と読み手の関係であれば読み手が疑問を持ちそうなところに説明、注釈を書き加えておく。といった具合にデキる人は先読みして事前に打てる対策を講じています。</p>

<blockquote>
  <p>僕が断るであろう理由を先回りしてすべて解決した資料が別途用意されている。
外堀を全部埋めた上で、「ほかに断る理由はありますか?」と聞いてくるわけだ。</p>

  <p>こういう人は、仕事がデキる。と思う</p>

  <p><a href="http://d.hatena.ne.jp/shi3z/20101104/1288835347">「仕事がデキる人」と「仕事をする人」の違いと習慣</a></p>
</blockquote>

<h2 id="section-3">4.タスク管理を自分なりの方法で出来ている</h2>

<p>evernote、iPhoneのタスク管理アプリ、ホワイトボード、付箋、なんでも構いません。デキる人は自分なりのタスク管理方法をもっています。デキる人はこれらのツールを駆使することで自分のタスクを一覧化し、優先度付けを行い、優先度の高いものから効率的にタスクを消化しています。</p>

<p>人間のメモリ領域なんてすぐに限界がくるものなので、これらのツールを使ってデキる人は日々のタスクを整理、消化しています。</p>

<h2 id="section-4">5.ゴールを明確化し、それに向かって行動する</h2>

<p>仕事をする中でゴールを見失ってしまうことはよくあることです。例えばあなたが新製品の開発のため××という作業をやっていたとしましょう。××という作業をするあまり、いつの間にか「新製品の開発」という目的を忘れて、その作業自体が目的化してしまう―こんなことってありませんか？</p>

<p>デキる人はゴールを明確に持っています。ゴールを忘れることはありません。ゴールを見据えているのでそれに合わせた行動ができます。先の例でいうならば××という作業の中でも、「製品のためにこんな機能も必要じゃないだろうか」「製品の品質を保つためにこうしたらどうだろう」という発想が生まれます。</p>

<p>デキる人の目標を見据えた行動、これがチームをうまく回し、全体の成果を改善させます。</p>

<h2 id="section-5">6.楽観的である</h2>

<p>楽観的すぎるのも問題ですが、デキる人は基本、楽観的です。</p>

<p>悲観的な人によくあるパターンとして、まずは否定から入る、があげられます。例えば新しい事業案に対して「それはリスクがある」「現実的でない」「時期が早い」などといろいろと理由をつらねあげて＜否定＞をします。</p>

<p>デキる人は違います。まずは＜肯定＞から入ります。「出来るのではないか」から入り、なぜそれが出来るのかを考えます。出発点は「出来ないのではないか」という否定ではなく、肯定です。出来る理由を考えた上で、問題のある部分も考え、それら２つの側面を天秤にかけてジャッジします。</p>

<p>このようにデキる人は＜肯定＞から考える、楽観的な側面を兼ね備えています。だからこそ新しいチャレンジにも積極的になれるのです。</p>

<h2 id="section-6">7.冗談も言える</h2>

<p>一見、仕事のできる人というと、無駄な時間を一切作らずに仕事をしてそうです。だけどそのイメージは違うと僕は思ってます。デキる人は時には冗談も言えるような、ある種の＜軽さ＞みたいなものを持っています。</p>

<p>このことは社外の人、社内の人、どちらにとってもプラスになります。例えば初対面で少し固い空気の場面において、冗談が言えると場が和みます。これによりお互いのコミュニケーションが活発化します。いわゆるアイスブレークってやつですね。  </p>

<p>デキる人はそこまで高い笑いのセンスがあるとまでは言いません。しかし、ひたすら仕事をするのではなく、そういう＜軽さ＞でみんなの雰囲気がプラスになることが自然に出来る人は、デキる人だなぁと思います。</p>

<h2 id="section-7">最後に</h2>
<p>なんとなくリストアップしてみると、結果的に元記事に書いてあることと半分くらいはカブっています。つまりデキる人は誰が見ても「デキる！」と思わせるような共通点があるとも言えます。デキる人のそういう共通点を見習って自分も＜デキる人＞と見られるよう精進したいと思います！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows コマンドでAmazon S3上にバックアップする]]></title>
    <link href="http://blog.toshimaru.net/windows-s3-sync/"/>
    <updated>2013-04-19T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/windows-s3-sync</id>
    <content type="html"><![CDATA[<p>Windows PCを処分するにあたり、音楽、写真、動画などのデータ郡をamazon S3に置き管理することにしました。S3のGUIツールはコレといった定番がないようで（あったら教えてください）、挙動にもやや不安が残る感じでした。よって今回はコマンドラインツールを使ってローカルとS3をsync、同期することにしました。</p>

<p>使ったツールは<a href="http://www.dragondisk.com/">Dragon Disk</a>。トップにパッケージの写真があってやや有料の匂いがするが、無料なのでご安心を。</p>

<h2 id="section">手順</h2>

<ol>
  <li><a href="http://www.dragondisk.com/download-amazon-s3-client-google-cloud-storage-client.html">ダウンロードページ</a>からコマンドラインツールをダウンロード</li>
  <li>展開してその中に<code>dgsync.bat</code>ファイルを作成し、下記のようなバッチファイルを作成してください。
<script src="https://gist.github.com/toshimaru/5415149.js"></script>
    <ul>
      <li><code>DGTOOLS_ACCESS_KEY</code>、<code>DGTOOLS_SECRET_KEY</code>を適宜編集。</li>
      <li>ファイルの削除も同期をとりたい場合は<code>--dont-delete</code>オプションを外してください。</li>
      <li>S3上のフォルダはあらかじめ作成しておく。</li>
    </ul>
  </li>
  <li>２で作成したバッチを実行する。</li>
</ol>

<p>以上です。amazon S3を使って安全、安価にデータを保管しましょう！</p>

<h2 id="section-1">参考</h2>
<p><a href="http://www.tdn.co.jp/techblog/201206/52/">Amazon S3のクライアント「DragonDisk」に付属の「dgsync」が便利な件</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[開発者がfacebook「いいね！」ボタン設置時に注意すべきこと]]></title>
    <link href="http://blog.toshimaru.net/facebook/"/>
    <updated>2013-04-16T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/facebook</id>
    <content type="html"><![CDATA[<p>Facebookの<a href="https://developers.facebook.com/docs/reference/plugins/like/">いいね！ボタン</a>設置をする際に、いくつか注意すべき点がありますのでまとめます。</p>

<h2 id="section">設置方法について</h2>

<p>設置方法に関してはいろんなページで紹介されているので、その手順に従えばOKです。</p>

<p><a href="http://www.facebook-japan.com/iine.html">「いいね！」ボタンを設置しよう</a></p>

<p>注意すべきはhtml5の設置コードだとIEの古いブラウザで動かない場合があるので、Iframeを使うところでしょうか。（ただし機能に制限あり）</p>

<h2 id="share">Shareボタンとはなんだ?</h2>
<p>もうほとんどのサイトで見かけませんが一部の古いサイトでは、Likeボタンではなく、Shareボタンというのを見かけました。ですが本ボタンはもう<strong>廃止予定なので使わないでください。</strong>公式ページでも「We deprecated the Share Button when we launched the Like button」（いいねボタンを作ったときにシェアボタンは廃止したよ！）と説明されています。</p>

<h2 id="og">OGタグとはなんだ？</h2>
<p>OGタグ、つまりオープングラフタグとはウェブページがオープングラフの情報を持つために付加されるメタデータです。オープングラフとは、例えば「太郎さんが◯◯というウェブページでいいねボタンを押した」といったときの、◯◯に入る規格化された情報を示します。オープングラフについては詳しくは公式の「<a href="http://ogp.me/">The Open Graph protocol</a>」を見てみてください。</p>

<p>OGタグとは具体的に下記のようにhtmlのheadタグ内のmetaタグとして表現されます。</p>

<pre><code>&lt;head&gt;
&lt;title&gt;The Rock (1996)&lt;/title&gt;
&lt;meta property="og:title" content="The Rock" /&gt;
&lt;meta property="og:type" content="video.movie" /&gt;
&lt;meta property="og:url" content="http://www.imdb.com/title/tt0117500/" /&gt;
&lt;meta property="og:image" content="http://ia.media-imdb.com/images/rock.jpg" /&gt;
...
&lt;/head&gt;
</code></pre>

<h2 id="section-1">いいねボタンのデバッグツールを使おう！</h2>
<p>開発者おなじみだと思いますが。こちらを使ってOGタグのテストをしましょう。</p>

<p><a href="https://developers.facebook.com/tools/debug">Debugger</a></p>

<p>※私が設置したサイトはたまたま海外IP判定を行なっていたのでFacebook側がうまくOGタグを認識してくれませんでした。FacebookサーバからOGタグが読み込めるように海外facebook IPは許可しておきましょう。</p>

<h2 id="section-2">ボタンのテストにはテストユーザを使おう！</h2>

<p>テストの度に自分のプライベートアカウントを使うのはイヤですよね。そんなときは公式で提供されているテストユーザ作成サービスを使いましょう。詳しくは下記。</p>

<p><a href="http://www.koikikukan.com/archives/2011/09/11-013333.php">Facebookがテストユーザー作成・編集画面をリリース</a></p>

<h2 id="section-3">ボタン押したときに「承認」が出てきた</h2>
<p>いいねをテストしまっくてたら「承認」ボタンが表示されるようになりました。この例は下記でレポートされているようにけっこう根が深い問題です。</p>

<blockquote>
  <p>その「承認」ボタンは、最近の導入した「いいね」ボタンに対する”like-jacking attack” への対応の一環です。ボタンの使われ方などを基準に、ボタンの設置ページで”like-jacking”が発生してることが推測された場合に、「承認」のステップが入ることになります。</p>

  <p><a href="http://blog.bricoleur.in/archives/1216">facebookの「いいね」ボタンに「承認」が必要となるケースについて</a></p>
</blockquote>

<p>facebook側は”like-jacking attack”が発生している可能性があるサイトをプログラムで自動検出して、「承認」ボタンを表示させているようです。</p>

<p>そしてこの「承認」ボタンはマニュアルでの解除依頼は受け付けていないようです。つまり「うちのサイトはスパムじゃないから承認ボタンは消してくれ！」とfacebookに依頼しても取り合ってはくれない、ということです。</p>

<p>上記でテストユーザを使えばいくらテストしても大丈夫なんでしょうか。それともいいねを取り消せばOKなのでしょうか。いずれにしても”like-jacking attack”と判定されうるような行動は避けたほうがよさそうです。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[会社を退職しました。]]></title>
    <link href="http://blog.toshimaru.net/why-resignation/"/>
    <updated>2013-04-15T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/why-resignation</id>
    <content type="html"><![CDATA[<p>今まで務めてきた会社を４月で退職しました（正式には最終出社日を終えました）。新卒で入社してから、ちょうど３年になります。せっかくいいきっかけなのでこれまでの道のりを振り返ってみようと思います。</p>

<h2 id="itweb">IT/WEB業界に飛び込むまで</h2>

<p>IT、もっというとWEB業界に興味を持ち仕事にしてみたいと思うようになったのは、梅田望夫さん著『Web進化論』を読んだことがきっかけだったように思います。それまでは１ユーザとしてインターネットを楽しんでいただけでした。本書を読むことでWEBのこれまでの進化、そしてこれからの進化の可能性を強く感じました。（今改めて読み返すとWEBをユートピア的に捉えすぎている嫌いはあるけれども、当時にしてはWEBの潮流をうまく整理した良書だったと思います。）</p>

<p>僕もWEB業界に身を投じてその進化の一端を担いたい、そう思ったのがこの業界に入ったきっかけです。</p>

<h2 id="section">エンジニアになるまで</h2>
<p>会社ではエンジニアとしてバリバリコードも書いてきたわけですが、自分の出自は文系なので入社当時、本気でエンジニアになる気はありませんでした。ただ学生時代からそれなりに興味はあったので、趣味でhtml/cssをマークアップしたり、自由選択科目の範囲を利用してプログラミングの授業をとったりしてました。</p>

<p>会社入社後は研修の一環として、文系であろうと理系であろうとプログラミング研修をすることになっていました。そこで初めて基礎からがっちりプログラミングを学びました。研修後はOJT形式で現場のプログラミングを覚えました。</p>

<p>「好きこそものの上手なれ」とはよく言ったもので、それなりにWEBプログラミングに興味を持っていた自分としては、その中ですんなりプログラミングに馴染めました。そしてその仕事を楽しめました。</p>

<p>そうこうやっているうちに気づくと自分は他のエンジニアに囲まれながら現場でバリバリコードを書いていました。</p>

<h2 id="section-1">なぜ辞めたのか</h2>

<p>まず退職を考えるきっかけとなったのは、他の会社の方から仕事のお誘いをいただけたことでした。結果的にはそのお話はお断りしたのですが、自分の市場価値がどれだけあるかは僕自身ではわからなかったので、お話をいただけただけでもそれは嬉しい経験でした。それがきっかけとなって「今の世界ではない他の世界も見てみたい」と思うようになりました。</p>

<p>そこからしばらく会社にいましたが、辞めるならタイミング的に今が最良だと考えました。よく「仕事は３年は続けろ」と言われますが、自分にとってもこの＜三年＞という期間はとても良い時期でした。仕事がそれなりに板に付き、問題を独力で解決できるようになっていました。プロジェクト的にも自分の関わっていた大きなプロジェクトが落ち着いた頃でした。</p>

<p>また自分のやりたいこともだんだんと見えてきていて、＜自分がやりたいこと＞と＜会社がやりたいこと＞にズレが少なからず生じていました。このタイミングで＜自分がやりたいこと＞を積極的に追求してみてもよいのではないだろうか、そんなわけで辞めることを決意しました。</p>

<p>ただ今の自分があるのは会社がここまで育ててくれたお陰ですし会社には本当に感謝してます。</p>

<h2 id="section-2">これから</h2>
<p>海外行きます。語学を学びつつ、現地で働くことを目標に頑張りたいと思います。</p>

<p><strong>「いつ行くか？　今でしょ！」</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[いま、大学の社会における意義ってなんなんだろう？]]></title>
    <link href="http://blog.toshimaru.net/university/"/>
    <updated>2013-04-13T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/university</id>
    <content type="html"><![CDATA[<p>最近、大学の社会における意義を改めて考えています。</p>

<blockquote>
  <p>大学（だいがく、英: college、university）は、学術研究および教育の最高機関である。</p>

  <p><a href="http://ja.wikipedia.org/wiki/%E5%A4%A7%E5%AD%A6">大学 - Wikipedia</a></p>
</blockquote>

<p>大学がもはや学術研究の場ではなく、単なる<a href="http://himasoku.com/archives/51492587.html">就職予備校化している</a>という話を散見します（おそらくこの話は文系においてのみ）。</p>

<p>自分も一文系学生を体験た実感として、確かに文系学生にとって大学時代の最終ゴールは「就職活動を成功すること」のように見えます。であれば企業側が特に大学の成果を求めない以上、「就職予備校化」してしまうのも当然なような気がします。</p>

<p>だけれども大学は就職予備校なんかじゃあありません。</p>

<blockquote>
  <p>大学は、そもそも学問をするところであって、就職活動の準備をする施設ではない。会社に入ってから役に立つことを教える義務は大学にはない。「大学では、社会に出てから役に立つことを教えてもらえない」というのは、「蕎麦屋では、ラーメンを注文しても出てこない」と言っているのと同じで、当たり前すぎて批判になっていない。
（中略）
大学生は、在学中は会社に入ってからのことなんて考えずに、本来の目的である学問にもっと時間を割くべきだ。</p>

  <p><a href="http://dennou-kurage.hatenablog.com/entry/2012/09/08/192535">大学は就職予備校ではない</a></p>
</blockquote>

<p>でもそこで「本来の目的の学問に時間を割いているの？」というとそれはNOだと僕は思っている。</p>

<p><a href="http://toyokeizai.net/articles/-/13446">小学生より勉強しない日本の大学生</a></p>

<p>上記事のように「小学生より勉強しない」のは誇張ではなく事実だと思ってます。自分の経験からいうとこんな感じ。</p>

<ul>
  <li>出席すれば単位がとれる授業をとる。もしくは出席せずともレポートだけ書けば単位がとれる授業をとる。</li>
  <li>テスト前はちゃんと授業を聞いている友人のノートのコピー&amp;まとめをもらって対策。</li>
  <li>レポートはネットのマイナーな論文を盗用…までひどくなくともWikipediaなどの情報を巧みに構成して提出。あるいは過去に作成したレポートを再構成して提出。</li>
  <li>大教室の一番後ろの席に座り、睡眠orスマホいじり。</li>
</ul>

<p>学生は学問してるか？NO。では就職予備校として就職の準備をしているか？NO。というわけで大学生活中何もしていない学生が大量生産されるわけである。</p>

<p>その結果が就職活動のエントリーシート、ないしは面接に端的に現れている。自分が就活生として周囲をみてて、あるいは自分が面接官をしていて、「大学時代一番がんばったことはなんですか？」という問いに対する回答。サークル、バイトの２つが多くを占めていました。ほとんど学問をまともに答える人はいなかったように記憶しています（それが企業に受けが悪いから意図的に避けていたというのもあると思うけど）。</p>

<p>大学生活は単なる「モラトリアム期間」として好きなことをやっているのが過ごしかたなんだろうか。それもそれでいいと思うけど、ならば大学の社会における意義って何なのだろう、</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iphone天気アプリの新定番, forecast.io]]></title>
    <link href="http://blog.toshimaru.net/forecast.io/"/>
    <updated>2013-04-11T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/forecast.io</id>
    <content type="html"><![CDATA[<p>iPhoneお天気アプリとしてウェザーニュースを使っていましたが<a href="http://matome.naver.jp/odai/2134468812585377601">改悪されて</a>以降、いまいちいい天気アプリがなかったが最近シンプルでかっこいいお天気アプリを見つけたのでご紹介。</p>

<p>その名も<a href="http://forecast.io/">forecast.io</a>。</p>

<p><img src="/images/posts/forecast/1.png" alt="forecast.io" /></p>

<p>アプリ登録方法などは下記参照。</p>

<p><a href="http://m.designbits.jp/13040213/">iPhoneでも使いやすいWeb版お天気アプリ「Forecast.io」</a></p>

<hr />

<p><img src="/images/posts/forecast/2.png" alt="forecast.io" />
<img src="/images/posts/forecast/3.png" alt="forecast.io" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jekyllマークダウンはデフォルトではなく kramdown を使おう]]></title>
    <link href="http://blog.toshimaru.net/jekyll-markdown/"/>
    <updated>2013-04-10T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/jekyll-markdown</id>
    <content type="html"><![CDATA[<p>jekyllにおいて日本語リストがうまくhtmlに変換してくれないなーって調べてたら、どうやらデフォルトのmarkdownレンダラーではダメらしい。  </p>

<blockquote>
  <p>Jekyll がデフォルトの markdown レンダラーとして採用している maruku は、どうも Unicode の扱いが怪しいらしい。日本語を使っているとフォーマットが崩れることがある。オプションとして選択可能な kramdown に入れ替えることをおすすめする。 _config.yml に次の1行を足すだけでいい。</p>

  <p><a href="http://radiumsoftware.tumblr.com/post/10543406778">GitHub Pagesを使うにあたって</a></p>
</blockquote>

<p>_config.ymlに下記を追記。</p>

<pre><code>markdown: kramdown
</code></pre>

<p>これで日本語リスト変換もうまくいきました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[メンテナビリティの高いコードを書くメリット]]></title>
    <link href="http://blog.toshimaru.net/mentenability/"/>
    <updated>2013-04-09T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/mentenability</id>
    <content type="html"><![CDATA[<p><a href="http://careerhack.en-japan.com/report/detail/66">コードは汚くていい。「アイツがいれば勝てる」と言わせろ。</a>に対するあるはてな匿名ダイアリー記事を読んでいて考えたこと。</p>

<h2 id="section">良いコードはエンドユーザにとってはどうでもいい</h2>
<blockquote>
  <p>非エンジニアを騙して手抜きするのは簡単。余程のヘタレでない限り手抜きをしても絶対にばれない。コードにコメントがなくてもモジュール化されてなくてもコピペ満載でもマジックナンバーだらけでも動いてさえいればユーザーは気にしない。</p>

  <p><a href="http://anond.hatelabo.jp/20121201025247">会社潰すのは簡単、アイツがいれば勝てる、と思った人間を雇えば良い</a></p>
</blockquote>

<p>そう、単純に速く作るのは難しくはない。なんにも考えずにただ思いつくままに上から下に書いていけばいい。そうして出来上がったコードは大抵はひどいものだ。要らないコードがコメントアウトされて残り、バージョン管理されたコミットログもまともに書かれず、ネストが深く、関数化もまともにされていない、こんなコードだ。</p>

<p>無論、「良いコード」「綺麗なコード」の多くはユーザにとっては無意味なものであり、どうでもいいものである。 ユーザにとっての最大の関心事はそのアプリケーションが面白いか面白くないか、正しく動くかどうか、バグがないかどうかであり、コードが良いか悪いかなんてアウトオブ眼中である。</p>

<h2 id="section-1">悪いコードは生産性を下げる？</h2>
<p>じゃあ悪い手抜きコードでいいのか？　というとそんなことはないはず。</p>

<blockquote>
  <p>手抜きコードをメンテさせられるプログラマの生産性は落ちる</p>

  <p>手抜きコードのメンテはプログラマにとって最悪の仕事。綺麗なコードで数十分でできる仕事が２週間かかることもしばしば。最悪の仕事をさせられ、「仕事が遅い」と評価され、モチベーションが下がって更に仕事が遅くなる。</p>

  <p><a href="http://anond.hatelabo.jp/20121201025247">会社潰すのは簡単、アイツがいれば勝てる、と思った人間を雇えば良い</a></p>
</blockquote>

<p>このことは「悪い」コードをメンテナンスさせられた経験のある人にとっては当然なことだと思う。</p>

<p>悪いコードは３行で書けることをきっと10行で書くだろう。また、悪いコードは5メソッドに分けるべきところを1メソッドに書くだろう。ときに悪いコードは3ファイルに分けるところを1ファイルに集約するだろう。悪いコードはオブジェクト指向をうまく利用できていないだろう。</p>

<p>このようなコードのメンテナンスは大変骨の折れる作業で、メンテナンスコストは高くつく。このメンテナンスコストも含めてトータルでコスト計算すると結局、コストは手抜きコードのほうが高くつくのではないだろうか。つまり数式にするとこのようになるだろう。</p>

<p><strong>手抜きコードを書くコスト＋そのメンテナンスコスト　＞　ちゃんと考えて書いた良いコード＋そのメンテナンスコスト</strong></p>

<p>ただ問題は前者がイニシャルコストが安いので、一見「トータルコストも安く済むのでは？」と思えてしまうところだ。悪いコードをメンテナンスしたことのない非プログラマにとっては当然とも言えるが・・・。</p>

<h2 id="section-2">メンテナビリティの高いコードを書くメリットは何か</h2>
<p>メンテナビリティの高いコードを書くメリットは何だろうか。まず上記にあげたように「メンテナンス時のコストが下がりトータルコストが下がる」ことである。</p>

<p>例えばあるソーシャルゲームを考えてみよう。それが使い捨てのゲームアプリであればひどいコードでいいかもしれない。だが中長期的にそのアプリを運用していくのであれば、メンテナビリティの高いコードを書くべきだ。それにより、保守コストは下がり、トータルコストは低くなる。</p>

<blockquote>
  <p>ソースコードの理解に時間を要したり、最悪の場合、なぜそういうコードになっているのか最後までわからず、「触ると危ないコード」&gt; になってしまうようなら、例え機能的に要件を満たせていても、中長期のメンテナンスの観点から言えば、そのソースコードはコミットしない方がプロジェクトのためになります。</p>

  <p><a href="http://blog.livedoor.jp/lalha/archives/50435614.html">メンテナビリティの高いソースコードを目指して</a></p>
</blockquote>

<p>またコードに気を使っている会社には「優秀なプログラマが集まる」だろう。言い換えるならば、コードに気を使う会社にはコードに気を使う優秀なプログラマが集まるし、そうでなければコードに無頓着なプログラマが集まるだろう。</p>

<p>こんな要望に対して優秀なプログラマはどう思うだろうか？ 「アプリ作って。期限は◯◯までで、ヨロシク。え？テスト書くかって？　あー要らない要らない。ちゃんと動いていればいいから。」きっと気持ちが萎えてしまうだろう。</p>

<h2 id="section-3">まとめ</h2>
<ul>
  <li>メンテナンス時のコストが下がる→トータルコストが下がる</li>
  <li>優秀なプログラマが集まる</li>
</ul>

<p>上述した理由により、基本的に私は「いかなる場合でもメンテナビリティを意識したコードを書くべきだ」という姿勢だ。</p>

<h2 id="section-4">コードを書くことが目的ではない</h2>
<p>ただ最後に記しておきたいのはコードを書くこと自体は目的ではないということだ。会社のビジネスを成功に導くためにコード/プログラムがあるのであり、そのことはプログラマが忘れてはならないことである。</p>

<blockquote>
  <p>綺麗に書くのなんて当たり前、そしてその先で実現できるモノづくりに全力を尽くす。</p>

  <p><a href="http://kyuns.hatenablog.com/entry/2012/11/30/143037">コードの綺麗さの先にあるもの</a></p>
</blockquote>

<blockquote>
  <p>まつもと氏は、美しいコードというものがあるという。それはアートで、「プログラマはアーティストだ」と言い切る。（中略）アートだと言ってもプログラムは飾るのが目的ではない。「実用に供してなんぼ。日本では用の美というらしいですが、どのぐらい目的に合致しつつ美しいかが重要」</p>

  <p><a href="http://www.atmarkit.co.jp/news/200904/10/matz.html">「ソフトウェアは工業製品ではない」、Rubyのまつもと氏が講演</a></p>
</blockquote>

<h2 id="section-5">関連エントリ</h2>
<ul>
  <li><a href="http://blog.toshimaru.net/8/">ダメプログラマの8つの特徴</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
