<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://blog.toshimaru.net/atom.xml" rel="self" type="application/atom+xml" /><link href="http://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2017-12-12T01:40:53+09:00</updated><id>http://blog.toshimaru.net/</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">railsdmで「「Railsでまだ消耗しているの？」─僕らがRailsで戦い続ける理由─」を話してきました</title><link href="http://blog.toshimaru.net/why-we-use-ruby-on-rails/" rel="alternate" type="text/html" title="railsdmで「「Railsでまだ消耗しているの？」─僕らがRailsで戦い続ける理由─」を話してきました" /><published>2017-12-11T00:00:00+09:00</published><updated>2017-12-11T00:00:00+09:00</updated><id>http://blog.toshimaru.net/why-we-use-ruby-on-rails</id><content type="html" xml:base="http://blog.toshimaru.net/why-we-use-ruby-on-rails/">&lt;p&gt;&lt;a href=&quot;https://techplay.jp/event/631431&quot;&gt;Rails Developers Meetup 2017&lt;/a&gt;でLT枠をいただき、「「Railsでまだ消耗しているの？」─僕らがRailsで戦い続ける理由（ワケ）─」と題して発表してきました。ざっくり発表内容をこちらにもまとめてみたいと思います。&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;68db83f9e02946f08a45817d8fb25b09&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;※公開用に一部スライドを編集してあります:wink:&lt;/p&gt;

&lt;h2 id=&quot;テーマ設定について&quot;&gt;テーマ設定について&lt;/h2&gt;

&lt;p&gt;GoやPython、PHP、Node.js、Scala、Elixirなどの選択肢がある中「なぜ今Ruby/Railsを使うのか？」というテーマを個人的に掘り下げてみたかったのでこの機会に発表してみることにしてみました。&lt;/p&gt;

&lt;h2 id=&quot;railsの2つの哲学&quot;&gt;Railsの2つの哲学&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;DRY&lt;/strong&gt; (Don’t Repeat Yourself): 同じことを繰り返さない&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CoC&lt;/strong&gt; (Convention over Configuration): 設定より規約&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Railsの哲学は上記２つがありますが、個人的にはDRYよりもCoCがずっと重要だと思ってます。なぜならDRYはプログラミング行為において普遍的な考え方である一方、CoCはRailsが定めたRails独自の規約だからです。&lt;/p&gt;

&lt;h2 id=&quot;ruby-on-railsの本質&quot;&gt;Ruby on Railsの本質&lt;/h2&gt;

&lt;p&gt;Ruby on Railsの本質は、&lt;strong&gt;センスの良い規約（=Rail）によって設定および設計の手間を最小限にした&lt;/strong&gt; ことだと考えます。&lt;/p&gt;

&lt;p&gt;この規約により我々は設定にまつわるコードを数百業書いたりとかする必要もなくなりましたし、設計工程で生じがちな＜俺の考える最強のアプリケーション設計バトル＞や＜俺の考える最強のデータベース設計選手権＞を緩和しコミュニケーションコストを大幅にカットすることができました（とはいえその規約に規定されていない部分の設計はどうするんだという問題は残りますが…）。&lt;/p&gt;

&lt;p&gt;この規約によって我々はRuby on Railsで &lt;strong&gt;圧倒的コード量の少なさと生産性の高さを実現&lt;/strong&gt; できました。&lt;/p&gt;

&lt;h2 id=&quot;rails批判〇〇の方が速いよ&quot;&gt;Rails批判:「〇〇の方が速いよ」&lt;/h2&gt;

&lt;p&gt;パフォーマンス要件がマストでないときにRailsを使いましょう。パフォーマンス要件がマストのケースにおいては（e.g. 広告サーバー）そもそもRubyという言語選択はするべきでないです。&lt;/p&gt;

&lt;p&gt;「速い」の定義をどこにおくかも重要なポイントです。この速さを「処理系の速さ」としたらRubyはGoなどには負けますが、「開発の速さ」とした場合はどうでしょうか？　我々にとって価値のある速さはどちらでしょうか？　例えばスタートアップなどにおいて1日でも1時間でも早くPDCAサイクルを回したい場合にRailsのほうが最適ではないでしょうか。&lt;/p&gt;

&lt;p&gt;またエンドユーザーにとっての速さは必ずしも処理系の速さとは一致しない点も気をつけてください。かの超絶高速なサイト&lt;a href=&quot;https://dev.to/&quot;&gt;dev.to&lt;/a&gt;はRails製であるという事実を忘れないでください。&lt;/p&gt;

&lt;h3 id=&quot;devtoはrails製であるという事実&quot;&gt;dev.toはRails製であるという事実&lt;/h3&gt;

&lt;p&gt;この事実から言えることは &lt;strong&gt;サービス特性と要素技術を正しく理解・把握した上で最適なアーキテクチャを選択する&lt;/strong&gt; ことが重要ということです。&lt;/p&gt;

&lt;p&gt;例えば&lt;a href=&quot;https://dev.to/&quot;&gt;dev.to&lt;/a&gt; の場合、キャッシュしやすいというサービス特性を利用して、Railsで生成されるコンテンツを爆速CDNであるFastlyに載せて配信させました。これにより結果的に最高の爆速UXを提供できているのです。&lt;/p&gt;

&lt;p&gt;つまり速さという点において問題になるレイヤーはアプリケーションサーバーのレイヤーだけではないということです。&lt;/p&gt;

&lt;h2 id=&quot;rubyrailsが遅いという前に&quot;&gt;Ruby/Railsが遅いという前に&lt;/h2&gt;

&lt;p&gt;「Ruby/Railsが遅い!」という前に下記はしっかり確認していただきたいものです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;自分のアプリケーション設計やテーブル設計の失敗の責任を、言語やフレームワークに押し付けてはいないか&lt;/li&gt;
  &lt;li&gt;するべき最適化をする前に遅いと斬り捨ててはいないか&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;僕の経験上、Railsで”ちゃんと”作ることができれば、爆速ではないかもしれませんがまぁまぁ速いくらいのサイトは実現可能だと思います。&lt;/p&gt;

&lt;h2 id=&quot;高速化の努力&quot;&gt;高速化の努力&lt;/h2&gt;

&lt;p&gt;とはいえ高速化の努力はあって、Ruby3に向けてのRuby高速化（いやゆる、Ruby3x3）や Shopify/bootsnap のようなRails起動高速化があります。&lt;/p&gt;

&lt;h2 id=&quot;2018年ruby-on-railsという選択&quot;&gt;2018年、Ruby on Railsという選択&lt;/h2&gt;

&lt;p&gt;小〜中規模のWebアプリケーション（言い換えるとマイクロサービス化を考えなくても済むような規模）であればRailsで十分戦えると考えています。なので2018年もRuby on Railsは有効なWebアプリケーションフレームワークの選択肢であり続けでしょう。少なくとも、ベターオルタナティブが出現しない限りはそうでしょう。&lt;/p&gt;

&lt;h2 id=&quot;発表を終えて&quot;&gt;発表を終えて&lt;/h2&gt;

&lt;p&gt;本発表を聞いた人は「一生Ruby/Railsにこだわり続けるのか？」と思うかもしれませんが、今後、Railsくらいの生産性を発揮できてRailsより速いフレームワークが出現するのであれば全然乗り換える準備はあります。&lt;/p&gt;

&lt;p&gt;ただドキュメント、ライブラリ、運用実績などの周辺環境も含めてRuby/Rails並みに整うのは相当厳しいように思われますのであと３年位はRailsの寿命は続くのかなという印象です。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;その他の発表スライドなどはこちら &lt;a href=&quot;https://railsdm.github.io/2017/&quot;&gt;Rails Developers Meetup 2017&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;当日のTweetまとめ &lt;a href=&quot;https://togetter.com/li/1179895&quot;&gt;Rails Developers Meetup 2017 #railsdm - Togetter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="rails" /><category term="presentation" /><summary type="html">Rails Developers Meetup 2017でLT枠をいただき、「「Railsでまだ消耗しているの？」─僕らがRailsで戦い続ける理由（ワケ）─」と題して発表してきました。ざっくり発表内容をこちらにもまとめてみたいと思います。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.toshimaru.net/images/posts/railsdm/rdm2017.png" /></entry><entry><title type="html">技術者としてスポンジであり続けること　あるいは老害回避戦略の話</title><link href="http://blog.toshimaru.net/like-a-sponge-as-an-engineer/" rel="alternate" type="text/html" title="技術者としてスポンジであり続けること　あるいは老害回避戦略の話" /><published>2017-12-04T00:00:00+09:00</published><updated>2017-12-04T00:00:00+09:00</updated><id>http://blog.toshimaru.net/like-a-sponge-as-an-engineer</id><content type="html" xml:base="http://blog.toshimaru.net/like-a-sponge-as-an-engineer/">&lt;h2 id=&quot;エンジニアリングとは常に学習し続けることである&quot;&gt;エンジニアリングとは常に学習し続けることである&lt;/h2&gt;

&lt;p&gt;エンジニアリングとは常に学習し続けることである。僕がWeb技術者として生計を立てる上で大切にしているモットーだ。&lt;/p&gt;

&lt;p&gt;ドッグイヤーな変化の激しいIT業界、変化に取り残されないためには常に学習が必要だ。今僕たちがデファクト・スタンダートとしている技術は一年後もスタンダートであり続けるだろうか？　一年くらいなら大丈夫？　じゃあ三年後は？　五年後は？ 十年後はどうだろう？ 自信をもって技術トレンドは今と変わっていないと言えるだろうか。&lt;/p&gt;

&lt;h2 id=&quot;変化する技術トレンド&quot;&gt;変化する技術トレンド&lt;/h2&gt;

&lt;p&gt;Web業界の技術トレンド変化を見るにしてもその変化が激しいことは明らかだ。古くは掲示板を動かしていたPerl CGIの時代から、最強のPHP製CMS・Wordpress、継続的にバージョンアップを重ね進化を続けるWebアプリケーションフレームワーク・Ruby on Rails…。近年だとサーバーサイドJavaScirpt・Node.js、Erlang VM上で動くRubyライクなシンタックスを持つElixir、Twitterでも運用実績を持つScala、Googleが作った爆速言語Go、Mozillaの開発したRustなどもよく聞く。お硬い感じなところだとJavaのSpring Frameworkであったり（最近はKotlin対応もしたと聞く）オープンソース化もされているMicrosoftの.NETなど。&lt;/p&gt;

&lt;p&gt;サーバーサイド技術だけじゃなく、フロントエンド技術の変化も大きい。HTMLはHTML5になり、CSSはCSS3になってWebでリッチな表現が可能になった。貧弱な言語であったJavaScriptはES6(ES2015),ES7(ES2016)へと進化し言語として洗練されてきている（Bebelなどのトランスパイラーの進化の力も大きい）。便利な関数群を多く含みブラウザ間の挙動の差異を吸収してくれるjQueryはそこそこ長い間フロントエンドのデファクト・ライブラリだったが、フロントエンドコードの複雑化・巨大化に伴いその座をReactやAngularへと譲りつつある（React/Angularにたどり着くまでの紆余曲折はここでは省略）。&lt;/p&gt;

&lt;p&gt;開発ワークフローもずいぶん進化した。開発者にとって一番大きかったのはGitHubの台頭だ。OSSを加速度的に推し進めエンジニアリング業界にソーシャルコーディングという概念を普及させた。これによりVCSはGitを利用しRemoteにはGithub（あるいはGithubライクなプロダクト）を使うのが当たり前となった。&lt;/p&gt;

&lt;p&gt;テストももちろん書く。テストを書くと次はCIがしたくなる。Jenkins？ 今ならTravisCI、CircleCIなどのCIサービス使ったほうが良さそうだ。&lt;/p&gt;

&lt;p&gt;アプリケーションのデプロイ先となるインフラはどうだ。オンプレ？ いや、今はクラウドの時代だ。IaaS業者ならAWS（Amazon Web Service）か。いや、GCP（Google Cloud Platform）も最近頑張っているようだ。そこまでインフラ面倒見る余裕なんてない？ならばHerokuなどのPaaSを選択することもできる。&lt;/p&gt;

&lt;p&gt;モバイルアプリ開発はどうだろう？ iOS？ Objective-Cじゃなくて今はSwiftなんだっけ。Android？ 古き良きJava…ではなく最近はKotlinで書けるらしい。最近はReact Nativeという技術もあるらしい。Reactに慣れたWeb開発者にとって取っ付きやすそうだ。&lt;/p&gt;

&lt;h2 id=&quot;我々は学習し続けられるか&quot;&gt;我々は学習し続けられるか？&lt;/h2&gt;

&lt;p&gt;Web技術に限定してザッと思いつくだけ列挙してもこれだけあるのだ。これでもなお「１つの技術だけで今後も戦い続けることができる！」と自信を持って言えるだろうか。&lt;/p&gt;

&lt;p&gt;あなたは言う。いいや、俺はこの技術一筋で勝負するんだ！なるほど、けっこうけっこう。あなたが変わらなくても世界は変わる。世界はあなたを待ってはくれない&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;学習を止めた時から変化の波に取り残され、気付いた頃にはもう手遅れ…、そんな事態は避けなければならない。&lt;/p&gt;

&lt;p&gt;では問おう。&lt;strong&gt;我々は学習し続けられるのか？&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;学習の壁&quot;&gt;学習の壁&lt;/h2&gt;

&lt;p&gt;我々に立ちはだかる学習の壁。この学習の壁を乗り越える続けることは難しい。&lt;/p&gt;

&lt;p&gt;そしてこれは歳を重ねれば重ねるほどに難しくなっていく。一般的に記憶力や集中力は年齢とともに衰えていくと言われるからだ&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;一方で学習能力は年齢とは関係ないとする説もある&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;。記憶力そのものに年齢は関係なく、老化とともに記憶力が低下したと感じる理由は＜学習意欲の低下＞に起因しているとする説だ。&lt;/p&gt;

&lt;p&gt;僕の考えとしては前者の説も後者の説もどちらも支持したい。我々の学習能力は年齢とともに衰えていくし、学習意欲もまた年齢とともに低下する。&lt;/p&gt;

&lt;h2 id=&quot;スポンジであるということ&quot;&gt;スポンジであるということ&lt;/h2&gt;

&lt;p&gt;では我々はこれにどう抗ったらよいだろうか？　&lt;/p&gt;

&lt;p&gt;前者の年齢とともに不可避的に衰える能力は仕方がないにせよ、せめて後者の学習意欲は高く保ち続けようではないか。新しいものを進んで吸収できるスポンジであろう。弾力を失ってはいけない。柔軟にしなやかであろう。硬直化する脳に抗おう。&lt;/p&gt;

&lt;p&gt;スポンジであるということ。これによって学習という困難も楽しみとして享受できるようになるのではないだろうか。&lt;/p&gt;

&lt;h2 id=&quot;老害になってはいないか&quot;&gt;老害になってはいないか&lt;/h2&gt;

&lt;p&gt;学習し続ける姿勢、これは老害化するのを防ぐ上でも大切な心がけだと思う。&lt;/p&gt;

&lt;p&gt;そもそも老害とはどういう人なのか？ 僕が思う老害とは下記の通りだ。&lt;/p&gt;

&lt;p&gt;老害とは自分の過去の栄光や成功体験を元にして自分の価値観ややり方を周囲（主に若者がターゲットにされやすい）に押し付けるような人のこと。その結果、チーム/個人のパフォーマンスを低下させる。&lt;/p&gt;

&lt;p&gt;こういうタイプの人は過去の成功を根拠としてロジックを展開するので、その成功が現代では通用しない時代錯誤なものであったとしても気にせず押し通そうとする。そして新しいことに関しては「よくわからない」などと言って斬り捨てる。&lt;/p&gt;

&lt;p&gt;そんな老害にはなりたくないと思う。きっとこの文章を読んでいるあなたもそうだろう。だがあなたは &lt;strong&gt;自分が老害になっていないとハッキリ言えるだろうか？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一般的に、歳を取ると価値観は固まっていき保守的になってゆく。あなたは自分の気づかないレベルで無意識に新しいことを拒絶していないだろうか。自分の考えを無意識に他者に押し付けてはいないだろうか。職場で気づいたら老害になってはいないだろうか。&lt;/p&gt;

&lt;h2 id=&quot;老害回避戦略&quot;&gt;老害回避戦略&lt;/h2&gt;

&lt;p&gt;エンジニアとして老害にならないための僕なりの老害回避戦略を考えてみたのでまとめてみる。&lt;/p&gt;

&lt;h3 id=&quot;マサカリを投げるな&quot;&gt;マサカリを投げるな&lt;/h3&gt;

&lt;p&gt;技術的な厳しい指摘をよく「マサカリを投げる」と表現したりするが&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;、マサカリを投げるのは止めよう。&lt;/p&gt;

&lt;p&gt;そのマサカリが本当に意味のあるものか今一度考えてみよう。あなたの飛ばしたマサカリは周囲を萎縮させチームの空気を悪くしパフォーマンスを下げている可能性が高い。&lt;/p&gt;

&lt;p&gt;あなたがどんなに優れたエンジニアだとしてもそれをマサカリという形で誇示する必要は無い。あなたの優秀さはマサカリではなくコードで示せるはずだ。&lt;/p&gt;

&lt;p&gt;剣ではなく弁を。攻撃ではなく教育を。&lt;/p&gt;

&lt;h3 id=&quot;技術に素直でいよう&quot;&gt;技術に素直でいよう&lt;/h3&gt;

&lt;p&gt;コンピュータの内部が0か1のバイナリで構成されているの同様に、プログラミングという行為も0か1のように正誤がハッキリするものが多いように感じる。&lt;/p&gt;

&lt;p&gt;バグがある挙動、バグが無い挙動であればバグが無い挙動が正しいし、速いコードと遅いコードであれば速いコードが良いし、DRYなコード、そうじゃないコードがあればDRYなコードを選択すべきだし、テストがないコードよりもテストがあるコードが信頼性は高い。&lt;/p&gt;

&lt;p&gt;老害であれば技術的正しさを無視して自説を展開するかもしれないが、それではダメだ。常に技術的に正しい世界を目指そう。技術にたいして素直でいよう。&lt;/p&gt;

&lt;p&gt;僕たちが持っている知識は変化する技術の流れの中で明日には変わっているかもしれない。今に凝り固まるのではなく、常に技術的正しさを求めて学習しよう。&lt;/p&gt;

&lt;h3 id=&quot;フラットでいよう&quot;&gt;フラットでいよう&lt;/h3&gt;

&lt;p&gt;GitHubのOSSコミュニティで人種・性別・年齢関係なくコラボレーションするように、我々も技術の文脈においてフラットなコミュニケーションを目指そう。&lt;/p&gt;

&lt;p&gt;この世界、どんなに自分より歳をとっていてもかなわないなというエンジニアもいるし、逆に自分よりずっと若くても優秀なエンジニアはたくさんいる。「俺の方が人生経験が長いから」「私の方が年齢が高いから」という理由では奢れない（もしそんな理由でエラそうにしているのであればそれは老害だ）。&lt;/p&gt;

&lt;p&gt;実際のところ、先輩後輩・上下関係を重んじる日本社会においてこれを実現するのは容易ではないわけだが、技術コミュニケーションにおいてできるだけフラットなコミュニケーションを心がけよう。この姿勢は前述の&lt;技術に素直でいる&gt;ことにも繋がることだと思う。&lt;/技術に素直でいる&gt;&lt;/p&gt;

&lt;h3 id=&quot;次の世代を育てる&quot;&gt;次の世代を育てる&lt;/h3&gt;

&lt;p&gt;老害でないということは同時に若手とうまく付き合うということでもある。今まで述べてきたような老害的な態度を取らなければ、若手が伸び伸びと働ける職場環境にできるのではないだろうか。&lt;/p&gt;

&lt;p&gt;次の世代を育てよう。そして彼らが伸び伸びと活躍できるような雰囲気作りを目指そう。&lt;/p&gt;

&lt;p&gt;こんなことを言うとたまに「若手に自分のポジションを脅かせれる」「自分の仕事が奪われる」と言って拒否反応を示す人をたまに見かける。その考え方も分からなくはないが、僕はそれは自己保身的で一面的な考え方だと感じる。&lt;/p&gt;

&lt;p&gt;次の世代を育てることで得られるメリットは数多くあると思う。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;次の世代を育てる過程で自分も育つ: 育てている過程の中で自分もちゃんと理解できていなかった部分が理解できるようになったり、自分の理解が深まる&lt;/li&gt;
  &lt;li&gt;次の世代が育つことでチームひいては会社の生産性が高まり自分自身の仕事が相対的に減る&lt;/li&gt;
  &lt;li&gt;次の世代が育つと自分一人ではできなかったことが出来るようになるかもしれない: 切磋琢磨出来る仲間が増えるとチームとしてもう一段上のレベルへと上がり、一人では思いつかなかったアイディアやソリューションが発案されるかもしれない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;自分の立場ばかり考える保身的な老害にはならないようにしよう。どんどん次の世代を育てていき、次の世代とともにステップアップを目指そう。&lt;/p&gt;

&lt;h2 id=&quot;35歳定年説は嘘&quot;&gt;「35歳定年説」は嘘&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://tech-camp.in/note/engineer/30204/&quot;&gt;35歳定年説&lt;/a&gt;的な言説を技術界隈で聞くことがある。&lt;/p&gt;

&lt;p&gt;この35歳の35の数字の部分は38でも40でもなんだって良いのだが、僕は基本的にこのn歳定年説は間違っていると思う。&lt;/p&gt;

&lt;p&gt;これを反証することは簡単で、40歳でバリバリ現役でコードを書き続けている技術者を見つければ良い。僕は40歳でバリバリ前線で頑張っている技術者を知っている。なのでこの説は間違っているとハッキリ言える。&lt;/p&gt;

&lt;p&gt;思うに、&lt;strong&gt;コードを書かず学習意欲を失ってしまった35歳のおじさんたちが自分がコードが書けないこと・学ばないことの言い訳として言い出し始めたのがこの「35歳定年説」の真実じゃないだろうか。&lt;/strong&gt; 20歳の技術者は35歳定年説なんて言い出さない。それを言い出すのは35を過ぎて自身のパフォーマンスが出なくなったと感じている技術者たちだけだ。もし本当にそんな理由で言っているのであればハッキリ言ってダサすぎだと思う。&lt;/p&gt;

&lt;p&gt;年齢を言い訳にするのは止めよう。学習するのに遅すぎるなんてことはないはずだ。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You’re never too old to learn&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;最後に&quot;&gt;最後に&lt;/h2&gt;

&lt;p&gt;この文章は僕自身が若手とは言えない年齢となり今後シニアな立場へとなっていく中で「自分は老害化していくのではないか」という危機感から自戒も込めて書いたものである。願わくば五年後十年後自分がここに書いたような老害になっていないことを祈る。&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;もちろん１つのことに特化して高度な専門性を武器に戦っている技術者もいる。しかしトレンドは常に追っているべきだ。なぜならブレークスルーが起こってその技術が死んだときに自分の食い扶持がなくなるからだ（それでもすぐにその技術がなくなるわけではないのでその技術を使う古い現場で細々と食い扶持を得るのも戦略としてありえるが）。 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.businessinsider.jp/post-100550&quot;&gt;集中力は43歳！ 人間の脳のピーク年齢は、能力ごとに違っていた | BUSINESS INSIDER JAPAN&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.fukuishimbun.co.jp/articles/-/62618&quot;&gt;「加齢で記憶力が低下」は誤解 知能も低下せず、問題は前頭葉老化 | 東洋経済ONLINE | 福井新聞ONLINE&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://qiita.com/kaityo256/items/d7d8f7a0e522895c8f5d&quot;&gt;マサカリの起源について - Qiita&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="tech" /><summary type="html">エンジニアリングとは常に学習し続けることである</summary></entry><entry><title type="html">ISUCON7に参加してきました</title><link href="http://blog.toshimaru.net/isucon7/" rel="alternate" type="text/html" title="ISUCON7に参加してきました" /><published>2017-10-28T00:00:00+09:00</published><updated>2017-10-28T00:00:00+09:00</updated><id>http://blog.toshimaru.net/isucon7</id><content type="html" xml:base="http://blog.toshimaru.net/isucon7/">&lt;p&gt;isuconに参加してきました。結果は&lt;a href=&quot;http://isucon.net/archives/50961437.html&quot;&gt;400組中154位&lt;/a&gt;で予選敗退。予選敗退となりましたが初めてのisucon参加にしては中の上に食い込めてまぁまぁだったのではないでしょうか。&lt;/p&gt;

&lt;p&gt;※使用言語はRubyでした。&lt;/p&gt;

&lt;h2 id=&quot;事前準備&quot;&gt;事前準備&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;isuconの練習時間は取れなかったので、参加ブログや過去問を読み漁りました
    &lt;ul&gt;
      &lt;li&gt;使えそうな設定・ブログエントリなどはgistにまとめて秘伝のタレとして準備しておきました&lt;/li&gt;
      &lt;li&gt;また協議中に使えそうなツール・コマンドもさらっと触っておきました&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;当日の開発用レポジトリは事前にGitHub上にプライベートレポジトリを作成しておきチームメンバーを招待しておきました&lt;/li&gt;
  &lt;li&gt;ボトルネック把握用にカジュアルに導入できるisucon用NewRelicのアカウントも作成しておきました&lt;/li&gt;
  &lt;li&gt;コミュニケーションツールとしてはSlackに専用のチャンネルを用意しておきました（今考えると新規にSlackチームを作ってもよかったかもしれません）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;方針&quot;&gt;方針&lt;/h2&gt;

&lt;p&gt;上述の事前準備のなかで当日の競技の流れをイメトレしてなんとなくの方針を決めました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;作業がバッティングしないようにどの領域（App, WebServer, DB, CacheStore）を誰が見るかを決めてから作業する&lt;/li&gt;
  &lt;li&gt;競技開始1時間くらいは全員でマニュアル読み、アプリケーション触ってアプリケーション把握、なんとなくのボトルネックのあたりを付ける&lt;/li&gt;
  &lt;li&gt;競技終了1時間前にはコードをフリーズして再起動試験に備える&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;当日の立ち回り&quot;&gt;当日の立ち回り&lt;/h2&gt;

&lt;p&gt;今回は同僚の redfit と s-jcs [敬称略]の三人と出たのですが僕含め三人ともに業務ではアプリケーションを主に担当しているので今回はチーム的にインフラ・ミドルウェアチューニングが弱いチーム構成になってました。&lt;/p&gt;

&lt;p&gt;なので当日の立ち回りとしては、わりとインフラ業務経験がそこまで深くない s-jcs がアプリケーションを中心に担当してもらい、僕はインフラ・ミドルウェア周りを中心に攻めることにして、redfit には全般的に見てもらおうということになりました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/isucon/isucon7-photo.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;やったこと&quot;&gt;やったこと&lt;/h2&gt;

&lt;h3 id=&quot;mysql&quot;&gt;MySQL&lt;/h3&gt;

&lt;p&gt;まず僕はMySQLの設定をしました。遅いクエリを特定して、インデックスを貼ればすぐに高速化が実現すること、また吐かれているクエリからAppの特性が透けてみえてくるのでは？という意図からMySQLから着手することにしました。&lt;/p&gt;

&lt;p&gt;まずはスロークエリとしてクエリログを全部吐くように設定。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;slow_query_log                = 1
slow_query_log_file           = /var/lib/mysql/mysqld-slow.log
long_query_time               = 0
log-queries-not-using-indexes = 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;吐かれたクエリをざっとみてインデックス貼れそうな部分を貼ります。&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INDEX&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx_channel_id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INDEX&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx_image_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;my.cnf&lt;/code&gt;の設定は後に&lt;code class=&quot;highlighter-rouge&quot;&gt;too many connection&lt;/code&gt;を観測していたので、&lt;code class=&quot;highlighter-rouge&quot;&gt;max_connections&lt;/code&gt;を少しいじったくらいでそれ以外はいじってません。&lt;/p&gt;

&lt;p&gt;吐かれるクエリをザッと見て同じタイプのクエリが複数吐かれているのを観測できたので、アプリで複数のN+1の問題があることは想像がつきました。一方、例えば10秒とかかかるような激遅クエリが走っているわけではないので、何かしらの激遅クエリがボトルネックにはなってなさそうであることがわかりました。&lt;/p&gt;

&lt;h3 id=&quot;app&quot;&gt;App&lt;/h3&gt;

&lt;p&gt;上記の作業の裏でアプリケーションのチューニングをメンバーがやってたのですが劇的に得点が伸びません。上位陣の点数を見てここから抜けるには何かしらのブレークスルーが必要であろうと思い、ここでicons問題を解決しなければどーにもならなそうということに気づきます。&lt;/p&gt;

&lt;p&gt;ここで僕はミドルウェア関係を手を止めicons問題の解決のためにアプリに手を出すことにしました（この時点で16時位だったと思います）。まずはDBに入った icons を書き出して NGINXでサーブするところまでをやりました。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;w&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;というコードでDBの画像を書き出していたのですが、ベンチが互換性チェックで落ちることに気づきます。&lt;/p&gt;

&lt;p&gt;最初は画像がぶっ壊れてるのかと思ったのですが、見かけ上は全く同じ画像になっています。cmpを使ってバイナリのdiffをとってもこれといった差分は出ません。しかし画像のmd5を見てみると確かに値が違う。&lt;/p&gt;

&lt;p&gt;うーん…となり違うとしたら画像のメタデータかファイル末尾のなにかだろうと思い、viのxxdを使ってhexdump形式でファイルを確認してみました。ここでRubyの &lt;code class=&quot;highlighter-rouge&quot;&gt;file.puts&lt;/code&gt; で画像ファイル末尾に改行が余計に入ってしまう点に気づけました。&lt;/p&gt;

&lt;p&gt;この問題で30分以上は時間を潰してしまいました。最初からシンプルに &lt;code class=&quot;highlighter-rouge&quot;&gt;File.write&lt;/code&gt; あたりを使っておけばよかったなぁと後悔。&lt;/p&gt;

&lt;h3 id=&quot;nginx&quot;&gt;NGINX&lt;/h3&gt;

&lt;p&gt;Iconsは書き出せた、では次はそのファイルの効率的な配信だ、ということでassets関連のファイルがキャッシャブルな状態で配信されているかを確認しました。&lt;/p&gt;

&lt;p&gt;ここでCacheControlヘッダーあたりが怪しいということには気づけたのですがうまく設定を煮詰めることができずタイムアップ。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location /fonts/ {
    add_header Cache-Control &quot;public&quot;;
}
location /js/ {
    add_header Cache-Control &quot;public&quot;;
}
location /css/ {
    add_header Cache-Control &quot;public&quot;;
}
location /icons/ {
    add_header Cache-Control &quot;public&quot;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;普段仕事でこのへんのNginxのconfは触る機会がないので設定がスムーズに進まず時間を浪費してしまいました。（実際作業時間の半分以上はああでもないこうでもないと言いながら適当な情報をクグる時間になっていたと思います）&lt;/p&gt;

&lt;h2 id=&quot;問題について&quot;&gt;問題について&lt;/h2&gt;

&lt;p&gt;今までのisucon の傾向を考慮しつつ、事前にある程度どんな構成で出題されそうか予測を立てていました。予想とその結果は以下の通り。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;App
    &lt;ul&gt;
      &lt;li&gt;予想候補: Rails/Sinatra&lt;/li&gt;
      &lt;li&gt;予想: Sinatra&lt;/li&gt;
      &lt;li&gt;結果: Sinatra  → 的中&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;App Server
    &lt;ul&gt;
      &lt;li&gt;予想候補: Unicorn/Puma&lt;/li&gt;
      &lt;li&gt;予想: Unicorn&lt;/li&gt;
      &lt;li&gt;結果: Puma → 外れ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DB
    &lt;ul&gt;
      &lt;li&gt;予想候補: MySQL/Postgres&lt;/li&gt;
      &lt;li&gt;予想: MySQL&lt;/li&gt;
      &lt;li&gt;結果: MySQL  → 的中&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WebServer
    &lt;ul&gt;
      &lt;li&gt;予想候補: NGINX /Apache&lt;/li&gt;
      &lt;li&gt;予想: NGINX&lt;/li&gt;
      &lt;li&gt;結果: NGINX  → 的中&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;メモリストア
    &lt;ul&gt;
      &lt;li&gt;予想候補: Memcache/ Redis&lt;/li&gt;
      &lt;li&gt;予想: Memcache&lt;/li&gt;
      &lt;li&gt;結果: 無し → ハズレ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;サーバー構成
    &lt;ul&gt;
      &lt;li&gt;予想候補: Web+DB一体型の小さいサーバー一台 / WebとDBを分離した小さいサーバー二台&lt;/li&gt;
      &lt;li&gt;予想: Web+DB 一体型のサーバー一台&lt;/li&gt;
      &lt;li&gt;結果: Web2台 DB1台の三台構成  → 大外れ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;App, DB, Webは概ね予想の通りでしたがまさか複数台構成、それも三台出くるとは思いもしませんでした（運営様お疲れ様です）。&lt;/p&gt;

&lt;p&gt;複数台を想定していなかったので競技中はサーバー間のプロキシ戦略とか分散戦略とか全然ぱっと思い浮かばなかったです。これは大きな敗因だったと思います。&lt;/p&gt;

&lt;p&gt;またAWS脳の僕としては画像の扱いは「はぁ？ AWS におくやろ普通（少なくともファイル配信サーバーおくやろ）」と思考停止しており、画像をDBに保存するなんて発想はとうの昔に忘れてしまっておりました。なのでicons問題に対してぱっとスマートなソリューションを頭に浮かべられなかったのは甘かったところでした。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;今回のISUSON、3台なのでweb x2 db x1 で予選通過できるんだけどこれが5台や10台だったらより帯域を有効利用するアーキテクチャが強くなるし、一台にファイル書き込みを寄せる奴には負けないと思ってる&lt;/p&gt;&amp;mdash; fujiwara (@fujiwara) &lt;a href=&quot;https://twitter.com/fujiwara/status/923533843520413697?ref_src=twsrc%5Etfw&quot;&gt;October 26, 2017&lt;/a&gt;
&lt;/blockquote&gt;

&lt;p&gt;今回は２台のWebだったけどこれが10台だったらという思考実験をやってみるのも面白そうです。&lt;/p&gt;

&lt;h2 id=&quot;反省点まとめ&quot;&gt;反省点まとめ&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;systemd 慣れてなさすぎてダメだった
    &lt;ul&gt;
      &lt;li&gt;最近業務でコマンドでサーバー操作することもめっきりなくなってるし systemd を使っていないので使って覚えるしかなさそう&lt;/li&gt;
      &lt;li&gt;参考情報: &lt;a href=&quot;https://qiita.com/tukiyo3/items/092fc32318bd3d1a0846&quot;&gt;CentOS7で使われているsystemctlについて少しまとめた - Qiita&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;サーバー作業中、&lt;code class=&quot;highlighter-rouge&quot;&gt;vim&lt;/code&gt;という存在しないコマンドを叩いて何度エラーになったかわからないので大人しくサーバーにはvimを入れよう&lt;/li&gt;
  &lt;li&gt;nginx力が低く効率的なサーバー構成を組めなかった
    &lt;ul&gt;
      &lt;li&gt;今回の敗因は何と言ってもicons問題を解決できずボトルネックをiconsからアプリケーションに移せなかったこと&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/941/8c64842b71995a2d448315e2594f62c2&quot;&gt;マニュアル&lt;/a&gt;ちゃんと読んでおこう
    &lt;ul&gt;
      &lt;li&gt;sleep の値変えてスコア変わって一喜一憂していたけどマニュアルにはこう書いてあった -&amp;gt;「GET /fetch へのアクセスには点数が加算されません。」&lt;/li&gt;
      &lt;li&gt;304加点に関する記述もされており、そこで静的ファイルに関してピンと来てればもっと早い段階でスコア伸ばせていたと思う&lt;/li&gt;
      &lt;li&gt;次は一番最初に声に出して読み合わせとかすると良いかもしれない&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;業務でサーバー作業全然しないので作業時間の半分くらいはGoogleでああでもないこうでもないと調べる時間だった感覚
    &lt;ul&gt;
      &lt;li&gt;サーバー作業もっとスラスラできるようになりたい&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Nginxのログをalpで解析するのができなかった
    &lt;ul&gt;
      &lt;li&gt;Nginxのログをベンチマーカーの気持ちになりながら目グレップする必要あった&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;アプリケーションのデータベースconnection 閉じ忘れ気づけなかった。これで too many connectionが発生してたっぽい&lt;/li&gt;
  &lt;li&gt;デプロイスクリプト用意する予定だったけどちゃんと用意できなかった
    &lt;ul&gt;
      &lt;li&gt;これにより再起動漏れとかが発生した&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;confファイルのrepo管理が徹底できず雑管理してしまった&lt;/li&gt;
  &lt;li&gt;複数台でそれぞれのホスト間の名前解決どうしてるかを見るのに &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; はすぐに確認しておいてよかった&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/hosts
&lt;span class=&quot;go&quot;&gt;127.0.0.1       localhost
192.168.101.1   app1011
192.168.101.2   app1012
192.168.101.3   app1013 db
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;良かったこと&quot;&gt;良かったこと&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Discord良い&lt;/li&gt;
  &lt;li&gt;MacのGUIは有効に使えたと思う。MacのGUI便利。
    &lt;ul&gt;
      &lt;li&gt;DBはSequel Proでカジュアルに覗くのが良い&lt;/li&gt;
      &lt;li&gt;FileはforkLift使ってカジュアルに転送できたのが良い(今回DBのdumpファイルとか持ってきた)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;同僚と出場したので、会社利用させてもらったのでWiFiも快適だったしホワイトボード・ディスプレイなどの設備も使えて良かった&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;運営の方へ&quot;&gt;運営の方へ&lt;/h2&gt;

&lt;p&gt;ベンチマーカーの結果が安定しなかったり、開催日両日共に開始時間が遅れたりもしましたが、参加を終えてその不満も忘れるくらい準備が大変だったろうなぁとお察しします。あれだけのサーバー台数を参加者全員に用意するのは本当にすごい！&lt;/p&gt;

&lt;p&gt;出題についでですが、&lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Controle: Public, max-age&lt;/code&gt;に関して何か色々物申す方がいらっしゃるようですが、これに関しては気づける人はちゃんと気づけたし特段奇問という印象は僕は受けなかったです。&lt;/p&gt;

&lt;p&gt;コンテスト規模は年々拡大する一方ですが、今年も開催してくださりありがとうございました！&lt;/p&gt;

&lt;h2 id=&quot;最後に&quot;&gt;最後に&lt;/h2&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;エンジョイ勢です &lt;a href=&quot;https://twitter.com/hashtag/isucon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#isucon&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/921933892780568576?ref_src=twsrc%5Etfw&quot;&gt;October 22, 2017&lt;/a&gt;
&lt;/blockquote&gt;

&lt;p&gt;今回のisuconはエンジョイ勢として臨んだのですがずっと出たかったisuconだったので実際参加してみてとてもエンジョイできました。&lt;/p&gt;

&lt;p&gt;とはいえ圧倒的なスコア差を上位陣に見せられて悔しさはかなり残りました。今年なんとなくの雰囲気を掴めたので来年も出場し、上位陣に食い込めるように精進していきたいと思います。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;問題: &lt;a href=&quot;https://github.com/isucon/isucon7-qualify&quot;&gt;isucon/isucon7-qualify: ISUCON7 予選問題の参照実装とベンチマーカー&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;今回の出題に関してキャッシュコントロールに関してこちらが参考になります: &lt;a href=&quot;http://landau.jp/blog/10/&quot;&gt;静的ファイルのキャッシュコントロールについて ISUCON7 – そろそろちゃんとやります&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;学びが多い関連エントリ(特に上位陣のは参考になる) &lt;a href=&quot;http://isucon.net/archives/50949740.html&quot;&gt;ISUCON7 オンライン予選 関連エントリまとめ : ISUCON公式Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;過去問: &lt;a href=&quot;https://github.com/matsuu/vagrant-isucon&quot;&gt;https://github.com/matsuu/vagrant-isucon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="isucon" /><summary type="html">isuconに参加してきました。結果は400組中154位で予選敗退。予選敗退となりましたが初めてのisucon参加にしては中の上に食い込めてまぁまぁだったのではないでしょうか。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.toshimaru.net/images/posts/isucon/isucon7.png" /></entry><entry><title type="html">Goの日付フォーマット ―2006年1月2日の謎―</title><link href="http://blog.toshimaru.net/go-time-format/" rel="alternate" type="text/html" title="Goの日付フォーマット ―2006年1月2日の謎―" /><published>2017-09-15T00:00:00+09:00</published><updated>2017-09-15T00:00:00+09:00</updated><id>http://blog.toshimaru.net/go-time-format</id><content type="html" xml:base="http://blog.toshimaru.net/go-time-format/">&lt;p&gt;Goの現在時刻は&lt;code class=&quot;highlighter-rouge&quot;&gt;time.Now()&lt;/code&gt;で取得することができるがフォーマットされた現在日時はどのように取得すればよいだろうか。&lt;/p&gt;

&lt;h2 id=&quot;今日の日付の取得&quot;&gt;今日の日付の取得&lt;/h2&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2006-01-02&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これで今日の日付を取得することができる。&lt;/p&gt;

&lt;h2 id=&quot;2006年1月2日の謎&quot;&gt;2006年1月2日の謎&lt;/h2&gt;

&lt;p&gt;ここで１つの疑問が残る。&lt;code class=&quot;highlighter-rouge&quot;&gt;Format()&lt;/code&gt;の引数として与えられる &lt;strong&gt;2006年1月2日&lt;/strong&gt; は何故なのだろうか。2001年2月3日でもダメだし1234年5月6日でもダメだ。きっちり &lt;strong&gt;2006年1月2日&lt;/strong&gt; でなければならない。&lt;/p&gt;

&lt;p&gt;この理由については下記記事にて解説されている。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;では一体この2006年1月2日という特別な日は、なんの日なのか？&lt;/p&gt;

  &lt;p&gt;最初は1970年1月1日（エポック）から特定の時間が経過した日だとか、あるいはGoが最初に作られた日ではないかと思ったが、それは考えすぎだった。&lt;/p&gt;

  &lt;p&gt;答えは単純だ。これはアメリカ式の時刻の順番なのだ。”1月2日午後3時4分5秒2006年”（つまり「自然な順番」で1, 2, 3, 4, 5, 6）を指しているのである。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;via. &lt;a href=&quot;http://qiita.com/ruiu/items/5936b4c3bd6eb487c182&quot;&gt;Goのtimeパッケージのリファレンスタイム（2006年1月2日）は何の日？ - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;考えてみるとなんてことはない、アメリカ式の時刻の順番で考えたときのインクリメンタルな整数であった。&lt;/p&gt;

&lt;h2 id=&quot;goの内部実装&quot;&gt;Goの内部実装&lt;/h2&gt;

&lt;p&gt;Goでどのように実装されているかを覗いてみる。それぞれの&lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt;がどの数値とマッピングするかがコメントで表現されている。&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                        &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;iota&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdLongMonth&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;             &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;iota&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdNeedDate&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;January&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdMonth&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                       &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;Jan&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdNumMonth&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;1&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdZeroMonth&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                   &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;01&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdLongWeekDay&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                 &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;Monday&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdWeekDay&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                     &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;Mon&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdDay&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                         &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;2&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdUnderDay&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;_2&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdZeroDay&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                     &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;02&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdHour&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;iota&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdNeedClock&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;15&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdHour12&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                      &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;3&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdZeroHour12&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;03&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdMinute&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                      &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;4&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdZeroMinute&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;04&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdSecond&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                      &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;5&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdZeroSecond&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;05&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdLongYear&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;              &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;iota&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdNeedDate&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;2006&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdYear&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                        &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;06&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdPM&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;iota&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdNeedClock&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;PM&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdpm&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                          &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;pm&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdTZ&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;iota&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;MST&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdISO8601TZ&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                   &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;Z0700&quot;  // prints Z for UTC&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdISO8601SecondsTZ&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                            &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;Z070000&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdISO8601ShortTZ&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                              &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;Z07&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdISO8601ColonTZ&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                              &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;Z07:00&quot; // prints Z for UTC&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdISO8601ColonSecondsTZ&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                       &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;Z07:00:00&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdNumTZ&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                       &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;-0700&quot;  // always numeric&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdNumSecondsTz&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;-070000&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdNumShortTZ&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;-07&quot;    // always numeric&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdNumColonTZ&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;-07:00&quot; // always numeric&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdNumColonSecondsTZ&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                           &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;-07:00:00&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdFracSecond0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                 &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;.0&quot;, &quot;.00&quot;, ... , trailing zeros included&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdFracSecond9&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                 &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;.9&quot;, &quot;.99&quot;, ..., trailing zeros omitted&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdNeedDate&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;             &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// need month, day, year&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdNeedClock&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;             &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// need hour, minute, second&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdArgShift&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                 &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// extra argument in high bits, above low stdArgShift&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdMask&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdArgShift&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// mask out argument&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/golang/go/blob/master/src/time/format.go&quot;&gt;https://github.com/golang/go/blob/master/src/time/format.go&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これをみると &lt;code class=&quot;highlighter-rouge&quot;&gt;2006-01-02&lt;/code&gt; は &lt;code class=&quot;highlighter-rouge&quot;&gt;stdLongYear-stdZeroMonth-stdZeroDay&lt;/code&gt; であることがわかる。&lt;/p&gt;

&lt;h2 id=&quot;標準フォーマットrfcなど&quot;&gt;標準フォーマット（RFCなど）&lt;/h2&gt;

&lt;p&gt;RFCなどの標準的な時刻フォーマットもgoが用意してくれている。&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ANSIC&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Mon Jan _2 15:04:05 2006&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UnixDate&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Mon Jan _2 15:04:05 MST 2006&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RubyDate&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Mon Jan 02 15:04:05 -0700 2006&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RFC822&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;02 Jan 06 15:04 MST&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RFC822Z&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;02 Jan 06 15:04 -0700&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// RFC822 with numeric zone&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RFC850&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Monday, 02-Jan-06 15:04:05 MST&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RFC1123&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Mon, 02 Jan 2006 15:04:05 MST&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RFC1123Z&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Mon, 02 Jan 2006 15:04:05 -0700&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// RFC1123 with numeric zone&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RFC3339&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2006-01-02T15:04:05Z07:00&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RFC3339Nano&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2006-01-02T15:04:05.999999999Z07:00&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Kitchen&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3:04PM&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// Handy time stamps.&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Jan _2 15:04:05&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StampMilli&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Jan _2 15:04:05.000&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StampMicro&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Jan _2 15:04:05.000000&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StampNano&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Jan _2 15:04:05.000000000&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これを使って下記のように書くことができる。&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RFC822Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="go" /><summary type="html">Goの現在時刻はtime.Now()で取得することができるがフォーマットされた現在日時はどのように取得すればよいだろうか。</summary></entry><entry><title type="html">Rubyのヒアドキュメントの書き方いろいろ</title><link href="http://blog.toshimaru.net/ruby-heredoc/" rel="alternate" type="text/html" title="Rubyのヒアドキュメントの書き方いろいろ" /><published>2017-08-04T00:00:00+09:00</published><updated>2017-08-04T00:00:00+09:00</updated><id>http://blog.toshimaru.net/ruby-heredoc</id><content type="html" xml:base="http://blog.toshimaru.net/ruby-heredoc/">&lt;p&gt;Rubyの覚えてそうで覚えられないヒアドキュメントの書き方をまとめてみたいと思います。&lt;/p&gt;

&lt;h2 id=&quot;識別子&quot;&gt;&amp;lt;&amp;lt;識別子&lt;/h2&gt;

&lt;p&gt;これがRubyのヒアドキュメントの基本型となります。識別子である&lt;code class=&quot;highlighter-rouge&quot;&gt;EOS&lt;/code&gt;の始点の&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;EOS&lt;/code&gt;から次に出てくる&lt;code class=&quot;highlighter-rouge&quot;&gt;EOS&lt;/code&gt;までの囲まれている部分が文字列となります。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOS&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
    Hello,

    World!
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOS&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#    Hello,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#    World!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上記のコードのコメントアウトされている箇所が定義した&lt;code class=&quot;highlighter-rouge&quot;&gt;hello&lt;/code&gt;メソッドの出力結果となります。&lt;/p&gt;

&lt;h2 id=&quot;-識別子&quot;&gt;&amp;lt;&amp;lt;-識別子&lt;/h2&gt;

&lt;p&gt;上記のコードは終端の&lt;code class=&quot;highlighter-rouge&quot;&gt;EOS&lt;/code&gt;の位置が気に食わないですか？　たしかにdef~endの中で一段ネストさせたいですね。&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;（ダッシュ）を識別子の手前に置けば、こんな書き方が可能です。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOS&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
    Hello,

    World!
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;  EOS&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#    Hello,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#    World!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これで終端の&lt;code class=&quot;highlighter-rouge&quot;&gt;EOS&lt;/code&gt;がメソッドの内部でネストされて可読性が上がりましたね。&lt;/p&gt;

&lt;h2 id=&quot;識別子-1&quot;&gt;&amp;lt;&amp;lt;~識別子&lt;/h2&gt;

&lt;p&gt;でもちょっと待って下さい。本当にほしい文字列は先頭に空白のない文字列だったんです。でも安心してください、Ruby2.3以降は&lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt;（チルダ）を識別子の手前に置いてこう書けるんです。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOS&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
    Hello,

    World!
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;  EOS&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#Hello,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#World!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これでHelloという文字列の手前にあるネストの空白も消してくれました。&lt;/p&gt;

&lt;h2 id=&quot;豆知識-github-syntax-highlight&quot;&gt;豆知識. GitHub Syntax Highlight&lt;/h2&gt;

&lt;p&gt;下記のようにGitHub上にてヒアドキュメントの識別子にsyntaxの指定をすると、GitHub syntax highlightが効くようになります。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RUBY&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
    def hello
      puts &quot;Hello World!&quot;
    end
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;  RUBY&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/heredoc_rb.png&quot; alt=&quot;heredoc&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.ruby-lang.org/ja/latest/doc/spec=2fliteral.html#here&quot;&gt;リテラル (Ruby 2.4.0) ヒアドキュメント (行指向文字列リテラル)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/Linda_pp/items/32fddbbe117cf03fef0f&quot;&gt;Ruby のヒアドキュメントすごい - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="ruby" /><summary type="html">Rubyの覚えてそうで覚えられないヒアドキュメントの書き方をまとめてみたいと思います。</summary></entry><entry><title type="html">『達人プログラマー（新装版）』 読んだ</title><link href="http://blog.toshimaru.net/the-pragmatic-programmer/" rel="alternate" type="text/html" title="『達人プログラマー（新装版）』 読んだ" /><published>2017-07-13T00:00:00+09:00</published><updated>2017-07-13T00:00:00+09:00</updated><id>http://blog.toshimaru.net/the-pragmatic-programmer</id><content type="html" xml:base="http://blog.toshimaru.net/the-pragmatic-programmer/">&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/427421933X/ref=as_li_ss_il?ie=UTF8&amp;amp;linkCode=li3&amp;amp;tag=toshimaru-22&amp;amp;linkId=d4315939a647434d71937a28ec97f0a6&quot; target=&quot;_blank&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=427421933X&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=JP&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=toshimaru-22&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;https://ir-jp.amazon-adsystem.com/e/ir?t=toshimaru-22&amp;amp;l=li3&amp;amp;o=9&amp;amp;a=427421933X&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;きっかけは&lt;a href=&quot;https://rebuild.fm/&quot;&gt;Rebuild.fm&lt;/a&gt;。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;169: Your Blog Can Be Generated By Neural Networks (&lt;a href=&quot;https://twitter.com/omo2009&quot;&gt;@omo2009&lt;/a&gt;) &lt;a href=&quot;https://t.co/OPtfjQuKQK&quot;&gt;https://t.co/OPtfjQuKQK&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/rebuildfm?src=hash&quot;&gt;#rebuildfm&lt;/a&gt;&lt;/p&gt;&amp;mdash; Rebuild Podcast (@rebuildfm) &lt;a href=&quot;https://twitter.com/rebuildfm/status/812963280134115328&quot;&gt;December 25, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;話されている内容としては&lt;a href=&quot;https://twitter.com/omo2009&quot;&gt;omo&lt;/a&gt;さんがひたすら巷で良本と名高い『達人プログラマー』をブッタ切るというものだ。omoさんが一時間かけてじっくりディスる対象となる本ということで逆に気になって手に取った本が本書である。&lt;/p&gt;

&lt;h2 id=&quot;でどうだったの&quot;&gt;で、どうだったの？&lt;/h2&gt;

&lt;p&gt;一読した感想としては、たいへんに良本であった。1999年出版された本ということもあり、一部古い記述があるもののそれを差し引いても良い本だった。&lt;/p&gt;

&lt;p&gt;本書はざっくり言うと大きく２つの内容が書かれている。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;達人プログラマ&gt;のメンタルモデルの話
&lt;/達人プログラマ&gt;
  &lt;/li&gt;
  &lt;li&gt;技術的なアプローチ・実装の話&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2の部分はさすがに古い本であることもあり今に比べるとかなり時代遅れな印象を受けた。よって本書のそういった箇所は「ふーん」という感じで読み流してしまってもいいだろう&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;では本書の良いところはどこだったのかというと1の部分である。古い本であるにかかわらず書いてあることが全然古びていない。むしろ今エンジニア界隈で言われているあんなことやこんなことが「これほどまで昔から言われていたのか！」という驚きとともに感動があった。&lt;/p&gt;

&lt;p&gt;本書で紹介されているTipsを僕なりの説明・解説とともに紹介してみよう（それぞれのTipsは本書からの引用）。&lt;/p&gt;

&lt;h2 id=&quot;tip-3-いい加減な言い訳よりも対策を用意すること&quot;&gt;Tip 3 いい加減な言い訳よりも対策を用意すること&lt;/h2&gt;

&lt;p&gt;達人プログラマは御託を並べない。Shut the fuck up and write some code（グタグタ言ってないでコード書け）. さっさとバグ・障害に対する対策・ソリューション・再発防止策を練ること。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/pragmatic-programmer/shut.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;via. &lt;a href=&quot;http://stfuawsc.com/&quot;&gt;http://stfuawsc.com/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;関連tips&quot;&gt;関連Tips&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tip 24 避難するのではなく、問題を修復すること&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;バグの原因が誰であるかは関係ない。自分自身の問題として向き合うこと。&lt;/p&gt;

&lt;h2 id=&quot;tip-4-割れた窓を放置しないこと&quot;&gt;Tip 4 割れた窓を放置しないこと&lt;/h2&gt;

&lt;p&gt;まず最初に窓を割らないことが重要。とはいえスピード・納期重視の開発だとどうしても割れた窓を作ってしまう場面もあるだろう。しかしその窓を放置しないこと。放置するとさらに悪い結果を招く。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;「建物の窓が壊れているのを放置すると、誰も注意を払っていないという象徴になり、やがて他の窓もまもなく全て壊される」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;via. &lt;a href=&quot;https://ja.wikipedia.org/wiki/%E5%89%B2%E3%82%8C%E7%AA%93%E7%90%86%E8%AB%96&quot;&gt;割れ窓理論 - Wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;tip-7-品質要求を明確にする&quot;&gt;Tip 7 品質要求を明確にする&lt;/h2&gt;

&lt;p&gt;顧客の品質要求を明確にして、「どこまでやるか」を決めること。開発速度と品質はトレードオフの関係にあることを理解すること。多くの場合、３年かかかって完璧なプロダクトを作るより、３ヶ月でそこそこ動くプロダクトが好まれることが多い。&lt;/p&gt;

&lt;h3 id=&quot;関連tips-1&quot;&gt;関連Tips&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tip 51 要求は拾い集めるものではなく、掘り起こすものである&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最終的な目標は、顧客の要求どおりのものを作るのではなく、ビジネス上の問題を解決するということ。要求の裏に隠れている理由をきちんと把握しておくこと。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/pragmatic-programmer/require.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;via. &lt;a href=&quot;http://dic.nicovideo.jp/a/%E9%A1%A7%E5%AE%A2%E3%81%8C%E6%9C%AC%E5%BD%93%E3%81%AB%E5%BF%85%E8%A6%81%E3%81%A0%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE&quot;&gt;顧客が本当に必要だったものとは - ニコニコ大百科&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;tip-8-あなたの知識ポートフォリオに対して定期的な投資を行うこと&quot;&gt;Tip 8 あなたの知識ポートフォリオに対して定期的な投資を行うこと&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;毎年１つの言語を学習&lt;/li&gt;
  &lt;li&gt;四半期毎に何らかの技術書を読む&lt;/li&gt;
  &lt;li&gt;勉強会・ミートアップに顔を出す&lt;/li&gt;
  &lt;li&gt;インターネットで情報収集し、常に最先端を追う努力をする&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tip-9-見聞きしたものごとを批判的な目で分析すること&quot;&gt;Tip 9 見聞きしたものごとを批判的な目で分析すること&lt;/h2&gt;

&lt;p&gt;例えばブログにそう書いてあったから正しいとか、上司からそのように習ったから正しいとか、みんなそうしているから正しいとか、そんなのは正しいとは言えない。物事を批判的な目で捉え直し、技術的探究心を深めること。&lt;/p&gt;

&lt;h2 id=&quot;tip-10-伝える事柄と伝える方法は車の両輪だと考えること&quot;&gt;Tip 10 伝える事柄と、伝える方法は車の両輪だと考えること&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;自分の言いたいことを明確に&lt;/li&gt;
  &lt;li&gt;聞き手のことを思いやる&lt;/li&gt;
  &lt;li&gt;話すタイミング・スタイルを考える&lt;/li&gt;
  &lt;li&gt;自分も良い聞き手になること&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これはとても興味深かった。これらを端的に言い換えるならば「プログラマにはコミュ力も必要」ということ。きちんと物事を適切な方法で伝えること。&lt;/p&gt;

&lt;h2 id=&quot;tip-11-dry&quot;&gt;Tip 11 DRY&lt;/h2&gt;

&lt;p&gt;Don’t Repeat Yourself. これは説明するまでもないだろう。重複を避ける。同じコードのコピーを３回以上行ったら共通化、同じ作業を三回以上行ったら自動化。&lt;/p&gt;

&lt;h2 id=&quot;tip-13-関係ないもの同士の影響を小さく&quot;&gt;Tip 13 関係ないもの同士の影響を小さく&lt;/h2&gt;

&lt;p&gt;疎結合なコンポーネントを設計すること。このようなコード設計を行うことで下記のメリットが得られる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;生産性が向上&lt;/li&gt;
  &lt;li&gt;再利用性が向上&lt;/li&gt;
  &lt;li&gt;（各コンポーネントが独立しているので）問題を局所化できる&lt;/li&gt;
  &lt;li&gt;堅牢なコードとなる&lt;/li&gt;
  &lt;li&gt;テストがしやすい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;じゃあどうコードを切り分けていけばいいかというと、DDDでいうところの&lt;a href=&quot;https://www.ogis-ri.co.jp/otc/hiroba/technical/DDDEssence/chap2.html&quot;&gt;レイヤードアーキテクチャ&lt;/a&gt;的な設計が推薦されている。またはRails的なMVCアーキテクチャも紹介されている。&lt;/p&gt;

&lt;p&gt;コードの設計をきっちり考えるのとともに、下記もしっかりやっていくように推奨されている。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;コードのリファクタリング&lt;/li&gt;
  &lt;li&gt;コードのテスト&lt;/li&gt;
  &lt;li&gt;ドキュメンテーション&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;関連tips-2&quot;&gt;関連Tips&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tip 36 モジュール間の結合度を最小にすること&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tip 42 モデルからビューを分離する&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;tip-15-目標を見つけるには曳光弾を使うこと&quot;&gt;Tip 15 目標を見つけるには曳光弾を使うこと&lt;/h2&gt;

&lt;p&gt;プロトタイプ vs 曳光弾という対比で出てくる話（個人的にはこの曳光弾という例えはあまり日常的に出てくる言葉ではないのでわかりにくい）。説明すると、プロトタイプ実装は実装が捨てる前提で作られるものである（コンセプト実装）一方、曳光弾開発はそのコードを捨て去るのではなくその後も使われる前提での初期実装を行うことである。メリットは下記の通り。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;早いうちからユーザーにものを提示できる&lt;/li&gt;
  &lt;li&gt;開発者のモチベーションアップ&lt;/li&gt;
  &lt;li&gt;テスト用のプラットフォームが用意される&lt;/li&gt;
  &lt;li&gt;デモが可能になる&lt;/li&gt;
  &lt;li&gt;進捗が明確に&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今風の言葉で言うとアジャイル。まとまったものを丁寧に作るのではなく、さっさと動くものを作ってそれをBeta公開してフィードバックをもらったほうがうまく回るよねという話。今ではわりと常識ですかね。&lt;/p&gt;

&lt;h2 id=&quot;tip-22-１つのエディタを熟知&quot;&gt;Tip 22 １つのエディタを熟知&lt;/h2&gt;

&lt;p&gt;現代の開発では１つのエディタに固執するよりは、開発内容によって適切なエディタ/IDEを選ぶ時代だと個人的に思っているので、開発物に応じた複数のエディタ/IDEを使いこなせるほうが良いと思う。&lt;/p&gt;

&lt;p&gt;と思う一方で、それでもなお１つのエディタに習熟することは大事だと思っている。なぜなら1つのエディアを熟知することでアナロジー的に他のエディタの慣れも早くなるし（「Aエディタでできるあの操作をBエディタではどうやるのだろう」という具合）、熟知しているエディタのパワフルな機能を駆使することで、汎用的なテキストエディット作業時にグンと生産性が向上する場合もあるからだ。&lt;/p&gt;

&lt;h2 id=&quot;tip-23-常にソースコード管理を使用&quot;&gt;Tip 23 常にソースコード管理を使用&lt;/h2&gt;

&lt;p&gt;言うまでもなく、Gitを使うのは当たり前の時代になったし、GitHub（GitLab）でソースコードレビューするのも当たり前となった。&lt;/p&gt;

&lt;h2 id=&quot;tip-27-仮定せずに証明すること&quot;&gt;Tip 27 仮定せずに、証明すること&lt;/h2&gt;

&lt;p&gt;「このバグはこれがきっと原因だろうから、こうすれば直るだろう」「なんかわかんないけど動いた」「この対応で問題は解決しました（未検証）」はやめる。&lt;/p&gt;

&lt;p&gt;バグが発生したならなぜそのようなバグが発生したのかを考えること。そしてそれはテストコードで再発は防止できるのか。同種の問題が他にもないのか。将来同じバグを踏まないためにはどうしたらよいか。そのバグの内容はきちんとチームで共有されているのか。&lt;/p&gt;

&lt;p&gt;エンジニアであれば、「きっと〜だろう」という仮定ではなく、ロジカルに/テクニカルに物事に白黒付けよう。&lt;/p&gt;

&lt;h3 id=&quot;関連tips-3&quot;&gt;関連Tips&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tip 44 偶発的なプログラミングはしない&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;実行するタイミングによって動いたり動かなかったりするようなプログラムは書かない。&lt;/p&gt;

&lt;h2 id=&quot;tip-29-コードを生成するコードを作成すること&quot;&gt;Tip 29 コードを生成するコードを作成すること&lt;/h2&gt;

&lt;p&gt;銀の弾丸はない。が&lt;code class=&quot;highlighter-rouge&quot;&gt;rails new&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;rails generate&lt;/code&gt;のような便利なコードジェネレータが予めフレームワーク側で用意されてある場合も多いので、積極的に使っていこう。&lt;/p&gt;

&lt;h2 id=&quot;tip-30-あなたは完璧なソフトウェアを作れない&quot;&gt;Tip 30 あなたは完璧なソフトウェアを作れない&lt;/h2&gt;

&lt;p&gt;あなたがどんなに優れた開発者であろうと完璧なソフトウェアを作るのは不可能だ。ソフトウェアには多かれ少なかれ必ず何かしらの問題はあるものだ。&lt;/p&gt;

&lt;p&gt;対抗する手段として本書で紹介されているのが、&lt;strong&gt;防衛的コーディング&lt;/strong&gt;や&lt;strong&gt;表明プログラミング&lt;/strong&gt;、&lt;strong&gt;契約による設計&lt;/strong&gt; だが内容は割愛。興味があれば調べてみてほしい。&lt;/p&gt;

&lt;h3 id=&quot;関連tips-4&quot;&gt;関連Tips&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tip 32 早めにクラッシュさせる&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tip 34 例外は例外的な問題のみに使用すること&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;tip41-並列性を意識した設計を行うこと&quot;&gt;Tip41 並列性を意識した設計を行うこと&lt;/h2&gt;

&lt;p&gt;GoのGoroutineのような軽量スレッド的な仕組みで並列処理もかつてよりはとてもやりやすくなったように思う。きちんと並列性を考慮してアプリケーションを設計し、高いパフォーマンス要求にも応えられる作りにしておくこと。&lt;/p&gt;

&lt;h2 id=&quot;tip-45-アルゴリズムのオーダーを見積もること&quot;&gt;Tip 45 アルゴリズムのオーダーを見積もること&lt;/h2&gt;

&lt;p&gt;あるコストのかかる処理があったとして、そのオーダーを見積もってみること。それによってその処理がソフトウェアのパフォーマンスに与える影響度も想像できるはずだ。&lt;/p&gt;

&lt;h3 id=&quot;tip-46-見積もりの検証を行う&quot;&gt;Tip 46 見積もりの検証を行う&lt;/h3&gt;

&lt;p&gt;単純に見積もりだけでは終わらせない。仮定するのではなく、きちんと計測すること。&lt;/p&gt;

&lt;p&gt;早まった最適化にも注意が必要。アルゴリズムの改良はそれが本当にボトルネックになっていることを確認していから行うもの。さもなければただの時間の無駄遣いに終わる。&lt;/p&gt;

&lt;h2 id=&quot;tip-47-早めにリファクタリングこまめにリファクタリング&quot;&gt;Tip 47 早めにリファクタリング、こまめにリファクタリング&lt;/h2&gt;

&lt;p&gt;Tip4の割窓にもつながってくる話。リファクタリングを継続的に行いコードの健全性を保つ。そうすることで達人プログラマの精神衛生も保たれる。&lt;/p&gt;

&lt;p&gt;リファクタリングの対象となるコード例としては下記の通り。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DRY原則に反しているコード&lt;/li&gt;
  &lt;li&gt;時代遅れのコード&lt;/li&gt;
  &lt;li&gt;パフォーマンス悪化しているコード&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;リファクタリングを止めない&quot;&gt;リファクタリングを止めない&lt;/h3&gt;

&lt;p&gt;上司は納期が厳しくリファクタリングに使っている時間はないというかもしれない。しかしそれはリファクタリングを止める理由にはならない。将来問題が発生したときに生じるであろう大量の時間投資のことを考慮にいれること。開発者はときに上司を説得する必要があるかもしれない。&lt;/p&gt;

&lt;h3 id=&quot;リファクタリングのコツ&quot;&gt;リファクタリングのコツ&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;リファクタリングと機能の追加を同時にやらない&lt;/li&gt;
  &lt;li&gt;リファクタリングを始める前にテストをしっかり用意&lt;/li&gt;
  &lt;li&gt;リファクタリングの各作業は小さな単位にまとめ、慎重にすすめること&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;tip-48-テスト設計を行う&quot;&gt;Tip 48 テスト設計を行う&lt;/h2&gt;

&lt;p&gt;これもかつてよりも当たり前になってきてますがテストをきちんと書くこと。テストフレームワーク、CIサービスなどでかつてよりテストは書きやすくなっている時代だ。&lt;/p&gt;

&lt;h3 id=&quot;関連tips-5&quot;&gt;関連Tips&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tip 49 ソフトウェアをテストすること、さもなければユーザーにテストを強いることになる&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tip 62 早めにテスト、何度もテスト、自動でテスト&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;テストは自動化して何度もテストできるようにしておくこと。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tip 63 テストがすべて終わるまでコーディングは終わらない&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;テストが完了してコーディングは終わったといえる。何をテストするかというと下記の通り。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;単体テスト&lt;/li&gt;
  &lt;li&gt;結合テスト&lt;/li&gt;
  &lt;li&gt;妥当性確認・検証&lt;/li&gt;
  &lt;li&gt;リソース消費、エラー、リカバリ&lt;/li&gt;
  &lt;li&gt;パフォーマンステスト&lt;/li&gt;
  &lt;li&gt;ユーザビリティテスト&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tip-54-プロジェクト用語集を作ること&quot;&gt;Tip 54 プロジェクト用語集を作ること&lt;/h2&gt;

&lt;p&gt;DDD的にいうとユビキタス言語。プロジェクトによってはもしかしたら「クライアント」と「顧客」を使い分けているかもしれない。きちんとチーム内で用語に対する定義の共通認識を持っておくこと。&lt;/p&gt;

&lt;h2 id=&quot;tip-55-枠にとらわれずに考えるのではなく枠を見つけること&quot;&gt;Tip 55 枠にとらわれずに考えるのではなく、枠を見つけること&lt;/h2&gt;

&lt;p&gt;手に負えない問題に直面したらすべての手段を列挙して考えてみる。下記を自問してみよう。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;もっと簡単な手段はないか？&lt;/li&gt;
  &lt;li&gt;本当の問題を解決しようとしているか？ それとも末端の技術的問題に引っかかっているのか？&lt;/li&gt;
  &lt;li&gt;それがなぜ問題なのか？&lt;/li&gt;
  &lt;li&gt;解決を難しくしている原因は何なのか？&lt;/li&gt;
  &lt;li&gt;この手段でやり遂げなければならないのか？&lt;/li&gt;
  &lt;li&gt;そもそもそれは解決しなければならない問題なのか？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この問いの中でなにかひらめきが出てくるかもしれない。&lt;/p&gt;

&lt;h2 id=&quot;tip-61-手作業は危険&quot;&gt;Tip 61 手作業は危険&lt;/h2&gt;

&lt;p&gt;最大の敵はプログラムのバグではなく、人間かもしれない。手動オペレーションによりヒューマンエラーを経験した開発者は少なからずいるのではないだろうか。人間は繰り返し作業は得意ではないので、そういう作業は自動化してプログラムにやらせよう。&lt;/p&gt;

&lt;h2 id=&quot;tip-67-日本語をもう一つのプログラミング言語として扱う&quot;&gt;Tip 67 日本語をもう一つのプログラミング言語として扱う&lt;/h2&gt;

&lt;p&gt;つまりソースコード上に書かれた日本語も含めてソースコードということである。&lt;/p&gt;

&lt;p&gt;ソースコード自体がHowを表しているのでコメントにはWhy（目的・ゴール）を記述すること&lt;/p&gt;

&lt;h2 id=&quot;tip-69-ユーザーの期待を少しだけ上回ること&quot;&gt;Tip 69 ユーザーの期待を少しだけ上回ること&lt;/h2&gt;

&lt;p&gt;ユーザーの期待以上の良いものを作れるように心がけよう。&lt;/p&gt;

&lt;h2 id=&quot;さいごに&quot;&gt;さいごに&lt;/h2&gt;

&lt;p&gt;古典だけど良書なので一読する価値はアリ。古きを知りて、今を自戒しよう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/427421933X/ref=as_li_ss_il?ie=UTF8&amp;amp;linkCode=li3&amp;amp;tag=toshimaru-22&amp;amp;linkId=d4315939a647434d71937a28ec97f0a6&quot; target=&quot;_blank&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=427421933X&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=JP&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=toshimaru-22&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;https://ir-jp.amazon-adsystem.com/e/ir?t=toshimaru-22&amp;amp;l=li3&amp;amp;o=9&amp;amp;a=427421933X&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;当時の技術水準に照らし合わせて本書のアプローチがどれだけ先進的だったか想像してみるのも面白いかもしれない &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="tech" /><category term="読書" /><summary type="html"></summary></entry><entry><title type="html">Railsフロントエンド技術の今とこれから</title><link href="http://blog.toshimaru.net/rails-frontend/" rel="alternate" type="text/html" title="Railsフロントエンド技術の今とこれから" /><published>2017-05-22T00:00:00+09:00</published><updated>2017-05-22T00:00:00+09:00</updated><id>http://blog.toshimaru.net/rails-frontend</id><content type="html" xml:base="http://blog.toshimaru.net/rails-frontend/">&lt;p&gt;待望されたYarnサポートの入ったRails5.1が2017年4月にリリースされました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://edgeguides.rubyonrails.org/5_1_release_notes.html&quot;&gt;Ruby on Rails 5.1 Release Notes — Ruby on Rails Guides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;他にもjQueryがデフォルトdependencyから外されたり、Optionalでwebpackサポートが入ったりしており、Railsのフロントエンドは大きな転換点を迎えたと言ってよいでしょう。本エントリではRailsのフロントエンド技術の今を振り返り、今後どうなっていくかをまとめてみたいと思います。&lt;/p&gt;

&lt;h2 id=&quot;disられてきたrailsフロントエンド-no_good&quot;&gt;DisられてきたRailsフロントエンド :no_good:&lt;/h2&gt;

&lt;p&gt;Railsのフロントエンド技術スタックは、フロントエンドを専業とするエンジニアにDisられるものでした。具体的には下記の技術要素です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;jQuery&lt;/li&gt;
  &lt;li&gt;CoffeeScript&lt;/li&gt;
  &lt;li&gt;Assets Pipeline (sprockets)&lt;/li&gt;
  &lt;li&gt;gemのエコシステムに乗ったJSライブラリ(jquery-railsなど)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;複雑化するWebアプリケーションにおいてjQueryはもう時代遅れとされてますし、CoffeeScriptよりも時代はES6、AltJS使うにしても今はTypeScriptが有力候補でしょうか。gemのエコシステムに乗っかっているJSライブラリがAsset Pipelineを通して各環境にシップされるていることも嫌われます。なぜならJSにはnpmというエコシステムがあるからです。&lt;/p&gt;

&lt;h2 id=&quot;railsのフロントエンド刷新の歩み-walking&quot;&gt;Railsのフロントエンド刷新の歩み :walking:&lt;/h2&gt;

&lt;p&gt;しかし2016年春頃&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;からRailsの作者・&lt;a href=&quot;https://github.com/dhh&quot;&gt;DHH&lt;/a&gt;の上げたIssueを皮切りに、フロントエンド技術刷新の歩みが始まります。その歴史・経緯を追ってみましょう。&lt;/p&gt;

&lt;h3 id=&quot;2016年5月&quot;&gt;2016年5月&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Rails v5.1 で jQueryを依存性としてDropしようというIssueをDHHが上げる
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/issues/25208&quot;&gt;Drop jQuery as a dependency · Issue #25208 · rails/rails&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2016年10月&quot;&gt;2016年10月&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Railsにnpm supportを追加するPRが上げられる
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/pull/26836&quot;&gt;Add Yarn support in new apps using –yarn option by Liceth · Pull Request #26836 · rails/rails&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Sprockets 側でNPMをsupportするPRが上げられる
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/rails/sprockets/pull/405&quot;&gt;NPM support: Add support for resolving main from npm’s package.json by guilleiguaran · Pull Request #405 · rails/sprockets&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2016年11月&quot;&gt;2016年11月&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;npm support PRにてnpmではなくyarnを採用することが決められる
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/pull/26836#issuecomment-257426850&quot;&gt;https://github.com/rails/rails/pull/26836#issuecomment-257426850&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;jquery-rails をRailsから外すPRが上げられる
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/pull/27113&quot;&gt;Drop jQuery as a dependency by guilleiguaran · Pull Request #27113 · rails/rails&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2016年12月&quot;&gt;2016年12月&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;DHH自らwebpacker gemを作成開始、v0.1としてgemを公開
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/rails/webpacker/commit/f4cc31d&quot;&gt;FIRST!1! · rails/webpacker@f4cc31d&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;同gemをRails本体の機能に取り込む
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/pull/27288&quot;&gt;Basic –webpack delegation to new webpacker gem by dhh · Pull Request #27288 · rails/rails&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2017年2月&quot;&gt;2017年2月&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Rails 5.1.beta1 リリース
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://weblog.rubyonrails.org/2017/2/23/Rails-5-1-beta1/&quot;&gt;Rails 5.1.0.beta1: Loving JavaScript, System Tests, Encrypted Secrets, and more | Riding Rails&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;webpacker 1.0 リリース
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://rubygems.org/gems/webpacker/versions/1.0&quot;&gt;https://rubygems.org/gems/webpacker/versions/1.0&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;jQueryに依存しないujsである rails-ujs が actionview の一機能としてRails本体に取り込まれる
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/commit/41c33bd4b2ec3f4a482e6030b6fda15091d81e4a&quot;&gt;https://github.com/rails/rails/commit/41c33bd4b2ec3f4a482e6030b6fda15091d81e4a&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2017年4月&quot;&gt;2017年4月&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;:tada: Rails 5.1 リリース
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://weblog.rubyonrails.org/2017/4/27/Rails-5-1-final/&quot;&gt;Rails 5.1: Loving JavaScript, System Tests, Encrypted Secrets, and more | Riding Rails&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上が現在に至るRailsフロントエンド進化の軌跡となります。2016年5月のDHHの問題提起からわずか(?)一年足らずでここまで進化したのは純粋にすごいなーと思いました。&lt;/p&gt;

&lt;h2 id=&quot;railsのフロントエンド実装の選択肢&quot;&gt;Railsのフロントエンド実装の選択肢&lt;/h2&gt;

&lt;p&gt;Rails5.1のフロントエンド刷新以降、&lt;strong&gt;今Railsにはどんなフロントエンド実装の選択肢があるのか&lt;/strong&gt;、ざっと見てみます。&lt;/p&gt;

&lt;h3 id=&quot;1-asset-pipeline&quot;&gt;1. &lt;a href=&quot;https://railsguides.jp/asset_pipeline.html&quot;&gt;Asset Pipeline&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Sprockets + CoffeeScript, SASS, jQuery&lt;/li&gt;
  &lt;li&gt;今まで通りの古き良きassets管理&lt;/li&gt;
  &lt;li&gt;知見も多く転がっており、枯れているのでハマりにくい&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-sprockets-4&quot;&gt;2. &lt;a href=&quot;https://github.com/rails/sprockets&quot;&gt;Sprockets 4&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;ES6 support &lt;a href=&quot;https://github.com/rails/sprockets/blob/master/UPGRADING.md#es6-support&quot;&gt;https://github.com/rails/sprockets/blob/master/UPGRADING.md#es6-support&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Sprockets4の開発自体は停滞気味 &lt;a href=&quot;https://github.com/rails/sprockets/blob/master/CHANGELOG.md&quot;&gt;https://github.com/rails/sprockets/blob/master/CHANGELOG.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-browserify-rails&quot;&gt;3. &lt;a href=&quot;https://github.com/browserify-rails/browserify-rails&quot;&gt;browserify-rails&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;sprockets のコールバックとして動作
    &lt;ul&gt;
      &lt;li&gt;つまりsprocketsに依存している&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;導入のための参考記事: &lt;a href=&quot;http://techlife.cookpad.com/entry/2015/12/14/130041&quot;&gt;モダンJavaScript開発環境 on Rails - クックパッド開発者ブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4-webpacker&quot;&gt;4. &lt;a href=&quot;https://github.com/rails/webpacker&quot;&gt;webpacker&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;絶賛開発中
    &lt;ul&gt;
      &lt;li&gt;活発に変更が入っているので導入に際しては現時点ではREADMEを参考にするのが良さそう&lt;/li&gt;
      &lt;li&gt;まだ小慣れていない印象&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;最初はwebpack+railsのシームレスな統合のための薄い実装だと思ったが、現在ゴテゴテな実装…
    &lt;ul&gt;
      &lt;li&gt;react, angular, elm, vue などの初期インストールタスクが１つのレポジトリに全部のっている
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/rails/webpacker/issues/20#issuecomment-266347480&quot;&gt;plugable にしようぜ&lt;/a&gt;という話はあるが現在そうはなっていない&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;初回インストール時の生成ファイル・パッケージ構成はたぶんフロントエンドガチ勢からみたら&lt;a href=&quot;https://github.com/rails/webpacker/blob/5003a5de0222c1f5b0f3c2b887064039e06f7eae/lib/install/template.rb#L25-L30&quot;&gt;クソの山っぽい&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;レールにのったwebpack利用という意味のカジュアルな利用だったら良いかもしれない&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;5-webpack-rails&quot;&gt;5. &lt;a href=&quot;https://github.com/mipearson/webpack-rails&quot;&gt;webpack-rails&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Sprockets 非依存&lt;/li&gt;
  &lt;li&gt;webpack利用のための薄い実装
    &lt;ul&gt;
      &lt;li&gt;初期のwebpackerに似てる印象&lt;/li&gt;
      &lt;li&gt;個人的にはwebpackerよりは筋が良い印象を受けた&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;6-react_on_rails&quot;&gt;6. &lt;a href=&quot;https://github.com/shakacode/react_on_rails&quot;&gt;react_on_rails&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;SSRサポート&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sstephenson/execjs&quot;&gt;execjs&lt;/a&gt; 依存&lt;/li&gt;
  &lt;li&gt;webpacker integration アリ
    &lt;ul&gt;
      &lt;li&gt;webpackerの薄い実装も登場 &lt;a href=&quot;https://github.com/shakacode/webpacker_lite&quot;&gt;shakacode/webpacker_lite&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;参考記事: &lt;a href=&quot;http://r7kamura.hatenablog.com/entry/2016/10/10/173610&quot;&gt;Ruby on Rails on React on SSR on SPA - ✘╹◡╹✘&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;7-react-rails&quot;&gt;7. &lt;a href=&quot;https://github.com/reactjs/react-rails&quot;&gt;react-rails&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;SSRサポート&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sstephenson/execjs&quot;&gt;execjs&lt;/a&gt; 依存&lt;/li&gt;
  &lt;li&gt;react_on_railsと異なる点は、integration の選択肢として Rails Assets Pipline もしくは webpacker が選べること
    &lt;ul&gt;
      &lt;li&gt;Asset Pipelineにのりたかったらこちらを選択&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;8-独自に導入&quot;&gt;8. 独自に導入&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;独自にJSアプリケーションをRailsに統合させる構成を考えRails上にのっける&lt;/li&gt;
  &lt;li&gt;例: &lt;a href=&quot;http://techlife.cookpad.com/entry/2016/07/27/101015&quot;&gt;webpackを使った Rails上でのReact開発 - クックパッド開発者ブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;9-sprockets-commoner&quot;&gt;9. &lt;a href=&quot;https://github.com/Shopify/sprockets-commoner&quot;&gt;sprockets-commoner&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Shopify製&lt;/li&gt;
  &lt;li&gt;コンセプトとしてはRails Wayを壊さずにBabelを利用すること&lt;/li&gt;
  &lt;li&gt;Sprocketsに依存&lt;/li&gt;
  &lt;li&gt;導入に際してはitkrt2yさんのこちらの記事を参考に: &lt;a href=&quot;http://qiita.com/itkrt2y/items/18ea41828e1c22fc31e3&quot;&gt;顧客が本当に求めていたsprockets、sprockets-commonerの紹介 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;どうすべきか&quot;&gt;どうすべきか&lt;/h2&gt;

&lt;p&gt;上記に紹介したように様々な実装があるわけですが、我々はどれをどのように選択すべきでしょうか。僕なりにまとめてみました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb3/flowchart.png&quot; alt=&quot;chart&quot; /&gt;&lt;/p&gt;

&lt;p&gt;まず最初にあるのが、Railsが嫌い/宗教的にあわない/フロントエンドをレールにのらせたくないのであれば無理してRailsを使うことはないと思っています。Railsをやめる、あるいはRailsはWebAPIに徹して独立したフロントエンドの世界観を築くのもアリだと思ってます。&lt;/p&gt;

&lt;p&gt;また現状のAsset管理に満足していて、かつビジネス上の要件としてリッチなJS実装が求められないのであれば無理してモダンなフロントエンド機構を構築する必要はありません。無理してwebpackだのbrowserifyだの導入せずに、古き良きAsset Pipelineでいいのです（技術そのものが目的な場合はこの限りではない）。&lt;/p&gt;

&lt;h2 id=&quot;今後どうなるか&quot;&gt;今後どうなるか&lt;/h2&gt;

&lt;p&gt;Railsコミュニティの流れとして、&lt;strong&gt;今後どうなっていくか&lt;/strong&gt; も考えてみたいと思います。&lt;/p&gt;

&lt;h3 id=&quot;1-gemからnpmへ&quot;&gt;1. gemからnpmへ&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb3/rails-npm.png&quot; alt=&quot;bridge&quot; /&gt;&lt;/p&gt;

&lt;p&gt;RailsからNPM(yarn)のブリッジがRailsのコア機能の１つとして提供されたことはとても意義深いことだと思っています。その結果起こりうることとしては以下でしょうか。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;jquery-rails, underscore-rails のような Asset Pipeline に載せるタイプのgemは廃れていく(npm管理に移っていく)&lt;/li&gt;
  &lt;li&gt;Railsエンジニアがnpmライブラリを今後どんどん活用することによって、RailsエンジニアのJS界隈進出が増えるかも…?
    &lt;ul&gt;
      &lt;li&gt;railsコミュニティにとってもnpmコミュニティにとっても良い事&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-reactへの大潮流&quot;&gt;2. Reactへの大潮流&lt;/h3&gt;

&lt;p&gt;今までJSライブラリのデファクトと言ったらjQueryでしたが、フロントエンド実装の複雑化にともないReactを採用する企業が増えその状況が変わってきました（少なくとも僕の観測範囲内では）。jQueryを使っての複雑なDOM操作のコードは破綻しがちですし限界があります。その結果のReact採用なのでしょう。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;反省会というからReact導入が一般的に浸透し導入後一巡したってことだろうなぁ&lt;br /&gt;Twitterトレンド入り！ 「&lt;a href=&quot;https://twitter.com/hashtag/React%E5%8F%8D%E7%9C%81%E4%BC%9A?src=hash&quot;&gt;#React反省会&lt;/a&gt;」登壇資料一挙公開！ | Wantedly Engineer Blog &lt;a href=&quot;https://t.co/PbG49aclqa&quot;&gt;https://t.co/PbG49aclqa&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/862817538022883328&quot;&gt;May 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;上記のようにReactが導入されやすい環境が整ってきている昨今、今後ますますRails+Reactの採用事例は増えていくと思われます&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h3 id=&quot;3-turbolinks-がますます下火に&quot;&gt;3. Turbolinks がますます下火に&lt;/h3&gt;

&lt;p&gt;&lt;del&gt;黙って無効化すべし&lt;/del&gt; 無効化されることの多いturbolinks機能ですがますます下火になっていくと思われます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb3/turbolinks.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;リッチなレンダリングUXを提供するためのRailsチーム(DHH)の苦肉の策がTurbolinksという理解でいますが、上述したようにフロントエンド開発の機構が整ってきている今、わざわざturbolinksを使う必要性もなくなってきました。&lt;/p&gt;

&lt;p&gt;とはいえ、絶対にJS書きたくないでござる！というJS書きたくないマンなRailsエンジニアの選択肢の１つとしてはアリだと思います。&lt;/p&gt;

&lt;h2 id=&quot;フロントエンドというマイクロサービスがもたらす複雑性&quot;&gt;フロントエンドというマイクロサービスがもたらす複雑性&lt;/h2&gt;

&lt;p&gt;と、ここまでRailsとフロントエンドの話をしてきましたが、一方で安易なフロントエンド技術の導入は負債を生み出す危険性もあることも付しておきます。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;このツラミわかるなぁ | ReactSPAをRailsに戻している話 // Speaker Deck &lt;a href=&quot;https://t.co/G3Ln3NbmCQ&quot;&gt;https://t.co/G3Ln3NbmCQ&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/857758278830350337&quot;&gt;April 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;このケースのように複雑なフロントエンド実装が逆に負債となり足かせとなる場合もあります。&lt;a href=&quot;http://anond.hatelabo.jp/20170501085956&quot;&gt;全くメンテされないクソJSコードの塊を作る&lt;/a&gt;ような状況は避けなければなりません。&lt;/p&gt;

&lt;p&gt;高度に専業化したフロントエンド技術はもはやいちサーバーサイドエンジニアが片手間に開発・メンテナンスできるレベルのものでもなくなってきています。うまく作ったとしてもその後のアップデートに追従していくのは至難の業でしょう。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-cards=&quot;hidden&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;紹介されているこっちのスライドもよくわかるなぁ。「フロントエンドは一個のマイクロサービス(ただのViewじゃない)」「マイクロサービス作っているのだから辛いの当然」 &lt;a href=&quot;https://t.co/YqkrIYSXxf&quot;&gt;https://t.co/YqkrIYSXxf&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/857790990496616448&quot;&gt;April 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;このようにフロントエンドを１つのマイクロサービスと捉える見方もあります。マイクロサービスであるからこそ、モノリシックサービスよりもアーキテクチャ・実装が複雑になりがちです。高度なフロントエンド技術導入の際はチームとしてその複雑性を受け入れる覚悟が必要でしょう。&lt;/p&gt;

&lt;h2 id=&quot;イベント告知&quot;&gt;イベント告知&lt;/h2&gt;

&lt;p&gt;そんなわけで随分と長い前置きでしたが、次回のRoppongi.rb#3のテーマは”Rails x Frontend”で開催します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://roppongirb.connpass.com/event/56456/&quot;&gt;Roppongi.rb #3 “Rails x Frontend-Tech”&lt;/a&gt;&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Roppongi.rb #3 &amp;quot;Rails x Frontend-Tech&amp;quot; 〜これからのRails Frontendの話をしよう〜 を公開しました！ &lt;a href=&quot;https://t.co/hOjXX7J8dC&quot;&gt;https://t.co/hOjXX7J8dC&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/roppongirb?src=hash&quot;&gt;#roppongirb&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/861725918552707072&quot;&gt;May 8, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;既に参加枠（抽選）は埋まっており参加登録いただいた方を全員ご案内できないのが恐縮ですが、もしよければ登録して遊びにきてください。&lt;/p&gt;

&lt;h2 id=&quot;参考リンク&quot;&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/itkrt2y/items/7e999836f460fb9c005d&quot;&gt;Rails5.1に向けてフロントエンド周りで起こっている革命まとめ - Qiita&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/yuroyoro/items/a29e39989f4469ef5e41&quot;&gt;Rails5.1から導入されるwebpacker.gemは本当にRailsのフロントエンド開発に福音をもたらすのか? - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;ちょうど&lt;a href=&quot;http://railsconf.com/2016&quot;&gt;RailsConf 2016&lt;/a&gt;の後くらいのタイミングでしょうか。 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;一方で、複雑でないアプリケーションに対しReactを導入するのはオーバーキルなのでごく一部分の小さなイベント制御JSコードであればjQueryで十分な場面も未だ多くあると思います。 &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="rails" /><category term="frontend" /><category term="roppongirb" /><summary type="html">待望されたYarnサポートの入ったRails5.1が2017年4月にリリースされました。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.toshimaru.net/images/posts/roppongirb3/roppongirb-3.jpg" /></entry><entry><title type="html">JavaScriptのXHRの送り方いろいろ: XMLHttpRequest, fetch, async/await</title><link href="http://blog.toshimaru.net/new-xhr-fetch-asyncawait/" rel="alternate" type="text/html" title="JavaScriptのXHRの送り方いろいろ: XMLHttpRequest, fetch, async/await" /><published>2017-02-20T00:00:00+09:00</published><updated>2017-02-20T00:00:00+09:00</updated><id>http://blog.toshimaru.net/new-xhr-fetch-asyncawait</id><content type="html" xml:base="http://blog.toshimaru.net/new-xhr-fetch-asyncawait/">&lt;p&gt;JavaScriptのXHR(XMLHttpRequest)の送り方は１つだけではありません。モダンなXHRに向けてそれぞれのHTTPリクエストの送り方を比較・検討してみます。&lt;/p&gt;

&lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jquery.com/&quot;&gt;jQuery&lt;/a&gt;, &lt;a href=&quot;https://github.com/visionmedia/superagent&quot;&gt;superagent&lt;/a&gt;, &lt;a href=&quot;https://github.com/mzabriskie/axios&quot;&gt;axios&lt;/a&gt;などのAJAX系ライブラリは使用しないこととする。&lt;/li&gt;
  &lt;li&gt;検証に使うブラウザは最新版のChrome (現在はVersion56.0)&lt;/li&gt;
  &lt;li&gt;今回リクエストを送る先は仮想的に下記のURLとする&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://your.domain.net/&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;1-xmlhttprequest&quot;&gt;1. XMLHttpRequest&lt;/h2&gt;

&lt;p&gt;さぁ,まずは古き良き&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/API/XMLHttpRequest&quot;&gt;XMLHttpRequest&lt;/a&gt;。ローレベルなAPIでAJAX処理が書きにくいのですが、歴史がある分多くのブラウザで動作します。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'GET'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onerror&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;error!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Chrome Dev Toolのコンソールで動かしてみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/xhr/1.png&quot; alt=&quot;xhr1&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;モダンな書き方にしてみよう&quot;&gt;モダンな書き方にしてみよう！&lt;/h3&gt;

&lt;p&gt;このまま次のXHRに進んでも良いですがせっかくなので上記のコードをもう少しモダンにしてみます。&lt;/p&gt;

&lt;p&gt;今回は下記の２つの書き方を導入します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Statements/const&quot;&gt;const&lt;/a&gt; = 定数&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;Arrow function&lt;/a&gt; = アロー関数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記の2つで1のXMLHttpRequestのコードを書き直すとこのようになります。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'GET'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onerror&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;error!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt;に、&lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;=&amp;gt;&lt;/code&gt;へと変更しています。わかりやすくなってスッキリしましたね。&lt;/p&gt;

&lt;p&gt;この書き方でも動くかChrome Dev Toolのコンソールで動かしてみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/xhr/2.png&quot; alt=&quot;xhr2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;:ok: でした。&lt;/p&gt;

&lt;h2 id=&quot;2-fetch-api&quot;&gt;2. fetch API&lt;/h2&gt;

&lt;p&gt;次は&lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; APIを使ってXHRしてみましょう。ちなみにfetch APIはChrome Version 42よりサポートされています。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;error caught!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;コードとしてはurlを&lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;して&lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;catch&lt;/code&gt;をチェインさせてそれぞれの処理内容を書いていくというものになります。&lt;/p&gt;

&lt;p&gt;Chrome Dev Toolコンソールで動かした結果。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/xhr/3.png&quot; alt=&quot;xhr3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;は&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise&lt;/a&gt;を返す点がポイントですね。&lt;/p&gt;

&lt;h2 id=&quot;3-fetch--asyncawait&quot;&gt;3. fetch + async/await&lt;/h2&gt;

&lt;p&gt;最後のXHRは&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt;async/await&lt;/a&gt;になります。Chrome55からのサポートなので最近追加された機能ということになります。&lt;/p&gt;

&lt;p&gt;さきほどの&lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;のコードをasync/awaitの機能を使って書き換えてみましょう。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;error!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ポイントとしては &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt;を使ってまず無名関数を作ります。これでその関数内に&lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt;を使う準備ができました。&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/await&quot;&gt;await&lt;/a&gt;はPromiseが返されるのを待機するので、先程のPromiseを返す&lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;関数の手前に&lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt;を宣言します。これで&lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;関数は&lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt;でコールバックをチェインする必要がなくなり、&lt;code class=&quot;highlighter-rouge&quot;&gt;response&lt;/code&gt;変数にダイレクトに結果が代入されます。エラー処理に関してはtryで処理内容を囲み、catchでエラーを補足します。&lt;/p&gt;

&lt;p&gt;コンソールで動かしてみた結果は下記の通り。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/xhr/4.png&quot; alt=&quot;xhr4&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;結論&quot;&gt;結論&lt;/h2&gt;

&lt;p&gt;結論としては現時点では3つめのfetch+async/awaitな書き方が最もモダンな書き方となります。&lt;/p&gt;

&lt;p&gt;3の書き方でなにが嬉しいかというと:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;非同期処理でありがちなコールバック地獄からの解放&lt;/li&gt;
  &lt;li&gt;同期的なコードで書けるので書きやすい・読みやすい&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Statements/try...catch&quot;&gt;try~catch節&lt;/a&gt;を用いているのでエラー処理の見通しが良い&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このあたりでしょうか。&lt;/p&gt;

&lt;p&gt;まだasync/awaitシンタックスはECMAScript 2017のDraftな仕様というステータスであり現時点でIEはサポートしていない書き方です。なので多くの人が触る環境下のコードベースにおける導入は厳しいですが、これらが使える利用環境を限定できるのであれば積極的に使っていきたい書き方ですね。&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/OC7tgJP1D4s&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;おまけbabelで使う場合&quot;&gt;（おまけ）babelで使う場合&lt;/h2&gt;

&lt;p&gt;babel で async/await のシンタックス使いたい場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-plugin-syntax-async-functions&lt;/code&gt;を使うことになります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://babeljs.io/docs/plugins/syntax-async-functions/&quot;&gt;Syntax async functions · Babel&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jakearchibald.com/2015/thats-so-fetch/&quot;&gt;That’s so fetch! - JakeArchibald.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&quot;&gt;XMLHttpRequest - Web APIs | MDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="javascript" /><category term="ajax" /><summary type="html">JavaScriptのXHR(XMLHttpRequest)の送り方は１つだけではありません。モダンなXHRに向けてそれぞれのHTTPリクエストの送り方を比較・検討してみます。</summary></entry><entry><title type="html">2016年振り返りと2017年の抱負的なやつ</title><link href="http://blog.toshimaru.net/2016-to-2017/" rel="alternate" type="text/html" title="2016年振り返りと2017年の抱負的なやつ" /><published>2017-01-04T00:00:00+09:00</published><updated>2017-01-04T00:00:00+09:00</updated><id>http://blog.toshimaru.net/2016-to-2017</id><content type="html" xml:base="http://blog.toshimaru.net/2016-to-2017/">&lt;p&gt;なんか昨年末にいくつかの振り返りエントリを見て自分も書くかと思い立ったので書いてみる。&lt;/p&gt;

&lt;h2 id=&quot;2016年振り返りアウトプット編&quot;&gt;2016年振り返り・アウトプット編&lt;/h2&gt;

&lt;h3 id=&quot;roppongirb-主催&quot;&gt;Roppongi.rb 主催&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://roppongirb.connpass.com/&quot;&gt;Roppongi.rb&lt;/a&gt;を&lt;a href=&quot;https://twitter.com/totzyuta&quot;&gt;@totzyuta&lt;/a&gt;さんと一緒に主催した。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/roppongirb-speeding-up-rails/&quot;&gt;Roppongi.rbで「Rails高速化戦略」を発表しました&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/infrastructure-as-ruby-code-2016/&quot;&gt;Roppongi.rb#2で「Infrastructure as (Ruby) Code の現状確認」を発表しました&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このへんを始めたきっかけ・想いとしては後述するPodcastの出演時に話したので興味があればどうぞ。&lt;/p&gt;

&lt;h3 id=&quot;oss活動&quot;&gt;OSS活動&lt;/h3&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;初railsプルリク、成功してた | Enable `block` variable in view · Issue #27303 · rails/rails &lt;a href=&quot;https://t.co/nnz5iJ9GZx&quot;&gt;https://t.co/nnz5iJ9GZx&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/807057098861219840&quot;&gt;December 9, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;コントリビュートしたやつ
    &lt;ul&gt;
      &lt;li&gt;rails/rails
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/pull/27303&quot;&gt;Enable block variable in view by toshimaru · Pull Request #27303 · rails/rails&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;rails/webpacker
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/rails/webpacker/pull/15&quot;&gt;Save babel-preset-react to devDependencies by toshimaru · Pull Request #15 · rails/webpacker&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;rails/weblog
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/rails/weblog/pull/88&quot;&gt;Introduce jekyll-seo-tag by toshimaru · Pull Request #88 · rails/weblog&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;sorcery
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/NoamB/sorcery/pull/730&quot;&gt;Fix RSpec by toshimaru · Pull Request #730 · NoamB/sorcery&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/NoamB/sorcery/pull/729&quot;&gt;Add a newline at the end of migration file by toshimaru · Pull Request #729 · NoamB/sorcery&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;その他小さいドキュメント修正・テスト修正とか細かいのいろいろ…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;作ったやつ
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/toshimaru/rack-simple_user_agent&quot;&gt;rack-simple_user_agent&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/toshimaru/redirect_follow_get&quot;&gt;redirect_follow_get&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/toshimaru/newrelic_server-chef-recipe&quot;&gt;newrelic_server-chef-recipe&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/toshimaru/jekyll-tagging-related_posts&quot;&gt;jekyll-tagging-related_posts&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/toshimaru/jekyll-include_sass&quot;&gt;jekyll-include_sass&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;年末にRailsのコントリビュートできたのは良かった。Railsレポで&lt;code class=&quot;highlighter-rouge&quot;&gt;Contributor&lt;/code&gt;のラベルが付きREADMEに名前を刻めたのは地味に嬉しい。今後もrailsのmasterは追っかけつつ見つけたバグは積極的に直していきたい。&lt;/p&gt;

&lt;p&gt;既存レポのメンテナンスはサボり気味だった。PRは大体捌いているけどIssueは放置気味な嫌いがあるのでなんとかしたい。イシューの大小かかわらず即レス対応してくれると&lt;a href=&quot;http://qiita.com/massa142/items/37b5cfd80daea5cac541&quot;&gt;＜常にそこにいる安心感＞&lt;/a&gt;がある。2017年は頑張りたい。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;いろんな人のOSS活動見てて、やっぱイシュートリアージはちゃんとやんなきゃと思っている。イシュー、PR放置が一番やったらあかんやつよな。&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/813926769333940224&quot;&gt;December 28, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;作ったものに関しては自分の抱えている課題ベースで考えそのソリューションとなるものをOSSとして公開した。コンセプチュアルなものではないので2017年はもう少し大きい規模のコンセプトのはっきりしたOSS作りたいという思いがある。&lt;/p&gt;

&lt;h3 id=&quot;英語ブログ&quot;&gt;英語ブログ&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;toshima.ru&lt;/code&gt;というドメインを同僚にそそのかされて取得してしまい、その勢いで英語ブログを作った。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.toshima.ru&quot;&gt;http://blog.toshima.ru&lt;/a&gt;&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;同僚にそそのかされて toshima.ru ドメイン取得してしまった。 さっそくいくつかのGithub Pagesを向けてみた&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/736396635509395457&quot;&gt;May 28, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;用途は本ブログで日本語でまとめる程もないTipsのメモ。こういうのは日本人エンジニアだとQiitaとかに書くんだろうけど、Qiitaは宗教上の理由で使えないので自分で本ブログとは別に作ることにした。長い文章ではないので、実験的に英語で公開することにした。また（中途半端な）AMPとしてページを公開しているのでページ表示は速いはず。こちらも例によって&lt;a href=&quot;https://github.com/toshimaru/blog.toshima.ru&quot;&gt;Github Pagesを使って公開&lt;/a&gt;している&lt;/p&gt;

&lt;h3 id=&quot;podcast出演&quot;&gt;Podcast出演&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.toshimaru.net/bootfm-podcast/&quot;&gt;boot.fm Podcast に出演しました&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/__timakin__&quot;&gt;@__timakin__&lt;/a&gt;さん、&lt;a href=&quot;https://twitter.com/k0kubun&quot;&gt;@k0kubun&lt;/a&gt;さんに誘われ彼らがホストしているPodcastに出演。お二人ともに僕より若く優秀な方で、彼らと話せたことは僕にとってはたいへん刺激になってよかった。若手優秀勢に負けてないように僕なりのバリューを発揮していきたい。&lt;/p&gt;

&lt;h2 id=&quot;2016年振り返りインプット編&quot;&gt;2016年振り返り・インプット編&lt;/h2&gt;

&lt;p&gt;通勤時間が増えたのでPodcastをメインにインプットの量が増えた印象。&lt;/p&gt;

&lt;h3 id=&quot;podcast&quot;&gt;Podcast&lt;/h3&gt;

&lt;p&gt;2014年、2015年と英語のTech系Podcastメインでいろいろ聴いていたけども、2016年からは日本語Podcastがガンガン登場したことで英語Podcastと同じくらいの量の日本語Podcastを聴いた気がしている。&lt;/p&gt;

&lt;p&gt;聴いているのは具体的にこのへん。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://changelog.com/&quot;&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://devchat.tv/ruby-rogues&quot;&gt;The Ruby Rogues&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://devchat.tv/js-jabber&quot;&gt;JavaScript Jabber&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.thecloudcast.net/&quot;&gt;The Cloudcast&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rebuild.fm/&quot;&gt;Rebuild&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mozaic.fm/&quot;&gt;mozaic.fm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://dex.fm/&quot;&gt;dex.fm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bootfm.github.io/&quot;&gt;boot.fm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://soundcloud.com/wyukawa&quot;&gt;wyukawa’s podcast&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloudinfra.audio/&quot;&gt;cloudinfra-audio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://codelunch.fm/&quot;&gt;CodeLunch.fm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そこまで自分の興味分野でないPodcastは流し聴き、興味範囲のやつは丁寧に聴くといった感じ。2017年もゆるーくいろいろな分野のPodcastを聴いていきたい。&lt;/p&gt;

&lt;h3 id=&quot;読書&quot;&gt;読書&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;DDD青本&lt;/li&gt;
  &lt;li&gt;リーダブルコード&lt;/li&gt;
  &lt;li&gt;読み途中・積読中の本がいろいろ…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;読み途中なのはいろいろあるんだけどまともに読んだといえるのはDDD青本、リーダブルコードの２つくらいか。どちらも古典とあって良本だった。2017年は積んでいる本のうちある程度読んで良いと思えるものは読み通したい。&lt;/p&gt;

&lt;p&gt;2016年はどちらかというと最新情報のキャッチアップをメインにしていたので、書籍よりもWEB+DB PRESSのような技術系雑誌のほうが読んだし役に立つ情報が多かった印象。2017年も WEB+DB Press や Software Design あたりは一通り目を通すようにしたい。&lt;/p&gt;

&lt;h2 id=&quot;2017年の抱負的なやつ&quot;&gt;2017年の抱負的なやつ&lt;/h2&gt;

&lt;h3 id=&quot;100star人材目指したい&quot;&gt;100star人材目指したい&lt;/h3&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;100Stars人材になれました。ありがとうございます。普通に嬉しいやつです。 &lt;a href=&quot;https://t.co/4hsMY3iIYY&quot;&gt;pic.twitter.com/4hsMY3iIYY&lt;/a&gt;&lt;/p&gt;&amp;mdash; timakin (@__timakin__) &lt;a href=&quot;https://twitter.com/__timakin__/status/814098497712451584&quot;&gt;December 28, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;早く100Star人材にならなければ人権を失う…&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/814110242422157312&quot;&gt;December 28, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;とはいえ狙ってとれるものではないのでそんなに力まずに世の中のソリューションとなりそうなモノを淡々と作っていきたいと思っている。&lt;/p&gt;

&lt;p&gt;変に気合を入れて重厚なものを作ろうとしてエターナるのではなく、ちゃんと完成させることを視野にいれてやっていくことが重要かと。&lt;/p&gt;

&lt;h3 id=&quot;アウトプットについて&quot;&gt;アウトプットについて&lt;/h3&gt;

&lt;p&gt;2016年後半はだいぶ「息をするようにOSSコントリビュート」ができるようになってきた実感があった。Ruby(Rails)も仕事で書き始めて今年で三年目くらいになるので、引き続きどんどんOSSコントリビュートしてコミュニティに還元していきたいと思う。&lt;/p&gt;

&lt;p&gt;僕もそろそろWEB業界的にはもう若手ではなく、中堅となる歳に差し掛かってきたので若手の育成とか自分の持っている情報の伝達を頑張っていきたいと思っている。そのためにも勉強会やブログでのアウトプットは続けていきたい（機会があればPodcastでも）。&lt;/p&gt;

&lt;p&gt;あとこれは時間があればって感じでMUSTではないけどもそろそろ新しい言語ももう１つくらい習得したい。第一候補はGoだけれども、mrubyでもいいかもしれない。&lt;/p&gt;

&lt;h3 id=&quot;インプットについて&quot;&gt;インプットについて&lt;/h3&gt;

&lt;p&gt;インプットに関してだけど、最近だと業務の中でのインプット・学習に限界を感じている。ある程度自分の常日頃から触っている周辺技術に関してはレベルが上がって情報のレベルも高いものを求めるようになったからだと思う。&lt;/p&gt;

&lt;p&gt;じゃあどうしたらいいかというと、ただ待っていても質の高いインプットは降ってはこないので外部の情報を積極的にDigっていきたい。Railsのmasterを日々追っかけたり、Railsやいろんなgemのソースコードリーディングしたり、ruby/rails界隈の人をフォローしたり、勉強会でいろんな人と話したり。&lt;/p&gt;

&lt;h2 id=&quot;生活環境の変化&quot;&gt;生活環境の変化&lt;/h2&gt;

&lt;p&gt;2016年後半に子どもが産まれたので生活環境がガラッと変わる。正直、2017年はいろいろ家庭面で忙しくなって自分の時間が全然取れなくなるだろうなってのを覚悟している。&lt;/p&gt;

&lt;p&gt;覚悟していた…のだが、&lt;a href=&quot;http://codelunch.fm/20/&quot;&gt;最近聴いたcodelunch.fm&lt;/a&gt;で「生活スタイルの変化によって時間の使い方が効率的になりむしろ今までより時間とれるようになった」という話を聴いて、生活スタイルの変化を言い訳にはできないという教訓を得た。&lt;/p&gt;

&lt;p&gt;また仕事的にもリモートがしやすい業種でもあるので、家庭と仕事のバランスを見直してもいいのかもなーと下記エントリ読みながらぼんやり考えていた（残念ながら今の職場はリモートはNG）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ksss9.hatenablog.com/entry/2015/12/20/144329&quot;&gt;子育てしながらリモートで働いた半年間 - スペクトラム&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ということで仕事・開発はほどほどに家庭をしっかり優先しつつ、2017年もボチボチやっていこうと思います :innocent:&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="雑記" /><summary type="html">なんか昨年末にいくつかの振り返りエントリを見て自分も書くかと思い立ったので書いてみる。</summary></entry><entry><title type="html">boot.fm Podcast に出演しました</title><link href="http://blog.toshimaru.net/bootfm-podcast/" rel="alternate" type="text/html" title="boot.fm Podcast に出演しました" /><published>2016-12-29T00:00:00+09:00</published><updated>2016-12-29T00:00:00+09:00</updated><id>http://blog.toshimaru.net/bootfm-podcast</id><content type="html" xml:base="http://blog.toshimaru.net/bootfm-podcast/">&lt;p&gt;ちょっと前だが今月&lt;a href=&quot;https://bootfm.github.io/&quot;&gt;boot.fm&lt;/a&gt;というTech系Podcastに出演した。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;最近流行りのTechポッドキャストに出演しました。分報、フロントエンド技術とどう付き合うか、コードレビュー、mrubyあたりを話してます | Vol.4: Code review as a prior investment &lt;a href=&quot;https://t.co/FjRE8HQa4E&quot;&gt;https://t.co/FjRE8HQa4E&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/809544891696939009&quot;&gt;December 15, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;そのフォローアップや話しきれなかったことなど書いてみます。&lt;/p&gt;

&lt;h2 id=&quot;slack分報タスク管理について&quot;&gt;Slack分報・タスク管理について&lt;/h2&gt;

&lt;p&gt;分報の元ネタ: &lt;a href=&quot;http://c16e.com/1511101558/&quot;&gt;Slackで簡単に「日報」ならぬ「分報」をチームで実現する3ステップ〜Problemが10分で解決するチャットを作ろう | Craftsman Software Inc.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;僕が思う分報の良い点&quot;&gt;僕が思う分報の良い点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;日報より情報発信の敷居がずっと低い
    &lt;ul&gt;
      &lt;li&gt;多分一番分かりやすい喩えは &lt;strong&gt;社内Twitter&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;カジュアルなコミュニケーションができる
    &lt;ul&gt;
      &lt;li&gt;ハマっていることとかさらっと書いたら誰かが助け舟を出してくれたり&lt;/li&gt;
      &lt;li&gt;ゆるーい雑談とかも&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;リアルタイムなコミュニケーションができる
    &lt;ul&gt;
      &lt;li&gt;Podcast内で紹介した&lt;a href=&quot;https://toshi.slack.com/apps/A0HBTUUPK--todo&quot;&gt;/todo&lt;/a&gt;みたいなSlackインテグレーションアプリと組み合わせることによって、リアルタイムにタスクのWIP/DONEを関係者に共有できる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基本的に僕は日報を書いていきたいと思っているのだけど、日報真面目に書いているとけっこう時間がかかってしまう。最初は乗り気しなかったけどとりあえずやってみるかと始めた分報だが、日報ハードル高すぎ問題を感じていた僕には丁度良くハマった。&lt;/p&gt;

&lt;p&gt;情報発信の対象となる受け手も限られていて、些細なこともカジュアルに書きやすいし読み手を過剰に意識することも少ない。&lt;/p&gt;

&lt;h3 id=&quot;僕が思う分報の悪い点&quot;&gt;僕が思う分報の悪い点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Slackチャンネル多くなる
    &lt;ul&gt;
      &lt;li&gt;1チャンネル/user なので人数分チャンネルできる&lt;/li&gt;
      &lt;li&gt;JOINしすぎると間違いなくノイズになるのでMuteなり加入チャンネル選ぶなりで凌ぐ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;知性のない発言が多くなる（かもしれない）
    &lt;ul&gt;
      &lt;li&gt;そういうのも含めて社内Twitterでありカジュアルなコミュニケーションなんだからまぁ良い点ともいえる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;その他slackで便利そうなやつ&quot;&gt;その他Slackで便利そうなやつ&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://toshi.slack.com/apps/category/At0G5YTKU2-analytics&quot;&gt;便利な Slack Integration App&lt;/a&gt; 使ってKPIとか流してみる&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/masuidrive/miyamoto&quot;&gt;masuidrive/miyamoto&lt;/a&gt; でSlack勤怠管理してみるとか&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hubot.github.com/&quot;&gt;HUBOT&lt;/a&gt;みたいなChatbotを棲ませて自動化実現したり便利機能を提供したりとか&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;便利な Slack Integration App もどんどん増えているのでそういうのはどんどん導入していくと良いと思う。&lt;/p&gt;

&lt;p&gt;Chatbot系はアイディア勝負。便利な使い方あればどんどん紹介してほしいと思う。&lt;/p&gt;

&lt;h2 id=&quot;フロントエンド-vs-バックエンド&quot;&gt;フロントエンド vs バックエンド&lt;/h2&gt;

&lt;p&gt;僕が最近React書いてて感じている「Railsやりつつフロントエンドのキャッチアップはしきれないし〜自分の書いているコードに自信を持ていないし〜けっこう妥協しちゃってるんですよ〜」という悩み相談みたいな感じになってしまったかもしれない。&lt;/p&gt;

&lt;p&gt;お二人ともPodcast内で話したが、結論としては至極まっとうで、プロトタイピングやそもそもJavaScriptヘビーにSPAを作る必要がないのであれば無理してJS書くことないし、Railsのレールに乗っかってけばいいじゃんという感じ。&lt;/p&gt;

&lt;p&gt;SPAにすることがプロダクトの価値として高くなるのであればReactなりAngularなり導入に踏み切ればいいじゃん、という感じ。ただそうなってくるとどうしてもRailsのレールから外れて開発を進めていく必要があり、レールを外れる勇気と覚悟が必要でウッ…となる。&lt;/p&gt;

&lt;p&gt;とここまで書いてアレですが、Podcast収録した時点ではリリースされていなかった&lt;a href=&quot;https://github.com/rails/webpacker&quot;&gt;rails/webpacker&lt;/a&gt;が現在出てきており、とうとうRailsにもyarn、webpackへの世界へのレールが開かれようとしております。そしてwebpackerの仕組みに乗っかってReactがinstallできるような仕組みも用意されつつある。&lt;/p&gt;

&lt;p&gt;そういう流れが整備されていけば多少僕が今抱えている不安感も和らぐだろうと思いました。&lt;/p&gt;

&lt;h2 id=&quot;コードレビューについて&quot;&gt;コードレビューについて&lt;/h2&gt;

&lt;p&gt;けっこう自分が今コードレビューに時間をかけているので、コードレビュー質的・時間的にどれくらいやるもんなんって話。&lt;/p&gt;

&lt;p&gt;コスト、というとコストかけたくないでござる！みたいなことを暗に思っているのではと思われてしまうかもしれないが、そうではない。基本的にレビューにはコストをかけるべきだし、短期的には時間がかかろうともそれは中長期的にチームの生産性向上につながると思ってる。つまりコードレビューに時間をかけるということはチームへの投資であるということ。&lt;/p&gt;

&lt;p&gt;そのコードレビューをどう効率的に回していくかという話もできればよかったけどそれはまた別の機会に。まぁ基本的に丁寧なコードレビューをしようと思うとやっぱり時間はかかる。&lt;/p&gt;

&lt;h2 id=&quot;mruby&quot;&gt;mruby&lt;/h2&gt;

&lt;p&gt;mrubyワンチャンある？って話。得られた知見はこうだ。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rubyのシンタックスはmrubyでもだいぶ動く&lt;/li&gt;
  &lt;li&gt;mrubygem エコシステムはまだまだ未成熟&lt;/li&gt;
  &lt;li&gt;Cを書く覚悟が必要（mrubygemないときにCを書く場面がある）&lt;/li&gt;
  &lt;li&gt;信頼できない mrubygem だとたまに環境がぶっ壊れることある&lt;/li&gt;
  &lt;li&gt;デバッグは(現在のところ)printデバッグ&lt;/li&gt;
  &lt;li&gt;パフォーマンスが求められる場面だとmrubyよりはgolangが良い&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考リンク&quot;&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://bootfm.github.io/&quot;&gt;boot.fm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://roppongirb.connpass.com/event/42633/&quot;&gt;Roppongi.rb #2 “Infrastructure x Ruby” - connpass&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://seleck.cc/822&quot;&gt;リモートワークは敢えて取り入れない。Gunosyデータ分析部「情報共有」の仕組みとは | SELECK&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/k0kubun/mitamae&quot;&gt;k0kubun/mitamae: Configuration management tool embedding mruby, which is alternative implementation of Itamae&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/k0kubun/items/3995d3b730b63ef67c56&quot;&gt;Rubyを評価するCLIツールはCRubyとmrubyのどちらで実装するべきか - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="podcast" /><category term="tech" /><summary type="html">ちょっと前だが今月boot.fmというTech系Podcastに出演した。</summary></entry></feed>