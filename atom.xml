<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Hack Your Design!]]></title>
  <link href="http://blog.toshimaru.net/atom.xml" rel="self"/>
  <link href="http://blog.toshimaru.net/"/>
  <updated>2015-03-23T18:44:48+00:00</updated>
  <id>http://blog.toshimaru.net/</id>
  <author>
    <name><![CDATA[Toshimaru]]></name>
  </author>

  
  <entry>
    <title type="html"><![CDATA[jQueryイベントデリゲーションを利用して遅延取得されるDOMにイベントをアタッチする]]></title>
    <link href="http://blog.toshimaru.net/jquery-event-delegation/"/>
    <updated>2015-03-24T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/jquery-event-delegation</id>
    <content type="html"><![CDATA[<p>jQueryイベントデリゲーションをコードとともにおさらい。</p>

<h2 id="no-event-delegation">No Event Delegation</h2>

<p>デリゲーションしないパターン。何が問題なのか。</p>

<p>まずは「default item」をクリックする。「clicked!」になったね。「Add List」する。もう一度クリック。「clicked!」になってほしい。あれ、何も起こらないね？</p>

<p data-height="268" data-theme-id="0" data-slug-hash="MYLYxq" data-default-tab="result" data-user="toshimaru" class="codepen">See the Pen <a href="http://codepen.io/toshimaru/pen/MYLYxq/">No `.on` selector </a> by toshi (<a href="http://codepen.io/toshimaru">@toshimaru</a>) on <a href="http://codepen.io">CodePen</a>.</p>
<script async="" src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>なぜならjQueryのセレクタ<code>$("#list li")</code>では、初期のDOMにしかイベントがアタッチされないから。後から追加されるDOMに対してはイベントアタッチはされない。</p>

<h2 id="use-event-delegation">Use Event Delegation</h2>

<p>イベントデリゲーションするバターン。こちらではどうでしょう？</p>

<p data-height="259" data-theme-id="0" data-slug-hash="dPaPEY" data-default-tab="result" data-user="toshimaru" class="codepen">See the Pen <a href="http://codepen.io/toshimaru/pen/dPaPEY/">Use `.on` selector</a> by toshi (<a href="http://codepen.io/toshimaru">@toshimaru</a>) on <a href="http://codepen.io">CodePen</a>.</p>
<script async="" src="//assets.codepen.io/assets/embed/ei.js"></script>

<p><code>.on</code>の第二引数としてセレクタを渡すことで、しっかり<code>$("#list")</code>のタグ<code>li</code>全てにイベントがデリゲートされていますね。 <img class="emoji" title=":on:" alt=":on:" src="https://assets.github.com/images/icons/emoji/unicode/1f51b.png" height="20" width="20" align="absmiddle" /></p>

<h3 id="section">参考</h3>
<ul>
  <li><a href="https://learn.jquery.com/events/event-delegation/">Understanding Event Delegation | jQuery Learning Center</a></li>
  <li><a href="https://api.jquery.com/on/">.on() | jQuery API Documentation</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[カバレッジ率計測サービスをCoverallsからCodeClimateに乗り換えてみた話]]></title>
    <link href="http://blog.toshimaru.net/coverage-with-codeclimate/"/>
    <updated>2015-03-18T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/coverage-with-codeclimate</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/toshimaru/Rails-4-Twitter-Clone">趣味で立ち上げているプロジェクト</a>をこの度、CoverallsからCodeClimateに乗り換えてみたので、その知見の共有。</p>

<h2 id="sass">どんなSasSを使うか</h2>

<p>自分がRails(ruby)プロジェクト(not private)をGithubに公開するとき、必ず使うSaaS群があって、例えばCIサービスであったりカバレッジ率の計測であったりコードの品質の計測であったりする。それをまとめると下記のようになる。</p>

<table>
  <thead>
    <tr>
      <th>サービス</th>
      <th>用途</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="https://travis-ci.org/repositories">Travis CI</a></td>
      <td>CI回す</td>
    </tr>
    <tr>
      <td><a href="https://coveralls.io/">Coveralls</a></td>
      <td>カバレッジ率を計測</td>
    </tr>
    <tr>
      <td><a href="https://codeclimate.com/">Code Climate</a></td>
      <td>コード品質を計測</td>
    </tr>
    <tr>
      <td><a href="https://gemnasium.com/dashboard">Gemnasium</a></td>
      <td>Gemのバージョンチェック</td>
    </tr>
  </tbody>
</table>

<p><strong>※ Publicなレポジトリであれば全て無料で使えます</strong></p>

<p><img src="https://cloud.githubusercontent.com/assets/803398/6694382/558b6f5c-cd1d-11e4-96ff-1e67d5905e83.png" alt="badges" /></p>

<p><strong>【図】SaaSの利用により表示できるようになるバッジ群</strong></p>

<h2 id="coveralls--codeclimate">Coveralls → CodeClimate</h2>

<p>今回その内の１つであるCoverallsをCodeClimateに移行してみたのですが、そのきっかけとしてはCircleCIでCodeClimateとのインテグレーションが推奨されていたから。</p>

<p><a href="http://docs.travis-ci.com/user/code-climate/">Travis CI: Using Code Climate with Travis CI</a></p>

<p>コード品質とカバレッジ率は分散するよりも１つのサービスに集約されて閲覧できたほうが都合がよいしTravis CIのすすめるCodeClimateに統合してみることとした。</p>

<h2 id="section">手順</h2>

<h3 id="set-code-climate-token">Set Code Climate token</h3>

<p>CodeClimateのSettingsからテスト実行時のTokenがゲットできるのでそれを<code>.travis.yml</code>にセット。</p>

<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="l-Scalar-Plain">addons</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">code_climate</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">repo_token</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">adf08323...</span></code></pre></div>

<h3 id="intall-codeclimate-reporter">Intall CodeClimate reporter</h3>

<p>codeclimate-test-reporter を<code>Gemfile</code>のtest groupに追加する。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">gem</span> <span class="s2">&quot;codeclimate-test-reporter&quot;</span><span class="p">,</span> <span class="nb">require</span><span class="p">:</span> <span class="kp">false</span></code></pre></div>

<p>CodeClimateのセットアップインストラクション通りに書くとこう。<code>spec/rails_helper.rb</code>に書きます。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s2">&quot;codeclimate-test-reporter&quot;</span>
<span class="no">CodeClimate</span><span class="o">::</span><span class="no">TestReporter</span><span class="o">.</span><span class="n">start</span></code></pre></div>

<h3 id="simplecov">Simplecovと同居させる</h3>

<p>私の環境の場合、既にSimplecovが入っておりましたので、simplecovとインテグレーションさせる場合はちょっと異なるセットアップが必要になります。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">&#39;simplecov&#39;</span>
<span class="nb">require</span> <span class="s2">&quot;codeclimate-test-reporter&quot;</span>
<span class="no">SimpleCov</span><span class="o">.</span><span class="n">formatter</span> <span class="o">=</span> <span class="no">SimpleCov</span><span class="o">::</span><span class="no">Formatter</span><span class="o">::</span><span class="no">MultiFormatter</span><span class="o">[</span>
  <span class="no">SimpleCov</span><span class="o">::</span><span class="no">Formatter</span><span class="o">::</span><span class="no">HTMLFormatter</span><span class="p">,</span>
  <span class="no">CodeClimate</span><span class="o">::</span><span class="no">TestReporter</span><span class="o">::</span><span class="no">Formatter</span>
<span class="o">]</span>
<span class="no">SimpleCov</span><span class="o">.</span><span class="n">start</span> <span class="s2">&quot;rails&quot;</span></code></pre></div>

<p>このようにSimpleCovのformatterに<code>CodeClimate::TestReporter::Formatter</code>を入れてやれば <img class="emoji" title=":ok:" alt=":ok:" src="https://assets.github.com/images/icons/emoji/unicode/1f197.png" height="20" width="20" align="absmiddle" /></p>

<p><img src="https://cloud.githubusercontent.com/assets/803398/6694285/ad01584c-cd1c-11e4-9f29-1589821188da.png" alt="codeclimate" /></p>

<p>これでCode Climate上で品質・カバレッジ率が閲覧できるようになりました。</p>

<h3 id="section-1">参考</h3>
<p><a href="https://coderwall.com/p/vwhuqq/using-code-climate-s-new-test-reporter-together-with-coveralls-and-simplecov-s-html-formatter">Using Code Climate’s new test reporter together with Coveralls and SimpleCov’s HTML Formatter</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby vs Golang でパフォーマンス比較してみた]]></title>
    <link href="http://blog.toshimaru.net/ruby-vs-go/"/>
    <updated>2015-03-05T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/ruby-vs-go</id>
    <content type="html"><![CDATA[<p>Rubyで書いたコードがGoで書いたらどれくらい早くなるかを検証してみたくて試してみた。画像ファイルをダウンロードするだけの単純な処理での比較。（複雑な処理になるとまた全然違ってくると思います）</p>

<h2 id="ruby">Rubyの場合</h2>

<p>イメージを100個ダウンロードするコードをサンプルにやってみました。</p>

<h3 id="section">直列にダウンロード</h3>

<p>何も考えず１つ１つダウンロードするコード。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>

<span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">100</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
  <span class="nb">open</span><span class="p">(</span><span class="s2">&quot;./images/</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">.png&quot;</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
   <span class="n">f</span><span class="o">.</span><span class="n">write</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&quot;http://dummyimage.com/600x400&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></div>

<pre><code>$ time ruby no_thread.rb
ruby no_thread.rb  0.25s user 0.10s system 1% cpu 29.813 total
</code></pre>

<p>約30秒。遅い。そしてCPUコストは低い。</p>

<h3 id="thread">Threadで並行ダウンロード</h3>

<p>Thread使って平行に処理してみる。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>

<span class="n">thr</span> <span class="o">=</span> <span class="o">[]</span>
<span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">100</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
  <span class="n">thr</span> <span class="o">&lt;&lt;</span> <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
    <span class="nb">open</span><span class="p">(</span><span class="s2">&quot;./images/</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">.png&quot;</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
      <span class="n">f</span><span class="o">.</span><span class="n">write</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&quot;http://dummyimage.com/600x400&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
<span class="n">thr</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:join</span><span class="p">)</span></code></pre></div>

<pre><code>$ time ruby thread.rb
ruby thread.rb  0.20s user 0.10s system 27% cpu 1.105 total
</code></pre>

<p>1.1秒。劇的な改善。CPUは30％くらい使ってる。</p>

<h2 id="go">Goの場合</h2>

<p>Goで書きなおしてみる。</p>

<p><a href="http://qiita.com/keisukeP/items/f4d680eb9e8f93263fa9">こちら</a>を参考に書いてみた。</p>

<div class="highlight"><pre><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&quot;fmt&quot;</span>
	<span class="s">&quot;io&quot;</span>
	<span class="s">&quot;net/http&quot;</span>
	<span class="s">&quot;os&quot;</span>
	<span class="s">&quot;sync&quot;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">wg</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>

	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">100</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">wg</span><span class="p">.</span><span class="nx">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
		<span class="kd">var</span> <span class="nx">url</span> <span class="kt">string</span> <span class="p">=</span> <span class="s">&quot;http://dummyimage.com/600x400&quot;</span>

		<span class="c1">//ファイルを開く</span>
		<span class="nx">file</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Create</span><span class="p">(</span><span class="s">&quot;images/&quot;</span> <span class="o">+</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Sprint</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;.png&quot;</span><span class="p">)</span>
		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
			<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
		<span class="p">}</span>

		<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
			<span class="nx">response</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Get</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span>
			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
				<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
			<span class="p">}</span>
			<span class="c1">//レスポンスのボディを閉じる関数の遅延実行指定</span>
			<span class="k">defer</span> <span class="nx">response</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>

			<span class="c1">//fmt.Println(&quot;status:&quot;, response.Status)</span>

			<span class="c1">//ファイルを閉じる関数の遅延実行指定</span>
			<span class="k">defer</span> <span class="nx">file</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>

			<span class="c1">//レスポンスのボディから読み込みつつファイルに書き出す。</span>
			<span class="nx">io</span><span class="p">.</span><span class="nx">Copy</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">response</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
			<span class="nx">wg</span><span class="p">.</span><span class="nx">Done</span><span class="p">()</span>
		<span class="p">}()</span>
	<span class="p">}</span>

	<span class="nx">wg</span><span class="p">.</span><span class="nx">Wait</span><span class="p">()</span>
<span class="p">}</span></code></pre></div>

<h3 id="go-run-">Go run で実行</h3>

<p>コンパイルせずに<code>go run</code>で実行してみる。</p>

<pre><code>$ time go run thread.go
go run thread.go  0.50s user 0.21s system 50% cpu 1.413 total
</code></pre>

<h3 id="go-build-img-classemoji-titlearrowright-altarrowright-srchttpsassetsgithubcomimagesiconsemojiunicode27a1png-height20-width20-alignabsmiddle--run">Go build <img class="emoji" title=":arrow_right:" alt=":arrow_right:" src="https://assets.github.com/images/icons/emoji/unicode/27a1.png" height="20" width="20" align="absmiddle" /> Run</h3>

<p>buildして実行する。Rubyで書いたコードの3/4の時間で完了した。</p>

<pre><code>$ go build thread.go
$ time ./thread
./thread  0.06s user 0.07s system 16% cpu 0.789 total
</code></pre>

<p>たぶん比較するロジックが複雑化すればするほど、Goのパフォーマンスの良さがガッツリ効いてきそう。</p>

<p>CPUコストがRubyより半分程度に済んでいるところもナイス。</p>

<hr />

<h3 id="shell-script-">【番外編】Shell Script で実行</h3>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="k">for</span> i in <span class="sb">`</span>seq <span class="m">1</span> 100<span class="sb">`</span><span class="p">;</span> <span class="k">do</span>
  wget --background --quiet <span class="s2">&quot;http://dummyimage.com/600x400&quot;</span> -O images/<span class="nv">$i</span>.png &gt; /dev/null
<span class="k">done</span></code></pre></div>

<pre><code>$ time bash bash_script.bash
bash bash_script.bash  0.15s user 0.24s system 72% cpu 0.547 total
</code></pre>

<p>はやい。 <img class="emoji" title=":astonished:" alt=":astonished:" src="https://assets.github.com/images/icons/emoji/unicode/1f632.png" height="20" width="20" align="absmiddle" /></p>

<p>CPUは超使ってる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecordのコールバックの順番・コールバック内のロールバック処理]]></title>
    <link href="http://blog.toshimaru.net/active-record-callbacks/"/>
    <updated>2015-03-01T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/active-record-callbacks</id>
    <content type="html"><![CDATA[<p>ActiveRecordのコールバックが実行される順番、およびそれらのタイミングでのロールバックするためのやり方をまとめてみました。</p>

<h2 id="callback-timing">Callback Timing</h2>

<p>まずは順番について。このようなオーダーです。</p>

<ul>
  <li>(-) save</li>
  <li>(-) valid</li>
  <li>(1) before_validation</li>
  <li>(-) validate</li>
  <li>(2) after_validation</li>
  <li>(3) before_save</li>
  <li>(4) before_create</li>
  <li>(-) create</li>
  <li>(5) after_create</li>
  <li>(6) after_save</li>
  <li>(7) after_commit</li>
</ul>

<h2 id="section">試してみる</h2>

<p>それぞれのコールバックをコードで試してみる。こんなコールバックを設定したUserモデルを作る。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">before_validation</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;before_validation is called&quot;</span> <span class="p">}</span>
  <span class="n">after_validation</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;after_validation is called&quot;</span> <span class="p">}</span>
  <span class="n">before_save</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;before_save is called&quot;</span> <span class="p">}</span>
  <span class="n">before_create</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;before_create is called&quot;</span> <span class="p">}</span>
  <span class="n">after_create</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;after_create is called&quot;</span> <span class="p">}</span>
  <span class="n">after_save</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;after_save is called&quot;</span> <span class="p">}</span>
  <span class="n">after_commit</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;after_commit is called&quot;</span> <span class="p">}</span>
<span class="k">end</span></code></pre></div>

<h3 id="section-1">新規レコード作成時</h3>

<p>こいつをsaveしてみる。</p>

<pre><code>&gt; User.new.save
   (0.1ms)  begin transaction
before_validation is called
after_validation is called
before_save is called
before_create is called
  SQL (0.6ms)  INSERT INTO "users" ("created_at", "updated_at") VALUES (?, ?)  [["created_at", "2015-02-28 15:53:53.000058"], ["updated_at", "2015-02-28 15:53:53.000058"]]
after_create is called
after_save is called
   (485.3ms)  commit transaction
after_commit is called
 =&gt; true
</code></pre>

<p>コールバックのタイミングとクエリの走るタイミングが可視化された。</p>

<h3 id="section-2">レコード更新時</h3>

<p>updateの場合はこんな感じ。</p>

<pre><code> &gt; user.update(name: "hoge")
    (0.1ms)  begin transaction
 before_validation is called
 after_validation is called
 before_save is called
   SQL (0.4ms)  UPDATE "users" SET "name" = ?, "updated_at" = ? WHERE "users"."id" = ?  [["name", "hoge"], ["updated_at", "2015-02-28 15:58:37.577661"], ["id", 6]]
 after_save is called
    (0.8ms)  commit transaction
 after_commit is called
  =&gt; true
</code></pre>

<p>更新なので <code>before_create</code> <code>after_create</code> は呼ばれない。</p>

<h2 id="saveupdate">save,updateはトランザクション内で実行される</h2>

<p><a href="http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html">ドキュメント</a>にはこう書いてある</p>

<blockquote>
  <p>The entire callback chain of a save, save!, or destroy call runs within a transaction. That includes after_* hooks. If everything goes fine a COMMIT is executed once the chain has been completed.</p>
</blockquote>

<p><code>save</code>, <code>save!</code>, <code>destroy</code>のコールバック群はトランザクション内で処理されますよ、と。</p>

<h2 id="section-3">特定のコールバックのタイミングで処理をロールバックさせたい</h2>

<p>ではそれらのコールバックでのタイミングでトランザクションをロールバックすることも可能。どうやれば良いのか調べてみた。</p>

<h3 id="before-">before_* のタイミングでロールバック</h3>

<p><code>before_*</code>のタイミングで false を返すと処理はロールバックされる。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">before_validation</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;before_validation is called&quot;</span> <span class="p">}</span>
  <span class="n">after_validation</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;after_validation is called&quot;</span> <span class="p">}</span>
  <span class="n">before_save</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;before_save is called&quot;</span><span class="p">;</span> <span class="kp">false</span> <span class="p">}</span>
  <span class="n">before_create</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;before_create is called&quot;</span> <span class="p">}</span>
  <span class="n">after_create</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;after_create is called&quot;</span> <span class="p">}</span>
  <span class="n">after_save</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;after_save is called&quot;</span> <span class="p">}</span>
  <span class="n">after_commit</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;after_commit is called&quot;</span> <span class="p">}</span>
<span class="k">end</span></code></pre></div>

<pre><code>&gt; User.new.save
(0.1ms)  begin transaction
before_validation is called
after_validation is called
before_save is called
(0.1ms)  rollback transaction
=&gt; false
</code></pre>

<p>しかし<code>after_*</code>で false を返しても処理はロールバックされないようだ。</p>

<h3 id="after-">after_* のタイミングでロールバック</h3>

<p>after_* のタイミングでロールバックしたい場合は、明示的にRollbackをraiseしてやれば <img class="emoji" title=":ok:" alt=":ok:" src="https://assets.github.com/images/icons/emoji/unicode/1f197.png" height="20" width="20" align="absmiddle" /></p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">before_validation</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;before_validation is called&quot;</span> <span class="p">}</span>
  <span class="n">after_validation</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;after_validation is called&quot;</span> <span class="p">}</span>
  <span class="n">before_save</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;before_save is called&quot;</span> <span class="p">}</span>
  <span class="n">before_create</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;before_create is called&quot;</span> <span class="p">}</span>
  <span class="n">after_create</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;after_create is called&quot;</span> <span class="p">}</span>
  <span class="n">after_save</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;after_save is called&quot;</span><span class="p">;</span> <span class="k">raise</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Rollback</span> <span class="p">}</span>
  <span class="n">after_commit</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;after_commit is called&quot;</span> <span class="p">}</span>
<span class="k">end</span></code></pre></div>

<pre><code>&gt; User.new.save
   (0.1ms)  begin transaction
before_validation is called
after_validation is called
before_save is called
before_create is called
  SQL (0.4ms)  INSERT INTO "users" ("created_at", "updated_at") VALUES (?, ?)  [["created_at", "2015-02-28 16:49:35.344885"], ["updated_at", "2015-02-28 16:49:35.344885"]]
after_create is called
after_save is called
   (2.4ms)  rollback transaction
 =&gt; nil
</code></pre>

<p>update も同様にこれでRollbackできます。</p>

<h3 id="section-4">参考</h3>
<ul>
  <li><a href="http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html">ActiveRecord::Callbacks</a></li>
  <li><a href="http://www.techscore.com/blog/2012/12/25/rails%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%AB%E3%83%90%E3%83%83%E3%82%AF%E3%81%BE%E3%81%A8%E3%82%81/">» Railsのコールバックまとめ TECHSCORE BLOG</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsのHTTPステータスのシンボル表現まとめ]]></title>
    <link href="http://blog.toshimaru.net/rails-http-status-symbols/"/>
    <updated>2015-01-31T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/rails-http-status-symbols</id>
    <content type="html"><![CDATA[<p>よく忘れるのでメモ。</p>

<table>
  <thead>
    <tr>
      <th>Response Class</th>
      <th>HTTP Status Code</th>
      <th>Symbol</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Informational</strong></td>
      <td>100</td>
      <td><code>:continue</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>101</td>
      <td><code>:switching_protocols</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>102</td>
      <td><code>:processing</code></td>
    </tr>
    <tr>
      <td><strong>Success</strong></td>
      <td>200</td>
      <td><code>:ok</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>201</td>
      <td><code>:created</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>202</td>
      <td><code>:accepted</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>203</td>
      <td><code>:non_authoritative_information</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>204</td>
      <td><code>:no_content</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>205</td>
      <td><code>:reset_content</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>206</td>
      <td><code>:partial_content</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>207</td>
      <td><code>:multi_status</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>208</td>
      <td><code>:already_reported</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>226</td>
      <td><code>:im_used</code></td>
    </tr>
    <tr>
      <td><strong>Redirection</strong></td>
      <td>300</td>
      <td><code>:multiple_choices</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>301</td>
      <td><code>:moved_permanently</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>302</td>
      <td><code>:found</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>303</td>
      <td><code>:see_other</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>304</td>
      <td><code>:not_modified</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>305</td>
      <td><code>:use_proxy</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>306</td>
      <td><code>:reserved</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>307</td>
      <td><code>:temporary_redirect</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>308</td>
      <td><code>:permanent_redirect</code></td>
    </tr>
    <tr>
      <td><strong>Client Error</strong></td>
      <td>400</td>
      <td><code>:bad_request</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>401</td>
      <td><code>:unauthorized</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>402</td>
      <td><code>:payment_required</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>403</td>
      <td><code>:forbidden</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>404</td>
      <td><code>:not_found</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>405</td>
      <td><code>:method_not_allowed</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>406</td>
      <td><code>:not_acceptable</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>407</td>
      <td><code>:proxy_authentication_required</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>408</td>
      <td><code>:request_timeout</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>409</td>
      <td><code>:conflict</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>410</td>
      <td><code>:gone</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>411</td>
      <td><code>:length_required</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>412</td>
      <td><code>:precondition_failed</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>413</td>
      <td><code>:request_entity_too_large</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>414</td>
      <td><code>:request_uri_too_long</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>415</td>
      <td><code>:unsupported_media_type</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>416</td>
      <td><code>:requested_range_not_satisfiable</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>417</td>
      <td><code>:expectation_failed</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>422</td>
      <td><code>:unprocessable_entity</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>423</td>
      <td><code>:locked</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>424</td>
      <td><code>:failed_dependency</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>426</td>
      <td><code>:upgrade_required</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>428</td>
      <td><code>:precondition_required</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>429</td>
      <td><code>:too_many_requests</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>431</td>
      <td><code>:request_header_fields_too_large</code></td>
    </tr>
    <tr>
      <td><strong>Server Error</strong></td>
      <td>500</td>
      <td><code>:internal_server_error</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>501</td>
      <td><code>:not_implemented</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>502</td>
      <td><code>:bad_gateway</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>503</td>
      <td><code>:service_unavailable</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>504</td>
      <td><code>:gateway_timeout</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>505</td>
      <td><code>:http_version_not_supported</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>506</td>
      <td><code>:variant_also_negotiates</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>507</td>
      <td><code>:insufficient_storage</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>508</td>
      <td><code>:loop_detected</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>510</td>
      <td><code>:not_extended</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>511</td>
      <td><code>:network_authentication_required</code></td>
    </tr>
  </tbody>
</table>

<p>ちなみにこれのRuby元コードはどこにあるかというと<a href="https://github.com/rack/rack">rack/rack</a>の<code>/lib/rack/utils.rb</code>にあります。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">HTTP_STATUS_CODES</span> <span class="o">=</span> <span class="p">{</span>
  <span class="mi">100</span> <span class="o">=&gt;</span> <span class="s1">&#39;Continue&#39;</span><span class="p">,</span>
  <span class="mi">101</span> <span class="o">=&gt;</span> <span class="s1">&#39;Switching Protocols&#39;</span><span class="p">,</span>
  <span class="mi">102</span> <span class="o">=&gt;</span> <span class="s1">&#39;Processing&#39;</span><span class="p">,</span>
  <span class="mi">200</span> <span class="o">=&gt;</span> <span class="s1">&#39;OK&#39;</span><span class="p">,</span>
  <span class="mi">201</span> <span class="o">=&gt;</span> <span class="s1">&#39;Created&#39;</span><span class="p">,</span>
  <span class="mi">202</span> <span class="o">=&gt;</span> <span class="s1">&#39;Accepted&#39;</span><span class="p">,</span>
  <span class="mi">203</span> <span class="o">=&gt;</span> <span class="s1">&#39;Non-Authoritative Information&#39;</span><span class="p">,</span>
  <span class="mi">204</span> <span class="o">=&gt;</span> <span class="s1">&#39;No Content&#39;</span><span class="p">,</span>
  <span class="mi">205</span> <span class="o">=&gt;</span> <span class="s1">&#39;Reset Content&#39;</span><span class="p">,</span>
  <span class="mi">206</span> <span class="o">=&gt;</span> <span class="s1">&#39;Partial Content&#39;</span><span class="p">,</span>
  <span class="mi">207</span> <span class="o">=&gt;</span> <span class="s1">&#39;Multi-Status&#39;</span><span class="p">,</span>
  <span class="mi">208</span> <span class="o">=&gt;</span> <span class="s1">&#39;Already Reported&#39;</span><span class="p">,</span>
  <span class="mi">226</span> <span class="o">=&gt;</span> <span class="s1">&#39;IM Used&#39;</span><span class="p">,</span>
  <span class="mi">300</span> <span class="o">=&gt;</span> <span class="s1">&#39;Multiple Choices&#39;</span><span class="p">,</span>
  <span class="mi">301</span> <span class="o">=&gt;</span> <span class="s1">&#39;Moved Permanently&#39;</span><span class="p">,</span>
  <span class="mi">302</span> <span class="o">=&gt;</span> <span class="s1">&#39;Found&#39;</span><span class="p">,</span>
  <span class="mi">303</span> <span class="o">=&gt;</span> <span class="s1">&#39;See Other&#39;</span><span class="p">,</span>
  <span class="mi">304</span> <span class="o">=&gt;</span> <span class="s1">&#39;Not Modified&#39;</span><span class="p">,</span>
  <span class="mi">305</span> <span class="o">=&gt;</span> <span class="s1">&#39;Use Proxy&#39;</span><span class="p">,</span>
  <span class="mi">307</span> <span class="o">=&gt;</span> <span class="s1">&#39;Temporary Redirect&#39;</span><span class="p">,</span>
  <span class="mi">308</span> <span class="o">=&gt;</span> <span class="s1">&#39;Permanent Redirect&#39;</span><span class="p">,</span>
  <span class="mi">400</span> <span class="o">=&gt;</span> <span class="s1">&#39;Bad Request&#39;</span><span class="p">,</span>
  <span class="mi">401</span> <span class="o">=&gt;</span> <span class="s1">&#39;Unauthorized&#39;</span><span class="p">,</span>
  <span class="mi">402</span> <span class="o">=&gt;</span> <span class="s1">&#39;Payment Required&#39;</span><span class="p">,</span>
  <span class="mi">403</span> <span class="o">=&gt;</span> <span class="s1">&#39;Forbidden&#39;</span><span class="p">,</span>
  <span class="mi">404</span> <span class="o">=&gt;</span> <span class="s1">&#39;Not Found&#39;</span><span class="p">,</span>
  <span class="mi">405</span> <span class="o">=&gt;</span> <span class="s1">&#39;Method Not Allowed&#39;</span><span class="p">,</span>
  <span class="mi">406</span> <span class="o">=&gt;</span> <span class="s1">&#39;Not Acceptable&#39;</span><span class="p">,</span>
  <span class="mi">407</span> <span class="o">=&gt;</span> <span class="s1">&#39;Proxy Authentication Required&#39;</span><span class="p">,</span>
  <span class="mi">408</span> <span class="o">=&gt;</span> <span class="s1">&#39;Request Timeout&#39;</span><span class="p">,</span>
  <span class="mi">409</span> <span class="o">=&gt;</span> <span class="s1">&#39;Conflict&#39;</span><span class="p">,</span>
  <span class="mi">410</span> <span class="o">=&gt;</span> <span class="s1">&#39;Gone&#39;</span><span class="p">,</span>
  <span class="mi">411</span> <span class="o">=&gt;</span> <span class="s1">&#39;Length Required&#39;</span><span class="p">,</span>
  <span class="mi">412</span> <span class="o">=&gt;</span> <span class="s1">&#39;Precondition Failed&#39;</span><span class="p">,</span>
  <span class="mi">413</span> <span class="o">=&gt;</span> <span class="s1">&#39;Payload Too Large&#39;</span><span class="p">,</span>
  <span class="mi">414</span> <span class="o">=&gt;</span> <span class="s1">&#39;URI Too Long&#39;</span><span class="p">,</span>
  <span class="mi">415</span> <span class="o">=&gt;</span> <span class="s1">&#39;Unsupported Media Type&#39;</span><span class="p">,</span>
  <span class="mi">416</span> <span class="o">=&gt;</span> <span class="s1">&#39;Range Not Satisfiable&#39;</span><span class="p">,</span>
  <span class="mi">417</span> <span class="o">=&gt;</span> <span class="s1">&#39;Expectation Failed&#39;</span><span class="p">,</span>
  <span class="mi">422</span> <span class="o">=&gt;</span> <span class="s1">&#39;Unprocessable Entity&#39;</span><span class="p">,</span>
  <span class="mi">423</span> <span class="o">=&gt;</span> <span class="s1">&#39;Locked&#39;</span><span class="p">,</span>
  <span class="mi">424</span> <span class="o">=&gt;</span> <span class="s1">&#39;Failed Dependency&#39;</span><span class="p">,</span>
  <span class="mi">426</span> <span class="o">=&gt;</span> <span class="s1">&#39;Upgrade Required&#39;</span><span class="p">,</span>
  <span class="mi">428</span> <span class="o">=&gt;</span> <span class="s1">&#39;Precondition Required&#39;</span><span class="p">,</span>
  <span class="mi">429</span> <span class="o">=&gt;</span> <span class="s1">&#39;Too Many Requests&#39;</span><span class="p">,</span>
  <span class="mi">431</span> <span class="o">=&gt;</span> <span class="s1">&#39;Request Header Fields Too Large&#39;</span><span class="p">,</span>
  <span class="mi">500</span> <span class="o">=&gt;</span> <span class="s1">&#39;Internal Server Error&#39;</span><span class="p">,</span>
  <span class="mi">501</span> <span class="o">=&gt;</span> <span class="s1">&#39;Not Implemented&#39;</span><span class="p">,</span>
  <span class="mi">502</span> <span class="o">=&gt;</span> <span class="s1">&#39;Bad Gateway&#39;</span><span class="p">,</span>
  <span class="mi">503</span> <span class="o">=&gt;</span> <span class="s1">&#39;Service Unavailable&#39;</span><span class="p">,</span>
  <span class="mi">504</span> <span class="o">=&gt;</span> <span class="s1">&#39;Gateway Timeout&#39;</span><span class="p">,</span>
  <span class="mi">505</span> <span class="o">=&gt;</span> <span class="s1">&#39;HTTP Version Not Supported&#39;</span><span class="p">,</span>
  <span class="mi">506</span> <span class="o">=&gt;</span> <span class="s1">&#39;Variant Also Negotiates&#39;</span><span class="p">,</span>
  <span class="mi">507</span> <span class="o">=&gt;</span> <span class="s1">&#39;Insufficient Storage&#39;</span><span class="p">,</span>
  <span class="mi">508</span> <span class="o">=&gt;</span> <span class="s1">&#39;Loop Detected&#39;</span><span class="p">,</span>
  <span class="mi">510</span> <span class="o">=&gt;</span> <span class="s1">&#39;Not Extended&#39;</span><span class="p">,</span>
  <span class="mi">511</span> <span class="o">=&gt;</span> <span class="s1">&#39;Network Authentication Required&#39;</span>
<span class="p">}</span></code></pre></div>

<p>これをシンボル化してるのが下記。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">SYMBOL_TO_STATUS_CODE</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">[*</span><span class="no">HTTP_STATUS_CODES</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">code</span><span class="p">,</span> <span class="n">message</span><span class="o">|</span>
  <span class="o">[</span><span class="n">message</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\s|-|&#39;/</span><span class="p">,</span> <span class="s1">&#39;_&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_sym</span><span class="p">,</span> <span class="n">code</span><span class="o">]</span>
<span class="p">}</span><span class="o">.</span><span class="n">flatten</span><span class="o">]</span></code></pre></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyで独自例外を定義するときはStandardErrorを継承する]]></title>
    <link href="http://blog.toshimaru.net/ruby-standard-error/"/>
    <updated>2015-01-21T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/ruby-standard-error</id>
    <content type="html"><![CDATA[<p>タイトルの通り、Rubyで独自例外を定義するときは<code>Exception</code>ではなく、<code>StandardError</code> を継承するしきたりとなっています。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># `Exception`ではなく</span>
<span class="k">class</span> <span class="nc">MyError1</span> <span class="o">&lt;</span> <span class="no">Exception</span><span class="p">;</span> <span class="k">end</span>
<span class="c1"># `StandardError`.</span>
<span class="k">class</span> <span class="nc">MyError2</span> <span class="o">&lt;</span> <span class="no">StandardError</span><span class="p">;</span> <span class="k">end</span></code></pre></div>

<p>理由をコードでみてみます。</p>

<h2 id="exception-">Exception を継承した場合</h2>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">MyError1</span> <span class="o">&lt;</span> <span class="no">Exception</span><span class="p">;</span> <span class="k">end</span>

<span class="k">begin</span>
  <span class="k">raise</span> <span class="no">MyError1</span>
<span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">e</span>
  <span class="nb">puts</span> <span class="s2">&quot;Exception handled! </span><span class="si">#{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="k">end</span>

<span class="c1"># =&gt; MyError1: MyError1</span></code></pre></div>

<p>MyError1 が<code>rescue</code>節でハンドリングされてませんね。こうしてみるとどうでしょう。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">MyError1</span> <span class="o">&lt;</span> <span class="no">Exception</span><span class="p">;</span> <span class="k">end</span>

<span class="k">begin</span>
  <span class="k">raise</span> <span class="no">MyError1</span>
<span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">e</span>
  <span class="nb">puts</span> <span class="s2">&quot;Exception handled! </span><span class="si">#{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="k">end</span>

<span class="c1"># =&gt; Exception handled! MyError1</span></code></pre></div>

<p>次は<code>rescue</code>節に入りました。</p>

<h2 id="standarderror-">StandardError を継承した場合</h2>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">MyError2</span> <span class="o">&lt;</span> <span class="no">StandardError</span><span class="p">;</span> <span class="k">end</span>

<span class="k">begin</span>
  <span class="k">raise</span> <span class="no">MyError2</span>
<span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">e</span>
  <span class="nb">puts</span> <span class="s2">&quot;Exception handled! </span><span class="si">#{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="k">end</span>

<span class="c1"># =&gt; Exception handled! MyError2</span></code></pre></div>

<p>こちらは問題なく<code>rescue</code>節でハンドルされました。</p>

<h2 id="section">なぜ？</h2>

<blockquote>
  <p>rescue は第1引数で指定した例外クラスの下の階層にある例外だけを補足するけど、引数を省略すると StandardErrorクラスを指定したものとみなすからだ。</p>
</blockquote>

<p>via. <a href="http://d.hatena.ne.jp/yarb/20121005/p1">Rubyで自前の例外クラスを作るときExceptionではなくStandardErrorを継承する理由</a></p>

<p>下記がビルトインのExceptionのサブクラスたちです。<code>rescue</code>のデフォルトが<code>StandardError</code>、<code>raise</code>のデフォルトが<code>RuntimeError</code>となっています。</p>

<blockquote>
  <ul>
    <li>NoMemoryError</li>
    <li>ScriptError
      <ul>
        <li>LoadError</li>
        <li>NotImplementedError</li>
        <li>SyntaxError</li>
      </ul>
    </li>
    <li>SecurityError</li>
    <li>SignalException
      <ul>
        <li>Interrupt</li>
      </ul>
    </li>
    <li>StandardError – default for <code>rescue</code>
      <ul>
        <li>ArgumentError
          <ul>
            <li>UncaughtThrowError</li>
          </ul>
        </li>
        <li>EncodingError</li>
        <li>FiberError</li>
        <li>IOError
          <ul>
            <li>EOFError</li>
          </ul>
        </li>
        <li>IndexError
          <ul>
            <li>KeyError
              <ul>
                <li>StopIteration</li>
              </ul>
            </li>
          </ul>
        </li>
        <li>LocalJumpError</li>
        <li>NameError
          <ul>
            <li>NoMethodError</li>
          </ul>
        </li>
        <li>RangeError
          <ul>
            <li>FloatDomainError</li>
          </ul>
        </li>
        <li>RegexpError</li>
        <li>RuntimeError – default for <code>raise</code></li>
        <li>SystemCallError
          <ul>
            <li>Errno::*</li>
          </ul>
        </li>
        <li>ThreadError</li>
        <li>TypeError</li>
        <li>ZeroDivisionError</li>
      </ul>
    </li>
    <li>SystemExit</li>
    <li>SystemStackError</li>
    <li>fatal – impossible to rescue</li>
  </ul>
</blockquote>

<p>via <a href="http://ruby-doc.org/core-2.2.0/Exception.html">Exception</a></p>

<p>よって<code>rescue</code>のデフォルトで拾える<code>StandardError</code>を使って独自例外を定義しましょう。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">MyError2</span> <span class="o">&lt;</span> <span class="no">StandardError</span><span class="p">;</span> <span class="k">end</span></code></pre></div>

<h3 id="section-1">参考</h3>
<ul>
  <li><a href="http://d.hatena.ne.jp/yarb/20121005/p1">Rubyで自前の例外クラスを作るときExceptionではなくStandardErrorを継承する理由</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails4 でトランザクション分離レベルを設定する]]></title>
    <link href="http://blog.toshimaru.net/rails-4-transaction-isolation/"/>
    <updated>2015-01-19T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/rails-4-transaction-isolation</id>
    <content type="html"><![CDATA[<h2 id="mysql">MySQLのトランザクション分離レベル</h2>

<p>MySQLのデフォルトのトランザクション分離レベルは何か？</p>

<blockquote>
  <p><strong>REPEATABLE READ</strong></p>

  <p>This is the default isolation level for InnoDB.</p>
</blockquote>

<p>via. <a href="http://dev.mysql.com/doc/refman/5.0/en/set-transaction.html">13.3.6 SET TRANSACTION Syntax</a></p>

<p>ハイ、答えは「REPEATABLE READ」ですネ.</p>

<h2 id="rails4">Rails4でトランザクション分離レベルを設定</h2>

<p>では次にRailsにおいてトランザクション分離レベルを設定するにはどうしたらよいでしょう？ 実はRails3.xとRails4ではトランザクション分離レベルの設定方法は異なっています。</p>

<p><a href="http://d.hatena.ne.jp/tkrd/20131121/1385044179">Rails &amp; MySQL: トランザクション分離レベルをグローバルに設定する</a></p>

<p><em>（引用ここから）</em></p>

<p>Rails 3.x 時代までは、</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span>
  <span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SET TRANSACTION ISOLATION LEVEL READ COMMITTED&#39;</span><span class="p">)</span>
<span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">transaction</span> <span class="k">do</span>
  <span class="c1"># ...</span>
<span class="k">end</span></code></pre></div>

<p>のように書かなければなりませんでしたが、Rails 4 でトランザクションごとに分離レベルを指定できるようになりました：</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">transaction</span><span class="p">(</span><span class="ss">isolation</span><span class="p">:</span> <span class="ss">:read_committed</span><span class="p">)</span> <span class="k">do</span>
  <span class="c1"># ...</span>
<span class="k">end</span></code></pre></div>

<p><em>（引用ここまで）</em></p>

<h2 id="section">有効なトランザクション分離レベル</h2>

<p>設定可能で有効な<code>isolation:</code>レベルは何でしょう？　下記４つになります。</p>

<blockquote>
  <p>Valid isolation levels are:</p>

  <ul>
    <li><code>:read_uncommitted</code></li>
    <li><code>:read_committed</code></li>
    <li><code>:repeatable_read</code></li>
    <li><code>:serializable</code></li>
  </ul>
</blockquote>

<p>via. <a href="http://blog.railsupgrade.com/2012/09/rails-4-transaction-isolation-level.html">Rails 4 - Transaction isolation level</a></p>

<h2 id="section-1">分離レベルとダーティリード、ファジーリード、ファントムリードの関係</h2>

<p>分離レベルとダーティリード、ファジーリード、ファントムリードそれぞれの関係性は以下。</p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>ダーティリード</th>
      <th>ファジーリード</th>
      <th>ファントムリード</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>READ UNCOMMITTED</strong></td>
      <td>発生する</td>
      <td>発生する</td>
      <td>発生する</td>
    </tr>
    <tr>
      <td><strong>READ COMMITTED</strong></td>
      <td>発生しない</td>
      <td>発生する</td>
      <td>発生する</td>
    </tr>
    <tr>
      <td><strong>REPEATABLE READ</strong></td>
      <td>発生しない</td>
      <td>発生しない</td>
      <td>発生する</td>
    </tr>
    <tr>
      <td><strong>SERIALIZABLE</strong></td>
      <td>発生しない</td>
      <td>発生しない</td>
      <td>発生しない</td>
    </tr>
  </tbody>
</table>

<p>via. <a href="http://gyouza-daisuki.hatenablog.com/entry/2013/11/19/150838">トランザクション分離レベルについて極力分かりやすく解説してみた[SQL]</a></p>

<p>適切なトランザクション分離レベルで適切なトランザクション処理をしましょう！</p>

<h3 id="section-2">参考</h3>

<ul>
  <li><a href="http://d.hatena.ne.jp/tkrd/20131121/1385044179">Rails &amp; MySQL: トランザクション分離レベルをグローバルに設定する</a></li>
  <li><a href="http://blog.railsupgrade.com/2012/09/rails-4-transaction-isolation-level.html">Rails 4 - Transaction isolation level</a></li>
  <li><a href="http://gyouza-daisuki.hatenablog.com/entry/2013/11/19/150838">トランザクション分離レベルについて極力分かりやすく解説してみた[SQL]</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyの%(パーセント)を使った記法まとめ]]></title>
    <link href="http://blog.toshimaru.net/ruby-percent-notation/"/>
    <updated>2015-01-10T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/ruby-percent-notation</id>
    <content type="html"><![CDATA[<p>Rubyでつかわれる%（パーセント）を使った記法、たまに忘れることがあるのでメモがてらにまとめてみる。</p>

<table>
  <thead>
    <tr>
      <th>%記法</th>
      <th>%使わない場合の書き方</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>%</code>, <code>%Q</code></td>
      <td><code>""</code> (ダブルクオート)</td>
    </tr>
    <tr>
      <td><code>%q</code></td>
      <td><code>''</code> (シングルクオート)</td>
    </tr>
    <tr>
      <td><code>%w</code></td>
      <td><code>[]</code> (文字列配列)</td>
    </tr>
    <tr>
      <td><code>%W</code></td>
      <td><code>[]</code> (文字列配列・式展開あり)</td>
    </tr>
    <tr>
      <td><code>%i</code></td>
      <td><code>[]</code> (シンボル配列)</td>
    </tr>
    <tr>
      <td><code>%I</code></td>
      <td><code>[]</code> (シンボル配列・式展開あり)</td>
    </tr>
    <tr>
      <td><code>%x</code></td>
      <td><code>``</code> (コマンド実行)</td>
    </tr>
    <tr>
      <td><code>%s</code></td>
      <td><code>:</code> (シンボル)</td>
    </tr>
    <tr>
      <td><code>%r</code></td>
      <td><code>//</code> (正規表現)</td>
    </tr>
  </tbody>
</table>

<p><strong>※ %の後には丸括弧（<code>()</code>）や波括弧（<code>{}</code>）などの記号が使えます</strong></p>

<h2 id="section">文字列表現系</h2>

<h3 id="q">%, %Q</h3>

<pre><code>&gt; %(a b c)
 =&gt; "a b c"

&gt; a, b, c = 1, 2, 3
&gt; %Q(#{a} #{b} #{c})
 =&gt; "1 2 3" # 式展開される
</code></pre>

<h3 id="q-1">%q</h3>

<pre><code>&gt; %q(a b c)
 =&gt; "a b c"

&gt; a, b, c = 1, 2, 3
&gt; %q(#{a} #{b} #{c})
 =&gt; "\#{a} \#{b} \#{c}" # 式展開されない
</code></pre>

<h2 id="section-1">配列表現系</h2>

<h3 id="w">%w</h3>

<pre><code>&gt; %w(a b c)
 =&gt; ["a", "b", "c"]
</code></pre>

<h3 id="w-1">%W</h3>

<pre><code>&gt; a, b, c = 1, 2, 3
&gt; %W(#{a} #{b} #{c})
 =&gt; ["1", "2", "3"]
</code></pre>

<h3 id="i">%i</h3>

<pre><code>&gt; %i(a b c)
 =&gt; [:a, :b, :c]
</code></pre>

<h3 id="i-1">%I</h3>

<pre><code>&gt; a, b, c = 1, 2, 3
&gt; %I(#{a} #{b} #{c})
 =&gt; [:"1", :"2", :"3"]
</code></pre>

<h2 id="section-2">コマンド実行</h2>

<h3 id="x">%x</h3>

<pre><code>&gt; %x(date)
 =&gt; "Sun Jan 11 01:01:52 JST 2015\n"
&gt; `date`
 =&gt; "Sun Jan 11 01:01:54 JST 2015\n"
</code></pre>

<h2 id="section-3">シンボル</h2>

<h3 id="s">%s</h3>

<pre><code>&gt; %s(a b c)
 =&gt; :"a b c"
</code></pre>

<h2 id="section-4">正規表現</h2>

<h3 id="r">%r</h3>

<pre><code>&gt; %r(^http://)
 =&gt; /^http:\/\//
</code></pre>

<h3 id="section-5">参考</h3>

<ul>
  <li><a href="http://qiita.com/mogulla3/items/46bb876391be07921743">Rubyで%記法（パーセント記法）を使う</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyのinjectを使いこなす]]></title>
    <link href="http://blog.toshimaru.net/ruby-inject/"/>
    <updated>2015-01-08T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/ruby-inject</id>
    <content type="html"><![CDATA[<p>Rubyのイテレータメソッド<code>inject</code>の使い方を紹介してみようと思います。</p>

<h2 id="inject">inject</h2>

<p>Rubyのinjectはこんなふうに使えます。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">enum</span><span class="o">.</span><span class="n">inject</span> <span class="p">{</span><span class="o">|</span><span class="n">memo</span><span class="p">,</span> <span class="n">item</span><span class="o">|</span> <span class="n">block</span> <span class="p">}</span>
<span class="n">enum</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="n">init</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">memo</span><span class="p">,</span> <span class="n">item</span><span class="o">|</span> <span class="n">block</span> <span class="p">}</span></code></pre></div>

<p><a href="http://ref.xaio.jp/ruby/classes/enumerable/inject">http://ref.xaio.jp/ruby/classes/enumerable/inject</a></p>

<h2 id="sum">Sum（合計）を出す</h2>

<p>これだけではわかりにくいと思うので合計を出す処理を書いてみましょう。</p>

<p>まずは<code>inject</code>を使わないパターン。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span>
<span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span> <span class="p">}</span>
<span class="nb">puts</span> <span class="n">sum</span> <span class="c1"># =&gt; 55</span></code></pre></div>

<p>これを<code>inject</code>で書き直すとこう。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">inject</span> <span class="p">{</span><span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">i</span><span class="o">|</span> <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span> <span class="p">}</span>
<span class="c1"># =&gt; 55</span></code></pre></div>

<p>この場合、sumの初期値は0ですがそれを明示的にかくならこう。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">i</span><span class="o">|</span> <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span> <span class="p">}</span>
<span class="c1"># =&gt; 55</span></code></pre></div>

<p>さらにinjectにはシンボルで演算子をわたしてうまいようにやってくれる。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>
<span class="c1"># =&gt; 55</span></code></pre></div>

<p>これが一番シンプルでエレガント。</p>

<h2 id="section">応用編1: 配列内の要素数をハッシュに</h2>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">[</span><span class="ss">:great</span><span class="p">,</span> <span class="ss">:good</span><span class="p">,</span> <span class="ss">:bad</span><span class="p">,</span> <span class="ss">:good</span><span class="p">,</span> <span class="ss">:good</span><span class="p">,</span> <span class="ss">:bad</span><span class="p">,</span> <span class="ss">:awesome</span><span class="p">,</span> <span class="ss">:great</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span> <span class="p">{</span><span class="o">|</span><span class="nb">hash</span><span class="p">,</span> <span class="n">key</span><span class="o">|</span> <span class="nb">hash</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span> <span class="nb">hash</span><span class="p">}</span>
<span class="c1"># =&gt; {:great=&gt;2, :good=&gt;3, :bad=&gt;2, :awesome=&gt;1}</span></code></pre></div>

<h2 id="section-1">応用編2: フィボナッチ数列</h2>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">fib</span><span class="p">,</span> <span class="n">i</span><span class="o">|</span> <span class="n">fib</span> <span class="o">&lt;&lt;</span> <span class="n">fib</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="n">fib</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span> <span class="p">}</span>
<span class="c1"># =&gt; [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233]</span></code></pre></div>

<h3 id="section-2">参考</h3>
<ul>
  <li><a href="http://kenkiti.hatenadiary.jp/entry/20090114/ruby_inject">ruby の inject をわかりやすく説明してみる</a></li>
  <li><a href="http://ref.xaio.jp/ruby/classes/enumerable/inject">inject (Enumerable)</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GZip形式のS3上のファイルをIO.pipeでストリーム読み出し]]></title>
    <link href="http://blog.toshimaru.net/ruby-pipe-s3/"/>
    <updated>2015-01-04T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/ruby-pipe-s3</id>
    <content type="html"><![CDATA[<h2 id="section">やりたいこと</h2>

<p>S3からgzip形式のファイルをストリーミングダウンロードしてそれを読み出す。</p>

<h2 id="s3">S3からのダウンロード</h2>

<p><a href="http://docs.aws.amazon.com/AWSRubySDK/latest/AWS/S3/S3Object.html">公式ドキュメント</a>によるとこうする。</p>

<p>If you want to stream an object from S3, you can pass a block to #read.</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;output&#39;</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
  <span class="n">large_object</span><span class="o">.</span><span class="n">read</span> <span class="k">do</span> <span class="o">|</span><span class="n">chunk</span><span class="o">|</span>
    <span class="n">file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">chunk</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></div>

<h2 id="gzip">gzipを読む</h2>

<p>gzipの読み出しのサンプルコードはこんな感じ。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;hoge.gz&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
  <span class="n">gz</span> <span class="o">=</span> <span class="no">Zlib</span><span class="o">::</span><span class="no">GzipReader</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
  <span class="nb">print</span> <span class="n">gz</span><span class="o">.</span><span class="n">read</span>
  <span class="n">gz</span><span class="o">.</span><span class="n">close</span>
<span class="k">end</span></code></pre></div>

<p>via. <a href="http://apidock.com/ruby/Zlib/GzipReader">http://apidock.com/ruby/Zlib/GzipReader</a></p>

<h2 id="pipe">pipeでつなぐ</h2>

<p><code>IO.pipe</code>を使ってつなぐとこう。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">IO</span><span class="o">.</span><span class="n">pipe</span> <span class="k">do</span> <span class="o">|</span><span class="n">read_io</span><span class="p">,</span> <span class="n">write_io</span><span class="o">|</span>
  <span class="n">write_io</span><span class="o">.</span><span class="n">binmode</span>
  <span class="n">thread</span> <span class="o">=</span> <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
    <span class="k">begin</span>
      <span class="no">AWS</span><span class="o">::</span><span class="no">S3</span><span class="o">::</span><span class="no">S3Object</span><span class="o">.</span><span class="n">read</span> <span class="k">do</span> <span class="o">|</span><span class="n">chunk</span><span class="o">|</span>
        <span class="n">write_io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">chunk</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">rescue</span>
      <span class="n">write_io</span><span class="o">.</span><span class="n">close</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">gz</span> <span class="o">=</span> <span class="no">Zlib</span><span class="o">::</span><span class="no">GzipReader</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">read_io</span><span class="p">)</span>
  <span class="k">while</span> <span class="n">line</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">gets</span>
    <span class="c1"># do something with line ...</span>
    <span class="nb">puts</span> <span class="n">line</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></div>

<p>注意点としては以下。</p>

<ol>
  <li>gzip形式なので<code>write_io.binmode</code>でバイナリモードにすること</li>
  <li>Thread内で何かエラーが起こったときに<code>gets</code>が待ち状態で止まっちゃうので<code>close</code>なりなんなり適切な処理をしてやること</li>
</ol>

<h3 id="section-1">参考</h3>

<ul>
  <li><a href="http://stackoverflow.com/questions/24016548/how-do-i-get-zlib-to-uncompress-from-s3-stream-in-ruby">How do I get Zlib to uncompress from S3 stream in Ruby?</a></li>
  <li><a href="http://takuya-1st.hatenablog.jp/entry/20120205/1328470521">RubyはIO.pipeを使えば、パイプを作ることが出来る</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GunosyでのRails開発フロー]]></title>
    <link href="http://blog.toshimaru.net/gunosy-rails-way/"/>
    <updated>2014-12-22T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/gunosy-rails-way</id>
    <content type="html"><![CDATA[<p><strong>この記事は<a href="http://qiita.com/advent-calendar/2014/gunosy">Gunosy Advent Calendar 2014</a>の22日目の記事です。</strong></p>

<p>こんにちは、Gunosyの<a href="https://twitter.com/toshimaru_e">toshimaru</a>です。Gunosyでは主にRuby on Railsアプリを担当しています。</p>

<h2 id="section">はじめに</h2>
<p>Gunosyでは昨年度よりAPIの実装を<a href="https://speakerdeck.com/ymatsuwitter/300mo-ren-wogodeba-itahua">Rails実装からGo実装へと変えた</a>ことでAPIのパフォーマンスの大幅な改善が行われました。そんなわけで「GunosyってRails捨ててGoを使ってるんじゃないの？」とお思いの方もいらっしゃるかもしれませんがそんなことはありません。大規模アクセスのない管理画面などではRuby on RailsはまだまだGunosyで現役バリバリです<sup id="fnref:2"><a href="#fn:2" class="footnote">1</a></sup>。高速にWEBアプリを作る必要のあるシーンにおいてはGoはRailsにはまだ敵いません。あのGoカンパニーとして名高いHashiCorpでさえも<a href="http://blog.gopheracademy.com/advent-2014/atlas/">Railsは手放せない</a>ようですしね。</p>

<p>本エントリでは僕がGunosyでかかわっているRailsプロジェクトにおいてどのように開発を進めていっているのかを紹介したいと思います<sup id="fnref:1"><a href="#fn:1" class="footnote">2</a></sup>。</p>

<h2 id="section-1">ブランチの運用</h2>
<p>基本は<a href="http://danielkummer.github.io/git-flow-cheatsheet/index.ja_JP.html">Git flow</a>に則って開発を進めています。ただGit flowにおけるリリースブランチの運用はフローの簡易化のため、またスモールチーム（２〜３人）での開発ということもあり省いています。これによりdevelop→master間のフローがラクになりスピーディな開発が可能になります。</p>

<p><img src="/images/posts/gunosy/deploy.png" alt="" /></p>

<p><strong>【↑図】developからfeatureブランチが切られ、developにマージ・確認した後にmasterへ</strong></p>

<h2 id="section-2">デプロイ</h2>
<p>デプロイフローは下記のようになっています。</p>

<p><img src="/images/posts/gunosy/workflow.png" alt="" /></p>

<ol>
  <li>ローカルで開発</li>
  <li>コードをGithubにプッシュ</li>
  <li>CircleCIでテスト &amp; テスト結果を通知</li>
  <li>CircleCIからAmazon OpsWorksにデプロイ命令（Chefのデプロイレシピを実行させる）</li>
  <li>OpsWorksからデプロイ完了通知</li>
</ol>

<p>※Amazon OpsWorksについては昨日のChefAdventCalendarにまとめさせていただきましたのでよかったらどうぞ。</p>

<p><a href="/opsworks-rails/">Amazon OpsWorksでRailsアプリを簡単Chefプロビジョニング</a></p>

<p>上記のブランチ運用と照らし合わせるとこうなります。</p>

<table>
  <tbody>
    <tr>
      <td><code>develop</code>ブランチ変更時</td>
      <td>CircleCIテスト後に、（テストパスすれば）OpsWorksのステージング環境に<code>develop</code> ブランチをデプロイ</td>
    </tr>
    <tr>
      <td><code>master</code>ブランチ変更時</td>
      <td>CircleCIテスト後に、OpsWorksのプロダクション環境に<code>master</code>ブランチをデプロイ</td>
    </tr>
  </tbody>
</table>

<p>アプリケーションレポジトリの責任範囲がCircleCIでテストを実行してOpsWorksにデプロイリクエストを投げるまでで、その後のデプロイは別レポジトリとして管理されているChefのレシピの責任範囲として役割が分けられています。デプロイ環境が一通り揃ってしまえば、アプリケーション開発者はほとんどデプロイに関するアレコレを考える必要がなく本来の開発に集中できます。</p>

<h2 id="rails">Railsのバージョン</h2>
<p>入社以来、Gunosyでは２つのRailsプロジェクトにかかわってきましたが（どちらも入社後にゼロから開始したプロジェクトです）両プロジェクトともにバージョン4.1.8です。まだ現時点で最新のバージョン4.2.0には上げてませんが今後も最新のRailsに追従していく所存です。</p>

<h2 id="section-3">テスト</h2>
<p>Railsのテストに関してはRSpec, FactoryGirl, Capybaraあたりを使っています。</p>

<table>
  <tbody>
    <tr>
      <td>RSpec</td>
      <td>モデル、コントローラー周りのテスト</td>
    </tr>
    <tr>
      <td>Capybara</td>
      <td>ビューを含むEnd-to-Endテスト<sup id="fnref:3"><a href="#fn:3" class="footnote">3</a></sup></td>
    </tr>
  </tbody>
</table>

<p>カバレッジ率に関しては90%前後を保っています。カバレッジは<a href="https://github.com/colszowka/simplecov">simplecov</a>を使用し、結果作成されるカバレッジ率はCircleCIの<a href="https://circleci.com/docs/build-artifacts">artifacts</a>の機能を使いカバレッジ率と共に公開しています。</p>

<p><img src="/images/posts/gunosy/coverage.png" alt="" /></p>

<p><strong>【↑図】artifactsで公開されたカバレッジ率</strong></p>

<p>ただ「テストカバレッジを上げること」が目的化してしまっては本末転倒なので（いわゆる「テスト書きすぎ問題」）、「どこまでテストを書くか」は今後も考えていきたいテーマではあります。</p>

<h2 id="db">複数DB</h2>
<p>Railsの悩みとして１つ大きいのは複数DBの扱いではないでしょうか？ Gunosyでももちろん複数DBを使い分ける必要があり、そのときはCookpadさん, DeNAさんで実績のある<a href="https://github.com/eagletmt/switch_point">swith_point</a> gemを使用しています。</p>

<p>この2社のDB事情に関しては下記ブログ・資料に詳しいです。</p>

<ul>
  <li><a href="http://techlife.cookpad.com/entry/2014/08/28/194147">クックパッドにおける最近のActiveRecord運用事情</a></li>
  <li><a href="http://www.slideshare.net/sonots/mobage-ruby-db">Mobage を支える Ruby の技術 ~ 複数DB編 ~</a></li>
</ul>

<p>上記に紹介されているように下記のように簡単に複数DBをswitchでき素敵です。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Configuration</span>
<span class="no">SwitchPoint</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="n">config</span><span class="o">.</span><span class="n">define_switch_point</span> <span class="ss">:blog</span><span class="p">,</span>
    <span class="ss">readonly</span><span class="p">:</span> <span class="ss">:&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="si">}</span><span class="ss">_blog_slave&quot;</span><span class="p">,</span>
    <span class="ss">writable</span><span class="p">:</span> <span class="ss">:&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="si">}</span><span class="ss">_blog_master&quot;</span>
<span class="k">end</span>

<span class="c1"># Model</span>
<span class="k">class</span> <span class="nc">Article</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">use_switch_point</span> <span class="ss">:blog</span>
<span class="k">end</span></code></pre></div>

<p>Railsの機能として複数データベースがサポートされる話もあるようなのでそこも期待ですね。<a href="http://mozaic.fm/post/104575088493/12-rails">参考: #12 Rails mozaic.fm</a></p>

<h2 id="section-4">権限管理</h2>
<p>管理画面の権限管理に関しては<a href="https://github.com/nathanl/authority">authority</a>を使用しています。権限は大まかにそれぞれの機能においてそれを参照できる権限（READ）・更新できる権限（CREATE/UPDATE/DELETE）というような権限分けを行っています。例えば＜ユーザーを閲覧可能＞という権限、＜ユーザーを更新可能＞な権限、これらを組み合わせて管理ユーザーの権限を定義します。</p>

<p>なお、初期の権限設定は<code>seeds.rb</code>で権限をまくようにしています。</p>

<h2 id="section-5">バッチ</h2>
<p>cronの管理に関しては<a href="https://github.com/javan/whenever">whenever</a>を使用しています。こちらはOpsWorkのデプロイ実行時にChefのwheneverレシビが定義してあり、そこでcronがデプロイ時に更新されるようになっています。</p>

<h2 id="section-6">非同期ジョブ</h2>
<p>重い処理に関してはSidekiqを使いRails側ではSidekiqにキューイングするまでにして、その後の処理はSidekiqで行うようにしてます。例えばGunosyの場合何が重い処理にあたるかというと「全ユーザーにプッシュ通知を送るぞ！」みたいなケース。そのような時間のかかる処理に関してはSidekiqで処理を行っています<sup id="fnref:4"><a href="#fn:4" class="footnote">4</a></sup>。</p>

<h2 id="section-7">その他・今後の課題</h2>
<ul>
  <li>僕が携わったプロジェクトはどちらもRails4系だが、歴史が積み重なったRails3系プロジェクトもあるので今後どうアップデートしていくか。</li>
  <li>Hubotは遊びで飼ってるけど<a href="https://speakerdeck.com/jnewland/chatops-at-github">ChatOps</a>といえるほど真面目に運用していない。もっとうまく使えば幸せになれるかも？</li>
</ul>

<h2 id="section-8">最後に</h2>
<p>Ruby/Rails業務経験歴半年足らずのヒヨッコではありますが、僕がかかわった範囲内でのGunosyでのRailsの開発の方法を紹介してみました。もし「うちはこんなRailsの開発してるよ！」とか「これ使うともっと便利になるよ！」とか教えていただけたら嬉しいです。</p>

<p>ではでは。</p>

<div class="footnotes">
  <ol>
    <li id="fn:2">
      <p>ちなみにDjangoも使われています。 <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:1">
      <p>とはいえ会社全てのRailsプロダクトが今回紹介するようなやり方で統一されているわけではありません。あくまでも自分がかかわっている範囲での開発の進め方です。 <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>デフォルトのrack_testドライバーを使っていますが、<a href="http://qiita.com/take/items/779747e0981355e569ad">poltergaistが良さ気なので</a>今後使っていきたいと思っています。 <a href="#fnref:3" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p>正確には別途配信ワーカーがいるのですがここでは割愛 <a href="#fnref:4" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Amazon OpsWorksでRailsアプリを簡単Chefプロビジョニング]]></title>
    <link href="http://blog.toshimaru.net/opsworks-rails/"/>
    <updated>2014-12-21T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/opsworks-rails</id>
    <content type="html"><![CDATA[<p>本記事は<a href="http://qiita.com/advent-calendar/2014/chef">Chef Advent Calendar 2014</a>の21日目の記事です。</p>

<h2 id="opsworks">OpsWorksとは？</h2>
<p>公式サイトの説明は下記です。</p>

<blockquote>
  <p>AWS OpsWorks は、すべての種類およびサイズのアプリケーションを容易にデプロイおよび運用できるクラウドアプリケーション管理サービスです。パッケージのインストール、ソフトウェア設定およびストレージなどのリソースを含む、各コンポーネントのアプリケーションのアーキテクチャおよび仕様を定義できます。</p>

  <p><a href="http://aws.amazon.com/jp/opsworks/">AWS OpsWorks</a></p>
</blockquote>

<p>ポイントは以下の通り。</p>

<ul>
  <li>Chefでサーバーをプロビジョニング・デプロイできる</li>
  <li>スタック ＞ レイヤー ＞ App という概念でシステムを構成</li>
  <li>インスタンスをタイムベース or ロードベースでスケールアウトできる</li>
  <li>OpsWorksで使われているレシピは<a href="https://github.com/aws/opsworks-cookbooks">Githubで公開</a>されており実行コードが追える</li>
  <li>OpsWorksの用意したレシピに加えて自らのCustom Chefレシピを追加することも可能</li>
</ul>

<p><img src="/images/posts/opsworks/stack.png" alt="" /></p>

<p><strong>【↑図】OpsWorksのStack &amp; Layerの関係</strong></p>

<h2 id="section">料金</h2>
<p>OpsWorksの使用自体にかかる料金は<strong>＜0円＞</strong>です。OpsWorks上で使用したAWSリソースの料金（ロードバランサ、EC2インスタンス、RDS等）のみがかかってきます。</p>

<h2 id="railsopsworks">RailsをOpsWorksにデプロイしてみよう</h2>
<p>OpsWorksはとくにRailsアプリケーションとの相性が良く、今回はRails4.2.0のアプリケーションをOpsWorksにデプロイしてみようと思います。</p>

<p>今回デプロイするRailsアプリケーションのコードの最終形は下記になります。</p>

<p><a href="https://github.com/toshimaru/opsworks-rails">https://github.com/toshimaru/opsworks-rails</a></p>

<h2 id="section-1">デプロイ手順</h2>

<h3 id="section-2">スタックの追加</h3>

<p>まずはAWS ConsoleからOpsWorksにいきAdd Stackしましょう。RegionとかVPCとかIAMとかは適宜設定してね。</p>

<p><img src="/images/posts/opsworks/add_stack.png" alt="" /></p>

<p>こんなのがStackのトップ画面。</p>

<p><img src="/images/posts/opsworks/top.png" alt="" /></p>

<h3 id="section-3">レイヤーの定義</h3>

<p><img src="/images/posts/opsworks/layer.png" alt="" /></p>

<p>Layer TypeはRails App、Ruby versionは2.1、nginx+unicornを選択する</p>

<p><img src="/images/posts/opsworks/add_layer.png" alt="" /></p>

<p>追加されました。</p>

<p><img src="/images/posts/opsworks/layer_done.png" alt="" /></p>

<h3 id="section-4">レシピ</h3>

<p>RecipesでOpsWorksにどんなレシピが設定されているかがわかります。レシピ名がGithubへのリンクになっており、どんなレシピが書かれているかを確認できます。</p>

<p><img src="/images/posts/opsworks/recipes.png" alt="" /></p>

<p>今回はこのままでOK.</p>

<h3 id="section-5">インスタンスの追加</h3>

<p>では次にAppインスタンスを追加。t1.microインスタンスで。</p>

<p><img src="/images/posts/opsworks/add_instance.png" alt="" /></p>

<p>AddInstanceするとステータスがStoppedなのでstartで起動します。</p>

<p><img src="/images/posts/opsworks/instance_stopped.png" alt="" /></p>

<p>10分くらいでセットアップが完了します。Statusがonlineでグリーンになれば準備OK.</p>

<p><img src="/images/posts/opsworks/instance_online.png" alt="" /></p>

<h3 id="app">Appの設定</h3>

<p>次にデプロイするAppの設定を追加していきます。</p>

<p><img src="/images/posts/opsworks/apps.png" alt="" /></p>

<p>こんな感じでAppを設定。</p>

<ul>
  <li>Type: RoR</li>
  <li>DataSource: 今回は特にないのでNoneで</li>
  <li>Applicationソース: Githubから持ってきたいのでGithubのレポジトリURLを指定</li>
</ul>

<p><img src="/images/posts/opsworks/add_apps.png" alt="" /></p>

<p><code>SECRET_KEY_BASE</code>(Rails4.2の<code>secrets.yml</code>で必要になる)もあわせてセットしましょう。</p>

<p><img src="/images/posts/opsworks/add_envvar.png" alt="" /></p>

<p>DeploymentsでDeploy Appしてみよう。</p>

<p><img src="/images/posts/opsworks/deploy_app.png" alt="" /></p>

<p>Appは先ほど設定したApp、CommandはDeployを指定してDeploy App!（マイグレーションが必要であればここでMigration ON）</p>

<p><img src="/images/posts/opsworks/deploy_app2.png" alt="" /></p>

<p>SuccessすればOK.</p>

<p><img src="/images/posts/opsworks/deploy_app3.png" alt="" /></p>

<h2 id="section-6">幾つかのハマりポイント</h2>

<h3 id="gemfile">Gemfile</h3>

<p>下記のGemが必要になるのでコメントアウトされていることを確認すること。</p>

<pre><code>gem 'therubyracer', platforms: :ruby
gem 'unicorn'
</code></pre>

<h3 id="databaseyml">database.yml</h3>

<p>RDSを設定していれば自動的に設定されるのですが、今回の場合設定していないので別途手で<code>database.yml</code>を作りました。</p>

<pre><code>[root@rails-app1 current]# cat config/database.yml
default: &amp;default
  adapter: sqlite3
  pool: 5
  timeout: 5000

production:
  &lt;&lt;: *default
  database: db/production.sqlite3
</code></pre>

<h3 id="css">CSSが適応されていない問題</h3>

<p>「アレ、なんかCSSが効いていないっぽい！？」</p>

<p><img src="/images/posts/opsworks/before_css.png" alt="" /></p>

<p>これは<code>asset:precompile</code>が走っていないため。</p>

<blockquote>
  <p>rake asset:precompile というタスクを実行する必要がありますが、OpsWorksのRailsアプリケーションのデフォルトのデプロイ処理ではこのタスクを実行してくれません。</p>

  <p><a href="http://interu.hatenablog.com/entry/2013/08/01/214258">OpsWorksでRailsをデプロイする際にasset:precompileを実施する方法</a></p>
</blockquote>

<p>下記を<code>deploy/before_migrate.rb</code>に設定する。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">Chef</span><span class="o">::</span><span class="no">Log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&quot;Running deploy/before_migrate.rb&quot;</span><span class="p">)</span>
<span class="n">env</span> <span class="o">=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:deploy</span><span class="o">][</span><span class="ss">:rails_opsworks</span><span class="o">][</span><span class="ss">:rails_env</span><span class="o">]</span>
<span class="n">current_release</span> <span class="o">=</span> <span class="n">release_path</span>

<span class="n">execute</span> <span class="s2">&quot;rake assets:precompile&quot;</span> <span class="k">do</span>
  <span class="n">cwd</span> <span class="n">current_release</span>
  <span class="n">command</span> <span class="s2">&quot;bundle exec rake assets:precompile&quot;</span>
  <span class="n">environment</span> <span class="s2">&quot;RAILS_ENV&quot;</span> <span class="o">=&gt;</span> <span class="n">env</span>
<span class="k">end</span></code></pre></div>

<p>これでデプロイ。</p>

<p><img src="/images/posts/opsworks/after_css.png" alt="" /></p>

<p>OK.</p>

<h3 id="section-7">デプロイされるディレクトリ</h3>

<p><code>/srv/www/rails_opsworks/current</code>に最新の状態がデプロイされます。</p>

<h3 id="section-8">ログディレクトリ</h3>

<p><code>/var/lib/aws/opsworks/chef</code> Chefのログ、OpsWorksの設定JSONが格納されています。</p>

<h2 id="section-9">まとめ</h2>
<p>さてOpsWorksでのデプロイ手順を紹介してきましたが一体何が嬉しいのでしょうか。個人的なメリットは以下です。</p>

<ul>
  <li>インスタンスがDisposable・Repeatableである
    <ul>
      <li>= サーバーをいつでも潰して全く同じ環境を再現できる！</li>
      <li>「サーバーを増やしたい！」→Add Instanceの作業だけで完了</li>
    </ul>
  </li>
  <li><a href="https://github.com/capistrano/capistrano">Capistrano</a>などのデプロイツールのコードをゴチャゴチャ書く必要がなく、デプロイタスクはOpsWorks&amp;Chefに一任できる</li>
</ul>

<h2 id="section-10">さいごに</h2>
<p>Chef Advent CalendarといいながらChefよりもOpsWorks中心の内容になってしまいましたが、冒頭に書いたようにOpsWorksの用意しているレシピに加えて自らのCustom Chefレシピを定義することが可能です。現実的な運用を考えるとOpsWorksのレシピだけでプロビジョニング・デプロイレシピを完結させることは難しいと思うので、<strong>OpsWorksレシピ+Custom Chefレシピ</strong>の２つを組み合わせて運用していくのが現実的かと思います。</p>

<h2 id="img-classemoji-titlelink-altlink-srchttpsassetsgithubcomimagesiconsemojiunicode1f517png-height20-width20-alignabsmiddle--"><img class="emoji" title=":link:" alt=":link:" src="https://assets.github.com/images/icons/emoji/unicode/1f517.png" height="20" width="20" align="absmiddle" /> 参考</h2>
<ul>
  <li><a href="http://ruby.awsblog.com/post/Tx7FQMT084INCR/Deploying-Ruby-on-Rails-Applications-to-AWS-OpsWorks">Deploying Ruby on Rails Applications to AWS OpsWorks</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[光へ]]></title>
    <link href="http://blog.toshimaru.net/hikari-e/"/>
    <updated>2014-12-03T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/hikari-e</id>
    <content type="html"><![CDATA[<p>タカキは恐れていた。自分は開発者として一人前であるのか。現時点の自分のスキルセットは市場価値があるのか。開発者としての成長は止まっていないか。技術トレンドに取り残されていないか。自分の生産性に見合う対価は支払われているか。</p>

<p>ITエンジニアとはほとほと難しい職業だ。終わりがない。何か１つ技術を身につけたとしてもその技術は５年後、１０年後にはもう枯れている技術かもしれない（多くの場合、五年も経てば技術は陳腐化してしまうだろう）。最新の流行りの技術を勉強し身に付けたとしても技術潮流が大きく変わって使われなくなることだってすらある。</p>

<p>それゆえエンジニアは面白い職業でもある。日々変化する技術にキャッチアップし、その変化を楽しむこと。変化の流れに身を委ねる。他の産業にはない流れの速さだ。取り残されないようにうまく流れに乗る。進歩、進歩。学習、学習。吸収、吸収。毛刈り、毛刈り。おっと、いつのまにかYak Shavingしていた。</p>

<p>★</p>

<p>タカキがエンジニア志望したのには深い理由はなかった。ゴミのような「文系ライフ」を謳歌していたと思っていたらあっという間にいざ就活、周囲が一様に同じような黒い服を身にまとい、明るかった髪色が均一化した。</p>

<p>「お前志望企業どうすんの？」　友人の問いにタカキは答えられなかったが、その晩テレビでやっていた討論番組でどこかのIT社長が「これからはITの時代だ」「受験勉強で役に立たない知識を学ぶよりプログラミングを学ぶべきだ」という要旨のことを言ってたのをビールを片手に聞きIT開発者を目指すことを彼は決めた。子供の頃からコンピュータで遊ぶのが好きだった彼にとっては悪くない選択だった（とはいえやっていたのはもっぱらネットとゲームだ）。</p>

<p>そうしてタカキが新卒で入った会社は某大手ITベンダーの下請けSIだった。就職氷河期の中、Dラン大学・文系出身・プログラミングすらまともにやったことの無いタカキに開発者としての内定を出した稀有な会社だ。大手企業の選考は壊滅的、無い内定状態のタカキは他に選択肢もなく入社を決めた。</p>

<p>その会社（仮にK社としよう）はマイクロソフト技術ベースの開発を行っていた。.NET Framework, Microsoft SQL Server, Windows Server, Visual Basic, 誰が作ったかわからない社内フレームワーク…。</p>

<p>今でこそ「アレは掃き溜めのような環境だった」とタカキは言えるが当時の彼には何もわからなかった。無理もない、開発者として右も左もわからない状況だったのだ。良い悪いなんて価値判断もできるわけがない。当時の彼にはK社こそが＜世界の中心＞だった。</p>

<p>開発者として働き始めてITニュースチェックは毎朝欠かさずに行うようになった。するとK社では使われていない技術用語を目にすることが明らかに多かった。Ruby on Rails, Angular.js, AWS, Git, Github, Node.js, HTML5, CI, RESTful, アジャイル, Docker, Go…。タカキはふと気づく「ここは＜世界の中心＞なんかじゃない。世界の片隅、しかもすごく小さい辺境の地だ。」と。</p>

<p>そこからタカキが世界の広さを知るまでは時間はそうかからなかった。まずはTwitterでIT界隈で有名な人を片っ端からフォローした。彼らの共有している記事は欠かさずチェックし、彼らが呟いているワードから彼らがどんな技術に注目しているのかを把握した。次に興味を持った技術分野の勉強会にも顔を出し、その分野のエンジニアたちと交流を行った。</p>

<p>気づくとタカキの技術力は社内の先輩より高くなっていた。最初は単純な疑問だった。「なぜこの人はこんなふうにわざわざ汚いコードを書くのだろう？」それが日々の積み重ねで不満へとだんだん変わっていった。「なぜこの人はなんでこんなクソコードを書くのだ？」「どうして汎用的に使えるようなクラスを作らない？」「どうしてシステムを疎結合に設計しない？」「どうして品質を高めるためにテストを書かない？」「どうしてオープンソースの自社フレームワークなんかよりずっとずっと優れたフレームワークを使わない？」どうして。どうして。どうして。　(そして驚くべきことに彼らはタカキの１．５倍から２倍以上の給料をもらっている)</p>

<p>ある日、タカキは当時かかわっていたプロジェクトの開発マネージャーに進言したことがあった。「このコードの作りは使う側から見て少し使いにくいのでこのように変更しませんか？」　タカキの言葉にマネージャーはこのような要旨のことを返した。「開発経験が浅い若造のお前に何がわかる。俺が設計したコードに口出しするな」</p>

<p>タカキはK社を去ることを決意した。</p>

<p>★</p>

<p>新しい環境ではかつてはタカキの世界の外にあった技術が目の前にあった。Ruby on Rails, CI, AWS, Github, Go…。不条理なことを言う「ビッグ・ブラザー」たちはもう居ない。今ではリトル・ピープルとして仲間とともにタカキは楽しく働いている。</p>

<p>かつての＜世界の中心＞はもう世界の中心ではなくなった。今ではブラウザの検索窓ごしに世界が観える。</p>

<p>「ハロー、ワールド。」</p>

<p>タカキは呟いた。</p>

<p><span style="color:#eee">Where there’s a will, there’s a way.</span></p>

<p><strong>※この話はフィクションです。</strong></p>

<hr />

<p><a href="http://www.adventar.org/calendars/628">闇 Advent Calendar 2014</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pry-byebug を使ってRailsアプリをステップ実行する]]></title>
    <link href="http://blog.toshimaru.net/rails-pry-byebug/"/>
    <updated>2014-12-02T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/rails-pry-byebug</id>
    <content type="html"><![CDATA[<p>Railsアプリケーションのデバッグはどのように行っていますか？　愚直にプリントデバッグ？　でも複雑なロジック内だと「このロジックのこの処理のここでピンポイントで止めたい！」という場合もありますよね。</p>

<p>そんなときに便利なのがpry-byebug. Githubのリンクは下記。</p>

<p><a href="https://github.com/deivid-rodriguez/pry-byebug">https://github.com/deivid-rodriguez/pry-byebug</a></p>

<p>pry-byebugを使えばピンポイントで処理を止めてステップ実行が可能になります。</p>

<h2 id="requirement">Requirement</h2>

<ul>
  <li>Ruby2以上</li>
</ul>

<p>pry-byebugで使われている<a href="https://github.com/deivid-rodriguez/byebug">Byebug</a>はRuby2前提のデバッガーなので2以上が必要になってきます。</p>

<h2 id="section">導入</h2>

<p>下記をGemfileに追加して<code>bundle install</code>.</p>

<pre><code>gem 'pry-byebug', group: :development
</code></pre>

<h2 id="section-1">ユースケース</h2>

<p>例えばこんなコントローラーのロジックがあったとする。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">PostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="c1"># ...</span>
  <span class="k">def</span> <span class="nf">create</span>
    <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">post_params</span><span class="p">)</span>
    <span class="n">result</span> <span class="o">=</span> <span class="vi">@post</span><span class="o">.</span><span class="n">complicated_logic</span>
    <span class="c1">#</span>
    <span class="c1"># ... long logic ...</span>
    <span class="c1">#</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></div>

<p>resultの中身を見たい場合はこうすればよい。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">PostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="c1"># ...</span>
  <span class="k">def</span> <span class="nf">create</span>
    <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">post_params</span><span class="p">)</span>
    <span class="n">result</span> <span class="o">=</span> <span class="vi">@post</span><span class="o">.</span><span class="n">complicated_logic</span>
    <span class="nb">binding</span><span class="o">.</span><span class="n">pry</span>
    <span class="c1">#</span>
    <span class="c1"># ... long logic ...</span>
    <span class="c1">#</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></div>

<p>すると<code>binding.pry</code>を通る処理をした際に、下記のように表示されます。</p>

<p>From: app/controllers/posts_controller.rb @ line 31 PostsController#create:</p>

<pre><code>   26: def create
   27:   @post = Post.new(post_params)
   28:   result = @post.complicated_logic
   29:   binding.pry
   30:   # ... long logic ...
=&gt; 31:   respond_to do |format|

[1] pry(#&lt;PostsController&gt;)&gt;
</code></pre>

<p>この状態で下記のように変数をみたりできます。</p>

<pre><code>[1] pry(#&lt;PostsController&gt;)&gt; result
=&gt; true
[2] pry(#&lt;PostsController&gt;)&gt; post_params
=&gt; {"title"=&gt;"a", "category"=&gt;"b", "content"=&gt;"c"}
</code></pre>

<h2 id="section-2">その他のコマンド</h2>

<p>ステップ実行に使えるコマンドは下記４つ。</p>

<ol>
  <li><code>step</code></li>
  <li><code>next</code></li>
  <li><code>finish</code></li>
  <li><code>continue</code></li>
</ol>

<p>次の行を実行したければ<code>step</code>、Pryセッションから抜けたい場合は<code>continue</code>を打てばよい。</p>

<h3 id="section-3">コマンドエイリアス</h3>

<p>それぞれのコマンドをいちいち打つのがダルいので、プロジェクトルートに<code>.pryrc</code>を置きに下記のように書くとエイリアスを設定できるようだ。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="no">PryByebug</span><span class="p">)</span>
  <span class="no">Pry</span><span class="o">.</span><span class="n">commands</span><span class="o">.</span><span class="n">alias_command</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;continue&#39;</span>
  <span class="no">Pry</span><span class="o">.</span><span class="n">commands</span><span class="o">.</span><span class="n">alias_command</span> <span class="s1">&#39;s&#39;</span><span class="p">,</span> <span class="s1">&#39;step&#39;</span>
  <span class="no">Pry</span><span class="o">.</span><span class="n">commands</span><span class="o">.</span><span class="n">alias_command</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;next&#39;</span>
  <span class="no">Pry</span><span class="o">.</span><span class="n">commands</span><span class="o">.</span><span class="n">alias_command</span> <span class="s1">&#39;f&#39;</span><span class="p">,</span> <span class="s1">&#39;finish&#39;</span>
<span class="k">end</span></code></pre></div>

<p>本エントリで紹介したpry-byebugなどのデバッグgemを駆使してRailsアプリのデバッグをもっと効率的にしましょう！</p>

<p>Happy Debugging Life!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[カナダ・バンクーバー情報（2014年度版）]]></title>
    <link href="http://blog.toshimaru.net/vancouver-infomation/"/>
    <updated>2014-11-09T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/vancouver-infomation</id>
    <content type="html"><![CDATA[<p>2013年から一年間カナダ・バンクーバーに滞在した僕がバンクーバーの様々な情報を共有します。</p>

<h1 id="section">生活編</h1>
<ul>
  <li>電車はスカイトレインが便利
    <ul>
      <li>切符は三種類のみ。1ゾーン、2ゾーン、3ゾーンの三種類。数字が小さくなるほど移動できる範囲が狭くなる。 使うエリアが1ゾーン内であれば1ゾーンを、2ゾーンエリアに跨って使用するのであれば2ゾーンの切符を購入する。</li>
      <li>定期券を一旦買ってしまえばそのゾーン内であれば電車もバスも好きなだけ乗ってOK. 難しい料金システムはない。</li>
      <li><a href="http://tripplanning.translink.ca/FILE/Apps/Info/images/skytrain_map.png">スカイトレインMAPを参考にどうぞ</a>。</li>
    </ul>
  </li>
  <li>車なくても公共交通機関が十分整備されているのでバンクーバー周辺は大体どこでも行ける。
    <ul>
      <li>米国シアトルまで買い物に行きたい！とかなら車あったほうが断然便利。</li>
    </ul>
  </li>
  <li>エスカレーターのポジションは右側。大阪スタイル。</li>
  <li>図書館が良い感じ。集中して勉強したいときに。
    <ul>
      <li>十分な数の机、椅子が用意されていてWiFiも提供されている。</li>
    </ul>
  </li>
  <li>ショッピングモールに行きたいなら、メトロタウン or パシフィックセンターが定番どころ。</li>
  <li>いろんな小さい店をぶらぶらと巡回したいなら、ショッピングストリートとして栄えるロブソンストリートを歩いてみるのがオススメ。</li>
  <li><a href="http://vcryugaku.exblog.jp/14575406">BCIDを作成</a>すれば、身分証としてパスポートを持ち歩く必要がない。日本人は若く見られがちでIDをバーやクラブでアラサーでも求められることがあるので、BCIDはあるとかなり便利。パスポートを持ち歩きたくない人は作成するべき。</li>
  <li>くしゃみとかせきをしたときは「Excuse me.」「Pardon me.」と音を出してしまったことに対して周囲に謝っておく。</li>
  <li>1カナダドル = ???円　→<a href="https://www.google.ca/?q=1%20cad%20jpy#q=1+cad+jpy">ここ</a>で確認</li>
</ul>

<h2 id="section-1">シェアハウスを探す</h2>
<ul>
  <li>シェアハウスを探すなら下記２つのサイトが定番どころ。
    <ul>
      <li>英語サイト：<a href="http://vancouver.craigslist.ca/">Craigslist</a></li>
      <li>日本語サイト：<a href="http://www.jpcanada.com/">JPカナダ</a></li>
      <li>日本人と住みたいという方はJPカナダ一択、その辺気にしないということであればCraigslitも便利（ただ連絡が返ってこない率が高いかも）。</li>
    </ul>
  </li>
</ul>

<h1 id="section-2">気候編</h1>
<ul>
  <li>夏を除いて一年を通して雨が多い。傘必須（折りたたみを１つ常に持ち歩いていると便利）。
    <ul>
      <li>バンクーバーは間違いなく夏が最高の季節。雨が少なく暑すぎるない（むしろたまに寒い）。</li>
      <li>夏は朝6時から夜の10時まで太陽の光があるという日の長さ。素晴らしい。</li>
    </ul>
  </li>
  <li>気温は夏は25℃とかそんな感じ。</li>
  <li>冬は10℃以下になるが、雪が降ることはあんまりない。</li>
</ul>

<h1 id="section-3">留学情報編</h1>
<ul>
  <li>留学時には保険は悪い事言わんから入っておけ。
    <ul>
      <li>こっちでもっと安い保険に加入するというのもアリだけの日本のサービスの質が世界一。</li>
    </ul>
  </li>
  <li>もしあなたが特別なスキルが無く、カナダで就職したいのなら、BCITで専門スキルを付けるのが手堅い。</li>
  <li>フレキシブルな学校探してるなら<a href="http://www.eh-plus.com/">eh-plus</a>とかオススメ。</li>
</ul>

<h1 id="section-4">観光編</h1>
<ul>
  <li>ウィスラー:  スキー・スノボができる</li>
  <li>ビクトリア: バンクーバー近くにある島。田舎。</li>
  <li>ダウンダウン: 小さいのでダウンタウンエリア内は歩いていろいろなところ回れる</li>
  <li>ノース・バンクーバー: ハイキングとかしに行くならここ。シーバスに乗るのも気持ち良い。</li>
  <li>スタンレー・パーク: 自転車のって外周してみるのが○</li>
  <li>カナダプレイス周辺をぶらぶら歩くだけでも気持ちいい</li>
  <li><a href="http://www.tripadvisor.ca/Attractions-g154943-Activities-Vancouver_British_Columbia.html">ここ</a>から探してみてもよい。</li>
</ul>

<h1 id="section-5">レストラン編</h1>
<ul>
  <li>日本食レストラン
    <ul>
      <li>「Goo」レストランが有名。ダウンタウンに何店舗かある</li>
      <li>焼き肉なら「牛角」がある</li>
      <li>ラーメンなら日本でも有名な「山頭火」が安心のチョイス。</li>
    </ul>
  </li>
  <li>サンドイッチショップ
    <ul>
      <li><a href="http://meatandbread.ca/">Meat &amp; Bread</a></li>
      <li><a href="http://scentofasandwich.com/">Scent of a Sandwich</a></li>
      <li><a href="http://www.biglousbutchershop.com/">Big Lou’s Butcher Shop</a></li>
      <li><a href="http://www.finchteahouse.com/">Finch’s Tea &amp; Coffee House</a></li>
      <li>バンクーバーで食べるランチはサンドイッチが一番好きだった</li>
    </ul>
  </li>
  <li>カフェ
    <ul>
      <li>チェーン系のカフェはStarbucks, Waves, Blenzあたりに行けば良い</li>
      <li>日本と違い、Wifiは当然のようにどこも使えるのでネットの心配ご無用。</li>
      <li>自動販売機が無い代わりにみんなコーヒーを買って飲み歩きをする。</li>
    </ul>
  </li>
  <li>パブ
    <ul>
      <li>Cactus Club Cafeが安定（ちょい料金は高めかも）</li>
      <li>ビールの種類がいろいろあるのでいろいろな味・香りを楽しむのがオススメ。</li>
    </ul>
  </li>
  <li><a href="http://www.urbanspoon.com/c/14/Vancouver-restaurants.html">ここ</a>で探してみると良い。</li>
</ul>

<h1 id="section-6">人・国民性編</h1>
<ul>
  <li>カナダ人はインターナショナルな空気感になれてるので気さくで優しい
    <ul>
      <li>といっても「カナダ人」といったときに中国系カナダ人とかも含むので、同じカナダ人でも国民性が全然違う。</li>
    </ul>
  </li>
  <li>カナダで生まれ育っていない中国人とか韓国系の人の接客態度は無愛想なことが多いかも？</li>
  <li>適当
    <ul>
      <li>給料、教科書遅れる</li>
      <li>アポイントメントがあるのに20-30分待たされたりした</li>
      <li>レジで会計通したのに袋に商品入れてくれなかったり、商品をレジまで持っていったのにレジに通してくれなかったり</li>
    </ul>
  </li>
  <li>アジア人多い。半分くらい
    <ul>
      <li>東アジアのインターナショナルスチューデントの割合は50%中国、30%韓国人、15%日本人、5%台湾人みたいな印象。</li>
    </ul>
  </li>
</ul>

<h1 id="section-7">各種コミュニティ</h1>
<ul>
  <li><a href="http://www.meetup.com/cities/ca/bc/vancouver/">meetup.com</a>なんかでコミュニティを見つけるとよい。</li>
  <li>オススメは下記
    <ul>
      <li>Japanese meetup: 日本人、日本人好きが集まるmeetup. 日本好きの外人とか仲良くなりやすく話しも通じて外人の友達つくるならこのへん良い。</li>
      <li>English Conversation Meetup: 英語第二外国語学習者が集まるコミュニティ。英語初学者には参加しやすいコミュニティ。１年以上くらい居てある程度喋れる人にとっては、ややレベルが低いのが難。</li>
    </ul>
  </li>
  <li>自分はエンジニアなので各種技術meetupに参加してました。</li>
</ul>

<h1 id="section-8">航空券</h1>
<ul>
  <li>カナダ→日本 or anywhere の航空券はこのあたりで検索するとよい
    <ul>
      <li><a href="http://www.tripadvisor.ca/CheapFlightsHome">tripadvisor</a></li>
      <li><a href="http://www.skyscanner.ca/">Skyscanner</a>　<a href="http://www.skyscanner.jp/">Skyscanner 日本語</a>　</li>
    </ul>
  </li>
  <li>バンクーバー発のツアーを探すなら <a href="http://www.his-canada.com/">H.I.Sバンクーバー支店</a>があるので気軽に相談してみるとよい。</li>
</ul>

<h1 id="section-9">日系食材</h1>
<ul>
  <li>「コンビニ屋」が有名。価格は日本価格の2,3倍の印象。</li>
  <li>安く探したいのなら中国系のスーパーマーケットになるけど「T&amp;T」が良い。</li>
</ul>

<h1 id="section-10">バンクーバーの物価</h1>
<ul>
  <li>全体的に日本よりちょっと高くつくイメージ。</li>
  <li>日本より高い
    <ul>
      <li>タバコ</li>
      <li>本</li>
      <li>酒</li>
      <li>食料品</li>
      <li>レストラン</li>
    </ul>
  </li>
  <li>日本より安い
    <ul>
      <li>CD</li>
      <li>DVD</li>
      <li>服</li>
      <li>コーヒー</li>
    </ul>
  </li>
  <li>同じくらい
    <ul>
      <li>家賃（ダウンタウンはやっぱ高い。でもシェアハウスなら安く見つけられる）</li>
    </ul>
  </li>
</ul>

<h1 id="section-11">治安編</h1>
<ul>
  <li>世界的に見てバンクーバーは相対的にかなり安全な街だと思う</li>
  <li>図書館でPC使ってる時にウトウトしてたらMacBook Airを盗まれそうになった<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup>。気をつけるに越したことはないです</li>
  <li>ガスタウン周辺にホームレスが多くいる。歩いてるだけで「小銭恵んでくれませんか？」と歩み寄ってくる</li>
  <li>基本アメリカと一緒でブロックとブロックの間の細い小路は夜（昼でも）歩かないほうが良い。</li>
  <li>人気のあるメインストリートさえ歩いていれば一人で夜歩いてても危なくはないと感じた</li>
  <li>女性は上記に全くあてはまらないかもなので、気をつけすぎるくらいでいいかも？</li>
</ul>

<h1 id="section-12">仕事編</h1>
<ul>
  <li>基本的には定時上がりがデフォルト。</li>
  <li>レストランとかカフェの店員の時給は1200円くらいだろうか。</li>
  <li>カナダで働くなら<a href="http://gotovan.com/manual/view.php?id=9">SINカードが必要なので取得</a>しときましょう。</li>
  <li>メモ: <a href="http://internetcom.jp/busnews/20130213/3.html">バンクーバーを北米進出のゲートウェイに</a></li>
</ul>

<h1 id="section-13">その他</h1>
<ul>
  <li>荷造りはここを参考に。<a href="http://ta-bi.net/posts/packing/">荷造り・パッキングのコツ</a></li>
  <li>カナダは世界でロシアについで二番目にでかい国、自然がたくさん！</li>
  <li>バンクーバーは世界の「住みたい街」ランキングに毎年上位にくいこむ街。カナダでも一番ナイスな街なんて言われているっぽい。</li>
</ul>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>それまではバンクーバーは日本くらい安全だなぁと思い込んでいたけどそのイメージがこの事件以降崩れさった <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpecが通ったり落ちたりしたときに]]></title>
    <link href="http://blog.toshimaru.net/rspec-occasional-fail/"/>
    <updated>2014-09-23T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/rspec-occasional-fail</id>
    <content type="html"><![CDATA[<p>RSpecがたまに落ちたり通ったりする。そんなときはRSpecのテスト実行順序によりテストがFailしている可能性が高い。つまりあるテストがあるテストの実行後じゃないと通らない、みたいな状況に陥っている可能性があり、これは順番に依存したテストなのでよろしくない状態である。</p>

<h3 id="section">バージョン情報</h3>
<ul>
  <li>rails (4.1.5)</li>
  <li>rspec (3.1.0)</li>
</ul>

<p>RSpecを順番に依存させないために<code>spec_helper.rb</code>でこんな設定がされている。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Run specs in random order to surface order dependencies. If you find an</span>
<span class="c1"># order dependency and want to debug it, you can fix the order by providing</span>
<span class="c1"># the seed, which is printed after each run.</span>
<span class="c1">#     --seed 1234</span>
<span class="n">config</span><span class="o">.</span><span class="n">order</span> <span class="o">=</span> <span class="s2">&quot;random&quot;</span></code></pre></div>

<p>この設定によりテスト実行の順序がランダムになり、順序に依存しないテストの記述が可能となる。シード値はテストの最後に得られる。</p>

<pre><code>Randomized with seed 724
</code></pre>

<p>Failしたテストのこのシード値を設定してテストを走らせればFailしたテストの順番を再現できる。</p>

<pre><code>$ bundle exec rspec --seed 724 --fail-fast
</code></pre>

<p><code>--seed</code>でシード値を指定、<code>--fail-fast</code>を設定してFailしたときにテストを即時終了させるようにする。</p>

<p>こうすればFailするテストを再現できて、どのテストが順番に依存して落ちているのかがわかります。</p>

<h3 id="section-1">参考</h3>
<p><a href="http://ikm.hatenablog.jp/entry/2013/03/26/003838">ランダムに落ちるspecの修正で便利だったRSpecの2つの設定</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[就活日記(完) 就職]]></title>
    <link href="http://blog.toshimaru.net/job-hunting-fin/"/>
    <updated>2014-08-15T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/job-hunting-fin</id>
    <content type="html"><![CDATA[<p><a href="/job-hunting-0/">就活日記(0) エントリー</a></p>

<h2 id="gunosy">Gunosyに入社しました</h2>
<p>7月初旬より就活を始め就活日記を書いてまいりましたが、Gunosyに入社する運びとなりましたのでご報告します（今月からすでに働き始めてます）。Gunosyの訪問記事は<a href="/job-hunting-4/">こちら</a>。</p>

<p>決め手としてはまぁこんな感じです。</p>

<ul>
  <li><a href="/job-hunting-0/">就活日記(0)</a>にて書いた「応募基準」に大体当てはまってる</li>
  <li>さくっとオファーもらった（会社説明兼面接が一回、CTO/CEOとの面接一回の計二回）</li>
  <li>若くて優秀な人が多そう、仲も良さそう</li>
  <li>勉強会も定期開催してて新しい技術の習得に積極的</li>
  <li>Goとかプロダクションレベルで使ってる珍しい会社→新しいこともやれそう</li>
</ul>

<p>一ヶ月以上かかるかなーと見込んでましたが、本格的に就活を始めてから3週間以内にはオファーをもらえた。自分の場合は無職だったので、オファーをもらったその日に「明日からアルバイトで働いてもいいよ」と言われ、結局オファーをもらった2日後にはアルバイトとしてGunosyで働いていた。今月からは社員として働いている。</p>

<p>ちなみにGunosy面接時には僕の書いた<a href="/job-hunting-0/">就活日記(0)</a>を中の人が既に読んでもらっていたようで、僕の求める応募基準に則して会社説明をしてもらったので就活日記を書いておいてよかった。</p>

<h3 id="section">他の会社の話</h3>

<p>「他の会社はダメだったの？」と聞かれると、正直どこもいい会社で「（もし採用してくれるのであれば）どの会社に入っても面白い体験ができるだろう」と思います。特に（入社会社以外で）オススメはどこか？ときかれると、以下です。</p>

<ul>
  <li>Wantedly</li>
  <li>KAIZEN Platform</li>
</ul>

<p>ただココに挙げたのはそれぞれWantedlyはサービスに共感したから、KAIZENにははっきりと明文化されたエンジニア文化があるからであって、一番重要なのは<strong>興味のある会社に実際に行って・そこにいる人に会って・話を聞いて・自分に合うかどうか</strong>だと思うので、とりあえず話を聞いてみることを強くオススメします。その上で会社が合うかどうかは自分で判断してください。</p>

<h2 id="section-1">モダンな開発環境は当たり前</h2>
<p>会社を選ぶ基準の１つに「モダンな開発環境が整備されている」があったのですが、今回いろいろ会社を周って話を聞いた結果、（少なくとも自分が周った会社は）<strong>モダンな開発環境は当たり前</strong>のように整備されてました。Githubは当たり前のように使ってコードレビューをしていて、テストを書いてCI回してて、リッチなJSアプリケーションを書くときはJavaScript MV*フレームワーク使ってて、PCはMacで…といった感じです。瑣末な違いはあれどどこの会社もモダンな開発環境は整っていました。</p>

<p>なので最近のスタートアップにおいてはモダンな開発環境が整っていることは前提として、その先の「何をやっていきたいか？」というのが重要だと感じました。具体的には、、、</p>

<ul>
  <li>どんなiOS/Android/Webアプリケーションを作りたいのか？</li>
  <li>どんな仲間と働きたいのか？</li>
  <li>スモールチームで個人の判断で裁量持って動きたいのか、それとも他の誰かと協力して動きたいのか？</li>
  <li>どんな雰囲気の中で働きたいのか？</li>
  <li>等々…</li>
</ul>

<p>このへんの辺りを考えて会社を選んでいければいいかと思いました。</p>

<h2 id="web">WEBエンジニアでよかった</h2>
<p>Wantedlyで「とりあえずまずは話を聞きに行く」という感じでカジュアルに話を聞きに行けるのも、どこも良いエンジニアを求めているからだと思います。自分は文系出身でエンジニアになる予定はそんなに無かった身ですが、今こうやっていろんな会社に行っていろんな人と会ってお話できるのもWEBエンジニアだったからこそです。エンジニアで良かった。</p>

<h2 id="were-hiring">We’re hiring!!!</h2>
<p>GunosyはGunosyをもっともっと良くしてくれるエンジニアを求めています（具体的にはiOSエンジニア、Androidエンジニア、Go/Railsエンジニア、Pythonエンジニア）。興味があれば一緒に働きましょう。応募は以下からどうぞ。</p>

<p><a href="https://www.wantedly.com/companies/gunosy">Gunosyのソーシャル採用・Wantedly</a></p>

<h2 id="amazon">Amazonウィッシュリスト</h2>
<p>エンジニアの謎のくれくれ根性、ウザいからやめろ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Rails】has_many, throughの逆の関連はdelegate, toかhas_one, through]]></title>
    <link href="http://blog.toshimaru.net/belongs_to-through/"/>
    <updated>2014-08-12T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/belongs_to-through</id>
    <content type="html"><![CDATA[<h2 id="tldr">TL;DR</h2>

<p>結論は<code>belongs_to</code>,<code>through</code>でなく、<code>delegate</code>, <code>to</code> or <code>has_one</code>, <code>through</code>。</p>

<h2 id="hasmany-through">has_many, through</h2>

<p>RailsでこんなModel構成があったとします。ユーザーは複数の記事をもっていて、その記事は複数のタグを持っている、という状態です。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:posts</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:tags</span>
  <span class="n">belongs_to</span> <span class="ss">:user</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Tag</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">belongs_to</span> <span class="ss">:post</span>
<span class="k">end</span></code></pre></div>

<p>特定のUserがどんなTagを持っているかを調べるには<code>through</code>を使うと簡単に実装できます。<code>User</code>モデルに<code>through</code>を追加しましょう。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:posts</span>
  <span class="n">has_many</span> <span class="ss">:tags</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:posts</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:tags</span>
  <span class="n">belongs_to</span> <span class="ss">:user</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Tag</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">belongs_to</span> <span class="ss">:post</span>
<span class="k">end</span></code></pre></div>

<p>こうすることで、<code>@user.tags</code>でユーザーが所有するタグを取得できます。</p>

<p>ではここで疑問。逆に<code>Tag</code>から<code>Post</code>を省いて<code>User</code>を導きだすことはできないのでしょうか？</p>

<h2 id="delegate-">delegate を使う</h2>

<p>結論からいうと<code>delegate</code>を利用することで省けます。具体的には<code>Tag</code>モデルをこうします。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:posts</span>
  <span class="n">has_many</span> <span class="ss">:tags</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:posts</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:tags</span>
  <span class="n">belongs_to</span> <span class="ss">:user</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Tag</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">belongs_to</span> <span class="ss">:post</span>
  <span class="n">delegate</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="ss">:post</span>
<span class="k">end</span></code></pre></div>

<p>これで<code>@tag.user</code>なんて風に当該tagを所有するuserにアクセスできます。</p>

<h2 id="section">追記（2014/11/11）</h2>

<p>このように<code>has_one</code>, <code>through</code>も使えます。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:posts</span>
  <span class="n">has_many</span> <span class="ss">:tags</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:posts</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:tags</span>
  <span class="n">belongs_to</span> <span class="ss">:user</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Tag</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">belongs_to</span> <span class="ss">:post</span>
  <span class="n">has_one</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:post</span>
<span class="k">end</span></code></pre></div>

<h3 id="section-1">参考</h3>
<ul>
  <li><a href="http://stackoverflow.com/questions/4021322/belongs-to-through-associations">belongs_to through associations</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[就活日記(6) KAIZEN platform Inc.]]></title>
    <link href="http://blog.toshimaru.net/job-hunting-6/"/>
    <updated>2014-07-26T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/job-hunting-6</id>
    <content type="html"><![CDATA[<p><a href="/job-hunting-0/">就活日記(0) エントリー</a></p>

<h2 id="section">きっかけ</h2>
<p>Kaizenといえばカリスマハッカー、<a href="https://twitter.com/naoya_ito">Naoya Itoさん</a>が勤めていることでよく知られているかと思う。<a href="http://d.hatena.ne.jp/naoya/">ブログ</a>や<a href="https://speakerdeck.com/naoya">プレゼン</a>、<a href="http://rebuild.fm/">rebuild.fm</a>にてNaoyaさんが折に触れてKaizenについて言及するので気になって気になって仕方ない、ということで訪問。</p>

<h2 id="kaizen">Kaizenを支えている技術</h2>

<p>使われている技術は下記ページに紹介されているので、ここで改めて紹介する必要はないかと思う。</p>

<p><a href="http://kaizenplatform.in/hiring/engineer.html">KAIZEN platform Inc. ではエンジニアを募集しています</a></p>

<p><img src="/images/posts/job-hunting/kaizen.png" alt="Kaizen Technology" /></p>

<p>開発の進め方などに関してはNaoyaさんがブログにまとめているのでそちらを読むとよいかと思う。</p>

<p><a href="http://d.hatena.ne.jp/naoya/20131013/1381651545">Webサービス開発現場から / 近頃の開発のやり方 ･･･ Github と Pull Request とコードレビュー</a></p>

<h2 id="section-1">働き方</h2>
<p>上ページの中でも紹介されているがKaizenの働き方は特徴的だ。見出しだけ抜き出してみると、、、</p>

<ul>
  <li>OSSのように作る</li>
  <li>オープンなコミュニケーション</li>
  <li>リモートワーク</li>
  <li>自動化</li>
  <li>コードとしてのインフラ</li>
  <li>オープンな組織・ハッカー文化</li>
</ul>

<p>この働き方は<a href="https://github.com/about/jobs">githubの働き方</a>をモデルとして作られているようだ。中でも興味深いのはリモートワークを導入している点。日本企業でリモートワークを積極的に導入していこうとしている企業はそんなに多くはない中、Kaizenは「リモートワークを妥協」していない。リモートワークを実践するためのツール群も良いモノであればどんどん導入していっているようだ。</p>

<p>エンジニアはリモートワークを絶対しなければいけないのかというとそんなことはなく、重要視しているのは「その人が最も生産性が高くなる環境で働く」ということのようだ。新宿にあるオフィスから物理的に通勤困難な人はリモートワークで働かざるを得ないわけだが、そうではない人はオフィスに来て働いてもOKだという。中には週の半分がリモート、もう半分はオフィスで働く人もいるようだ。</p>

<p>このへんのリモートワークをするかどうかの選択権もまた与えられているのは良いことかと思う。というのも人によってはリモートでは生産性が出ないという人もいるからだ。自分の場合、集中してコードを書きたいときはリモートワークしたくて、コミュニケーションが多く発生するようなステージ（まだ仕様が煮詰まっていないプロジェクト発足時など）だと対面で働きたいなと思う。</p>

<h2 id="section-2">なぜ日本にはリモートワークが少ないのか</h2>
<p>ところでなぜ日本はそれほどリモートワークスタイルが少ないのだろうか（自分は海外で働いたときにリモートワークを経験した。あとリモートワークの求人も見ることが多かった）。考えられる理由としては、</p>

<ul>
  <li>従業員を信頼していない（「直接管理していないからサボるんじゃないか」という懸念）</li>
  <li>対面での会議、コミュニケーションができない</li>
  <li>セキュリティ的な理由（会社の仕事は外に持ち出さない）</li>
  <li>社内規定が云々…</li>
</ul>

<p>上記のうち会議、コミュニケーションの部分に関してはITツールを駆使することで解決できることだ。特にエンジニアの場合、Githubをはじめ、HipChat/Slackなどのチャットツール、Hangout/Skypeなどのビデオ通話サービスなどリモートワークでも問題なく仕事を進められるようなツール群が存在するのでリモート勤務がやりやすいかと思う。</p>

<p>一方でリモートワークは会社にとって良い事もある。</p>

<ul>
  <li>割り込みが減る→作業に集中できる→生産性アップ</li>
  <li>物理的な場所を取らない</li>
  <li>リモートワークを許可することで場所にとらわれない採用ができる。（地方に住む人、海外在住の人）</li>
</ul>

<p>最近は37Signalsの<a href="http://www.amazon.co.jp/gp/product/4152094338/ref=as_li_tf_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4152094338&amp;linkCode=as2&amp;tag=toshimaru-22">『強いチームはオフィスを捨てる: 37シグナルズが考える「働き方革命」』</a>なんて本が話題になったけど、まだまだリモートワークが少ないのが日本の現状なので今後リモートワークを認める企業がKaizenのように増えていけばいいと思う。</p>

<blockquote>
  <p>もちろん対面でやった方が早いと思うことはたくさんあるけど、本当にそれは対面じゃないとできないのかというところをまずは疑ってみないことには、新しい働き方を追求するということはできない。結果的にそれで会議を減らす、非同期に作業することができれば全体の効率が上がるわけで、そこで思考停止しない･･･ということが大切だと思う</p>
</blockquote>

<p>(via <a href="http://d.hatena.ne.jp/naoya/20140512/1399864629">Sqwiggle が良いという話、またはリモートでアジャイル開発をどう進めるか</a>)</p>

<h2 id="section-3">採用・人について</h2>
<p>自分の受けてる企業がそうだったけど、スタートアップって良い人がいれば即採用みたいなノリが多かったけど、Kaizenはじっくり人を選考している感を受けました。書類選考が採用のスタート地点なあたりそれが表れている。</p>

<p>逆にいうとそれだけ「応募者が技術者として（働き方含め）Kaizenに合うか」を見極めたいのでしょう。ちなみに既にKaizenで働いている人はリモートでもしっかり働ける技術的に熟達したエンジニアの方が多い印象でした。</p>

<h2 id="section-4">エンジニア行動指針</h2>
<p>Kaizenにはこんな行動指針がエンジニア間でシェアされている。</p>

<p><img src="/images/posts/job-hunting/kaizen-kodoshishin.png" alt="Kaizenエンジニア行動指針" /></p>

<p>(via <a href="https://speakerdeck.com/naoya/b2bsabisukai-fa-falsexian-chang-kara-number-devsumi">B2Bサービス開発の現場から</a>)</p>

<p>チラリと見せてもらったけど分量としてそんなに多くなく、シンプルで力強い行動指針が示されていてとても良い感じでした。宗教ってわけじゃないけどいざ何かに迷ったときに「この行動指針に則って考えるとこっちのほうが良いよね」みたいに考えられるので良いよね。</p>

<h2 id="section-5">こんな人におすすめ</h2>
<p>リモートワークワークをしたい方、Kaizenの働き方に共感できる人であればKaizenはステキな環境なのではないのでしょうか。Kaizenにはハッカーにとって居心地の良い環境があります。</p>

<p><a href="http://kaizenplatform.in/hiring/engineer.html#application_engineer">KAIZEN platform Inc.の公式採用ページ</a></p>

<h2 id="section-6">追記（2014/11/03）</h2>
<script async="" class="speakerdeck-embed" data-id="153982a0431f01329b8852a2dda60dbc" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[brew upgrade mysql 後にpidエラー]]></title>
    <link href="http://blog.toshimaru.net/mac-mysql-upgrade-error/"/>
    <updated>2014-07-25T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/mac-mysql-upgrade-error</id>
    <content type="html"><![CDATA[<p><code>brew upgrade mysql</code>したらmysqlが起動しなくなった。<code>mysql.server start</code>ができない。</p>

<pre><code>$ mysql.server start
Starting MySQL
. ERROR! The server quit without updating PID file (/usr/local/var/mysql/Toshimac.local.pid).
</code></pre>

<p>ググるといろいろ出てきて30分くらい調査した結果、結局下記コマンド一発で起動できた。</p>

<pre><code>$ sudo mysql.server start
Password:
Starting MySQL
. SUCCESS!
</code></pre>

<p>ただの権限周りの問題だったようです。</p>
]]></content>
  </entry>
  

</feed>
