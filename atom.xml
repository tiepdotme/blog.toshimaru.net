<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Hack Your Design!]]></title>
  <link href="http://blog.toshimaru.net/atom.xml" rel="self"/>
  <link href="http://blog.toshimaru.net/"/>
  <updated>2015-08-21T16:36:37+00:00</updated>
  <id>http://blog.toshimaru.net/</id>
  <author>
    <name><![CDATA[Toshimaru]]></name>
  </author>

  
  <entry>
    <title type="html"><![CDATA[他のrakeタスクに依存するrakeタスクの実行]]></title>
    <link href="http://blog.toshimaru.net/rake-dependency/"/>
    <updated>2015-08-22T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/rake-dependency</id>
    <content type="html"><![CDATA[<h2 id="rakerake">rakeタスクの前に別のrakeタスクを実行</h2>

<p>ある特定のRakeタスクを実行する前に別のタスクを実行したい場合、このようにタスクを書きます。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">task</span><span class="p">(</span><span class="ss">:x</span><span class="p">)</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;x&quot;</span> <span class="p">}</span>
<span class="n">task</span><span class="p">(</span><span class="ss">:y</span><span class="p">)</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;y&quot;</span> <span class="p">}</span>
<span class="n">task</span><span class="p">(</span><span class="ss">:z</span><span class="p">)</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;z&quot;</span> <span class="p">}</span>

<span class="n">desc</span> <span class="s2">&quot;dependency rake task&quot;</span>
<span class="n">task</span> <span class="ss">foo</span><span class="p">:</span> <span class="o">[</span><span class="ss">:x</span><span class="p">,</span> <span class="ss">:y</span><span class="p">,</span> <span class="ss">:z</span><span class="o">]</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s2">&quot;foo task&quot;</span>
<span class="k">end</span></code></pre></div>

<p>結果はこんな感じ。</p>

<pre><code>$ rake foo
x
y
z
foo task
</code></pre>

<p>タスク<code>x</code>, <code>y</code>, <code>z</code> が実行された後にタスク<code>foo</code>が実行されます。</p>

<h2 id="rakerake-1">rakeタスクの後に別のrakeタスクを実行</h2>

<p>ある特定のRakeタスクを実行する後に別のタスクを実行したい場合、<code>enhance</code>を使ってこのようにタスクを書けます。さっきの書いたタスクをenhanceしてみましょう。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">task</span><span class="p">(</span><span class="ss">:x</span><span class="p">)</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;x&quot;</span> <span class="p">}</span>
<span class="n">task</span><span class="p">(</span><span class="ss">:y</span><span class="p">)</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;y&quot;</span> <span class="p">}</span>
<span class="n">task</span><span class="p">(</span><span class="ss">:z</span><span class="p">)</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;z&quot;</span> <span class="p">}</span>

<span class="n">desc</span> <span class="s2">&quot;dependency rake task&quot;</span>
<span class="n">task</span> <span class="ss">foo</span><span class="p">:</span> <span class="o">[</span><span class="ss">:x</span><span class="p">,</span> <span class="ss">:y</span><span class="p">,</span> <span class="ss">:z</span><span class="o">]</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s2">&quot;foo task&quot;</span>
<span class="k">end</span>

<span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="o">[</span><span class="s2">&quot;foo&quot;</span><span class="o">].</span><span class="n">enhance</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s2">&quot;foo enhancing task&quot;</span>
<span class="k">end</span></code></pre></div>

<p>結果はこんな感じ。</p>

<pre><code>$ rake foo
x
y
z
foo task
foo enhancing task
</code></pre>

<h3 id="section">参考</h3>
<ul>
  <li><a href="http://www.dan-manges.com/blog/modifying-rake-tasks">Modifying Rake Tasks - Dan Manges’s Blog</a></li>
  <li><a href="https://github.com/ruby/rake">ruby/rake</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[日米ワークスタイル比較]]></title>
    <link href="http://blog.toshimaru.net/work-style-difference/"/>
    <updated>2015-08-05T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/work-style-difference</id>
    <content type="html"><![CDATA[<p><a href="/job-hunting-fin/">就職活動が完了</a>して日本の会社に勤め始めてはや１年が経った。カナダ・バンクーバーでの就労経験を経て、日本に帰国後日本の会社でWEBエンジニアとして１年間働いてみて思うところ（主に日米の技術者のワークスタイルの違いを中心に）をまとめてみようと思う<sup id="fnref:canada-van"><a href="#fn:canada-van" class="footnote">1</a></sup>。</p>

<h2 id="vs-">北米の働き方 vs 日本の働き方</h2>

<p>北米は定時で帰宅する一方、日本は残業前提なところがある。</p>

<p>僕の場合、北米で働いていたときは8時間の定められた労働時間後（9:00~17:00）すぐに帰宅していた。MAX残業してもせいぜい１時間、18:00前には必ず職場を出ていた。</p>

<h3 id="section">スタートアップはバリバリ働く!?</h3>

<p>僕がカナダで務めていた会社は従業員10人ほどのスタートアップだった。僕の中で国は関係なく「小さい会社 = （人数が少ない分）バリバリ働く」という仮設があったので、僕の務めた会社も残業は日本ほどないにせよそれなりにある思っていた。</p>

<p>だけどその仮説は間違っていた。その会社は小さなスタートアップが集まるシェアオフィスの一角にあったのだが、どの会社であれ午後6前には基本的にみんな帰っていた。そこに入っていた全ての会社がその時間なのだから、会社の規模の大小は関係無いのだろう。会社の規模にかかわらずみんな定時に帰ってたのだ。</p>

<h3 id="section-1">残業が当たり前な日本のワークスタイル</h3>

<p>カナダに行く前、僕は日本のいわゆるSIの会社に勤めていた。当時は残業しない日のほうが圧倒的に少なかった。むしろ「一時間くらいの残業は当たり前」という感じで働いていたので、１時間の残業で済めば「よっしゃ！今日は早く帰れた！」という感じ。</p>

<p>一番問題だと感じるのは「残業はして当然」という空気感であり、別にこれは会社として誰かが公式に言ったわけでもなかったし、早く帰ったら査定に響くというクソみたいなことは全くなかったのだけど、漠然と帰りにくい空気感はあった。</p>

<p>「いや、そんな空気なんてもん無視すればいいじゃん」っていうのはごもっともで僕も大賛成なんだけど、なんかこうみんなが帰らずに働いていることがさも当たり前のようにすごくナチュラルに働いているもんだから、僕もあたかも働いているのが当然なことだという感じで働き、それが習慣化していった。惰性的な労働、忌むべきモノだ。</p>

<h3 id="section-2">残業する人=仕事のできない人</h3>

<p>こういう空気を感じちゃったりとか周囲の雰囲気に流されている時点で「あぁ、わたしって日本人」と残念な気持ちになるのだけど、そういう空気を作らないという意味では上司が真っ先に早く帰ることは重要だと思う。もちろん仕事をしっかりこなした上で。</p>

<p>カナダでは全員定時に帰っているもんだから、<strong>基本的に定時に帰っていない人・帰れない人っていうのは仕事のできない人・遅い人</strong> というレッテルがはられる印象があった。残業30分しようものなら自分一人だけ会社に取り残されるので居心地が非常に悪い。「仕事が遅いせいで仕事が終わっていないのだ」という感覚に襲われた（実際はそんなことはないのだけど）。なのでカナダで働いていたときは自然と業務時間内に仕事に終わらせようという気持ちになり、その中で最高のパフォーマンスを出そうという気持ちになった。</p>

<p>あとみんな定時に帰ることが前提になっているので、定時の一時間前に仕事の依頼を飛ばすであったり、帰ろうとしているときにトコトコと歩いてきて「ちょっと聞きたいことがあるんだけど？？」みたいなアホなことは絶対にしない（本当の本当に緊急時以外は）。</p>

<h3 id="section-3">タスクの積み方・こなし方</h3>

<p>ボスからのタスクの積み方、デベロッパーのタスクのこなし方も違いがあった。ボスからのタスクは降りてくる時点できちんと優先度付けされていて、開発者にたいしては「最低限これはやってね」という高優先度なタスクがメインで振られていて、タスクを過度に積みすぎているということはなかった。</p>

<p>開発者側としてもタスクのこなし方として「今週中のタスクが終らなかったから気合で頑張る」みたいなことはなくて、終らなかったら終らなかったで仕方ないという感じで淡々と仕事してた。その結果、下記のようなシチュエーションも垣間見た。</p>

<blockquote>
  <p>デッドラインに遅れるのはけっこう平気でしてる。デッドラインが今週中というようなタスクを「あとちょっとで終わる！」「ほぼ完了と言って良い」なんていいながら3週間くらい平気でスケジュール遅延している。そしてそのタスクの担当者はバケーションに入るとかで結局中途半端な感じのタスクを置き土産として長期休暇に入っていった。</p>
</blockquote>

<p><a href="/my-impression-after-working-2-months/">2ヶ月間WEBエンジニアとして海外で働いてみて感じたこと</a></p>

<h2 id="vs--1">北米の給料 vs 日本の給料</h2>

<p>給与面に関しては北米で働いたほうが断然良い。</p>

<p><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/p/paiza/20140724/20140724174014.png" alt="" /></p>

<p><a href="http://paiza.hatenablog.com/entry/2014/07/23/IT%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%81%AE%E5%9C%B0%E4%BD%8D%E3%81%A8%E3%81%AF%EF%BC%9F%E5%9B%BD%E5%88%A5%E3%80%81%E8%81%B7%E7%A8%AE%E5%88%A5%E3%81%AE%E5%B9%B4%E5%8F%8E%E6%AF%94%E8%BC%83">ITエンジニアの地位とは？国別、職種別の年収比較から見えるもの - paiza開発日誌</a></p>

<p>本データによると日本とアメリカのエンジニアの平均年収は倍近く違う<sup id="fnref:money"><a href="#fn:money" class="footnote">2</a></sup>。日本が約400万なのに対してアメリカでは約800万円。僕の北米で就職活動した身としての肌感は、日本のWEBエンジニアの給与レンジは400万円〜800万円である一方、北米のレンジは最低600万円から最高1200万とかそういう感じ。</p>

<h3 id="section-4">レベル別給与レンジ</h3>

<p>具体的にレベル別にまとめる下記のような給与レンジだった。</p>

<ul>
  <li>Junior Level: 600~800万円</li>
  <li>Intermediate Level: 800~1000万円</li>
  <li>Senior Level: 1000~1200万円 or それ以上</li>
</ul>

<p>僕もカナダで求職していたときはお金は本当に最低限でいいやくらいに考えていたのだけど、エンジニアの給与ベースが良い分、結果的に日本と同水準くらいかむしろ少し多いくらいの貰えていた。</p>

<blockquote>
  <p>英語の部分で実力不足を感じたので別に給与とか（こっちで生活できる程度に貰えれば）どーでもいいや、って口だったけど技術スキルの部分で会社に認めてもらって日本にいたときと同じ水準くらいの給与は貰えている。嬉しい誤算だ。</p>
</blockquote>

<p><a href="/my-impression-after-working-2-months/">2ヶ月間WEBエンジニアとして海外で働いてみて感じたこと</a></p>

<p>お金が欲しくて腕に自身があるエンジニアならば、カナダのバンクーバーやアメリカ、サンフランシスコあたりに行って働く方が確実に稼げると思う。</p>

<h3 id="section-5">開発者の社会的地位</h3>

<p>給与が高い分、開発者の社会的地位も高いと感じた。オフィスも開発者が働きやすいように設計されている（勉強会が開けるようなスペース、無料で飲めるビール・ドリンク類）。毎週のように何かしら開発者が集まるミートアップが開催され、無料のピザ・ビールがふるまわれる。「手に職を」といったときに数ある選択肢の中でデベロッパーの優位性は高まっている印象を受けた。</p>

<p>一方、日本だとIT技術者の印象って「IT土方」という言葉があることからしてそこまで良くはない。最近は良くはなってきていると感じるけど、とても良いというレベルには至っていないと感じる。</p>

<h2 id="section-6">北米と日本のエンジニアのレベルについて</h2>

<p>「著名なオープンソースの多くはアメリカから出ているし、世界的に有名なGoogleなどのIT会社もアメリカからたくさん出ているしやっぱITの聖地はアメリカだわー、スーパーハッカー多いに違いないわー 間違いないわー」</p>

<p>そう考えていた時期が僕にもありました…。</p>

<p>いや、アメリカから著名なオープンソースも出てるのは事実だし世界に羽ばたくスタートアップが多く育つ土壌があることも間違いないのだけど、エンジニアのレベルとして考えたときに日本の技術者と北米の技術者でそこまで変わらないんじゃないかってこと。</p>

<p>どこ行ってもそうだけど、デキる人はデキるしデキない人はデキない。別に北米で働いても技術者のレベルの平均値が高いなーという印象は僕はなかった（ただ実力とか結果にシビアではある）。</p>

<h2 id="section-7">最後に</h2>
<p>一年日本で働いてみて、改めて日本と北米のワークスタイルの違いについて整理したくて本記事を書いた。</p>

<p>とくにオチみたいなものは用意していないのだけど、日米の技術者のワークスタイルを比較したときにやっぱり日本の技術者の働き方はまだまだ改善できるなと思う。日本で働くエンジニアの一人としてその辺をもっと整備していくためにはどうしたら良いかということを考えてモンモンとしている最近。</p>

<div class="footnotes">
  <ol>
    <li id="fn:canada-van">
      <p>僕が働いたのはカナダのバンクーバーですが本記事では「北米」としてまとめています。実際のところは同じ北米でも西海岸と東海岸で働き方・雰囲気はけっこう違ったりします。 <a href="#fnref:canada-van" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:money">
      <p>物価や税金の違いがあるので額面だけでの単純な比較はできないのだが、ここで引用している図では「物価指数後」の図なのでその辺も加味されています。 <a href="#fnref:money" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HashキーのStringアクセスとSymbolアクセスのパフォーマンス比較]]></title>
    <link href="http://blog.toshimaru.net/string-vs-symbol-in-hash/"/>
    <updated>2015-07-24T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/string-vs-symbol-in-hash</id>
    <content type="html"><![CDATA[<p>HashキーのStringアクセスとSymbolアクセスはどっちが早いのか？ ということで比較してみます。コードは<a href="http://www.sitepoint.com/unraveling-string-key-performance-ruby-2-2/">こちら</a>を参照しています。</p>

<h2 id="section">前提条件</h2>

<p>比較として使用したRubyのバージョンは下記です。</p>

<ul>
  <li>Ruby 2.1.6</li>
  <li>Ruby 2.2.2</li>
</ul>

<h3 id="section-1">ベンチマーク・コード</h3>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">&#39;benchmark/ips&#39;</span>

<span class="no">STRING_HASH</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;foo&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;bar&quot;</span> <span class="p">}</span>
<span class="no">SYMBOL_HASH</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:foo</span> <span class="o">=&gt;</span> <span class="s2">&quot;bar&quot;</span>  <span class="p">}</span>

<span class="no">Benchmark</span><span class="o">.</span><span class="n">ips</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="no">STRING_HASH</span><span class="o">[</span><span class="s2">&quot;foo&quot;</span><span class="o">]</span> <span class="p">}</span>
  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;symbol&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="no">SYMBOL_HASH</span><span class="o">[</span><span class="ss">:foo</span><span class="o">]</span>  <span class="p">}</span>
<span class="k">end</span></code></pre></div>

<h2 id="ruby-21">Ruby 2.1</h2>

<pre><code>Calculating -------------------------------------
              string    70.713k i/100ms
              symbol    93.805k i/100ms
-------------------------------------------------
              string      3.356M (± 7.6%) i/s -     16.688M
              symbol      6.363M (± 8.3%) i/s -     31.612M
</code></pre>

<p>シンボルを使った方がハッシュのアクセスは2倍ほど速い。</p>

<h2 id="ruby-22">Ruby 2.2</h2>

<pre><code>Calculating -------------------------------------
              string    77.873k i/100ms
              symbol    78.367k i/100ms
-------------------------------------------------
              string      5.604M (± 7.8%) i/s -     27.879M
              symbol      6.463M (± 8.2%) i/s -     32.130M
</code></pre>

<p>シンボルを使った方がハッシュのアクセスは速いが、Stringでのハッシュのアクセス速度はシンボルのそれと大きく変わらない値となっている。</p>

<h2 id="section-2">結論</h2>
<p>シンボルを使ったキーの方がHashのアクセスは速い。2.1だとそれが顕著。しかし2.2以降はそう変わらない速度になってきている。</p>

<hr />

<h3 id="json">【おまけ】JSONの場合</h3>

<p>JSONをパースした場合。下記のコードで<code>symbolize_names</code>した場合とそうでない場合を比較。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;benchmark/ips&#39;</span>

<span class="no">SAMPLE_JSON</span> <span class="o">=</span> <span class="s1">&#39;{&quot;a&quot;: 1, &quot;b&quot;: 2, &quot;c&quot;: 3}&#39;</span>

<span class="no">Benchmark</span><span class="o">.</span><span class="n">ips</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="nb">hash</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="no">SAMPLE_JSON</span><span class="p">);</span> <span class="nb">hash</span><span class="o">[</span><span class="s2">&quot;c&quot;</span><span class="o">]</span> <span class="p">}</span>
  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;symbol&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="nb">hash</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="no">SAMPLE_JSON</span><span class="p">,</span> <span class="ss">symbolize_names</span><span class="p">:</span> <span class="kp">true</span><span class="p">);</span> <span class="nb">hash</span><span class="o">[</span><span class="ss">:c</span><span class="o">]</span> <span class="p">}</span>
<span class="k">end</span></code></pre></div>

<h3 id="ruby-21-1">Ruby 2.1</h3>

<pre><code>Calculating -------------------------------------
          string    11.910k i/100ms
          symbol    11.072k i/100ms
-------------------------------------------------
          string    148.480k (± 4.5%) i/s -    750.330k
          symbol    141.624k (± 5.3%) i/s -    708.608k
</code></pre>

<h3 id="ruby-22-1">Ruby 2.2</h3>

<pre><code>Calculating -------------------------------------
              string    11.980k i/100ms
              symbol    11.129k i/100ms
-------------------------------------------------
              string    150.421k (± 6.5%) i/s -    754.740k
              symbol    137.871k (± 9.1%) i/s -    689.998k
</code></pre>

<p><code>symbolize_names</code>せずに純粋なStringのほうが若干速いという結果が得られた。</p>

<h3 id="section-3">参考</h3>
<ul>
  <li><a href="http://www.sitepoint.com/unraveling-string-key-performance-ruby-2-2/">Unraveling String Key Performance in Ruby 2.2</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsアプリケーションをLAN内に公開する]]></title>
    <link href="http://blog.toshimaru.net/publish-rails-app-in-lan/"/>
    <updated>2015-07-17T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/publish-rails-app-in-lan</id>
    <content type="html"><![CDATA[<p>普通に<code>rails server</code>した場合、デフォルトでlocalhost:3000でリッスンするので、LAN内の外部のクライアントからLocal IPではアクセスすることができません。(Railsのバージョンは4.2.3です)</p>

<pre><code>$ rails server
=&gt; Booting WEBrick
=&gt; Rails 4.2.3 application starting in development on http://localhost:3000
=&gt; Run `rails server -h` for more startup options
=&gt; Ctrl-C to shutdown server
</code></pre>

<p>これをLAN内に公開したい場合はどうするか。下記のように<code>binding</code>オプションを付けてやります。</p>

<pre><code>$ rails server --binding=0.0.0.0
=&gt; Booting WEBrick
=&gt; Rails 4.2.3 application starting in development on http://0.0.0.0:3000
=&gt; Run `rails server -h` for more startup options
=&gt; Ctrl-C to shutdown server
</code></pre>

<p>これで同じLAN内にいるクライアントからローカルIP（e.g. <code>192.168.1.10:3000</code> ）でRailsへとアクセス可能になります。</p>

<h3 id="section">参考</h3>
<ul>
  <li><a href="http://stackoverflow.com/questions/29132719/rails-application-not-visible-to-local-network">osx yosemite - Rails application not visible to local network - Stack Overflow</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQLファイルでRailsのスキーマ情報管理]]></title>
    <link href="http://blog.toshimaru.net/manage-schema-with-sql-in-rails/"/>
    <updated>2015-07-03T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/manage-schema-with-sql-in-rails</id>
    <content type="html"><![CDATA[<p>Railsでは<code>db:migrate</code>すると、デフォルトで<code>db/schema.rb</code>を生成しますが、SQLでスキーマ情報を管理することも可能です。下記のように<code>config/application.rb</code>内で<code>active_record.schema_format</code>を<code>:sql</code>と設定することで可能になります（デフォルト値は<code>:ruby</code>）。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># config/application.rb</span>
<span class="k">module</span> <span class="nn">Rails4TwitterClone</span>
  <span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="no">Rails</span><span class="o">::</span><span class="no">Application</span>
    <span class="n">config</span><span class="o">.</span><span class="n">active_record</span><span class="o">.</span><span class="n">schema_format</span> <span class="o">=</span> <span class="ss">:sql</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></div>

<p>これで<code>db/migrate</code>するとデフォルトのschema.rbではなく、<code>db/structure.sql</code>というSQLファイルを吐きます。</p>

<h2 id="structuresql">structure.sqlをロードする</h2>

<p>生成されたstructure.sqlファイルは、下記のコマンドでデータベースへロードできます。</p>

<pre><code>rake db:structure:load
</code></pre>

<h2 id="sql">SQLファイルだけ欲しい場合</h2>

<p>sqlダンプファイルのみが欲しい場合は、<code>config.active_record.schema_format</code>の設定を変えずとも下記コマンドでstructure.sqlを生成することができます。</p>

<pre><code>rake db:structure:dump
</code></pre>

<h3 id="section">参考</h3>
<ul>
  <li><a href="http://tech-kazuhisa.hatenablog.com/entry/20130902/1378126825">schema.rbじゃなくてstructure.sqlでスキーマ情報を管理しよう - tech-kazuhisa’s blog</a></li>
  <li><a href="http://edgeguides.rubyonrails.org/active_record_migrations.html#types-of-schema-dumps">Active Record Migrations — Ruby on Rails Guides</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS Summit Tokyo 2015で発表してきました]]></title>
    <link href="http://blog.toshimaru.net/aws-summit-tokyo-2015/"/>
    <updated>2015-06-05T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/aws-summit-tokyo-2015</id>
    <content type="html"><![CDATA[<p><a href="http://www.awssummit.tokyo/">AWS Summit Tokyo 2015</a>でGunosyのモバイルプッシュ通知基盤について発表してきました。下記が当日の発表スライドになります。</p>

<script async="" class="speakerdeck-embed" data-id="9d7bd2a0fda94826b67f162e2fd3bdbd" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>

<ul>
  <li><a href="https://speakerdeck.com/toshimaru/900mo-daunrodoapuri-gunosy-wozhi-eruda-gui-mo-mobairuputusiyutong-zhi-ji-pan-1">900万ダウンロードアプリ『Gunosy』を支える大規模モバイルプッシュ通知基盤 // Speaker Deck</a><sup id="fnref:longurl"><a href="#fn:longurl" class="footnote">1</a></sup></li>
</ul>

<h2 id="section">発表を追えて</h2>

<p>今回これほどの大舞台で30分以上（与えられた時間は40分）話すのは始めての機会でしたので、緊張しましたが悪いものではなく心地のよい緊張感でした。正直、私の発表の裏が<a href="https://speakerdeck.com/mirakui/developer-productivity-in-cookpad">Cookpadさんの発表</a>だったのでそんなに人は集まらないのかなーと想定していましたが、嬉しい事に約70-80名くらいの方々に聴講していただけました。（圧倒的感謝！）</p>

<p>40分という比較的長い枠でしたが時間にせかされることなくじっくり話せて大体35分強で発表を終えることができました。今回のように40分くらいの発表の場合、（スライドのスタイルにもよりますが）大体スライド枚数50~60枚程度が調度良いように感じました。あと、早く終わりすぎたり、時間オーバーしてしまうリスクを減らすためにも事前に最低一回発表を通しておいて時間をしっかり見積もっておくことは重要だと感じました。</p>

<p>余談になりますが、当日のTwitterタイムラインを見てるとカメラの音・フラッシュがうるさいという声が多く出てました。私の発表でもそうしたのですが、事前に資料をWEBにアップロードして講演最初にWEBに既にアップロード済みな旨を伝えるとよいと思いました。</p>

<h2 id="section-1">スライド中の参考リンク</h2>
<ul>
  <li><a href="http://monstar-lab.com/column/140911_01">【Android】GCMのregistrationIdの一意性 - Monstar Lab, Inc.</a></li>
  <li><a href="http://dev.classmethod.jp/cloud/aws/sns-mobile-token/">Amazon SNS のモバイルトークン管理についてのベストプラクティス ｜ Developers.IO</a></li>
  <li><a href="http://www.slideshare.net/conmame/sns-mobile-push">気軽なSNS Mobile Push の話</a></li>
  <li><a href="http://qiita.com/ykf/items/4978a9ccf0dd1cc6a19b">iOS8アップデートでアプリへのプッシュ通知でハマる点 - Qiita</a></li>
  <li><a href="http://www.slideshare.net/shimy_net/amazon-sns-mobile-push">Amazon SNS Mobile Push を使ってみる</a></li>
  <li><a href="https://developers.google.com/android/reference/com/google/android/gms/iid/InstanceID">InstanceID - Google APIs for Android - Google Developers</a></li>
</ul>

<h2 id="section-2">その他のリンク</h2>
<ul>
  <li><a href="http://dev.classmethod.jp/cloud/aws/awssummit-tokyo-2015-dev-05/">[レポート][Dev-05:Mobile] 900万ダウンロードアプリ『Gunosy』を支える大規模モバイルプッシュ通知基盤 #AWSSummit ｜ Developers.IO</a></li>
  <li><a href="https://twitter.com/hashtag/AWSSummit?src=hash">Tweets about #AWSSummit hashtag on Twitter</a></li>
</ul>

<div class="footnotes">
  <ol>
    <li id="fn:longurl">
      <p>speakerdeckのURLが非常に汚いですが公開した後に<a href="http://sotarok.hatenablog.com/entry/2014/10/11/133123">URLを制御できる</a>ことを教えてもらいました。URLを変更して元URLが404になるのも不便かと思いますので、今回はこの汚いURLでお許しください。 <a href="#fnref:longurl" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[video.js で m3u8 形式の動画ファイルをブラウザで再生する]]></title>
    <link href="http://blog.toshimaru.net/play-m3u8-video-in-browser/"/>
    <updated>2015-05-03T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/play-m3u8-video-in-browser</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/videojs/video.js">video.js</a>を使ってm3u8形式の動画ファイルをSafari以外のブラウザでも再生する方法を紹介します。</p>

<p><a href="http://toshimaru.net/demo/videojs-m3u8/" class="btn btn-primary">Demo</a></p>

<h2 id="section">動作環境</h2>

<p>下記環境で（現時点の最新版での）動作を確認しています。</p>

<ul>
  <li>Chrome</li>
  <li>Safari</li>
  <li>Opera</li>
  <li>Safari</li>
</ul>

<p><strong>※要Flash</strong></p>

<h2 id="js">使うJSライブラリ</h2>
<ul>
  <li><a href="https://github.com/videojs/video.js">videojs/video.js</a>
    <ul>
      <li>基本素材. 動画ファイルを様々なブラウザで再生できるようにする。</li>
    </ul>
  </li>
  <li><a href="https://github.com/videojs/videojs-contrib-media-sources">videojs/videojs-contrib-media-sources</a>
    <ul>
      <li>videoタグに動画ソースを流し込めるようにするvideo.jsプラグイン。</li>
      <li>W3Cのドラフト仕様<a href="https://w3c.github.io/media-source/">Media Source Extensions</a>が元のよう。</li>
    </ul>
  </li>
  <li><a href="https://github.com/videojs/videojs-contrib-hls">videojs/videojs-contrib-hls</a>
    <ul>
      <li>HLS(<code>m3u8</code>)形式の動画ファイルを再生可能にするvideo.jsプラグイン。</li>
      <li>HLSに対応していないブラウザでもFlash技術を通すことで再生可能にしているよう。</li>
    </ul>
  </li>
</ul>

<h2 id="usage">Usage</h2>

<p>全体HTMLファイルはこんな感じ。</p>

<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>Video.js m3u8<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;css/video-js.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//cdnjs.cloudflare.com/ajax/libs/video.js/4.12.5/video.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/videojs-media-sources.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/videojs.hls.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>

    <span class="nt">&lt;h1&gt;</span>Video.js m3u8 demo page<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;video</span> <span class="na">id=</span><span class="s">&quot;test&quot;</span> <span class="na">class=</span><span class="s">&quot;video-js vjs-default-skin&quot;</span> <span class="na">height=</span><span class="s">&quot;300&quot;</span> <span class="na">width=</span><span class="s">&quot;600&quot;</span> <span class="na">controls</span><span class="nt">&gt;</span>
      <span class="nt">&lt;source</span> <span class="na">src=</span><span class="s">&quot;//solutions.brightcove.com/jwhisenant/hls/apple/bipbop/bipbopall.m3u8&quot;</span> <span class="na">type=</span><span class="s">&quot;application/x-mpegURL&quot;</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/video&gt;</span>

    <span class="nt">&lt;script&gt;</span>
      <span class="kd">var</span> <span class="nx">player</span> <span class="o">=</span> <span class="nx">videojs</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">);</span>
      <span class="nx">player</span><span class="p">.</span><span class="nx">play</span><span class="p">();</span>
    <span class="nt">&lt;/script&gt;</span>

  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span></code></pre></div>

<h3 id="cssjs">CSS/JS読み込み</h3>

<p>video.js, videojs-media-sources.js, videojs.hls.js 以外にもCSSを読み込まないとエラーが出て再生できなかったのでCSSも読み込むこと。</p>

<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;css/video-js.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//cdnjs.cloudflare.com/ajax/libs/video.js/4.12.5/video.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/videojs-media-sources.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/videojs.hls.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span></code></pre></div>

<h3 id="video">videoタグ</h3>

<p>適当なクラスを持った<code>&lt;video&gt;</code>をタグに<code>height</code>, <code>width</code>を定義してやって、中に<code>type="application/x-mpegURL"</code>と<code>src</code>を持った<code>&lt;source&gt;</code>タグを入れてやる。</p>

<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;video</span> <span class="na">id=</span><span class="s">&quot;test&quot;</span> <span class="na">class=</span><span class="s">&quot;video-js vjs-default-skin&quot;</span> <span class="na">height=</span><span class="s">&quot;300&quot;</span> <span class="na">width=</span><span class="s">&quot;600&quot;</span> <span class="na">controls</span><span class="nt">&gt;</span>
  <span class="nt">&lt;source</span> <span class="na">src=</span><span class="s">&quot;//solutions.brightcove.com/jwhisenant/hls/apple/bipbop/bipbopall.m3u8&quot;</span> <span class="na">type=</span><span class="s">&quot;application/x-mpegURL&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/video&gt;</span></code></pre></div>

<h3 id="javascript">JavaScript</h3>

<p><code>videojs()</code>内にvideoタグのIDでplayerを生成してplay。</p>

<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">player</span> <span class="o">=</span> <span class="nx">videojs</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">);</span>
<span class="nx">player</span><span class="p">.</span><span class="nx">play</span><span class="p">();</span></code></pre></div>

<h2 id="section-1">最後に</h2>

<p>クロスオリジンな動画リソースを読み込むときは CORS(Cross-Origin Resource Sharing) の設定を適切にしてやる必要があることに注意！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[天下一bot武闘会でクソbotたちを発表してきました]]></title>
    <link href="http://blog.toshimaru.net/tenkaichi-bot/"/>
    <updated>2015-04-25T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/tenkaichi-bot</id>
    <content type="html"><![CDATA[<p>先日<a href="http://connpass.com/event/12689/">天下一bot武闘会</a>で僕が作った <img class="emoji" title=":shit:" alt=":shit:" src="https://assets.github.com/images/icons/emoji/unicode/1f4a9.png" height="20" width="20" align="absmiddle" /> botたちを発表してきました。</p>

<script async="" class="speakerdeck-embed" data-id="d050418ad57e4a67821c7e1ec7d5a73a" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>

<h2 id="img-classemoji-titleshit-altshit-srchttpsassetsgithubcomimagesiconsemojiunicode1f4a9png-height20-width20-alignabsmiddle--bots">つくった <img class="emoji" title=":shit:" alt=":shit:" src="https://assets.github.com/images/icons/emoji/unicode/1f4a9.png" height="20" width="20" align="absmiddle" /> bots</h2>
<ol>
  <li><a href="https://github.com/toshimaru/hubot-shinchoku-dou">hubot-shinchoku-dou</a></li>
  <li><a href="https://github.com/toshimaru/hubot-hibi-no-kokoro">hubot-hibi-no-kokoro</a></li>
  <li><a href="https://github.com/toshimaru/hubot-hanakin">hubot-hanakin</a></li>
  <li><a href="https://github.com/toshimaru/hubot-hikakin">hubot-hikakin</a></li>
</ol>

<p>ほんとにしょーもないクソbotたちですが、発表することにより彼らを<img class="emoji" title=":shit:" alt=":shit:" src="https://assets.github.com/images/icons/emoji/unicode/1f4a9.png" height="20" width="20" align="absmiddle" />世界から救えた気がして満足しています。<img class="emoji" title=":angel:" alt=":angel:" src="https://assets.github.com/images/icons/emoji/unicode/1f47c.png" height="20" width="20" align="absmiddle" /></p>

<p>スライド作成に使ったアプリは<a href="http://www.decksetapp.com/">Deckset</a>ってやつです。現時点でMac専用アプリ、デザインのカスタマイズも非力ですがなんといってもmarkdown書けばそれっぽいスライドが仕上がるのがとても良い。今後も使っていきたいアプリである。</p>

<h2 id="section">参考</h2>
<ul>
  <li><a href="https://twitter.com/search?f=realtime&amp;q=%23tenkabot&amp;src=typd">#tenkabot - Twitter Search</a></li>
  <li><a href="https://github.com/moqada/hubot-shinchoku">moqada/hubot-shinchoku</a></li>
  <li><a href="http://r7kamura.hatenablog.com/entry/2015/04/18/011129">天下一bot武闘会で発表しました - ✘╹◡╹✘</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQueryイベントデリゲーションを利用して遅延取得されるDOMにイベントをアタッチする]]></title>
    <link href="http://blog.toshimaru.net/jquery-event-delegation/"/>
    <updated>2015-03-24T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/jquery-event-delegation</id>
    <content type="html"><![CDATA[<p>jQueryイベントデリゲーションをコードとともにおさらい。</p>

<h2 id="no-event-delegation">No Event Delegation</h2>

<p>デリゲーションしないパターン。何が問題なのか。</p>

<p>まずは「default item」をクリックする。「clicked!」になったね。「Add List」する。そいつをもう一度クリック。「clicked!」になってほしい。あれ、何も起こらないね？</p>

<p data-height="268" data-theme-id="0" data-slug-hash="MYLYxq" data-default-tab="result" data-user="toshimaru" class="codepen">See the Pen <a href="http://codepen.io/toshimaru/pen/MYLYxq/">No `.on` selector </a> by toshi (<a href="http://codepen.io/toshimaru">@toshimaru</a>) on <a href="http://codepen.io">CodePen</a>.</p>
<script async="" src="//assets.codepen.io/assets/embed/ei.js"></script>

<p>なぜならjQueryのセレクタ<code>$("#list li")</code>では、初期のDOMにしかイベントがアタッチされないから。後から追加されるDOMに対してはイベントアタッチはされない。</p>

<h2 id="use-event-delegation">Use Event Delegation</h2>

<p>イベントデリゲーションするバターン。こちらではどうでしょう？</p>

<p>まずは「default item」をクリックする。「clicked!」になったね。「Add List」する。そいつをもう一度クリック。「clicked!」になった。Add Listで追加されたDOMに対してもしっかりイベントが補足されるようになっている。</p>

<p data-height="259" data-theme-id="0" data-slug-hash="dPaPEY" data-default-tab="result" data-user="toshimaru" class="codepen">See the Pen <a href="http://codepen.io/toshimaru/pen/dPaPEY/">Use `.on` selector</a> by toshi (<a href="http://codepen.io/toshimaru">@toshimaru</a>) on <a href="http://codepen.io">CodePen</a>.</p>
<script async="" src="//assets.codepen.io/assets/embed/ei.js"></script>

<p><code>$("#list").on</code>の第二引数としてセレクタ（<code>li</code>）を渡すことで、しっかり<code>$("#list")</code>のリスト要素全てにイベントがデリゲートされていますね。 <img class="emoji" title=":on:" alt=":on:" src="https://assets.github.com/images/icons/emoji/unicode/1f51b.png" height="20" width="20" align="absmiddle" /></p>

<h3 id="section">参考</h3>
<ul>
  <li><a href="https://learn.jquery.com/events/event-delegation/">Understanding Event Delegation | jQuery Learning Center</a></li>
  <li><a href="https://api.jquery.com/on/">.on() | jQuery API Documentation</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[カバレッジ率計測サービスをCoverallsからCodeClimateに乗り換えてみた話]]></title>
    <link href="http://blog.toshimaru.net/coverage-with-codeclimate/"/>
    <updated>2015-03-18T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/coverage-with-codeclimate</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/toshimaru/Rails-4-Twitter-Clone">趣味で立ち上げているプロジェクト</a>をこの度、CoverallsからCodeClimateに乗り換えてみたので、その知見の共有。</p>

<h2 id="sass">どんなSasSを使うか</h2>

<p>自分がRails(ruby)プロジェクト(not private)をGithubに公開するとき、必ず使うSaaS群があって、例えばCIサービスであったりカバレッジ率の計測であったりコードの品質の計測であったりする。それをまとめると下記のようになる。</p>

<table>
  <thead>
    <tr>
      <th>サービス</th>
      <th>用途</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="https://travis-ci.org/repositories">Travis CI</a></td>
      <td>CI回す</td>
    </tr>
    <tr>
      <td><a href="https://coveralls.io/">Coveralls</a></td>
      <td>カバレッジ率を計測</td>
    </tr>
    <tr>
      <td><a href="https://codeclimate.com/">Code Climate</a></td>
      <td>コード品質を計測</td>
    </tr>
    <tr>
      <td><a href="https://gemnasium.com/dashboard">Gemnasium</a></td>
      <td>Gemのバージョンチェック</td>
    </tr>
  </tbody>
</table>

<p><strong>※ Publicなレポジトリであれば全て無料で使えます</strong></p>

<p><img src="https://cloud.githubusercontent.com/assets/803398/6694382/558b6f5c-cd1d-11e4-96ff-1e67d5905e83.png" alt="badges" /></p>

<p><strong>【図】SaaSの利用により表示できるようになるバッジ群</strong></p>

<h2 id="coveralls--codeclimate">Coveralls → CodeClimate</h2>

<p>今回その内の１つであるCoverallsをCodeClimateに移行してみたのですが、そのきっかけとしてはCircleCIでCodeClimateとのインテグレーションが推奨されていたから。</p>

<p><a href="http://docs.travis-ci.com/user/code-climate/">Travis CI: Using Code Climate with Travis CI</a></p>

<p>コード品質とカバレッジ率は分散するよりも１つのサービスに集約されて閲覧できたほうが都合がよいしTravis CIのすすめるCodeClimateに統合してみることとした。</p>

<h2 id="section">手順</h2>

<h3 id="set-code-climate-token">Set Code Climate token</h3>

<p>CodeClimateのSettingsからテスト実行時のTokenがゲットできるのでそれを<code>.travis.yml</code>にセット。</p>

<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="l-Scalar-Plain">addons</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">code_climate</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">repo_token</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">adf08323...</span></code></pre></div>

<h3 id="intall-codeclimate-reporter">Intall CodeClimate reporter</h3>

<p>codeclimate-test-reporter を<code>Gemfile</code>のtest groupに追加する。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">gem</span> <span class="s2">&quot;codeclimate-test-reporter&quot;</span><span class="p">,</span> <span class="nb">require</span><span class="p">:</span> <span class="kp">false</span></code></pre></div>

<p>CodeClimateのセットアップインストラクション通りに書くとこう。<code>spec/rails_helper.rb</code>に書きます。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s2">&quot;codeclimate-test-reporter&quot;</span>
<span class="no">CodeClimate</span><span class="o">::</span><span class="no">TestReporter</span><span class="o">.</span><span class="n">start</span></code></pre></div>

<h3 id="simplecov">Simplecovと同居させる</h3>

<p>私の環境の場合、既にSimplecovが入っておりましたので、simplecovとインテグレーションさせる場合はちょっと異なるセットアップが必要になります。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">&#39;simplecov&#39;</span>
<span class="nb">require</span> <span class="s2">&quot;codeclimate-test-reporter&quot;</span>
<span class="no">SimpleCov</span><span class="o">.</span><span class="n">formatter</span> <span class="o">=</span> <span class="no">SimpleCov</span><span class="o">::</span><span class="no">Formatter</span><span class="o">::</span><span class="no">MultiFormatter</span><span class="o">[</span>
  <span class="no">SimpleCov</span><span class="o">::</span><span class="no">Formatter</span><span class="o">::</span><span class="no">HTMLFormatter</span><span class="p">,</span>
  <span class="no">CodeClimate</span><span class="o">::</span><span class="no">TestReporter</span><span class="o">::</span><span class="no">Formatter</span>
<span class="o">]</span>
<span class="no">SimpleCov</span><span class="o">.</span><span class="n">start</span> <span class="s2">&quot;rails&quot;</span></code></pre></div>

<p>このようにSimpleCovのformatterに<code>CodeClimate::TestReporter::Formatter</code>を入れてやれば <img class="emoji" title=":ok:" alt=":ok:" src="https://assets.github.com/images/icons/emoji/unicode/1f197.png" height="20" width="20" align="absmiddle" /></p>

<p><img src="https://cloud.githubusercontent.com/assets/803398/6694285/ad01584c-cd1c-11e4-9f29-1589821188da.png" alt="codeclimate" /></p>

<p>これでCode Climate上で品質・カバレッジ率が閲覧できるようになりました。</p>

<h3 id="section-1">参考</h3>
<p><a href="https://coderwall.com/p/vwhuqq/using-code-climate-s-new-test-reporter-together-with-coveralls-and-simplecov-s-html-formatter">Using Code Climate’s new test reporter together with Coveralls and SimpleCov’s HTML Formatter</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby vs Golang でパフォーマンス比較してみた]]></title>
    <link href="http://blog.toshimaru.net/ruby-vs-go/"/>
    <updated>2015-03-05T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/ruby-vs-go</id>
    <content type="html"><![CDATA[<p>Rubyで書いたコードがGoで書いたらどれくらい早くなるかを検証してみたくて試してみた。画像ファイルをダウンロードするだけの単純な処理での比較。（複雑な処理になるとまた全然違ってくると思います）</p>

<h2 id="ruby">Rubyの場合</h2>

<p>イメージを100個ダウンロードするコードをサンプルにやってみました。</p>

<h3 id="section">直列にダウンロード</h3>

<p>何も考えず１つ１つダウンロードするコード。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>

<span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">100</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
  <span class="nb">open</span><span class="p">(</span><span class="s2">&quot;./images/</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">.png&quot;</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
   <span class="n">f</span><span class="o">.</span><span class="n">write</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&quot;http://dummyimage.com/600x400&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></div>

<pre><code>$ time ruby no_thread.rb
ruby no_thread.rb  0.25s user 0.10s system 1% cpu 29.813 total
</code></pre>

<p>約30秒。遅い。そしてCPUコストは低い。</p>

<h3 id="thread">Threadで並行ダウンロード</h3>

<p>Thread使って平行に処理してみる。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>

<span class="n">thr</span> <span class="o">=</span> <span class="o">[]</span>
<span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">100</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
  <span class="n">thr</span> <span class="o">&lt;&lt;</span> <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
    <span class="nb">open</span><span class="p">(</span><span class="s2">&quot;./images/</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">.png&quot;</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
      <span class="n">f</span><span class="o">.</span><span class="n">write</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&quot;http://dummyimage.com/600x400&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
<span class="n">thr</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:join</span><span class="p">)</span></code></pre></div>

<pre><code>$ time ruby thread.rb
ruby thread.rb  0.20s user 0.10s system 27% cpu 1.105 total
</code></pre>

<p>1.1秒。劇的な改善。CPUは30％くらい使ってる。</p>

<h2 id="go">Goの場合</h2>

<p>Goで書きなおしてみる。</p>

<p><a href="http://qiita.com/keisukeP/items/f4d680eb9e8f93263fa9">こちら</a>を参考に書いてみた。</p>

<div class="highlight"><pre><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&quot;fmt&quot;</span>
	<span class="s">&quot;io&quot;</span>
	<span class="s">&quot;net/http&quot;</span>
	<span class="s">&quot;os&quot;</span>
	<span class="s">&quot;sync&quot;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">wg</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>

	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">100</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">wg</span><span class="p">.</span><span class="nx">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
		<span class="kd">var</span> <span class="nx">url</span> <span class="kt">string</span> <span class="p">=</span> <span class="s">&quot;http://dummyimage.com/600x400&quot;</span>

		<span class="c1">//ファイルを開く</span>
		<span class="nx">file</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Create</span><span class="p">(</span><span class="s">&quot;images/&quot;</span> <span class="o">+</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Sprint</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;.png&quot;</span><span class="p">)</span>
		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
			<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
		<span class="p">}</span>

		<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
			<span class="nx">response</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Get</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span>
			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
				<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
			<span class="p">}</span>
			<span class="c1">//レスポンスのボディを閉じる関数の遅延実行指定</span>
			<span class="k">defer</span> <span class="nx">response</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>

			<span class="c1">//fmt.Println(&quot;status:&quot;, response.Status)</span>

			<span class="c1">//ファイルを閉じる関数の遅延実行指定</span>
			<span class="k">defer</span> <span class="nx">file</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>

			<span class="c1">//レスポンスのボディから読み込みつつファイルに書き出す。</span>
			<span class="nx">io</span><span class="p">.</span><span class="nx">Copy</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">response</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
			<span class="nx">wg</span><span class="p">.</span><span class="nx">Done</span><span class="p">()</span>
		<span class="p">}()</span>
	<span class="p">}</span>

	<span class="nx">wg</span><span class="p">.</span><span class="nx">Wait</span><span class="p">()</span>
<span class="p">}</span></code></pre></div>

<h3 id="go-run-">Go run で実行</h3>

<p>コンパイルせずに<code>go run</code>で実行してみる。</p>

<pre><code>$ time go run thread.go
go run thread.go  0.50s user 0.21s system 50% cpu 1.413 total
</code></pre>

<h3 id="go-build-img-classemoji-titlearrowright-altarrowright-srchttpsassetsgithubcomimagesiconsemojiunicode27a1png-height20-width20-alignabsmiddle--run">Go build <img class="emoji" title=":arrow_right:" alt=":arrow_right:" src="https://assets.github.com/images/icons/emoji/unicode/27a1.png" height="20" width="20" align="absmiddle" /> Run</h3>

<p>buildして実行する。Rubyで書いたコードの3/4の時間で完了した。</p>

<pre><code>$ go build thread.go
$ time ./thread
./thread  0.06s user 0.07s system 16% cpu 0.789 total
</code></pre>

<p>たぶん比較するロジックが複雑化すればするほど、Goのパフォーマンスの良さがガッツリ効いてきそう。</p>

<p>CPUコストがRubyより半分程度に済んでいるところもナイス。</p>

<hr />

<h3 id="shell-script-">【番外編】Shell Script で実行</h3>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="k">for</span> i in <span class="sb">`</span>seq <span class="m">1</span> 100<span class="sb">`</span><span class="p">;</span> <span class="k">do</span>
  wget --background --quiet <span class="s2">&quot;http://dummyimage.com/600x400&quot;</span> -O images/<span class="nv">$i</span>.png &gt; /dev/null
<span class="k">done</span></code></pre></div>

<pre><code>$ time bash bash_script.bash
bash bash_script.bash  0.15s user 0.24s system 72% cpu 0.547 total
</code></pre>

<p>はやい。 <img class="emoji" title=":astonished:" alt=":astonished:" src="https://assets.github.com/images/icons/emoji/unicode/1f632.png" height="20" width="20" align="absmiddle" /></p>

<p>CPUは超使ってる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecordのコールバックの順番・コールバック内のロールバック処理]]></title>
    <link href="http://blog.toshimaru.net/active-record-callbacks/"/>
    <updated>2015-03-01T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/active-record-callbacks</id>
    <content type="html"><![CDATA[<p>ActiveRecordのコールバックが実行される順番、およびそれらのタイミングでのロールバックするためのやり方をまとめてみました。</p>

<h2 id="callback-timing">Callback Timing</h2>

<p>まずは順番について。このようなオーダーです。</p>

<ul>
  <li>(-) save</li>
  <li>(-) valid</li>
  <li>(1) before_validation</li>
  <li>(-) validate</li>
  <li>(2) after_validation</li>
  <li>(3) before_save</li>
  <li>(4) before_create</li>
  <li>(-) create</li>
  <li>(5) after_create</li>
  <li>(6) after_save</li>
  <li>(7) after_commit</li>
</ul>

<h2 id="section">試してみる</h2>

<p>それぞれのコールバックをコードで試してみる。こんなコールバックを設定したUserモデルを作る。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">before_validation</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;before_validation is called&quot;</span> <span class="p">}</span>
  <span class="n">after_validation</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;after_validation is called&quot;</span> <span class="p">}</span>
  <span class="n">before_save</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;before_save is called&quot;</span> <span class="p">}</span>
  <span class="n">before_create</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;before_create is called&quot;</span> <span class="p">}</span>
  <span class="n">after_create</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;after_create is called&quot;</span> <span class="p">}</span>
  <span class="n">after_save</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;after_save is called&quot;</span> <span class="p">}</span>
  <span class="n">after_commit</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;after_commit is called&quot;</span> <span class="p">}</span>
<span class="k">end</span></code></pre></div>

<h3 id="section-1">新規レコード作成時</h3>

<p>こいつをsaveしてみる。</p>

<pre><code>&gt; User.new.save
   (0.1ms)  begin transaction
before_validation is called
after_validation is called
before_save is called
before_create is called
  SQL (0.6ms)  INSERT INTO "users" ("created_at", "updated_at") VALUES (?, ?)  [["created_at", "2015-02-28 15:53:53.000058"], ["updated_at", "2015-02-28 15:53:53.000058"]]
after_create is called
after_save is called
   (485.3ms)  commit transaction
after_commit is called
 =&gt; true
</code></pre>

<p>コールバックのタイミングとクエリの走るタイミングが可視化された。</p>

<h3 id="section-2">レコード更新時</h3>

<p>updateの場合はこんな感じ。</p>

<pre><code> &gt; user.update(name: "hoge")
    (0.1ms)  begin transaction
 before_validation is called
 after_validation is called
 before_save is called
   SQL (0.4ms)  UPDATE "users" SET "name" = ?, "updated_at" = ? WHERE "users"."id" = ?  [["name", "hoge"], ["updated_at", "2015-02-28 15:58:37.577661"], ["id", 6]]
 after_save is called
    (0.8ms)  commit transaction
 after_commit is called
  =&gt; true
</code></pre>

<p>更新なので <code>before_create</code> <code>after_create</code> は呼ばれない。</p>

<h2 id="saveupdate">save,updateはトランザクション内で実行される</h2>

<p><a href="http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html">ドキュメント</a>にはこう書いてある</p>

<blockquote>
  <p>The entire callback chain of a save, save!, or destroy call runs within a transaction. That includes after_* hooks. If everything goes fine a COMMIT is executed once the chain has been completed.</p>
</blockquote>

<p><code>save</code>, <code>save!</code>, <code>destroy</code>のコールバック群はトランザクション内で処理されますよ、と。</p>

<h2 id="section-3">特定のコールバックのタイミングで処理をロールバックさせたい</h2>

<p>ではそれらのコールバックでのタイミングでトランザクションをロールバックすることも可能。どうやれば良いのか調べてみた。</p>

<h3 id="before-">before_* のタイミングでロールバック</h3>

<p><code>before_*</code>のタイミングで false を返すと処理はロールバックされる。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">before_validation</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;before_validation is called&quot;</span> <span class="p">}</span>
  <span class="n">after_validation</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;after_validation is called&quot;</span> <span class="p">}</span>
  <span class="n">before_save</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;before_save is called&quot;</span><span class="p">;</span> <span class="kp">false</span> <span class="p">}</span>
  <span class="n">before_create</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;before_create is called&quot;</span> <span class="p">}</span>
  <span class="n">after_create</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;after_create is called&quot;</span> <span class="p">}</span>
  <span class="n">after_save</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;after_save is called&quot;</span> <span class="p">}</span>
  <span class="n">after_commit</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;after_commit is called&quot;</span> <span class="p">}</span>
<span class="k">end</span></code></pre></div>

<pre><code>&gt; User.new.save
(0.1ms)  begin transaction
before_validation is called
after_validation is called
before_save is called
(0.1ms)  rollback transaction
=&gt; false
</code></pre>

<p>しかし<code>after_*</code>で false を返しても処理はロールバックされないようだ。</p>

<h3 id="after-">after_* のタイミングでロールバック</h3>

<p>after_* のタイミングでロールバックしたい場合は、明示的にRollbackをraiseしてやれば <img class="emoji" title=":ok:" alt=":ok:" src="https://assets.github.com/images/icons/emoji/unicode/1f197.png" height="20" width="20" align="absmiddle" /></p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">before_validation</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;before_validation is called&quot;</span> <span class="p">}</span>
  <span class="n">after_validation</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;after_validation is called&quot;</span> <span class="p">}</span>
  <span class="n">before_save</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;before_save is called&quot;</span> <span class="p">}</span>
  <span class="n">before_create</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;before_create is called&quot;</span> <span class="p">}</span>
  <span class="n">after_create</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;after_create is called&quot;</span> <span class="p">}</span>
  <span class="n">after_save</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;after_save is called&quot;</span><span class="p">;</span> <span class="k">raise</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Rollback</span> <span class="p">}</span>
  <span class="n">after_commit</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;after_commit is called&quot;</span> <span class="p">}</span>
<span class="k">end</span></code></pre></div>

<pre><code>&gt; User.new.save
   (0.1ms)  begin transaction
before_validation is called
after_validation is called
before_save is called
before_create is called
  SQL (0.4ms)  INSERT INTO "users" ("created_at", "updated_at") VALUES (?, ?)  [["created_at", "2015-02-28 16:49:35.344885"], ["updated_at", "2015-02-28 16:49:35.344885"]]
after_create is called
after_save is called
   (2.4ms)  rollback transaction
 =&gt; nil
</code></pre>

<p>update も同様にこれでRollbackできます。</p>

<h3 id="section-4">参考</h3>
<ul>
  <li><a href="http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html">ActiveRecord::Callbacks</a></li>
  <li><a href="http://www.techscore.com/blog/2012/12/25/rails%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%AB%E3%83%90%E3%83%83%E3%82%AF%E3%81%BE%E3%81%A8%E3%82%81/">» Railsのコールバックまとめ TECHSCORE BLOG</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsのHTTPステータスのシンボル表現まとめ]]></title>
    <link href="http://blog.toshimaru.net/rails-http-status-symbols/"/>
    <updated>2015-01-31T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/rails-http-status-symbols</id>
    <content type="html"><![CDATA[<p>よく忘れるのでメモ。</p>

<table>
  <thead>
    <tr>
      <th>Response Class</th>
      <th>HTTP Status Code</th>
      <th>Symbol</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Informational</strong></td>
      <td>100</td>
      <td><code>:continue</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>101</td>
      <td><code>:switching_protocols</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>102</td>
      <td><code>:processing</code></td>
    </tr>
    <tr>
      <td><strong>Success</strong></td>
      <td>200</td>
      <td><code>:ok</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>201</td>
      <td><code>:created</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>202</td>
      <td><code>:accepted</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>203</td>
      <td><code>:non_authoritative_information</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>204</td>
      <td><code>:no_content</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>205</td>
      <td><code>:reset_content</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>206</td>
      <td><code>:partial_content</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>207</td>
      <td><code>:multi_status</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>208</td>
      <td><code>:already_reported</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>226</td>
      <td><code>:im_used</code></td>
    </tr>
    <tr>
      <td><strong>Redirection</strong></td>
      <td>300</td>
      <td><code>:multiple_choices</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>301</td>
      <td><code>:moved_permanently</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>302</td>
      <td><code>:found</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>303</td>
      <td><code>:see_other</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>304</td>
      <td><code>:not_modified</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>305</td>
      <td><code>:use_proxy</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>306</td>
      <td><code>:reserved</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>307</td>
      <td><code>:temporary_redirect</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>308</td>
      <td><code>:permanent_redirect</code></td>
    </tr>
    <tr>
      <td><strong>Client Error</strong></td>
      <td>400</td>
      <td><code>:bad_request</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>401</td>
      <td><code>:unauthorized</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>402</td>
      <td><code>:payment_required</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>403</td>
      <td><code>:forbidden</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>404</td>
      <td><code>:not_found</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>405</td>
      <td><code>:method_not_allowed</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>406</td>
      <td><code>:not_acceptable</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>407</td>
      <td><code>:proxy_authentication_required</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>408</td>
      <td><code>:request_timeout</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>409</td>
      <td><code>:conflict</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>410</td>
      <td><code>:gone</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>411</td>
      <td><code>:length_required</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>412</td>
      <td><code>:precondition_failed</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>413</td>
      <td><code>:request_entity_too_large</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>414</td>
      <td><code>:request_uri_too_long</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>415</td>
      <td><code>:unsupported_media_type</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>416</td>
      <td><code>:requested_range_not_satisfiable</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>417</td>
      <td><code>:expectation_failed</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>422</td>
      <td><code>:unprocessable_entity</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>423</td>
      <td><code>:locked</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>424</td>
      <td><code>:failed_dependency</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>426</td>
      <td><code>:upgrade_required</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>428</td>
      <td><code>:precondition_required</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>429</td>
      <td><code>:too_many_requests</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>431</td>
      <td><code>:request_header_fields_too_large</code></td>
    </tr>
    <tr>
      <td><strong>Server Error</strong></td>
      <td>500</td>
      <td><code>:internal_server_error</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>501</td>
      <td><code>:not_implemented</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>502</td>
      <td><code>:bad_gateway</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>503</td>
      <td><code>:service_unavailable</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>504</td>
      <td><code>:gateway_timeout</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>505</td>
      <td><code>:http_version_not_supported</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>506</td>
      <td><code>:variant_also_negotiates</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>507</td>
      <td><code>:insufficient_storage</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>508</td>
      <td><code>:loop_detected</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>510</td>
      <td><code>:not_extended</code></td>
    </tr>
    <tr>
      <td> </td>
      <td>511</td>
      <td><code>:network_authentication_required</code></td>
    </tr>
  </tbody>
</table>

<p>ちなみにこれのRuby元コードはどこにあるかというと<a href="https://github.com/rack/rack">rack/rack</a>の<code>/lib/rack/utils.rb</code>にあります。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">HTTP_STATUS_CODES</span> <span class="o">=</span> <span class="p">{</span>
  <span class="mi">100</span> <span class="o">=&gt;</span> <span class="s1">&#39;Continue&#39;</span><span class="p">,</span>
  <span class="mi">101</span> <span class="o">=&gt;</span> <span class="s1">&#39;Switching Protocols&#39;</span><span class="p">,</span>
  <span class="mi">102</span> <span class="o">=&gt;</span> <span class="s1">&#39;Processing&#39;</span><span class="p">,</span>
  <span class="mi">200</span> <span class="o">=&gt;</span> <span class="s1">&#39;OK&#39;</span><span class="p">,</span>
  <span class="mi">201</span> <span class="o">=&gt;</span> <span class="s1">&#39;Created&#39;</span><span class="p">,</span>
  <span class="mi">202</span> <span class="o">=&gt;</span> <span class="s1">&#39;Accepted&#39;</span><span class="p">,</span>
  <span class="mi">203</span> <span class="o">=&gt;</span> <span class="s1">&#39;Non-Authoritative Information&#39;</span><span class="p">,</span>
  <span class="mi">204</span> <span class="o">=&gt;</span> <span class="s1">&#39;No Content&#39;</span><span class="p">,</span>
  <span class="mi">205</span> <span class="o">=&gt;</span> <span class="s1">&#39;Reset Content&#39;</span><span class="p">,</span>
  <span class="mi">206</span> <span class="o">=&gt;</span> <span class="s1">&#39;Partial Content&#39;</span><span class="p">,</span>
  <span class="mi">207</span> <span class="o">=&gt;</span> <span class="s1">&#39;Multi-Status&#39;</span><span class="p">,</span>
  <span class="mi">208</span> <span class="o">=&gt;</span> <span class="s1">&#39;Already Reported&#39;</span><span class="p">,</span>
  <span class="mi">226</span> <span class="o">=&gt;</span> <span class="s1">&#39;IM Used&#39;</span><span class="p">,</span>
  <span class="mi">300</span> <span class="o">=&gt;</span> <span class="s1">&#39;Multiple Choices&#39;</span><span class="p">,</span>
  <span class="mi">301</span> <span class="o">=&gt;</span> <span class="s1">&#39;Moved Permanently&#39;</span><span class="p">,</span>
  <span class="mi">302</span> <span class="o">=&gt;</span> <span class="s1">&#39;Found&#39;</span><span class="p">,</span>
  <span class="mi">303</span> <span class="o">=&gt;</span> <span class="s1">&#39;See Other&#39;</span><span class="p">,</span>
  <span class="mi">304</span> <span class="o">=&gt;</span> <span class="s1">&#39;Not Modified&#39;</span><span class="p">,</span>
  <span class="mi">305</span> <span class="o">=&gt;</span> <span class="s1">&#39;Use Proxy&#39;</span><span class="p">,</span>
  <span class="mi">307</span> <span class="o">=&gt;</span> <span class="s1">&#39;Temporary Redirect&#39;</span><span class="p">,</span>
  <span class="mi">308</span> <span class="o">=&gt;</span> <span class="s1">&#39;Permanent Redirect&#39;</span><span class="p">,</span>
  <span class="mi">400</span> <span class="o">=&gt;</span> <span class="s1">&#39;Bad Request&#39;</span><span class="p">,</span>
  <span class="mi">401</span> <span class="o">=&gt;</span> <span class="s1">&#39;Unauthorized&#39;</span><span class="p">,</span>
  <span class="mi">402</span> <span class="o">=&gt;</span> <span class="s1">&#39;Payment Required&#39;</span><span class="p">,</span>
  <span class="mi">403</span> <span class="o">=&gt;</span> <span class="s1">&#39;Forbidden&#39;</span><span class="p">,</span>
  <span class="mi">404</span> <span class="o">=&gt;</span> <span class="s1">&#39;Not Found&#39;</span><span class="p">,</span>
  <span class="mi">405</span> <span class="o">=&gt;</span> <span class="s1">&#39;Method Not Allowed&#39;</span><span class="p">,</span>
  <span class="mi">406</span> <span class="o">=&gt;</span> <span class="s1">&#39;Not Acceptable&#39;</span><span class="p">,</span>
  <span class="mi">407</span> <span class="o">=&gt;</span> <span class="s1">&#39;Proxy Authentication Required&#39;</span><span class="p">,</span>
  <span class="mi">408</span> <span class="o">=&gt;</span> <span class="s1">&#39;Request Timeout&#39;</span><span class="p">,</span>
  <span class="mi">409</span> <span class="o">=&gt;</span> <span class="s1">&#39;Conflict&#39;</span><span class="p">,</span>
  <span class="mi">410</span> <span class="o">=&gt;</span> <span class="s1">&#39;Gone&#39;</span><span class="p">,</span>
  <span class="mi">411</span> <span class="o">=&gt;</span> <span class="s1">&#39;Length Required&#39;</span><span class="p">,</span>
  <span class="mi">412</span> <span class="o">=&gt;</span> <span class="s1">&#39;Precondition Failed&#39;</span><span class="p">,</span>
  <span class="mi">413</span> <span class="o">=&gt;</span> <span class="s1">&#39;Payload Too Large&#39;</span><span class="p">,</span>
  <span class="mi">414</span> <span class="o">=&gt;</span> <span class="s1">&#39;URI Too Long&#39;</span><span class="p">,</span>
  <span class="mi">415</span> <span class="o">=&gt;</span> <span class="s1">&#39;Unsupported Media Type&#39;</span><span class="p">,</span>
  <span class="mi">416</span> <span class="o">=&gt;</span> <span class="s1">&#39;Range Not Satisfiable&#39;</span><span class="p">,</span>
  <span class="mi">417</span> <span class="o">=&gt;</span> <span class="s1">&#39;Expectation Failed&#39;</span><span class="p">,</span>
  <span class="mi">422</span> <span class="o">=&gt;</span> <span class="s1">&#39;Unprocessable Entity&#39;</span><span class="p">,</span>
  <span class="mi">423</span> <span class="o">=&gt;</span> <span class="s1">&#39;Locked&#39;</span><span class="p">,</span>
  <span class="mi">424</span> <span class="o">=&gt;</span> <span class="s1">&#39;Failed Dependency&#39;</span><span class="p">,</span>
  <span class="mi">426</span> <span class="o">=&gt;</span> <span class="s1">&#39;Upgrade Required&#39;</span><span class="p">,</span>
  <span class="mi">428</span> <span class="o">=&gt;</span> <span class="s1">&#39;Precondition Required&#39;</span><span class="p">,</span>
  <span class="mi">429</span> <span class="o">=&gt;</span> <span class="s1">&#39;Too Many Requests&#39;</span><span class="p">,</span>
  <span class="mi">431</span> <span class="o">=&gt;</span> <span class="s1">&#39;Request Header Fields Too Large&#39;</span><span class="p">,</span>
  <span class="mi">500</span> <span class="o">=&gt;</span> <span class="s1">&#39;Internal Server Error&#39;</span><span class="p">,</span>
  <span class="mi">501</span> <span class="o">=&gt;</span> <span class="s1">&#39;Not Implemented&#39;</span><span class="p">,</span>
  <span class="mi">502</span> <span class="o">=&gt;</span> <span class="s1">&#39;Bad Gateway&#39;</span><span class="p">,</span>
  <span class="mi">503</span> <span class="o">=&gt;</span> <span class="s1">&#39;Service Unavailable&#39;</span><span class="p">,</span>
  <span class="mi">504</span> <span class="o">=&gt;</span> <span class="s1">&#39;Gateway Timeout&#39;</span><span class="p">,</span>
  <span class="mi">505</span> <span class="o">=&gt;</span> <span class="s1">&#39;HTTP Version Not Supported&#39;</span><span class="p">,</span>
  <span class="mi">506</span> <span class="o">=&gt;</span> <span class="s1">&#39;Variant Also Negotiates&#39;</span><span class="p">,</span>
  <span class="mi">507</span> <span class="o">=&gt;</span> <span class="s1">&#39;Insufficient Storage&#39;</span><span class="p">,</span>
  <span class="mi">508</span> <span class="o">=&gt;</span> <span class="s1">&#39;Loop Detected&#39;</span><span class="p">,</span>
  <span class="mi">510</span> <span class="o">=&gt;</span> <span class="s1">&#39;Not Extended&#39;</span><span class="p">,</span>
  <span class="mi">511</span> <span class="o">=&gt;</span> <span class="s1">&#39;Network Authentication Required&#39;</span>
<span class="p">}</span></code></pre></div>

<p>これをシンボル化してるのが下記。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">SYMBOL_TO_STATUS_CODE</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">[*</span><span class="no">HTTP_STATUS_CODES</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">code</span><span class="p">,</span> <span class="n">message</span><span class="o">|</span>
  <span class="o">[</span><span class="n">message</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\s|-|&#39;/</span><span class="p">,</span> <span class="s1">&#39;_&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_sym</span><span class="p">,</span> <span class="n">code</span><span class="o">]</span>
<span class="p">}</span><span class="o">.</span><span class="n">flatten</span><span class="o">]</span></code></pre></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyで独自例外を定義するときはStandardErrorを継承する]]></title>
    <link href="http://blog.toshimaru.net/ruby-standard-error/"/>
    <updated>2015-01-21T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/ruby-standard-error</id>
    <content type="html"><![CDATA[<p>タイトルの通り、Rubyで独自例外を定義するときは<code>Exception</code>ではなく、<code>StandardError</code> を継承するしきたりとなっています。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># `Exception`ではなく</span>
<span class="k">class</span> <span class="nc">MyError1</span> <span class="o">&lt;</span> <span class="no">Exception</span><span class="p">;</span> <span class="k">end</span>
<span class="c1"># `StandardError`.</span>
<span class="k">class</span> <span class="nc">MyError2</span> <span class="o">&lt;</span> <span class="no">StandardError</span><span class="p">;</span> <span class="k">end</span></code></pre></div>

<p>理由をコードでみてみます。</p>

<h2 id="exception-">Exception を継承した場合</h2>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">MyError1</span> <span class="o">&lt;</span> <span class="no">Exception</span><span class="p">;</span> <span class="k">end</span>

<span class="k">begin</span>
  <span class="k">raise</span> <span class="no">MyError1</span>
<span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">e</span>
  <span class="nb">puts</span> <span class="s2">&quot;Exception handled! </span><span class="si">#{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="k">end</span>

<span class="c1"># =&gt; MyError1: MyError1</span></code></pre></div>

<p>MyError1 が<code>rescue</code>節でハンドリングされてませんね。こうしてみるとどうでしょう。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">MyError1</span> <span class="o">&lt;</span> <span class="no">Exception</span><span class="p">;</span> <span class="k">end</span>

<span class="k">begin</span>
  <span class="k">raise</span> <span class="no">MyError1</span>
<span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">e</span>
  <span class="nb">puts</span> <span class="s2">&quot;Exception handled! </span><span class="si">#{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="k">end</span>

<span class="c1"># =&gt; Exception handled! MyError1</span></code></pre></div>

<p>次は<code>rescue</code>節に入りました。</p>

<h2 id="standarderror-">StandardError を継承した場合</h2>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">MyError2</span> <span class="o">&lt;</span> <span class="no">StandardError</span><span class="p">;</span> <span class="k">end</span>

<span class="k">begin</span>
  <span class="k">raise</span> <span class="no">MyError2</span>
<span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">e</span>
  <span class="nb">puts</span> <span class="s2">&quot;Exception handled! </span><span class="si">#{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="k">end</span>

<span class="c1"># =&gt; Exception handled! MyError2</span></code></pre></div>

<p>こちらは問題なく<code>rescue</code>節でハンドルされました。</p>

<h2 id="section">なぜ？</h2>

<blockquote>
  <p>rescue は第1引数で指定した例外クラスの下の階層にある例外だけを補足するけど、引数を省略すると StandardErrorクラスを指定したものとみなすからだ。</p>
</blockquote>

<p>via. <a href="http://d.hatena.ne.jp/yarb/20121005/p1">Rubyで自前の例外クラスを作るときExceptionではなくStandardErrorを継承する理由</a></p>

<p>下記がビルトインのExceptionのサブクラスたちです。<code>rescue</code>のデフォルトが<code>StandardError</code>、<code>raise</code>のデフォルトが<code>RuntimeError</code>となっています。</p>

<blockquote>
  <ul>
    <li>NoMemoryError</li>
    <li>ScriptError
      <ul>
        <li>LoadError</li>
        <li>NotImplementedError</li>
        <li>SyntaxError</li>
      </ul>
    </li>
    <li>SecurityError</li>
    <li>SignalException
      <ul>
        <li>Interrupt</li>
      </ul>
    </li>
    <li>StandardError – default for <code>rescue</code>
      <ul>
        <li>ArgumentError
          <ul>
            <li>UncaughtThrowError</li>
          </ul>
        </li>
        <li>EncodingError</li>
        <li>FiberError</li>
        <li>IOError
          <ul>
            <li>EOFError</li>
          </ul>
        </li>
        <li>IndexError
          <ul>
            <li>KeyError
              <ul>
                <li>StopIteration</li>
              </ul>
            </li>
          </ul>
        </li>
        <li>LocalJumpError</li>
        <li>NameError
          <ul>
            <li>NoMethodError</li>
          </ul>
        </li>
        <li>RangeError
          <ul>
            <li>FloatDomainError</li>
          </ul>
        </li>
        <li>RegexpError</li>
        <li>RuntimeError – default for <code>raise</code></li>
        <li>SystemCallError
          <ul>
            <li>Errno::*</li>
          </ul>
        </li>
        <li>ThreadError</li>
        <li>TypeError</li>
        <li>ZeroDivisionError</li>
      </ul>
    </li>
    <li>SystemExit</li>
    <li>SystemStackError</li>
    <li>fatal – impossible to rescue</li>
  </ul>
</blockquote>

<p>via <a href="http://ruby-doc.org/core-2.2.0/Exception.html">Exception</a></p>

<p>よって<code>rescue</code>のデフォルトで拾える<code>StandardError</code>を使って独自例外を定義しましょう。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">MyError2</span> <span class="o">&lt;</span> <span class="no">StandardError</span><span class="p">;</span> <span class="k">end</span></code></pre></div>

<h3 id="section-1">参考</h3>
<ul>
  <li><a href="http://d.hatena.ne.jp/yarb/20121005/p1">Rubyで自前の例外クラスを作るときExceptionではなくStandardErrorを継承する理由</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails4 でトランザクション分離レベルを設定する]]></title>
    <link href="http://blog.toshimaru.net/rails-4-transaction-isolation/"/>
    <updated>2015-01-19T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/rails-4-transaction-isolation</id>
    <content type="html"><![CDATA[<h2 id="mysql">MySQLのトランザクション分離レベル</h2>

<p>MySQLのデフォルトのトランザクション分離レベルは何か？</p>

<blockquote>
  <p><strong>REPEATABLE READ</strong></p>

  <p>This is the default isolation level for InnoDB.</p>
</blockquote>

<p>via. <a href="http://dev.mysql.com/doc/refman/5.0/en/set-transaction.html">13.3.6 SET TRANSACTION Syntax</a></p>

<p>ハイ、答えは「REPEATABLE READ」ですネ.</p>

<h2 id="rails4">Rails4でトランザクション分離レベルを設定</h2>

<p>では次にRailsにおいてトランザクション分離レベルを設定するにはどうしたらよいでしょう？ 実はRails3.xとRails4ではトランザクション分離レベルの設定方法は異なっています。</p>

<p><a href="http://d.hatena.ne.jp/tkrd/20131121/1385044179">Rails &amp; MySQL: トランザクション分離レベルをグローバルに設定する</a></p>

<p><em>（引用ここから）</em></p>

<p>Rails 3.x 時代までは、</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span>
  <span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SET TRANSACTION ISOLATION LEVEL READ COMMITTED&#39;</span><span class="p">)</span>
<span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">transaction</span> <span class="k">do</span>
  <span class="c1"># ...</span>
<span class="k">end</span></code></pre></div>

<p>のように書かなければなりませんでしたが、Rails 4 でトランザクションごとに分離レベルを指定できるようになりました：</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">transaction</span><span class="p">(</span><span class="ss">isolation</span><span class="p">:</span> <span class="ss">:read_committed</span><span class="p">)</span> <span class="k">do</span>
  <span class="c1"># ...</span>
<span class="k">end</span></code></pre></div>

<p><em>（引用ここまで）</em></p>

<h2 id="section">有効なトランザクション分離レベル</h2>

<p>設定可能で有効な<code>isolation:</code>レベルは何でしょう？　下記４つになります。</p>

<blockquote>
  <p>Valid isolation levels are:</p>

  <ul>
    <li><code>:read_uncommitted</code></li>
    <li><code>:read_committed</code></li>
    <li><code>:repeatable_read</code></li>
    <li><code>:serializable</code></li>
  </ul>
</blockquote>

<p>via. <a href="http://blog.railsupgrade.com/2012/09/rails-4-transaction-isolation-level.html">Rails 4 - Transaction isolation level</a></p>

<h2 id="section-1">分離レベルとダーティリード、ファジーリード、ファントムリードの関係</h2>

<p>分離レベルとダーティリード、ファジーリード、ファントムリードそれぞれの関係性は以下。</p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>ダーティリード</th>
      <th>ファジーリード</th>
      <th>ファントムリード</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>READ UNCOMMITTED</strong></td>
      <td>発生する</td>
      <td>発生する</td>
      <td>発生する</td>
    </tr>
    <tr>
      <td><strong>READ COMMITTED</strong></td>
      <td>発生しない</td>
      <td>発生する</td>
      <td>発生する</td>
    </tr>
    <tr>
      <td><strong>REPEATABLE READ</strong></td>
      <td>発生しない</td>
      <td>発生しない</td>
      <td>発生する</td>
    </tr>
    <tr>
      <td><strong>SERIALIZABLE</strong></td>
      <td>発生しない</td>
      <td>発生しない</td>
      <td>発生しない</td>
    </tr>
  </tbody>
</table>

<p>via. <a href="http://gyouza-daisuki.hatenablog.com/entry/2013/11/19/150838">トランザクション分離レベルについて極力分かりやすく解説してみた[SQL]</a></p>

<p>適切なトランザクション分離レベルで適切なトランザクション処理をしましょう！</p>

<h3 id="section-2">参考</h3>

<ul>
  <li><a href="http://d.hatena.ne.jp/tkrd/20131121/1385044179">Rails &amp; MySQL: トランザクション分離レベルをグローバルに設定する</a></li>
  <li><a href="http://blog.railsupgrade.com/2012/09/rails-4-transaction-isolation-level.html">Rails 4 - Transaction isolation level</a></li>
  <li><a href="http://gyouza-daisuki.hatenablog.com/entry/2013/11/19/150838">トランザクション分離レベルについて極力分かりやすく解説してみた[SQL]</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyの%(パーセント)を使った記法まとめ]]></title>
    <link href="http://blog.toshimaru.net/ruby-percent-notation/"/>
    <updated>2015-01-10T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/ruby-percent-notation</id>
    <content type="html"><![CDATA[<p>Rubyでつかわれる%（パーセント）を使った記法、たまに忘れることがあるのでメモがてらにまとめてみる。</p>

<table>
  <thead>
    <tr>
      <th>%記法</th>
      <th>%使わない場合の書き方</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>%</code>, <code>%Q</code></td>
      <td><code>""</code> (ダブルクオート)</td>
    </tr>
    <tr>
      <td><code>%q</code></td>
      <td><code>''</code> (シングルクオート)</td>
    </tr>
    <tr>
      <td><code>%w</code></td>
      <td><code>[]</code> (文字列配列)</td>
    </tr>
    <tr>
      <td><code>%W</code></td>
      <td><code>[]</code> (文字列配列・式展開あり)</td>
    </tr>
    <tr>
      <td><code>%i</code></td>
      <td><code>[]</code> (シンボル配列)</td>
    </tr>
    <tr>
      <td><code>%I</code></td>
      <td><code>[]</code> (シンボル配列・式展開あり)</td>
    </tr>
    <tr>
      <td><code>%x</code></td>
      <td><code>``</code> (コマンド実行)</td>
    </tr>
    <tr>
      <td><code>%s</code></td>
      <td><code>:</code> (シンボル)</td>
    </tr>
    <tr>
      <td><code>%r</code></td>
      <td><code>//</code> (正規表現)</td>
    </tr>
  </tbody>
</table>

<p><strong>※ %の後には丸括弧（<code>()</code>）や波括弧（<code>{}</code>）などの記号が使えます</strong></p>

<h2 id="section">文字列表現系</h2>

<h3 id="q">%, %Q</h3>

<pre><code>&gt; %(a b c)
 =&gt; "a b c"

&gt; a, b, c = 1, 2, 3
&gt; %Q(#{a} #{b} #{c})
 =&gt; "1 2 3" # 式展開される
</code></pre>

<h3 id="q-1">%q</h3>

<pre><code>&gt; %q(a b c)
 =&gt; "a b c"

&gt; a, b, c = 1, 2, 3
&gt; %q(#{a} #{b} #{c})
 =&gt; "\#{a} \#{b} \#{c}" # 式展開されない
</code></pre>

<h2 id="section-1">配列表現系</h2>

<h3 id="w">%w</h3>

<pre><code>&gt; %w(a b c)
 =&gt; ["a", "b", "c"]
</code></pre>

<h3 id="w-1">%W</h3>

<pre><code>&gt; a, b, c = 1, 2, 3
&gt; %W(#{a} #{b} #{c})
 =&gt; ["1", "2", "3"]
</code></pre>

<h3 id="i">%i</h3>

<pre><code>&gt; %i(a b c)
 =&gt; [:a, :b, :c]
</code></pre>

<h3 id="i-1">%I</h3>

<pre><code>&gt; a, b, c = 1, 2, 3
&gt; %I(#{a} #{b} #{c})
 =&gt; [:"1", :"2", :"3"]
</code></pre>

<h2 id="section-2">コマンド実行</h2>

<h3 id="x">%x</h3>

<pre><code>&gt; %x(date)
 =&gt; "Sun Jan 11 01:01:52 JST 2015\n"
&gt; `date`
 =&gt; "Sun Jan 11 01:01:54 JST 2015\n"
</code></pre>

<h2 id="section-3">シンボル</h2>

<h3 id="s">%s</h3>

<pre><code>&gt; %s(a b c)
 =&gt; :"a b c"
</code></pre>

<h2 id="section-4">正規表現</h2>

<h3 id="r">%r</h3>

<pre><code>&gt; %r(^http://)
 =&gt; /^http:\/\//
</code></pre>

<h3 id="section-5">参考</h3>

<ul>
  <li><a href="http://qiita.com/mogulla3/items/46bb876391be07921743">Rubyで%記法（パーセント記法）を使う</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyのinjectを使いこなす]]></title>
    <link href="http://blog.toshimaru.net/ruby-inject/"/>
    <updated>2015-01-08T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/ruby-inject</id>
    <content type="html"><![CDATA[<p>Rubyのイテレータメソッド<code>inject</code>の使い方を紹介してみようと思います。</p>

<h2 id="inject">inject</h2>

<p>Rubyのinjectはこんなふうに使えます。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">enum</span><span class="o">.</span><span class="n">inject</span> <span class="p">{</span><span class="o">|</span><span class="n">memo</span><span class="p">,</span> <span class="n">item</span><span class="o">|</span> <span class="n">block</span> <span class="p">}</span>
<span class="n">enum</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="n">init</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">memo</span><span class="p">,</span> <span class="n">item</span><span class="o">|</span> <span class="n">block</span> <span class="p">}</span></code></pre></div>

<p><a href="http://ref.xaio.jp/ruby/classes/enumerable/inject">http://ref.xaio.jp/ruby/classes/enumerable/inject</a></p>

<h2 id="sum">Sum（合計）を出す</h2>

<p>これだけではわかりにくいと思うので合計を出す処理を書いてみましょう。</p>

<p>まずは<code>inject</code>を使わないパターン。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span>
<span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span> <span class="p">}</span>
<span class="nb">puts</span> <span class="n">sum</span> <span class="c1"># =&gt; 55</span></code></pre></div>

<p>これを<code>inject</code>で書き直すとこう。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">inject</span> <span class="p">{</span><span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">i</span><span class="o">|</span> <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span> <span class="p">}</span>
<span class="c1"># =&gt; 55</span></code></pre></div>

<p>この場合、sumの初期値は0ですがそれを明示的にかくならこう。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">i</span><span class="o">|</span> <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span> <span class="p">}</span>
<span class="c1"># =&gt; 55</span></code></pre></div>

<p>さらにinjectにはシンボルで演算子をわたしてうまいようにやってくれる。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>
<span class="c1"># =&gt; 55</span></code></pre></div>

<p>これが一番シンプルでエレガント。</p>

<h2 id="section">応用編1: 配列内の要素数をハッシュに</h2>

<p>Hash.new(0)で初期化してinject.</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">[</span><span class="ss">:great</span><span class="p">,</span> <span class="ss">:good</span><span class="p">,</span> <span class="ss">:bad</span><span class="p">,</span> <span class="ss">:good</span><span class="p">,</span> <span class="ss">:good</span><span class="p">,</span> <span class="ss">:bad</span><span class="p">,</span> <span class="ss">:awesome</span><span class="p">,</span> <span class="ss">:great</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span> <span class="p">{</span><span class="o">|</span><span class="nb">hash</span><span class="p">,</span> <span class="n">key</span><span class="o">|</span> <span class="nb">hash</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span> <span class="nb">hash</span><span class="p">}</span>
<span class="c1"># =&gt; {:great=&gt;2, :good=&gt;3, :bad=&gt;2, :awesome=&gt;1}</span></code></pre></div>

<h2 id="section-1">応用編2: フィボナッチ数列</h2>

<p>inject を利用したフィボナッチ数列ロジック。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">fib</span><span class="p">,</span> <span class="n">i</span><span class="o">|</span> <span class="n">fib</span> <span class="o">&lt;&lt;</span> <span class="n">fib</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="n">fib</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span> <span class="p">}</span>
<span class="c1"># =&gt; [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233]</span></code></pre></div>

<h2 id="eachwithindex">番外編: each_with_index</h2>

<p><code>each_with_index</code>でも<code>inject</code>は使える。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">each_with_index</span><span class="o">.</span><span class="n">inject</span> <span class="k">do</span> <span class="o">|</span><span class="n">result</span><span class="p">,</span> <span class="p">(</span><span class="n">element</span><span class="p">,</span> <span class="n">index</span><span class="p">)</span><span class="o">|</span>
  <span class="c1"># </span>
<span class="k">end</span></code></pre></div>

<h3 id="section-2">参考</h3>
<ul>
  <li><a href="http://kenkiti.hatenadiary.jp/entry/20090114/ruby_inject">ruby の inject をわかりやすく説明してみる</a></li>
  <li><a href="http://ref.xaio.jp/ruby/classes/enumerable/inject">inject (Enumerable)</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GZip形式のS3上のファイルをIO.pipeでストリーム読み出し]]></title>
    <link href="http://blog.toshimaru.net/ruby-pipe-s3/"/>
    <updated>2015-01-04T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/ruby-pipe-s3</id>
    <content type="html"><![CDATA[<h2 id="section">やりたいこと</h2>

<p>S3からgzip形式のファイルをストリーミングダウンロードしてそれを読み出す。</p>

<h2 id="s3">S3からのダウンロード</h2>

<p><a href="http://docs.aws.amazon.com/AWSRubySDK/latest/AWS/S3/S3Object.html">公式ドキュメント</a>によるとこうする。</p>

<p>If you want to stream an object from S3, you can pass a block to #read.</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;output&#39;</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
  <span class="n">large_object</span><span class="o">.</span><span class="n">read</span> <span class="k">do</span> <span class="o">|</span><span class="n">chunk</span><span class="o">|</span>
    <span class="n">file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">chunk</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></div>

<h2 id="gzip">gzipを読む</h2>

<p>gzipの読み出しのサンプルコードはこんな感じ。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;hoge.gz&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
  <span class="n">gz</span> <span class="o">=</span> <span class="no">Zlib</span><span class="o">::</span><span class="no">GzipReader</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
  <span class="nb">print</span> <span class="n">gz</span><span class="o">.</span><span class="n">read</span>
  <span class="n">gz</span><span class="o">.</span><span class="n">close</span>
<span class="k">end</span></code></pre></div>

<p>via. <a href="http://apidock.com/ruby/Zlib/GzipReader">http://apidock.com/ruby/Zlib/GzipReader</a></p>

<h2 id="pipe">pipeでつなぐ</h2>

<p><code>IO.pipe</code>を使ってつなぐとこう。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">IO</span><span class="o">.</span><span class="n">pipe</span> <span class="k">do</span> <span class="o">|</span><span class="n">read_io</span><span class="p">,</span> <span class="n">write_io</span><span class="o">|</span>
  <span class="n">write_io</span><span class="o">.</span><span class="n">binmode</span>
  <span class="n">thread</span> <span class="o">=</span> <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
    <span class="k">begin</span>
      <span class="no">AWS</span><span class="o">::</span><span class="no">S3</span><span class="o">::</span><span class="no">S3Object</span><span class="o">.</span><span class="n">read</span> <span class="k">do</span> <span class="o">|</span><span class="n">chunk</span><span class="o">|</span>
        <span class="n">write_io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">chunk</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">rescue</span>
      <span class="n">write_io</span><span class="o">.</span><span class="n">close</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="n">gz</span> <span class="o">=</span> <span class="no">Zlib</span><span class="o">::</span><span class="no">GzipReader</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">read_io</span><span class="p">)</span>
  <span class="k">while</span> <span class="n">line</span> <span class="o">=</span> <span class="n">gz</span><span class="o">.</span><span class="n">gets</span>
    <span class="c1"># do something with line ...</span>
    <span class="nb">puts</span> <span class="n">line</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></div>

<p>注意点としては以下。</p>

<ol>
  <li>gzip形式なので<code>write_io.binmode</code>でバイナリモードにすること</li>
  <li>Thread内で何かエラーが起こったときに<code>gets</code>が待ち状態で止まっちゃうので<code>close</code>なりなんなり適切な処理をしてやること</li>
</ol>

<h3 id="section-1">参考</h3>

<ul>
  <li><a href="http://stackoverflow.com/questions/24016548/how-do-i-get-zlib-to-uncompress-from-s3-stream-in-ruby">How do I get Zlib to uncompress from S3 stream in Ruby?</a></li>
  <li><a href="http://takuya-1st.hatenablog.jp/entry/20120205/1328470521">RubyはIO.pipeを使えば、パイプを作ることが出来る</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GunosyでのRails開発フロー]]></title>
    <link href="http://blog.toshimaru.net/gunosy-rails-way/"/>
    <updated>2014-12-22T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/gunosy-rails-way</id>
    <content type="html"><![CDATA[<p><strong>この記事は<a href="http://qiita.com/advent-calendar/2014/gunosy">Gunosy Advent Calendar 2014</a>の22日目の記事です。</strong></p>

<p>こんにちは、Gunosyの<a href="https://twitter.com/toshimaru_e">toshimaru</a>です。Gunosyでは主にRuby on Railsアプリを担当しています。</p>

<h2 id="section">はじめに</h2>
<p>Gunosyでは昨年度よりAPIの実装を<a href="https://speakerdeck.com/ymatsuwitter/300mo-ren-wogodeba-itahua">Rails実装からGo実装へと変えた</a>ことでAPIのパフォーマンスの大幅な改善が行われました。そんなわけで「GunosyってRails捨ててGoを使ってるんじゃないの？」とお思いの方もいらっしゃるかもしれませんがそんなことはありません。大規模アクセスのない管理画面などではRuby on RailsはまだまだGunosyで現役バリバリです<sup id="fnref:2"><a href="#fn:2" class="footnote">1</a></sup>。高速にWEBアプリを作る必要のあるシーンにおいてはGoはRailsにはまだ敵いません。あのGoカンパニーとして名高いHashiCorpでさえも<a href="http://blog.gopheracademy.com/advent-2014/atlas/">Railsは手放せない</a>ようですしね。</p>

<p>本エントリでは僕がGunosyでかかわっているRailsプロジェクトにおいてどのように開発を進めていっているのかを紹介したいと思います<sup id="fnref:1"><a href="#fn:1" class="footnote">2</a></sup>。</p>

<h2 id="section-1">ブランチの運用</h2>
<p>基本は<a href="http://danielkummer.github.io/git-flow-cheatsheet/index.ja_JP.html">Git flow</a>に則って開発を進めています。ただGit flowにおけるリリースブランチの運用はフローの簡易化のため、またスモールチーム（２〜３人）での開発ということもあり省いています。これによりdevelop→master間のフローがラクになりスピーディな開発が可能になります。</p>

<p><img src="/images/posts/gunosy/deploy.png" alt="" /></p>

<p><strong>【↑図】developからfeatureブランチが切られ、developにマージ・確認した後にmasterへ</strong></p>

<h2 id="section-2">デプロイ</h2>
<p>デプロイフローは下記のようになっています。</p>

<p><img src="/images/posts/gunosy/workflow.png" alt="" /></p>

<ol>
  <li>ローカルで開発</li>
  <li>コードをGithubにプッシュ</li>
  <li>CircleCIでテスト &amp; テスト結果を通知</li>
  <li>CircleCIからAmazon OpsWorksにデプロイ命令（Chefのデプロイレシピを実行させる）</li>
  <li>OpsWorksからデプロイ完了通知</li>
</ol>

<p>※Amazon OpsWorksについては昨日のChefAdventCalendarにまとめさせていただきましたのでよかったらどうぞ。</p>

<p><a href="/opsworks-rails/">Amazon OpsWorksでRailsアプリを簡単Chefプロビジョニング</a></p>

<p>上記のブランチ運用と照らし合わせるとこうなります。</p>

<table>
  <tbody>
    <tr>
      <td><code>develop</code>ブランチ変更時</td>
      <td>CircleCIテスト後に、（テストパスすれば）OpsWorksのステージング環境に<code>develop</code> ブランチをデプロイ</td>
    </tr>
    <tr>
      <td><code>master</code>ブランチ変更時</td>
      <td>CircleCIテスト後に、OpsWorksのプロダクション環境に<code>master</code>ブランチをデプロイ</td>
    </tr>
  </tbody>
</table>

<p>アプリケーションレポジトリの責任範囲がCircleCIでテストを実行してOpsWorksにデプロイリクエストを投げるまでで、その後のデプロイは別レポジトリとして管理されているChefのレシピの責任範囲として役割が分けられています。デプロイ環境が一通り揃ってしまえば、アプリケーション開発者はほとんどデプロイに関するアレコレを考える必要がなく本来の開発に集中できます。</p>

<h2 id="rails">Railsのバージョン</h2>
<p>入社以来、Gunosyでは２つのRailsプロジェクトにかかわってきましたが（どちらも入社後にゼロから開始したプロジェクトです）両プロジェクトともにバージョン4.1.8です。まだ現時点で最新のバージョン4.2.0には上げてませんが今後も最新のRailsに追従していく所存です。</p>

<h2 id="section-3">テスト</h2>
<p>Railsのテストに関してはRSpec, FactoryGirl, Capybaraあたりを使っています。</p>

<table>
  <tbody>
    <tr>
      <td>RSpec</td>
      <td>モデル、コントローラー周りのテスト</td>
    </tr>
    <tr>
      <td>Capybara</td>
      <td>ビューを含むEnd-to-Endテスト<sup id="fnref:3"><a href="#fn:3" class="footnote">3</a></sup></td>
    </tr>
  </tbody>
</table>

<p>カバレッジ率に関しては90%前後を保っています。カバレッジは<a href="https://github.com/colszowka/simplecov">simplecov</a>を使用し、結果作成されるカバレッジ率はCircleCIの<a href="https://circleci.com/docs/build-artifacts">artifacts</a>の機能を使いカバレッジ率と共に公開しています。</p>

<p><img src="/images/posts/gunosy/coverage.png" alt="" /></p>

<p><strong>【↑図】artifactsで公開されたカバレッジ率</strong></p>

<p>ただ「テストカバレッジを上げること」が目的化してしまっては本末転倒なので（いわゆる「テスト書きすぎ問題」）、「どこまでテストを書くか」は今後も考えていきたいテーマではあります。</p>

<h2 id="db">複数DB</h2>
<p>Railsの悩みとして１つ大きいのは複数DBの扱いではないでしょうか？ Gunosyでももちろん複数DBを使い分ける必要があり、そのときはCookpadさん, DeNAさんで実績のある<a href="https://github.com/eagletmt/switch_point">swith_point</a> gemを使用しています。</p>

<p>この2社のDB事情に関しては下記ブログ・資料に詳しいです。</p>

<ul>
  <li><a href="http://techlife.cookpad.com/entry/2014/08/28/194147">クックパッドにおける最近のActiveRecord運用事情</a></li>
  <li><a href="http://www.slideshare.net/sonots/mobage-ruby-db">Mobage を支える Ruby の技術 ~ 複数DB編 ~</a></li>
</ul>

<p>上記に紹介されているように下記のように簡単に複数DBをswitchでき素敵です。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Configuration</span>
<span class="no">SwitchPoint</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="n">config</span><span class="o">.</span><span class="n">define_switch_point</span> <span class="ss">:blog</span><span class="p">,</span>
    <span class="ss">readonly</span><span class="p">:</span> <span class="ss">:&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="si">}</span><span class="ss">_blog_slave&quot;</span><span class="p">,</span>
    <span class="ss">writable</span><span class="p">:</span> <span class="ss">:&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="si">}</span><span class="ss">_blog_master&quot;</span>
<span class="k">end</span>

<span class="c1"># Model</span>
<span class="k">class</span> <span class="nc">Article</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">use_switch_point</span> <span class="ss">:blog</span>
<span class="k">end</span></code></pre></div>

<p>Railsの機能として複数データベースがサポートされる話もあるようなのでそこも期待ですね。<a href="http://mozaic.fm/post/104575088493/12-rails">参考: #12 Rails mozaic.fm</a></p>

<h2 id="section-4">権限管理</h2>
<p>管理画面の権限管理に関しては<a href="https://github.com/nathanl/authority">authority</a>を使用しています。権限は大まかにそれぞれの機能においてそれを参照できる権限（READ）・更新できる権限（CREATE/UPDATE/DELETE）というような権限分けを行っています。例えば＜ユーザーを閲覧可能＞という権限、＜ユーザーを更新可能＞な権限、これらを組み合わせて管理ユーザーの権限を定義します。</p>

<p>なお、初期の権限設定は<code>seeds.rb</code>で権限をまくようにしています。</p>

<h2 id="section-5">バッチ</h2>
<p>cronの管理に関しては<a href="https://github.com/javan/whenever">whenever</a>を使用しています。こちらはOpsWorkのデプロイ実行時にChefのwheneverレシビが定義してあり、そこでcronがデプロイ時に更新されるようになっています。</p>

<h2 id="section-6">非同期ジョブ</h2>
<p>重い処理に関してはSidekiqを使いRails側ではSidekiqにキューイングするまでにして、その後の処理はSidekiqで行うようにしてます。例えばGunosyの場合何が重い処理にあたるかというと「全ユーザーにプッシュ通知を送るぞ！」みたいなケース。そのような時間のかかる処理に関してはSidekiqで処理を行っています<sup id="fnref:4"><a href="#fn:4" class="footnote">4</a></sup>。</p>

<h2 id="section-7">その他・今後の課題</h2>
<ul>
  <li>僕が携わったプロジェクトはどちらもRails4系だが、歴史が積み重なったRails3系プロジェクトもあるので今後どうアップデートしていくか。</li>
  <li>Hubotは遊びで飼ってるけど<a href="https://speakerdeck.com/jnewland/chatops-at-github">ChatOps</a>といえるほど真面目に運用していない。もっとうまく使えば幸せになれるかも？</li>
</ul>

<h2 id="section-8">最後に</h2>
<p>Ruby/Rails業務経験歴半年足らずのヒヨッコではありますが、僕がかかわった範囲内でのGunosyでのRailsの開発の方法を紹介してみました。もし「うちはこんなRailsの開発してるよ！」とか「これ使うともっと便利になるよ！」とか教えていただけたら嬉しいです。</p>

<p>ではでは。</p>

<div class="footnotes">
  <ol>
    <li id="fn:2">
      <p>ちなみにDjangoも使われています。 <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:1">
      <p>とはいえ会社全てのRailsプロダクトが今回紹介するようなやり方で統一されているわけではありません。あくまでも自分がかかわっている範囲での開発の進め方です。 <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>デフォルトのrack_testドライバーを使っていますが、<a href="http://qiita.com/take/items/779747e0981355e569ad">poltergaistが良さ気なので</a>今後使っていきたいと思っています。 <a href="#fnref:3" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p>正確には別途配信ワーカーがいるのですがここでは割愛 <a href="#fnref:4" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Amazon OpsWorksでRailsアプリを簡単Chefプロビジョニング]]></title>
    <link href="http://blog.toshimaru.net/opsworks-rails/"/>
    <updated>2014-12-21T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/opsworks-rails</id>
    <content type="html"><![CDATA[<p>本記事は<a href="http://qiita.com/advent-calendar/2014/chef">Chef Advent Calendar 2014</a>の21日目の記事です。</p>

<h2 id="opsworks">OpsWorksとは？</h2>
<p>公式サイトの説明は下記です。</p>

<blockquote>
  <p>AWS OpsWorks は、すべての種類およびサイズのアプリケーションを容易にデプロイおよび運用できるクラウドアプリケーション管理サービスです。パッケージのインストール、ソフトウェア設定およびストレージなどのリソースを含む、各コンポーネントのアプリケーションのアーキテクチャおよび仕様を定義できます。</p>

  <p><a href="http://aws.amazon.com/jp/opsworks/">AWS OpsWorks</a></p>
</blockquote>

<p>ポイントは以下の通り。</p>

<ul>
  <li>Chefでサーバーをプロビジョニング・デプロイできる</li>
  <li>スタック ＞ レイヤー ＞ App という概念でシステムを構成</li>
  <li>インスタンスをタイムベース or ロードベースでスケールアウトできる</li>
  <li>OpsWorksで使われているレシピは<a href="https://github.com/aws/opsworks-cookbooks">Githubで公開</a>されており実行コードが追える</li>
  <li>OpsWorksの用意したレシピに加えて自らのCustom Chefレシピを追加することも可能</li>
</ul>

<p><img src="/images/posts/opsworks/stack.png" alt="" /></p>

<p><strong>【↑図】OpsWorksのStack &amp; Layerの関係</strong></p>

<h2 id="section">料金</h2>
<p>OpsWorksの使用自体にかかる料金は<strong>＜0円＞</strong>です。OpsWorks上で使用したAWSリソースの料金（ロードバランサ、EC2インスタンス、RDS等）のみがかかってきます。</p>

<h2 id="railsopsworks">RailsをOpsWorksにデプロイしてみよう</h2>
<p>OpsWorksはとくにRailsアプリケーションとの相性が良く、今回はRails4.2.0のアプリケーションをOpsWorksにデプロイしてみようと思います。</p>

<p>今回デプロイするRailsアプリケーションのコードの最終形は下記になります。</p>

<p><a href="https://github.com/toshimaru/opsworks-rails">https://github.com/toshimaru/opsworks-rails</a></p>

<h2 id="section-1">デプロイ手順</h2>

<h3 id="section-2">スタックの追加</h3>

<p>まずはAWS ConsoleからOpsWorksにいきAdd Stackしましょう。RegionとかVPCとかIAMとかは適宜設定してね。</p>

<p><img src="/images/posts/opsworks/add_stack.png" alt="" /></p>

<p>こんなのがStackのトップ画面。</p>

<p><img src="/images/posts/opsworks/top.png" alt="" /></p>

<h3 id="section-3">レイヤーの定義</h3>

<p><img src="/images/posts/opsworks/layer.png" alt="" /></p>

<p>Layer TypeはRails App、Ruby versionは2.1、nginx+unicornを選択する</p>

<p><img src="/images/posts/opsworks/add_layer.png" alt="" /></p>

<p>追加されました。</p>

<p><img src="/images/posts/opsworks/layer_done.png" alt="" /></p>

<h3 id="section-4">レシピ</h3>

<p>RecipesでOpsWorksにどんなレシピが設定されているかがわかります。レシピ名がGithubへのリンクになっており、どんなレシピが書かれているかを確認できます。</p>

<p><img src="/images/posts/opsworks/recipes.png" alt="" /></p>

<p>今回はこのままでOK.</p>

<h3 id="section-5">インスタンスの追加</h3>

<p>では次にAppインスタンスを追加。t1.microインスタンスで。</p>

<p><img src="/images/posts/opsworks/add_instance.png" alt="" /></p>

<p>AddInstanceするとステータスがStoppedなのでstartで起動します。</p>

<p><img src="/images/posts/opsworks/instance_stopped.png" alt="" /></p>

<p>10分くらいでセットアップが完了します。Statusがonlineでグリーンになれば準備OK.</p>

<p><img src="/images/posts/opsworks/instance_online.png" alt="" /></p>

<h3 id="app">Appの設定</h3>

<p>次にデプロイするAppの設定を追加していきます。</p>

<p><img src="/images/posts/opsworks/apps.png" alt="" /></p>

<p>こんな感じでAppを設定。</p>

<ul>
  <li>Type: RoR</li>
  <li>DataSource: 今回は特にないのでNoneで</li>
  <li>Applicationソース: Githubから持ってきたいのでGithubのレポジトリURLを指定</li>
</ul>

<p><img src="/images/posts/opsworks/add_apps.png" alt="" /></p>

<p><code>SECRET_KEY_BASE</code>(Rails4.2の<code>secrets.yml</code>で必要になる)もあわせてセットしましょう。</p>

<p><img src="/images/posts/opsworks/add_envvar.png" alt="" /></p>

<p>DeploymentsでDeploy Appしてみよう。</p>

<p><img src="/images/posts/opsworks/deploy_app.png" alt="" /></p>

<p>Appは先ほど設定したApp、CommandはDeployを指定してDeploy App!（マイグレーションが必要であればここでMigration ON）</p>

<p><img src="/images/posts/opsworks/deploy_app2.png" alt="" /></p>

<p>SuccessすればOK.</p>

<p><img src="/images/posts/opsworks/deploy_app3.png" alt="" /></p>

<h2 id="section-6">幾つかのハマりポイント</h2>

<h3 id="gemfile">Gemfile</h3>

<p>下記のGemが必要になるのでコメントアウトされていることを確認すること。</p>

<pre><code>gem 'therubyracer', platforms: :ruby
gem 'unicorn'
</code></pre>

<h3 id="databaseyml">database.yml</h3>

<p>RDSを設定していれば自動的に設定されるのですが、今回の場合設定していないので別途手で<code>database.yml</code>を作りました。</p>

<pre><code>[root@rails-app1 current]# cat config/database.yml
default: &amp;default
  adapter: sqlite3
  pool: 5
  timeout: 5000

production:
  &lt;&lt;: *default
  database: db/production.sqlite3
</code></pre>

<h3 id="css">CSSが適応されていない問題</h3>

<p>「アレ、なんかCSSが効いていないっぽい！？」</p>

<p><img src="/images/posts/opsworks/before_css.png" alt="" /></p>

<p>これは<code>asset:precompile</code>が走っていないため。</p>

<blockquote>
  <p>rake asset:precompile というタスクを実行する必要がありますが、OpsWorksのRailsアプリケーションのデフォルトのデプロイ処理ではこのタスクを実行してくれません。</p>

  <p><a href="http://interu.hatenablog.com/entry/2013/08/01/214258">OpsWorksでRailsをデプロイする際にasset:precompileを実施する方法</a></p>
</blockquote>

<p>下記を<code>deploy/before_migrate.rb</code>に設定する。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">Chef</span><span class="o">::</span><span class="no">Log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&quot;Running deploy/before_migrate.rb&quot;</span><span class="p">)</span>
<span class="n">env</span> <span class="o">=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:deploy</span><span class="o">][</span><span class="ss">:rails_opsworks</span><span class="o">][</span><span class="ss">:rails_env</span><span class="o">]</span>
<span class="n">current_release</span> <span class="o">=</span> <span class="n">release_path</span>

<span class="n">execute</span> <span class="s2">&quot;rake assets:precompile&quot;</span> <span class="k">do</span>
  <span class="n">cwd</span> <span class="n">current_release</span>
  <span class="n">command</span> <span class="s2">&quot;bundle exec rake assets:precompile&quot;</span>
  <span class="n">environment</span> <span class="s2">&quot;RAILS_ENV&quot;</span> <span class="o">=&gt;</span> <span class="n">env</span>
<span class="k">end</span></code></pre></div>

<p>これでデプロイ。</p>

<p><img src="/images/posts/opsworks/after_css.png" alt="" /></p>

<p>OK.</p>

<h3 id="section-7">デプロイされるディレクトリ</h3>

<p><code>/srv/www/rails_opsworks/current</code>に最新の状態がデプロイされます。</p>

<h3 id="section-8">ログディレクトリ</h3>

<p><code>/var/lib/aws/opsworks/chef</code> Chefのログ、OpsWorksの設定JSONが格納されています。</p>

<h2 id="section-9">まとめ</h2>
<p>さてOpsWorksでのデプロイ手順を紹介してきましたが一体何が嬉しいのでしょうか。個人的なメリットは以下です。</p>

<ul>
  <li>インスタンスがDisposable・Repeatableである
    <ul>
      <li>= サーバーをいつでも潰して全く同じ環境を再現できる！</li>
      <li>「サーバーを増やしたい！」→Add Instanceの作業だけで完了</li>
    </ul>
  </li>
  <li><a href="https://github.com/capistrano/capistrano">Capistrano</a>などのデプロイツールのコードをゴチャゴチャ書く必要がなく、デプロイタスクはOpsWorks&amp;Chefに一任できる</li>
</ul>

<h2 id="section-10">さいごに</h2>
<p>Chef Advent CalendarといいながらChefよりもOpsWorks中心の内容になってしまいましたが、冒頭に書いたようにOpsWorksの用意しているレシピに加えて自らのCustom Chefレシピを定義することが可能です。現実的な運用を考えるとOpsWorksのレシピだけでプロビジョニング・デプロイレシピを完結させることは難しいと思うので、<strong>OpsWorksレシピ+Custom Chefレシピ</strong>の２つを組み合わせて運用していくのが現実的かと思います。</p>

<h2 id="img-classemoji-titlelink-altlink-srchttpsassetsgithubcomimagesiconsemojiunicode1f517png-height20-width20-alignabsmiddle--"><img class="emoji" title=":link:" alt=":link:" src="https://assets.github.com/images/icons/emoji/unicode/1f517.png" height="20" width="20" align="absmiddle" /> 参考</h2>
<ul>
  <li><a href="http://ruby.awsblog.com/post/Tx7FQMT084INCR/Deploying-Ruby-on-Rails-Applications-to-AWS-OpsWorks">Deploying Ruby on Rails Applications to AWS OpsWorks</a></li>
</ul>
]]></content>
  </entry>
  

</feed>
