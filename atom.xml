<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://blog.toshimaru.net/atom.xml" rel="self" type="application/atom+xml" /><link href="http://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2017-05-23T02:46:51+09:00</updated><id>http://blog.toshimaru.net/</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">Railsフロントエンド技術の今とこれから</title><link href="http://blog.toshimaru.net/rails-frontend/" rel="alternate" type="text/html" title="Railsフロントエンド技術の今とこれから" /><published>2017-05-22T00:00:00+09:00</published><updated>2017-05-22T00:00:00+09:00</updated><id>http://blog.toshimaru.net/rails-frontend</id><content type="html" xml:base="http://blog.toshimaru.net/rails-frontend/">&lt;p&gt;待望されたYarnサポートの入ったRails5.1が2017年4月にリリースされました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://edgeguides.rubyonrails.org/5_1_release_notes.html&quot;&gt;Ruby on Rails 5.1 Release Notes — Ruby on Rails Guides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;他にもjQueryがデフォルトdependencyから外されたり、Optionalでwebpackサポートが入ったりしており、Railsのフロントエンドは大きな転換点を迎えたと言ってよいでしょう。本エントリではRailsのフロントエンド技術の今を振り返り、今後どうなっていくかをまとめてみたいと思います。&lt;/p&gt;

&lt;h2 id=&quot;disられてきたrailsフロントエンド-no_good&quot;&gt;DisられてきたRailsフロントエンド :no_good:&lt;/h2&gt;

&lt;p&gt;Railsのフロントエンド技術スタックは、フロントエンドを専業とするエンジニアにDisられるものでした。具体的には下記の技術要素です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;jQuery&lt;/li&gt;
  &lt;li&gt;CoffeeScript&lt;/li&gt;
  &lt;li&gt;Assets Pipeline (sprockets)&lt;/li&gt;
  &lt;li&gt;gemのエコシステムに乗ったJSライブラリ(jquery-railsなど)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;複雑化するWebアプリケーションにおいてjQueryはもう時代遅れとされてますし、CoffeeScriptよりも時代はES6、AltJS使うにしても今はTypeScriptが有力候補でしょうか。gemのエコシステムに乗っかっているJSライブラリがAsset Pipelineを通して各環境にシップされるていることも嫌われます。なぜならJSにはnpmというエコシステムがあるからです。&lt;/p&gt;

&lt;h2 id=&quot;railsのフロントエンド刷新の歩み-walking&quot;&gt;Railsのフロントエンド刷新の歩み :walking:&lt;/h2&gt;

&lt;p&gt;しかし2016年春頃&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;からRailsの作者・&lt;a href=&quot;https://github.com/dhh&quot;&gt;DHH&lt;/a&gt;の上げたIssueを皮切りに、フロントエンド技術刷新の歩みが始まります。その歴史・経緯を追ってみましょう。&lt;/p&gt;

&lt;h3 id=&quot;2016年5月&quot;&gt;2016年5月&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Rails v5.1 で jQueryを依存性としてDropしようというIssueをDHHが上げる
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/issues/25208&quot;&gt;Drop jQuery as a dependency · Issue #25208 · rails/rails&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2016年10月&quot;&gt;2016年10月&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Railsにnpm supportを追加するPRが上げられる
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/pull/26836&quot;&gt;Add Yarn support in new apps using –yarn option by Liceth · Pull Request #26836 · rails/rails&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Sprockets 側でNPMをsupportするPRが上げられる
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/rails/sprockets/pull/405&quot;&gt;NPM support: Add support for resolving main from npm’s package.json by guilleiguaran · Pull Request #405 · rails/sprockets&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2016年11月&quot;&gt;2016年11月&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;npm support PRにてnpmではなくyarnを採用することが決められる
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/pull/26836#issuecomment-257426850&quot;&gt;https://github.com/rails/rails/pull/26836#issuecomment-257426850&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;jquery-rails をRailsから外すPRが上げられる
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/pull/27113&quot;&gt;Drop jQuery as a dependency by guilleiguaran · Pull Request #27113 · rails/rails&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2016年12月&quot;&gt;2016年12月&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;DHH自らwebpacker gemを作成開始、v0.1としてgemを公開
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/rails/webpacker/commit/f4cc31d&quot;&gt;FIRST!1! · rails/webpacker@f4cc31d&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;同gemをRails本体の機能に取り込む
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/pull/27288&quot;&gt;Basic –webpack delegation to new webpacker gem by dhh · Pull Request #27288 · rails/rails&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2017年2月&quot;&gt;2017年2月&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Rails 5.1.beta1 リリース
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://weblog.rubyonrails.org/2017/2/23/Rails-5-1-beta1/&quot;&gt;Rails 5.1.0.beta1: Loving JavaScript, System Tests, Encrypted Secrets, and more | Riding Rails&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;webpacker 1.0 リリース
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://rubygems.org/gems/webpacker/versions/1.0&quot;&gt;https://rubygems.org/gems/webpacker/versions/1.0&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;jQueryに依存しないujsである rails-ujs が actionview の一機能としてRails本体に取り込まれる
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/commit/41c33bd4b2ec3f4a482e6030b6fda15091d81e4a&quot;&gt;https://github.com/rails/rails/commit/41c33bd4b2ec3f4a482e6030b6fda15091d81e4a&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2017年4月&quot;&gt;2017年4月&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;:tada: Rails 5.1 リリース
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://weblog.rubyonrails.org/2017/4/27/Rails-5-1-final/&quot;&gt;Rails 5.1: Loving JavaScript, System Tests, Encrypted Secrets, and more | Riding Rails&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上が現在に至るRailsフロントエンド進化の軌跡となります。2016年5月のDHHの問題提起からわずか(?)一年足らずでここまで進化したのは純粋にすごいなーと思いました。&lt;/p&gt;

&lt;h2 id=&quot;railsのフロントエンド実装の選択肢&quot;&gt;Railsのフロントエンド実装の選択肢&lt;/h2&gt;

&lt;p&gt;Rails5.1のフロントエンド刷新以降、&lt;strong&gt;今Railsにはどんなフロントエンド実装の選択肢があるのか&lt;/strong&gt;、ざっと見てみます。&lt;/p&gt;

&lt;h3 id=&quot;1-asset-pipeline&quot;&gt;1. &lt;a href=&quot;https://railsguides.jp/asset_pipeline.html&quot;&gt;Asset Pipeline&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Sprockets + CoffeeScript, SASS, jQuery&lt;/li&gt;
  &lt;li&gt;今まで通りの古き良きassets管理&lt;/li&gt;
  &lt;li&gt;知見も多く転がっており、枯れているのでハマりにくい&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-sprockets-4&quot;&gt;2. &lt;a href=&quot;https://github.com/rails/sprockets&quot;&gt;Sprockets 4&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;ES6 support &lt;a href=&quot;https://github.com/rails/sprockets/blob/master/UPGRADING.md#es6-support&quot;&gt;https://github.com/rails/sprockets/blob/master/UPGRADING.md#es6-support&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Sprockets4の開発自体は停滞気味 &lt;a href=&quot;https://github.com/rails/sprockets/blob/master/CHANGELOG.md&quot;&gt;https://github.com/rails/sprockets/blob/master/CHANGELOG.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-browserify-rails&quot;&gt;3. &lt;a href=&quot;https://github.com/browserify-rails/browserify-rails&quot;&gt;browserify-rails&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;sprockets のコールバックとして動作
    &lt;ul&gt;
      &lt;li&gt;つまりsprocketsに依存している&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;導入のための参考記事: &lt;a href=&quot;http://techlife.cookpad.com/entry/2015/12/14/130041&quot;&gt;モダンJavaScript開発環境 on Rails - クックパッド開発者ブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4-webpacker&quot;&gt;4. &lt;a href=&quot;https://github.com/rails/webpacker&quot;&gt;webpacker&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;絶賛開発中
    &lt;ul&gt;
      &lt;li&gt;活発に変更が入っているので導入に際しては現時点ではREADMEを参考にするのが良さそう&lt;/li&gt;
      &lt;li&gt;まだ小慣れていない印象&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;最初はwebpack+railsのシームレスな統合のための薄い実装だと思ったが、現在ゴテゴテな実装…
    &lt;ul&gt;
      &lt;li&gt;react, angular, elm, vue などの初期インストールタスクが１つのレポジトリに全部のっている
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/rails/webpacker/issues/20#issuecomment-266347480&quot;&gt;plugable にしようぜ&lt;/a&gt;という話はあるが現在そうはなっていない&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;初回インストール時の生成ファイル・パッケージ構成はたぶんフロントエンドガチ勢からみたら&lt;a href=&quot;https://github.com/rails/webpacker/blob/5003a5de0222c1f5b0f3c2b887064039e06f7eae/lib/install/template.rb#L25-L30&quot;&gt;クソの山っぽい&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;レールにのったwebpack利用という意味のカジュアルな利用だったら良いかもしれない&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;5-webpack-rails&quot;&gt;5. &lt;a href=&quot;https://github.com/mipearson/webpack-rails&quot;&gt;webpack-rails&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Sprockets 非依存&lt;/li&gt;
  &lt;li&gt;webpack利用のための薄い実装
    &lt;ul&gt;
      &lt;li&gt;初期のwebpackerに似てる印象&lt;/li&gt;
      &lt;li&gt;個人的にはwebpackerよりは筋が良い印象を受けた&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;6-react_on_rails&quot;&gt;6. &lt;a href=&quot;https://github.com/shakacode/react_on_rails&quot;&gt;react_on_rails&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;SSRサポート&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sstephenson/execjs&quot;&gt;execjs&lt;/a&gt; 依存&lt;/li&gt;
  &lt;li&gt;webpacker integration アリ
    &lt;ul&gt;
      &lt;li&gt;webpackerの薄い実装も登場 &lt;a href=&quot;https://github.com/shakacode/webpacker_lite&quot;&gt;shakacode/webpacker_lite&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;参考記事: &lt;a href=&quot;http://r7kamura.hatenablog.com/entry/2016/10/10/173610&quot;&gt;Ruby on Rails on React on SSR on SPA - ✘╹◡╹✘&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;7-react-rails&quot;&gt;7. &lt;a href=&quot;https://github.com/reactjs/react-rails&quot;&gt;react-rails&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;SSRサポート&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sstephenson/execjs&quot;&gt;execjs&lt;/a&gt; 依存&lt;/li&gt;
  &lt;li&gt;react_on_railsと異なる点は、integration の選択肢として Rails Assets Pipline もしくは webpacker が選べること
    &lt;ul&gt;
      &lt;li&gt;Asset Pipelineにのりたかったらこちらを選択&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;8-独自に導入&quot;&gt;8. 独自に導入&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;独自にJSアプリケーションをRailsに統合させる構成を考えRails上にのっける&lt;/li&gt;
  &lt;li&gt;例: &lt;a href=&quot;http://techlife.cookpad.com/entry/2016/07/27/101015&quot;&gt;webpackを使った Rails上でのReact開発 - クックパッド開発者ブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;9-sprockets-commoner&quot;&gt;9. &lt;a href=&quot;https://github.com/Shopify/sprockets-commoner&quot;&gt;sprockets-commoner&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Shopify製&lt;/li&gt;
  &lt;li&gt;コンセプトとしてはRails Wayを壊さずにBabelを利用すること&lt;/li&gt;
  &lt;li&gt;Sprocketsに依存&lt;/li&gt;
  &lt;li&gt;導入に際してはitkrt2yさんのこちらの記事を参考に: &lt;a href=&quot;http://qiita.com/itkrt2y/items/18ea41828e1c22fc31e3&quot;&gt;顧客が本当に求めていたsprockets、sprockets-commonerの紹介 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;どうすべきか&quot;&gt;どうすべきか&lt;/h2&gt;

&lt;p&gt;上記に紹介したように様々な実装があるわけですが、我々はどれをどのように選択すべきでしょうか。僕なりにまとめてみました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb3/flowchart.png&quot; alt=&quot;chart&quot; /&gt;&lt;/p&gt;

&lt;p&gt;まず最初にあるのが、Railsが嫌い/宗教的にあわない/フロントエンドをレールにのらせたくないのであれば無理してRailsを使うことはないと思っています。Railsをやめる、あるいはRailsはWebAPIに徹して独立したフロントエンドの世界観を築くのもアリだと思ってます。&lt;/p&gt;

&lt;p&gt;また現状のAsset管理に満足していて、かつビジネス上の要件としてリッチなJS実装が求められないのであれば無理してモダンなフロントエンド機構を構築する必要はありません。無理してwebpackだのbrowserifyだの導入せずに、古き良きAsset Pipelineでいいのです（技術そのものが目的な場合はこの限りではない）。&lt;/p&gt;

&lt;h2 id=&quot;今後どうなるか&quot;&gt;今後どうなるか&lt;/h2&gt;

&lt;p&gt;Railsコミュニティの流れとして、&lt;strong&gt;今後どうなっていくか&lt;/strong&gt; も考えてみたいと思います。&lt;/p&gt;

&lt;h3 id=&quot;1-gemからnpmへ&quot;&gt;1. gemからnpmへ&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb3/rails-npm.png&quot; alt=&quot;bridge&quot; /&gt;&lt;/p&gt;

&lt;p&gt;RailsからNPM(yarn)のブリッジがRailsのコア機能の１つとして提供されたことはとても意義深いことだと思っています。その結果起こりうることとしては以下でしょうか。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;jquery-rails, underscore-rails のような Asset Pipeline に載せるタイプのgemは廃れていく(npm管理に移っていく)&lt;/li&gt;
  &lt;li&gt;Railsエンジニアがnpmライブラリを今後どんどん活用することによって、RailsエンジニアのJS界隈進出が増えるかも…?
    &lt;ul&gt;
      &lt;li&gt;railsコミュニティにとってもnpmコミュニティにとっても良い事&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-reactへの大潮流&quot;&gt;2. Reactへの大潮流&lt;/h3&gt;

&lt;p&gt;今までJSライブラリのデファクトと言ったらjQueryでしたが、フロントエンド実装の複雑化にともないReactを採用する企業が増えその状況が変わってきました（少なくとも僕の観測範囲内では）。jQueryを使っての複雑なDOM操作のコードは破綻しがちですし限界があります。その結果のReact採用なのでしょう。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;反省会というからReact導入が一般的に浸透し導入後一巡したってことだろうなぁ&lt;br /&gt;Twitterトレンド入り！ 「&lt;a href=&quot;https://twitter.com/hashtag/React%E5%8F%8D%E7%9C%81%E4%BC%9A?src=hash&quot;&gt;#React反省会&lt;/a&gt;」登壇資料一挙公開！ | Wantedly Engineer Blog &lt;a href=&quot;https://t.co/PbG49aclqa&quot;&gt;https://t.co/PbG49aclqa&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/862817538022883328&quot;&gt;May 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;上記のようにReactが導入されやすい環境が整ってきている昨今、今後ますますRails+Reactの採用事例は増えていくと思われます&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h3 id=&quot;3-turbolinks-がますます下火に&quot;&gt;3. Turbolinks がますます下火に&lt;/h3&gt;

&lt;p&gt;&lt;del&gt;黙って無効化すべし&lt;/del&gt; 無効化されることの多いturbolinks機能ですがますます下火になっていくと思われます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb3/turbolinks.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;リッチなレンダリングUXを提供するためのRailsチーム(DHH)の苦肉の策がTurbolinksという理解でいますが、上述したようにフロントエンド開発の機構が整ってきている今、わざわざturbolinksを使う必要性もなくなってきました。&lt;/p&gt;

&lt;p&gt;とはいえ、絶対にJS書きたくないでござる！というJS書きたくないマンなRailsエンジニアの選択肢の１つとしてはアリだと思います。&lt;/p&gt;

&lt;h2 id=&quot;フロントエンドというマイクロサービスがもたらす複雑性&quot;&gt;フロントエンドというマイクロサービスがもたらす複雑性&lt;/h2&gt;

&lt;p&gt;と、ここまでRailsとフロントエンドの話をしてきましたが、一方で安易なフロントエンド技術の導入は負債を生み出す危険性もあることも付しておきます。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;このツラミわかるなぁ | ReactSPAをRailsに戻している話 // Speaker Deck &lt;a href=&quot;https://t.co/G3Ln3NbmCQ&quot;&gt;https://t.co/G3Ln3NbmCQ&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/857758278830350337&quot;&gt;April 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;このケースのように複雑なフロントエンド実装が逆に負債となり足かせとなる場合もあります。&lt;a href=&quot;http://anond.hatelabo.jp/20170501085956&quot;&gt;全くメンテされないクソJSコードの塊を作る&lt;/a&gt;ような状況は避けなければなりません。&lt;/p&gt;

&lt;p&gt;高度に専業化したフロントエンド技術はもはやいちサーバーサイドエンジニアが片手間に開発・メンテナンスできるレベルのものでもなくなってきています。うまく作ったとしてもその後のアップデートに追従していくのは至難の業でしょう。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-cards=&quot;hidden&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;紹介されているこっちのスライドもよくわかるなぁ。「フロントエンドは一個のマイクロサービス(ただのViewじゃない)」「マイクロサービス作っているのだから辛いの当然」 &lt;a href=&quot;https://t.co/YqkrIYSXxf&quot;&gt;https://t.co/YqkrIYSXxf&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/857790990496616448&quot;&gt;April 28, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;このようにフロントエンドを１つのマイクロサービスと捉える見方もあります。マイクロサービスであるからこそ、モノリシックサービスよりもアーキテクチャ・実装が複雑になりがちです。高度なフロントエンド技術導入の際はチームとしてその複雑性を受け入れる覚悟が必要でしょう。&lt;/p&gt;

&lt;h2 id=&quot;イベント告知&quot;&gt;イベント告知&lt;/h2&gt;

&lt;p&gt;そんなわけで随分と長い前置きでしたが、次回のRoppongi.rb#3のテーマは”Rails x Frontend”で開催します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://roppongirb.connpass.com/event/56456/&quot;&gt;Roppongi.rb #3 “Rails x Frontend-Tech”&lt;/a&gt;&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Roppongi.rb #3 &amp;quot;Rails x Frontend-Tech&amp;quot; 〜これからのRails Frontendの話をしよう〜 を公開しました！ &lt;a href=&quot;https://t.co/hOjXX7J8dC&quot;&gt;https://t.co/hOjXX7J8dC&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/roppongirb?src=hash&quot;&gt;#roppongirb&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/861725918552707072&quot;&gt;May 8, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;既に参加枠（抽選）は埋まっており参加登録いただいた方を全員ご案内できないのが恐縮ですが、もしよければ登録して遊びにきてください。&lt;/p&gt;

&lt;h2 id=&quot;参考リンク&quot;&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/itkrt2y/items/7e999836f460fb9c005d&quot;&gt;Rails5.1に向けてフロントエンド周りで起こっている革命まとめ - Qiita&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/yuroyoro/items/a29e39989f4469ef5e41&quot;&gt;Rails5.1から導入されるwebpacker.gemは本当にRailsのフロントエンド開発に福音をもたらすのか? - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;ちょうど&lt;a href=&quot;http://railsconf.com/2016&quot;&gt;RailsConf 2016&lt;/a&gt;の後くらいのタイミングでしょうか。&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;一方で、複雑でないアプリケーションに対しReactを導入するのはオーバーキルなのでごく一部分の小さなイベント制御JSコードであればjQueryで十分な場面も未だ多くあると思います。&amp;nbsp;&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="rails" /><category term="frontend" /><category term="roppongirb" /><summary type="html">待望されたYarnサポートの入ったRails5.1が2017年4月にリリースされました。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.toshimaru.net/images/posts/roppongirb3/roppongirb-3.jpg" /></entry><entry><title type="html">JavaScriptのXHRの送り方いろいろ: XMLHttpRequest, fetch, async/await</title><link href="http://blog.toshimaru.net/new-xhr-fetch-asyncawait/" rel="alternate" type="text/html" title="JavaScriptのXHRの送り方いろいろ: XMLHttpRequest, fetch, async/await" /><published>2017-02-20T00:00:00+09:00</published><updated>2017-02-20T00:00:00+09:00</updated><id>http://blog.toshimaru.net/new-xhr-fetch-asyncawait</id><content type="html" xml:base="http://blog.toshimaru.net/new-xhr-fetch-asyncawait/">&lt;p&gt;JavaSciriptのXHR(XMLHttpRequest)の送り方は１つだけではありません。モダンなXHRに向けてそれぞれのHTTPリクエストの送り方を比較・検討してみます。&lt;/p&gt;

&lt;h2 id=&quot;前提&quot;&gt;前提&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jquery.com/&quot;&gt;jQuery&lt;/a&gt;, &lt;a href=&quot;https://github.com/visionmedia/superagent&quot;&gt;superagent&lt;/a&gt;, &lt;a href=&quot;https://github.com/mzabriskie/axios&quot;&gt;axios&lt;/a&gt;などのAJAX系ライブラリは使用しないこととする。&lt;/li&gt;
  &lt;li&gt;検証に使うブラウザは最新版のChrome (現在はVersion56.0)&lt;/li&gt;
  &lt;li&gt;今回リクエストを送る先は仮想的に下記のURLとする&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://your.domain.net/&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;1-xmlhttprequest&quot;&gt;1. XMLHttpRequest&lt;/h2&gt;

&lt;p&gt;さぁ,まずは古き良き&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/API/XMLHttpRequest&quot;&gt;XMLHttpRequest&lt;/a&gt;。ローレベルなAPIでAJAX処理が書きにくいのですが、歴史がある分多くのブラウザで動作します。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'GET'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onerror&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;error!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Chrome Dev Toolのコンソールで動かしてみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/xhr/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;モダンな書き方にしてみよう&quot;&gt;モダンな書き方にしてみよう！&lt;/h3&gt;

&lt;p&gt;このまま次のXHRに進んでも良いですがせっかくなので上記のコードをもう少しモダンにしてみます。&lt;/p&gt;

&lt;p&gt;今回は下記の２つの書き方を導入します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Statements/const&quot;&gt;const&lt;/a&gt; = 定数&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;Arrow function&lt;/a&gt; = アロー関数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記の2つで1のXMLHttpRequestのコードを書き直すとこのようになります。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'GET'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onerror&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;error!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt;に、&lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;=&amp;gt;&lt;/code&gt;へと変更しています。わかりやすくなってスッキリしましたね。&lt;/p&gt;

&lt;p&gt;この書き方でも動くかChrome Dev Toolのコンソールで動かしてみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/xhr/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;:ok: でした。&lt;/p&gt;

&lt;h2 id=&quot;2-fetch-api&quot;&gt;2. fetch API&lt;/h2&gt;

&lt;p&gt;次は&lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; APIを使ってXHRしてみましょう。ちなみにfetch APIはChrome Version 42よりサポートされています。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;error caught!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;コードとしてはurlを&lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;して&lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;catch&lt;/code&gt;をチェインさせてそれぞれの処理内容を書いていくというものになります。&lt;/p&gt;

&lt;p&gt;Chrome Dev Toolコンソールで動かした結果。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/xhr/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;は&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise&lt;/a&gt;を返す点がポイントですね。&lt;/p&gt;

&lt;h2 id=&quot;3-fetch--asyncawait&quot;&gt;3. fetch + async/await&lt;/h2&gt;

&lt;p&gt;最後のXHRは&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt;async/await&lt;/a&gt;になります。Chrome55からのサポートなので最近追加された機能ということになります。&lt;/p&gt;

&lt;p&gt;さきほどの&lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;のコードをasync/awaitの機能を使って書き換えてみましょう。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;error!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ポイントとしては &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt;を使ってまず無名関数を作ります。これでその関数内に&lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt;を使う準備ができました。&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/await&quot;&gt;await&lt;/a&gt;はPromiseが返されるのを待機するので、先程のPromiseを返す&lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;関数の手前に&lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt;を宣言します。これで&lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;関数は&lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt;でコールバックをチェインする必要がなくなり、&lt;code class=&quot;highlighter-rouge&quot;&gt;response&lt;/code&gt;変数にダイレクトに結果が代入されます。エラー処理に関してはtryで処理内容を囲み、catchでエラーを補足します。&lt;/p&gt;

&lt;p&gt;コンソールで動かしてみた結果は下記の通り。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/xhr/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;結論&quot;&gt;結論&lt;/h2&gt;

&lt;p&gt;結論としては現時点では3つめのfetch+async/awaitな書き方が最もモダンな書き方となります。&lt;/p&gt;

&lt;p&gt;3の書き方でなにが嬉しいかというと:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;非同期処理でありがちなコールバック地獄からの解放&lt;/li&gt;
  &lt;li&gt;同期的なコードで書けるので書きやすい・読みやすい&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Statements/try...catch&quot;&gt;try~catch節&lt;/a&gt;を用いているのでエラー処理の見通しが良い&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このあたりでしょうか。&lt;/p&gt;

&lt;p&gt;まだasync/awaitシンタックスはECMAScript 2017のDraftな仕様というステータスであり現時点でIEはサポートしていない書き方です。なので多くの人が触る環境下のコードベースにおける導入は厳しいですが、これらが使える利用環境を限定できるのであれば積極的に使っていきたい書き方ですね。&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/OC7tgJP1D4s&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;おまけbabelで使う場合&quot;&gt;（おまけ）babelで使う場合&lt;/h2&gt;

&lt;p&gt;babel で async/await のシンタックス使いたい場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-plugin-syntax-async-functions&lt;/code&gt;を使うことになります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://babeljs.io/docs/plugins/syntax-async-functions/&quot;&gt;Syntax async functions · Babel&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jakearchibald.com/2015/thats-so-fetch/&quot;&gt;That’s so fetch! - JakeArchibald.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&quot;&gt;XMLHttpRequest - Web APIs | MDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="javascript" /><category term="ajax" /><summary type="html">JavaSciriptのXHR(XMLHttpRequest)の送り方は１つだけではありません。モダンなXHRに向けてそれぞれのHTTPリクエストの送り方を比較・検討してみます。</summary></entry><entry><title type="html">2016年振り返りと2017年の抱負的なやつ</title><link href="http://blog.toshimaru.net/2016-to-2017/" rel="alternate" type="text/html" title="2016年振り返りと2017年の抱負的なやつ" /><published>2017-01-04T00:00:00+09:00</published><updated>2017-01-04T00:00:00+09:00</updated><id>http://blog.toshimaru.net/2016-to-2017</id><content type="html" xml:base="http://blog.toshimaru.net/2016-to-2017/">&lt;p&gt;なんか昨年末にいくつかの振り返りエントリを見て自分も書くかと思い立ったので書いてみる。&lt;/p&gt;

&lt;h2 id=&quot;2016年振り返りアウトプット編&quot;&gt;2016年振り返り・アウトプット編&lt;/h2&gt;

&lt;h3 id=&quot;roppongirb-主催&quot;&gt;Roppongi.rb 主催&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://roppongirb.connpass.com/&quot;&gt;Roppongi.rb&lt;/a&gt;を&lt;a href=&quot;https://twitter.com/totzyuta&quot;&gt;@totzyuta&lt;/a&gt;さんと一緒に主催した。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/roppongirb-speeding-up-rails/&quot;&gt;Roppongi.rbで「Rails高速化戦略」を発表しました&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/infrastructure-as-ruby-code-2016/&quot;&gt;Roppongi.rb#2で「Infrastructure as (Ruby) Code の現状確認」を発表しました&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このへんを始めたきっかけ・想いとしては後述するPodcastの出演時に話したので興味があればどうぞ。&lt;/p&gt;

&lt;h3 id=&quot;oss活動&quot;&gt;OSS活動&lt;/h3&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;初railsプルリク、成功してた | Enable `block` variable in view · Issue #27303 · rails/rails &lt;a href=&quot;https://t.co/nnz5iJ9GZx&quot;&gt;https://t.co/nnz5iJ9GZx&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/807057098861219840&quot;&gt;December 9, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;コントリビュートしたやつ
    &lt;ul&gt;
      &lt;li&gt;rails/rails
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/pull/27303&quot;&gt;Enable block variable in view by toshimaru · Pull Request #27303 · rails/rails&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;rails/webpacker
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/rails/webpacker/pull/15&quot;&gt;Save babel-preset-react to devDependencies by toshimaru · Pull Request #15 · rails/webpacker&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;rails/weblog
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/rails/weblog/pull/88&quot;&gt;Introduce jekyll-seo-tag by toshimaru · Pull Request #88 · rails/weblog&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;sorcery
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/NoamB/sorcery/pull/730&quot;&gt;Fix RSpec by toshimaru · Pull Request #730 · NoamB/sorcery&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/NoamB/sorcery/pull/729&quot;&gt;Add a newline at the end of migration file by toshimaru · Pull Request #729 · NoamB/sorcery&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;その他小さいドキュメント修正・テスト修正とか細かいのいろいろ…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;作ったやつ
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/toshimaru/rack-simple_user_agent&quot;&gt;rack-simple_user_agent&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/toshimaru/redirect_follow_get&quot;&gt;redirect_follow_get&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/toshimaru/newrelic_server-chef-recipe&quot;&gt;newrelic_server-chef-recipe&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/toshimaru/jekyll-tagging-related_posts&quot;&gt;jekyll-tagging-related_posts&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/toshimaru/jekyll-include_sass&quot;&gt;jekyll-include_sass&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;年末にRailsのコントリビュートできたのは良かった。Railsレポで&lt;code class=&quot;highlighter-rouge&quot;&gt;Contributor&lt;/code&gt;のラベルが付きREADMEに名前を刻めたのは地味に嬉しい。今後もrailsのmasterは追っかけつつ見つけたバグは積極的に直していきたい。&lt;/p&gt;

&lt;p&gt;既存レポのメンテナンスはサボり気味だった。PRは大体捌いているけどIssueは放置気味な嫌いがあるのでなんとかしたい。イシューの大小かかわらず即レス対応してくれると&lt;a href=&quot;http://qiita.com/massa142/items/37b5cfd80daea5cac541&quot;&gt;＜常にそこにいる安心感＞&lt;/a&gt;がある。2017年は頑張りたい。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;いろんな人のOSS活動見てて、やっぱイシュートリアージはちゃんとやんなきゃと思っている。イシュー、PR放置が一番やったらあかんやつよな。&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/813926769333940224&quot;&gt;December 28, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;作ったものに関しては自分の抱えている課題ベースで考えそのソリューションとなるものをOSSとして公開した。コンセプチュアルなものではないので2017年はもう少し大きい規模のコンセプトのはっきりしたOSS作りたいという思いがある。&lt;/p&gt;

&lt;h3 id=&quot;英語ブログ&quot;&gt;英語ブログ&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;toshima.ru&lt;/code&gt;というドメインを同僚にそそのかされて取得してしまい、その勢いで英語ブログを作った。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.toshima.ru&quot;&gt;http://blog.toshima.ru&lt;/a&gt;&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;同僚にそそのかされて toshima.ru ドメイン取得してしまった。 さっそくいくつかのGithub Pagesを向けてみた&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/736396635509395457&quot;&gt;May 28, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;用途は本ブログで日本語でまとめる程もないTipsのメモ。こういうのは日本人エンジニアだとQiitaとかに書くんだろうけど、Qiitaは宗教上の理由で使えないので自分で本ブログとは別に作ることにした。長い文章ではないので、実験的に英語で公開することにした。また（中途半端な）AMPとしてページを公開しているのでページ表示は速いはず。こちらも例によって&lt;a href=&quot;https://github.com/toshimaru/blog.toshima.ru&quot;&gt;Github Pagesを使って公開&lt;/a&gt;している&lt;/p&gt;

&lt;h3 id=&quot;podcast出演&quot;&gt;Podcast出演&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.toshimaru.net/bootfm-podcast/&quot;&gt;boot.fm Podcast に出演しました&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/__timakin__&quot;&gt;@__timakin__&lt;/a&gt;さん、&lt;a href=&quot;https://twitter.com/k0kubun&quot;&gt;@k0kubun&lt;/a&gt;さんに誘われ彼らがホストしているPodcastに出演。お二人ともに僕より若く優秀な方で、彼らと話せたことは僕にとってはたいへん刺激になってよかった。若手優秀勢に負けてないように僕なりのバリューを発揮していきたい。&lt;/p&gt;

&lt;h2 id=&quot;2016年振り返りインプット編&quot;&gt;2016年振り返り・インプット編&lt;/h2&gt;

&lt;p&gt;通勤時間が増えたのでPodcastをメインにインプットの量が増えた印象。&lt;/p&gt;

&lt;h3 id=&quot;podcast&quot;&gt;Podcast&lt;/h3&gt;

&lt;p&gt;2014年、2015年と英語のTech系Podcastメインでいろいろ聴いていたけども、2016年からは日本語Podcastがガンガン登場したことで英語Podcastと同じくらいの量の日本語Podcastを聴いた気がしている。&lt;/p&gt;

&lt;p&gt;聴いているのは具体的にこのへん。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://changelog.com/&quot;&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://devchat.tv/ruby-rogues&quot;&gt;The Ruby Rogues&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://devchat.tv/js-jabber&quot;&gt;JavaScript Jabber&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.thecloudcast.net/&quot;&gt;The Cloudcast&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rebuild.fm/&quot;&gt;Rebuild&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mozaic.fm/&quot;&gt;mozaic.fm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://dex.fm/&quot;&gt;dex.fm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bootfm.github.io/&quot;&gt;boot.fm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://soundcloud.com/wyukawa&quot;&gt;wyukawa’s podcast&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloudinfra.audio/&quot;&gt;cloudinfra-audio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://codelunch.fm/&quot;&gt;CodeLunch.fm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そこまで自分の興味分野でないPodcastは流し聴き、興味範囲のやつは丁寧に聴くといった感じ。2017年もゆるーくいろいろな分野のPodcastを聴いていきたい。&lt;/p&gt;

&lt;h3 id=&quot;読書&quot;&gt;読書&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;DDD青本&lt;/li&gt;
  &lt;li&gt;リーダブルコード&lt;/li&gt;
  &lt;li&gt;読み途中・積読中の本がいろいろ…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;読み途中なのはいろいろあるんだけどまともに読んだといえるのはDDD青本、リーダブルコードの２つくらいか。どちらも古典とあって良本だった。2017年は積んでいる本のうちある程度読んで良いと思えるものは読み通したい。&lt;/p&gt;

&lt;p&gt;2016年はどちらかというと最新情報のキャッチアップをメインにしていたので、書籍よりもWEB+DB PRESSのような技術系雑誌のほうが読んだし役に立つ情報が多かった印象。2017年も WEB+DB Press や Software Design あたりは一通り目を通すようにしたい。&lt;/p&gt;

&lt;h2 id=&quot;2017年の抱負的なやつ&quot;&gt;2017年の抱負的なやつ&lt;/h2&gt;

&lt;h3 id=&quot;100star人材目指したい&quot;&gt;100star人材目指したい&lt;/h3&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;100Stars人材になれました。ありがとうございます。普通に嬉しいやつです。 &lt;a href=&quot;https://t.co/4hsMY3iIYY&quot;&gt;pic.twitter.com/4hsMY3iIYY&lt;/a&gt;&lt;/p&gt;&amp;mdash; timakin (@__timakin__) &lt;a href=&quot;https://twitter.com/__timakin__/status/814098497712451584&quot;&gt;December 28, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;早く100Star人材にならなければ人権を失う…&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/814110242422157312&quot;&gt;December 28, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;とはいえ狙ってとれるものではないのでそんなに力まずに世の中のソリューションとなりそうなモノを淡々と作っていきたいと思っている。&lt;/p&gt;

&lt;p&gt;変に気合を入れて重厚なものを作ろうとしてエターナるのではなく、ちゃんと完成させることを視野にいれてやっていくことが重要かと。&lt;/p&gt;

&lt;h3 id=&quot;アウトプットについて&quot;&gt;アウトプットについて&lt;/h3&gt;

&lt;p&gt;2016年後半はだいぶ「息をするようにOSSコントリビュート」ができるようになってきた実感があった。Ruby(Rails)も仕事で書き始めて今年で三年目くらいになるので、引き続きどんどんOSSコントリビュートしてコミュニティに還元していきたいと思う。&lt;/p&gt;

&lt;p&gt;僕もそろそろWEB業界的にはもう若手ではなく、中堅となる歳に差し掛かってきたので若手の育成とか自分の持っている情報の伝達を頑張っていきたいと思っている。そのためにも勉強会やブログでのアウトプットは続けていきたい（機会があればPodcastでも）。&lt;/p&gt;

&lt;p&gt;あとこれは時間があればって感じでMUSTではないけどもそろそろ新しい言語ももう１つくらい習得したい。第一候補はGoだけれども、mrubyでもいいかもしれない。&lt;/p&gt;

&lt;h3 id=&quot;インプットについて&quot;&gt;インプットについて&lt;/h3&gt;

&lt;p&gt;インプットに関してだけど、最近だと業務の中でのインプット・学習に限界を感じている。ある程度自分の常日頃から触っている周辺技術に関してはレベルが上がって情報のレベルも高いものを求めるようになったからだと思う。&lt;/p&gt;

&lt;p&gt;じゃあどうしたらいいかというと、ただ待っていても質の高いインプットは降ってはこないので外部の情報を積極的にDigっていきたい。Railsのmasterを日々追っかけたり、Railsやいろんなgemのソースコードリーディングしたり、ruby/rails界隈の人をフォローしたり、勉強会でいろんな人と話したり。&lt;/p&gt;

&lt;h2 id=&quot;生活環境の変化&quot;&gt;生活環境の変化&lt;/h2&gt;

&lt;p&gt;2016年後半に子どもが産まれたので生活環境がガラッと変わる。正直、2017年はいろいろ家庭面で忙しくなって自分の時間が全然取れなくなるだろうなってのを覚悟している。&lt;/p&gt;

&lt;p&gt;覚悟していた…のだが、&lt;a href=&quot;http://codelunch.fm/20/&quot;&gt;最近聴いたcodelunch.fm&lt;/a&gt;で「生活スタイルの変化によって時間の使い方が効率的になりむしろ今までより時間とれるようになった」という話を聴いて、生活スタイルの変化を言い訳にはできないという教訓を得た。&lt;/p&gt;

&lt;p&gt;また仕事的にもリモートがしやすい業種でもあるので、家庭と仕事のバランスを見直してもいいのかもなーと下記エントリ読みながらぼんやり考えていた（残念ながら今の職場はリモートはNG）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ksss9.hatenablog.com/entry/2015/12/20/144329&quot;&gt;子育てしながらリモートで働いた半年間 - スペクトラム&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ということで仕事・開発はほどほどに家庭をしっかり優先しつつ、2017年もボチボチやっていこうと思います :innocent:&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="雑記" /><summary type="html">なんか昨年末にいくつかの振り返りエントリを見て自分も書くかと思い立ったので書いてみる。</summary></entry><entry><title type="html">boot.fm Podcast に出演しました</title><link href="http://blog.toshimaru.net/bootfm-podcast/" rel="alternate" type="text/html" title="boot.fm Podcast に出演しました" /><published>2016-12-29T00:00:00+09:00</published><updated>2016-12-29T00:00:00+09:00</updated><id>http://blog.toshimaru.net/bootfm-podcast</id><content type="html" xml:base="http://blog.toshimaru.net/bootfm-podcast/">&lt;p&gt;ちょっと前だが今月&lt;a href=&quot;https://bootfm.github.io/&quot;&gt;boot.fm&lt;/a&gt;というTech系Podcastに出演した。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;最近流行りのTechポッドキャストに出演しました。分報、フロントエンド技術とどう付き合うか、コードレビュー、mrubyあたりを話してます | Vol.4: Code review as a prior investment &lt;a href=&quot;https://t.co/FjRE8HQa4E&quot;&gt;https://t.co/FjRE8HQa4E&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/809544891696939009&quot;&gt;December 15, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;そのフォローアップや話しきれなかったことなど書いてみます。&lt;/p&gt;

&lt;h2 id=&quot;slack分報タスク管理について&quot;&gt;Slack分報・タスク管理について&lt;/h2&gt;

&lt;p&gt;分報の元ネタ: &lt;a href=&quot;http://c16e.com/1511101558/&quot;&gt;Slackで簡単に「日報」ならぬ「分報」をチームで実現する3ステップ〜Problemが10分で解決するチャットを作ろう | Craftsman Software Inc.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;僕が思う分報の良い点&quot;&gt;僕が思う分報の良い点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;日報より情報発信の敷居がずっと低い
    &lt;ul&gt;
      &lt;li&gt;多分一番分かりやすい喩えは &lt;strong&gt;社内Twitter&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;カジュアルなコミュニケーションができる
    &lt;ul&gt;
      &lt;li&gt;ハマっていることとかさらっと書いたら誰かが助け舟を出してくれたり&lt;/li&gt;
      &lt;li&gt;ゆるーい雑談とかも&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;リアルタイムなコミュニケーションができる
    &lt;ul&gt;
      &lt;li&gt;Podcast内で紹介した&lt;a href=&quot;https://toshi.slack.com/apps/A0HBTUUPK--todo&quot;&gt;/todo&lt;/a&gt;みたいなSlackインテグレーションアプリと組み合わせることによって、リアルタイムにタスクのWIP/DONEを関係者に共有できる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基本的に僕は日報を書いていきたいと思っているのだけど、日報真面目に書いているとけっこう時間がかかってしまう。最初は乗り気しなかったけどとりあえずやってみるかと始めた分報だが、日報ハードル高すぎ問題を感じていた僕には丁度良くハマった。&lt;/p&gt;

&lt;p&gt;情報発信の対象となる受け手も限られていて、些細なこともカジュアルに書きやすいし読み手を過剰に意識することも少ない。&lt;/p&gt;

&lt;h3 id=&quot;僕が思う分報の悪い点&quot;&gt;僕が思う分報の悪い点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Slackチャンネル多くなる
    &lt;ul&gt;
      &lt;li&gt;1チャンネル/user なので人数分チャンネルできる&lt;/li&gt;
      &lt;li&gt;JOINしすぎると間違いなくノイズになるのでMuteなり加入チャンネル選ぶなりで凌ぐ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;知性のない発言が多くなる（かもしれない）
    &lt;ul&gt;
      &lt;li&gt;そういうのも含めて社内Twitterでありカジュアルなコミュニケーションなんだからまぁ良い点ともいえる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;その他slackで便利そうなやつ&quot;&gt;その他Slackで便利そうなやつ&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://toshi.slack.com/apps/category/At0G5YTKU2-analytics&quot;&gt;便利な Slack Integration App&lt;/a&gt; 使ってKPIとか流してみる&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/masuidrive/miyamoto&quot;&gt;masuidrive/miyamoto&lt;/a&gt; でSlack勤怠管理してみるとか&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hubot.github.com/&quot;&gt;HUBOT&lt;/a&gt;みたいなChatbotを棲ませて自動化実現したり便利機能を提供したりとか&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;便利な Slack Integration App もどんどん増えているのでそういうのはどんどん導入していくと良いと思う。&lt;/p&gt;

&lt;p&gt;Chatbot系はアイディア勝負。便利な使い方あればどんどん紹介してほしいと思う。&lt;/p&gt;

&lt;h2 id=&quot;フロントエンド-vs-バックエンド&quot;&gt;フロントエンド vs バックエンド&lt;/h2&gt;

&lt;p&gt;僕が最近React書いてて感じている「Railsやりつつフロントエンドのキャッチアップはしきれないし〜自分の書いているコードに自信を持ていないし〜けっこう妥協しちゃってるんですよ〜」という悩み相談みたいな感じになってしまったかもしれない。&lt;/p&gt;

&lt;p&gt;お二人ともPodcast内で話したが、結論としては至極まっとうで、プロトタイピングやそもそもJavaScriptヘビーにSPAを作る必要がないのであれば無理してJS書くことないし、Railsのレールに乗っかってけばいいじゃんという感じ。&lt;/p&gt;

&lt;p&gt;SPAにすることがプロダクトの価値として高くなるのであればReactなりAngularなり導入に踏み切ればいいじゃん、という感じ。ただそうなってくるとどうしてもRailsのレールから外れて開発を進めていく必要があり、レールを外れる勇気と覚悟が必要でウッ…となる。&lt;/p&gt;

&lt;p&gt;とここまで書いてアレですが、Podcast収録した時点ではリリースされていなかった&lt;a href=&quot;https://github.com/rails/webpacker&quot;&gt;rails/webpacker&lt;/a&gt;が現在出てきており、とうとうRailsにもyarn、webpackへの世界へのレールが開かれようとしております。そしてwebpackerの仕組みに乗っかってReactがinstallできるような仕組みも用意されつつある。&lt;/p&gt;

&lt;p&gt;そういう流れが整備されていけば多少僕が今抱えている不安感も和らぐだろうと思いました。&lt;/p&gt;

&lt;h2 id=&quot;コードレビューについて&quot;&gt;コードレビューについて&lt;/h2&gt;

&lt;p&gt;けっこう自分が今コードレビューに時間をかけているので、コードレビュー質的・時間的にどれくらいやるもんなんって話。&lt;/p&gt;

&lt;p&gt;コスト、というとコストかけたくないでござる！みたいなことを暗に思っているのではと思われてしまうかもしれないが、そうではない。基本的にレビューにはコストをかけるべきだし、短期的には時間がかかろうともそれは中長期的にチームの生産性向上につながると思ってる。つまりコードレビューに時間をかけるということはチームへの投資であるということ。&lt;/p&gt;

&lt;p&gt;そのコードレビューをどう効率的に回していくかという話もできればよかったけどそれはまた別の機会に。まぁ基本的に丁寧なコードレビューをしようと思うとやっぱり時間はかかる。&lt;/p&gt;

&lt;h2 id=&quot;mruby&quot;&gt;mruby&lt;/h2&gt;

&lt;p&gt;mrubyワンチャンある？って話。得られた知見はこうだ。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rubyのシンタックスはmrubyでもだいぶ動く&lt;/li&gt;
  &lt;li&gt;mrubygem エコシステムはまだまだ未成熟&lt;/li&gt;
  &lt;li&gt;Cを書く覚悟が必要（mrubygemないときにCを書く場面がある）&lt;/li&gt;
  &lt;li&gt;信頼できない mrubygem だとたまに環境がぶっ壊れることある&lt;/li&gt;
  &lt;li&gt;デバッグは(現在のところ)printデバッグ&lt;/li&gt;
  &lt;li&gt;パフォーマンスが求められる場面だとmrubyよりはgolangが良い&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考リンク&quot;&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://bootfm.github.io/&quot;&gt;boot.fm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://roppongirb.connpass.com/event/42633/&quot;&gt;Roppongi.rb #2 “Infrastructure x Ruby” - connpass&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://seleck.cc/822&quot;&gt;リモートワークは敢えて取り入れない。Gunosyデータ分析部「情報共有」の仕組みとは | SELECK&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/k0kubun/mitamae&quot;&gt;k0kubun/mitamae: Configuration management tool embedding mruby, which is alternative implementation of Itamae&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/k0kubun/items/3995d3b730b63ef67c56&quot;&gt;Rubyを評価するCLIツールはCRubyとmrubyのどちらで実装するべきか - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="podcast" /><category term="tech" /><summary type="html">ちょっと前だが今月boot.fmというTech系Podcastに出演した。</summary></entry><entry><title type="html">SEOという言葉の醜悪さ、SEOではなくクローラー・人間のための最適化を</title><link href="http://blog.toshimaru.net/goodbye-seo-hello-gco/" rel="alternate" type="text/html" title="SEOという言葉の醜悪さ、SEOではなくクローラー・人間のための最適化を" /><published>2016-11-29T00:00:00+09:00</published><updated>2016-11-29T00:00:00+09:00</updated><id>http://blog.toshimaru.net/goodbye-seo-hello-gco</id><content type="html" xml:base="http://blog.toshimaru.net/goodbye-seo-hello-gco/">&lt;p&gt;SEOという言葉が嫌いだ。そこにはビジネスがあり、カネがあり、カネの匂いを嗅ぎつけたSEO業者たちがいる。&lt;/p&gt;

&lt;p&gt;最近、DeNAの運営するキュレーションメディア、&lt;a href=&quot;https://welq.jp/&quot;&gt;WELQ&lt;/a&gt;でこんなニュースがあった。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.itmedia.co.jp/news/articles/1610/26/news117.html&quot;&gt;「死にたい」検索トップの「welq」の記事、DeNAが広告削除　「不適切」指摘受け - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.landerblue.co.jp/blog/?p=30141&quot;&gt;DeNAがやってるウェルク（Welq）っていうのが企業としてやってはいけない一線を完全に越えてる件（第１回）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このような指摘を受け、DeNAは下記のような発表を出した。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;【WELQからのお知らせ】「専門家による記事確認および記事内容に関する通報フォームの設置」について&lt;a href=&quot;https://t.co/73waKiYTpg&quot;&gt;https://t.co/73waKiYTpg&lt;/a&gt; &lt;a href=&quot;https://t.co/0TvY7psRlu&quot;&gt;https://t.co/0TvY7psRlu&lt;/a&gt;&lt;/p&gt;&amp;mdash; WELQ - ウェルク (@welq_pr) &lt;a href=&quot;https://twitter.com/welq_pr/status/802082119552004096&quot;&gt;November 25, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;僕はこの一連の件に関してあれこれうるさく言うつもりもないしその言葉も持ち合わせてないが、SEOについて最近ぼんやり考えていることを再考するきっかけとなったのでそこらへんを書いてみるとする。&lt;/p&gt;

&lt;h2 id=&quot;seoという言葉の醜悪さ&quot;&gt;SEOという言葉の醜悪さ&lt;/h2&gt;

&lt;p&gt;SEO、サーチエンジン最適化という言葉にどことなく醜悪さを感じてしまうのは僕だけだろうか。&lt;/p&gt;

&lt;p&gt;サーチエンジン最適化という行為そのものは必要なことだ。Googleに適切にページを評価してもらうために最適化を行う。Webサイト運営者であれば誰もがすべきことであろう。しかしその最適化のテクニックが逆手に取られ＜招かれざるページ＞が検索順位の上位に上がってしまうことが往々にしてある。&lt;/p&gt;

&lt;p&gt;あなたもこんな経験はないだろうか。あなたは検索したい物事があってキーワードを検索フォームに入れて検索する。一番上に出てくるそれらしき見出しをクリックする。しかしそのページは広告、アフィリエイト、外部リンクで埋め尽くされている。まともに読めるコンテンツはファーストビューには全くない。スクロールを進める。どうやらここから本文だ、とあなたは読み進める。そのコンテンツは内容スカスカの低品質記事だった。&lt;/p&gt;

&lt;p&gt;このように上がってくるページはいわゆる&lt;a href=&quot;https://ja.wikipedia.org/wiki/%E6%A4%9C%E7%B4%A2%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3%E3%82%B9%E3%83%91%E3%83%A0&quot;&gt;検索エンジンスパム&lt;/a&gt;と呼ばれユーザーから忌み嫌われるものだ。&lt;/p&gt;

&lt;p&gt;もちろんこういった低品質ページを弾くためのアルゴリズム改善にGoogleは日々心血注いでいる。そしてそのアルゴリズムのアップデート・スパム対策は一定の効果をもたらしている（参考: &lt;a href=&quot;https://www.google.com/intl/ja_ALL/insidesearch/howsearchworks/fighting-spam.html&quot;&gt;スパム対策 – 検索サービス – Google&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;一方でアルゴリズムで全てのスパムを弾くことはできていないのが現実だ。今でもGoogleの検索結果上位にスパムページが上がってくることは散見される事象だ。このようなGoogleのアルゴリズムの隙間を縫ってページを上げることを&lt;a href=&quot;https://ferret-plus.com/1924&quot;&gt;ブラックハットSEO&lt;/a&gt;という（反対語はホワイトハットSEO）。&lt;/p&gt;

&lt;p&gt;このようなブラックハットSEOが横行すると、低品質ページが検索結果の上位を占めることとなり、検索の主体としてのユーザーがヘイトを溜めていくこととなる。そしてユーザーはSEOという行為にある種の悪どさを感じてしまう。&lt;/p&gt;

&lt;h2 id=&quot;google-crawler-optimization&quot;&gt;Google Crawler Optimization&lt;/h2&gt;

&lt;p&gt;僕はそのどことなく小賢しい響きのあるSEOに代えて別な言葉を提唱したい。&lt;strong&gt;Google Crawler Optimization&lt;/strong&gt;（以下GCO）、つまりGoogleクローラのための最適化だ。といっても表面的に言っていることはSEOと同じである。&lt;/p&gt;

&lt;p&gt;SEOの文脈でサーチエンジンといった場合、たいていの場合がGoogleの検索エンジンのことを指すので、サーチエンジン最適化はGoogle検索エンジン最適化とも言える。そして検索エンジン最適化のためにはサイトを巡回してくるクローラー（Googlebot）を相手に最適化をするのでそれはクローラー最適化とも言える。&lt;/p&gt;

&lt;p&gt;ではなぜSEOとGCO区別したいかというと、それぞれが目指すゴール・目的をはっきりと分けたかったからだ。&lt;/p&gt;

&lt;h2 id=&quot;seoとgcoの違い&quot;&gt;SEOとGCOの違い&lt;/h2&gt;

&lt;p&gt;SEOとGCOの違いはこうだ&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;SEO&lt;/th&gt;
      &lt;th&gt;GCO&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;目的&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;ページの順位を上げること&lt;/td&gt;
      &lt;td&gt;ページを適切にGoolgeクローラーに適切に解釈させること&lt;br /&gt;（その結果として順位が上がろうが下がろうが関係ない）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;やり方&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;1. 正攻法なホワイトハットSEOによって順位を上げる&lt;br /&gt;2. 不正なブラックハットSEOによって順位を上げる&lt;/td&gt;
      &lt;td&gt;- ホワイトハットSEOの手法のみを許容する&lt;br /&gt;- Googleの公式ガイドライン（&lt;a href=&quot;https://static.googleusercontent.com/media/www.Google.com/ja//intl/ja/webmasters/docs/search-engine-optimization-starter-guide-ja.pdf&quot;&gt;検索エンジン最適化スターターガイド&lt;/a&gt;, &lt;a href=&quot;https://support.google.com/webmasters/answer/35769?hl=ja&quot;&gt;ウェブマスター向けガイドライン&lt;/a&gt;）を忠実に実施、その他世に溢れるSEOテクニック情報などは無視&lt;br /&gt;- クローラー最適化の一環としてTwitterクローラ最適化・Facebookクローラ最適化なども行う（OGタグなどの各種タグ設定）&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;僕も本ブログなどはそれなりにSEOを意識して作っている。しかしその目的はサイトランクを上げることではない。サイトを適切にGoogleに評価してもらうためだ。評価の結果別にランクが下になろうとあまり気にしない。それがGoogleの下した評価であり勝負の結果だからだ&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;みんながGoogleの推奨する最適化を行って同じ土俵に立った上で勝敗はGoogleのアルゴリズムに任せようね、ってスタンスが僕は一番スッキリする。&lt;/p&gt;

&lt;p&gt;とは言っても全ての人が土俵に立てるわけでもないし、土俵の立ち方がわからない人もいる。そういう人たちをサポートするためにSEOビジネスは今後も必要だし、生き続けていく必要があるだろう。&lt;/p&gt;

&lt;h2 id=&quot;ユーザーファーストを貫こう&quot;&gt;ユーザーファーストを貫こう&lt;/h2&gt;

&lt;p&gt;最終的にGoogleが見据えるのはユーザーだ。ユーザーにとって価値のある記事を届けるためのアルゴリズムだ。なので我々もGoogleのための最適化を行うならば、基本的にはその先にいるユーザーのことを考え、ユーザーファーストを貫くべきだろう。&lt;/p&gt;

&lt;p&gt;「&lt;strong&gt;HTTPS化するとページランク上がるらしいから、HTTPSにしとこうぜ&lt;/strong&gt;」&lt;/p&gt;

&lt;p&gt;違う。ユーザーの通信をよりセキュアなものにするためにHTTPS化をするのであって、順位を上げるためではない。&lt;/p&gt;

&lt;p&gt;日本ではあまり大きな声で言う人は少ないが、スノーデン事件以降、HTTPS/TLSでユーザーの通信内容を守るということは個人情報保護において極めて重要だ。&lt;/p&gt;

&lt;p&gt;「&lt;strong&gt;検索結果に露出増えるらしいからAMP対応しようぜ&lt;/strong&gt;」&lt;/p&gt;

&lt;p&gt;違う。高速なWebブラウジング体験を実現するためにAMPというフォーマットを使うのであって、検索結果への露出は副次的効果だ。&lt;/p&gt;

&lt;p&gt;Googleは高速なWeb体験を重要視する。なぜならGoogleはWebページのレスポンスが遅くなると多くのユーザーがページを離脱することを数字的なエビデンスをもとに知っているからだ。そして世界を見渡せば通信環境が劣悪な国・地域に住むユーザーがたくさんいることも知っている。彼らのためな高速なHTMLサブセットがAMPだ。&lt;/p&gt;

&lt;p&gt;そう考えるとAMPだけ速ければ良いという考えにはならず、AMP以外の通常ページだってユーザー・ファーストという点で速くあるべきだ。&lt;/p&gt;

&lt;h2 id=&quot;正しいseoへと向かうために&quot;&gt;正しいSEOへと向かうために&lt;/h2&gt;

&lt;p&gt;真摯にSEOと向き合いきちんとSEOが良い方向にいくように情報発信しているSEOの専門家の方もいる。名前を挙げるとたとえば&lt;a href=&quot;https://twitter.com/tsuj&quot;&gt;@tsuj&lt;/a&gt;さんだ。&lt;/p&gt;

&lt;p&gt;辻さんのような方がSEO専門家という立場から、モラルのないSEO業者を監視・批判していくことでSEO業界全体が適切な良い方向に向かうことを期待したい。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;昔、医師監修に関わった事がありますし、いまやっている人の話も聞きますが、大変。専門医監修を十分な品質で行うのは大きなコストがかかりますし、医師不足ですのでそもそも困難です。&lt;br /&gt;記事の大量掲載をするサイトで十分な品質での医師監修の体制を作るのは、無理な気がします。&lt;/p&gt;&amp;mdash; 辻正浩 | Masahiro Tsuji (@tsuj) &lt;a href=&quot;https://twitter.com/tsuj/status/802472803983179776&quot;&gt;November 26, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Googleで行われる全検索の5%は健康関係というのは周知の事実なのでそこに金脈があることは明らかでしたがモラルの壁があったのですよね。&lt;br /&gt;ですが大手がその壁を無視して大儲けしたので今は二匹目のドジョウ狙いが次々と産まれている所。このままだと悪質な医療情報が更にネットに蔓延します。&lt;/p&gt;&amp;mdash; 辻正浩 | Masahiro Tsuji (@tsuj) &lt;a href=&quot;https://twitter.com/tsuj/status/802477361555849216&quot;&gt;November 26, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;医療情報関連の問題の大きさを認識していない人たちが作った劣化welqみたいなサイトも既にあるみたいですけど。welqだけで終わる問題ではないはずなので、早めに諦めて撤退しちゃったほうがいいんじゃないですかね。最低でもwelqと同程度かそれ以下の品質の所は。&lt;/p&gt;&amp;mdash; 辻正浩 | Masahiro Tsuji (@tsuj) &lt;a href=&quot;https://twitter.com/tsuj/status/802480245202792449&quot;&gt;November 26, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;独立してから5年間、わたしは健康・医療関連の仕事は色々と判断が難しいので全部断ってきた位ですので、気軽にやっちゃう人／会社が信じられないのですが。医療関連の情報に関わるのは本当に怖いし覚悟が必要と思っていますし、逸脱したところがうまくいくべきとは思えません。&lt;/p&gt;&amp;mdash; 辻正浩 | Masahiro Tsuji (@tsuj) &lt;a href=&quot;https://twitter.com/tsuj/status/802481887545462784&quot;&gt;November 26, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;またライターという立場から朽木さん（&lt;a href=&quot;twitter.com/amanojerk&quot;&gt;@amanojerk&lt;/a&gt;）も積極的に本件に関して情報発信・問題提起をしている。&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;twitter-moment&quot; href=&quot;https://twitter.com/i/moments/803077459264450562&quot;&gt;【随時更新】信頼性の高い医療情報サイトまとめ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;朽木さんのようにしっかりとライティング活動をしている方もいるので、本件によって変にライターが貶められないことを祈るばかりだ。&lt;/p&gt;

&lt;h2 id=&quot;よりよいwebへと向かうために&quot;&gt;よりよいWEBへと向かうために&lt;/h2&gt;

&lt;p&gt;インターネットの海にある情報は今も昔も玉石混交だ。それをGoogleが圧倒的なテクノロジーを武器に情報フィルタリングをかけてくれている。Googleのふるいが正しく機能している限りにおいて、情報の絶対量が多くなることは良い事だ。問題は玉に混じった石ころたちで、これにどう対処していくべきか。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/google-result.jpg&quot; alt=&quot;google result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;:point_up:&lt;strong&gt;ページに遷移する手前の検索結果画面でGoogleがユーザーへ情報を提供するケースも増えてきている&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;正直言うと検索エンジンスパムに関しては僕は楽観的だ。アルファ碁やGoogle Photo、Google翻訳でご存字の通り、昨今のGoogleのディープラーニング技術の進化は目を見張るものがある。人間にしかできなかった行為が次々に機械に置き換えられていく。スパムも結局精度の問題でしっかり機械が学習してスパム判定精度が上がっていけばスパムは適切に弾けるだろう。&lt;/p&gt;

&lt;p&gt;ただ今回のWELQの記事はどうかというとちょっと疑問で、WELQの提供する圧倒的な分量で一部の専門家にしかその真偽がわからないような内容をGoogleが正しく真偽も含めてランク付けできるか？というと僕にはよくわからない（剽窃行為は判定できそうだが）。&lt;/p&gt;

&lt;p&gt;そうなると、情報発信者としてのモラルの問題になってくる。適当な情報は発信しない、引用と自分の文章を区別する、きちんと一次情報に当たる、情報ソースを明記する、など。そこはやっぱり、ビジネスという軸とは別に情報発信者としてモラルが必要だ。&lt;/p&gt;

&lt;p&gt;より良いWEBへと向かうためにキュレーションメディア各位には石な情報を量産するのではなく、きちんと玉な情報を発信していってもらいたいと願います。&lt;/p&gt;

&lt;h2 id=&quot;welqについて&quot;&gt;WELQについて&lt;/h2&gt;

&lt;p&gt;まぁここまで書いたのでWELQについて一言いっておくと、DeNAくらいの規模の会社がSEOノウハウ・人・モノ・金を総動員させてパワープレイすればそりゃページのランクは上がる。しかし医療・健康というテーマ・分野においては人の命がかかわってくる場合もあるので、そこは情報発信の立場として慎重になるべきでしょう。&lt;a href=&quot;http://dena-palette.jp/&quot;&gt;DeNAパレットメディア&lt;/a&gt;含め、良い情報がウェブに増えていくことは良いことですので頑張ってください。&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;あくまでも上定義は僕個人が考えた定義であって一般的なSEOの定義とは異なる点に留意&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;とはいえ気合を入れて書いた記事が他のページに負けたりするのはちょっと悔しい&amp;nbsp;&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="seo" /><category term="web" /><summary type="html">SEOという言葉が嫌いだ。そこにはビジネスがあり、カネがあり、カネの匂いを嗅ぎつけたSEO業者たちがいる。</summary></entry><entry><title type="html">Roppongi.rb#2で「Infrastructure as (Ruby) Code の現状確認」を発表しました</title><link href="http://blog.toshimaru.net/infrastructure-as-ruby-code-2016/" rel="alternate" type="text/html" title="Roppongi.rb#2で「Infrastructure as (Ruby) Code の現状確認」を発表しました" /><published>2016-11-06T00:00:00+09:00</published><updated>2016-11-06T00:00:00+09:00</updated><id>http://blog.toshimaru.net/infrastructure-as-ruby-code-2016</id><content type="html" xml:base="http://blog.toshimaru.net/infrastructure-as-ruby-code-2016/">&lt;p&gt;第二回Roppongi.rbを&lt;a href=&quot;http://roppongirb.connpass.com/event/42633/&quot;&gt;「Infrastructure x Ruby」というテーマで開催&lt;/a&gt;した。&lt;/p&gt;

&lt;p&gt;僕はその中で「Infrastructure as (Ruby) Code の現状確認」という内容でオープニングLTとして発表したので、その内容をブログにもまとめておく（前回発表分の発表内容まとめはこちら: &lt;a href=&quot;http://blog.toshimaru.net/roppongirb-speeding-up-rails/&quot;&gt;Roppongi.rbで「Rails高速化戦略」を発表しました&lt;/a&gt;）。&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;786983b0a1f94d1ca1250aa48ce94ed0&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;目的&quot;&gt;目的&lt;/h2&gt;

&lt;p&gt;発表の目的としては世に言われる &lt;strong&gt;Infrastructure as Code&lt;/strong&gt; の認識・理解を参加者であわせること。&lt;/p&gt;

&lt;h2 id=&quot;infrastructure-as-codeの意義&quot;&gt;Infrastructure as Codeの意義&lt;/h2&gt;

&lt;p&gt;大きく３つあると思っている。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;インフラ構築手順を秘伝のタレ化させない&lt;/li&gt;
  &lt;li&gt;手順をコードに落としてインフラへの変更をトラッキングする&lt;/li&gt;
  &lt;li&gt;手順を不変（immutable）にする&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;秘伝のタレ&quot;&gt;秘伝のタレ&lt;/h3&gt;

&lt;p&gt;秘伝のタレ。一体どういう意味だろうか。まるで秘伝のタレのように継ぎ足し継ぎ足し変更が入り代々受け継がれてきたサーバーを形容する表現が &lt;strong&gt;秘伝のタレ&lt;/strong&gt; だ。&lt;/p&gt;

&lt;p&gt;秘伝のタレが代々受け継がれている環境なんかでは、メンテナンスされているかどうかまるでわからない「サーバー構築手順書.xls」なんてモノがあったりする。そしてそれは大体において手順書通りにはうまくいかないのが常だ。&lt;/p&gt;

&lt;p&gt;インフラ担当者のアタマにしか入っていない隠し味なんかがあったりするとオワタ状態＼(^o^)／。その担当者が退職したりすると誰も現プロダクション環境は再現できません、という状況が出来上がる。&lt;/p&gt;

&lt;h3 id=&quot;コード化するということ&quot;&gt;コード化するということ&lt;/h3&gt;

&lt;p&gt;秘伝のタレ化を防ぐために、コード化という行為を行う。ではコード化されることで良い事とはなんだろうか。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;コード化される&lt;/li&gt;
  &lt;li&gt;➜ Gitでトラック可能になる&lt;/li&gt;
  &lt;li&gt;➜ Githubでプルリク可能になる&lt;/li&gt;
  &lt;li&gt;➜ Githubでレビュー可能になる&lt;/li&gt;
  &lt;li&gt;➜ :blush: = HAPPY!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このようにコード化されることでソフトウェア開発のグッドプラクティスであるGithub Workflowに乗ることができる。:surfer:&lt;/p&gt;

&lt;h2 id=&quot;immutable-infrastructure&quot;&gt;Immutable Infrastructure&lt;/h2&gt;

&lt;p&gt;次に手順を不変（Immutable）にするということについて。Immutableという言葉はインフラ的文脈ではImmutable Infrastructureという言葉が有名かと思う。&lt;/p&gt;

&lt;p&gt;Immutable Infrastructureについては、&lt;a href=&quot;http://rebuild.fm/25/&quot;&gt;rebuild.fmでnaoyaさんやmizzyさんがmiyagawaさんと話して&lt;/a&gt;いたり、&lt;a href=&quot;https://speakerdeck.com/naoya/immutable-infrastructure-number-jawsdays&quot;&gt;naoyaさんが発表していたり&lt;/a&gt;したあたりを契機に日本でも浸透した言葉だと思っている。&lt;/p&gt;

&lt;p&gt;出自はというとChad Fowler氏が書いた下記の記事。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://chadfowler.com/2013/06/23/immutable-deployments.html&quot;&gt;Trash Your Servers and Burn Your Code: Immutable Infrastructure and Disposable Components&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;immutable-infrastructure-のキーワード&quot;&gt;Immutable Infrastructure のキーワード&lt;/h3&gt;

&lt;p&gt;Immutable Infrastructureを僕なりに解釈すると、その言葉の本質は下記のキーワードで表せると思う。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Immutable （不変）&lt;/li&gt;
  &lt;li&gt;Disposable（使い捨て）&lt;/li&gt;
  &lt;li&gt;Reproducible （再現可能）&lt;/li&gt;
  &lt;li&gt;Idempotence（冪等性）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Immutable Infrastructureが登場した背景にはAWS, GCPを始めとするIaaSの登場が大きいと思っている。どういうことかというとIaaSでボタン１つでサーバーを上げて必要なくなったら捨てるダイナミックなサーバー、つまり &lt;strong&gt;Disposable&lt;/strong&gt; なサーバーが誕生したということが背景の１つにある。&lt;/p&gt;

&lt;p&gt;そして、オートスケーリングの恩恵を享受するためにはサーバー・プロビジョニング自動化作業が必要となる。スケール前提のサーバー群はいつ何時でも既存のサーバーと同じ状態のサーバーが立ち上がる必要がある&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。つまり、構築手順を &lt;strong&gt;Immutable&lt;/strong&gt; にし &lt;strong&gt;Reproducible&lt;/strong&gt; なサーバー環境にする(= &lt;strong&gt;Idempotence&lt;/strong&gt; を担保する)ことが必要。&lt;/p&gt;

&lt;h2 id=&quot;構成管理ツールの歴史&quot;&gt;構成管理ツールの歴史&lt;/h2&gt;

&lt;p&gt;メジャーなプロビジョニングツール(構成管理ツール)の歴史を追ってみる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2005年 &lt;a href=&quot;https://docs.puppet.com/puppet/&quot;&gt;Puppet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;2009年 &lt;a href=&quot;https://www.chef.io/chef/&quot;&gt;Chef&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;2012年 &lt;a href=&quot;https://www.ansible.com&quot;&gt;Ansible&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;2014年 &lt;a href=&quot;https://www.terraform.io&quot;&gt;Terraform&lt;/a&gt;, &lt;a href=&quot;https://github.com/itamae-kitchen/itamae&quot;&gt;Itamae&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;実装言語別分類&quot;&gt;実装言語別分類&lt;/h2&gt;

&lt;p&gt;実装言語別に分類してみる。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Ruby実装&lt;/th&gt;
      &lt;th&gt;Go実装&lt;/th&gt;
      &lt;th&gt;Python実装&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Puppet, Chef, Itamae, Serverkit&lt;/td&gt;
      &lt;td&gt;Terraform&lt;/td&gt;
      &lt;td&gt;Ansible&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;表現別分類&quot;&gt;表現別分類&lt;/h2&gt;

&lt;p&gt;インフラストラクチャをどうコードで表現しているかの表現体形で分類してみる。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;RubyによるDSL&lt;/th&gt;
      &lt;th&gt;HCLによるDSL&lt;/th&gt;
      &lt;th&gt;YAML&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Puppet, Chef, Itamae&lt;/td&gt;
      &lt;td&gt;Terraform&lt;/td&gt;
      &lt;td&gt;Ansible, Serverkit&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;why-yaml&quot;&gt;Why YAML?&lt;/h3&gt;

&lt;p&gt;なぜYAMLで表現するのか？ まずはXML/JSONより記述がラクという点がある。そしてYAMLは人間にとってよみやすい、かきやすい、わかりやすいという特徴がある。そしてRailsの設定ファイルなどで一般的に使われている記述フォーマットなので、学習コストが低いという点が利点である。&lt;/p&gt;

&lt;h3 id=&quot;why-hcl&quot;&gt;Why HCL?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hashicorp/hcl&quot;&gt;HCL&lt;/a&gt; とは HashiCorp configuration language の略。HCLの&lt;a href=&quot;https://github.com/hashicorp/hcl#why&quot;&gt;READMEではHLCについてこう説明&lt;/a&gt;されている。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;:x: JSONダメ。なぜならコメントかけない。しんどい。&lt;/li&gt;
  &lt;li&gt;:x: YAMLもダメ。なぜなら初心者には記法むずかしい！&lt;/li&gt;
  &lt;li&gt;:x: Rubyとかもダメ。なぜなら自由度高すぎぃ！複雑すぎぃ！&lt;/li&gt;
  &lt;li&gt;:o: よろしい、ならば独自言語だ。ということで生まれたのが &lt;strong&gt;HCL&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;why-ruby&quot;&gt;Why Ruby?&lt;/h3&gt;

&lt;p&gt;なぜRubyを採用するか？ まずはDSLが書きやすいという点。そしてRSpecなどのRuby DSLに代表されるようにRuby DSLは宣言的な記述が可能である。宣言的ということはコードを読んだだけでそのコードの意図が伝わりやすいということだ。そしてDSLといってもRubyはRuby。RubyなのでRubyでできることは何でもできちゃうので、自由度が高い（これは悪い意味に作用することもあってやりすぎるとChefのレシピそのものが秘伝のタレ化する可能性があるので注意）。&lt;/p&gt;

&lt;h2 id=&quot;infrastructure-as-code-の概念整理&quot;&gt;Infrastructure as Code の概念整理&lt;/h2&gt;

&lt;p&gt;Infrastructure as Code の概念を整理してみたい。&lt;a href=&quot;http://mizzy.org/blog/2013/10/29/1/&quot;&gt;mizzyさんのブログでは&lt;/a&gt;、プロビジョニングのレイヤーを下記のように分けるような考え方が紹介されていた。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb2/provisioning-tools.png&quot; alt=&quot;provisioning layers&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;シンプルなプロビジョニングレイヤーの考え方&quot;&gt;シンプルなプロビジョニング・レイヤーの考え方&lt;/h2&gt;

&lt;p&gt;オーケストレーションなどというと抽象的なのとInfrastructure as Codeのスコープが広くなってしまうと思うので、シンプルにこんな風に考えてみるのはどうだろうか。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb2/infra-as-code-layers.png&quot; alt=&quot;infra-as-code-layers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上記の考え方で先の構成管理ツールを分類するとこんな感じだ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb2/provisioning-categorize.png&quot; alt=&quot;provisioning categorize&quot; /&gt;&lt;/p&gt;

&lt;p&gt;しかしこれで本当に全てはコード化されるか、というとそうではない。サーバーのプロビジョニングでコード化されるのはAWSサービス群のほんの一部、EC2のみだ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb2/aws-services.png&quot; alt=&quot;AWS services&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;infrastructure-as-code-のカバー範囲&quot;&gt;Infrastructure as Code のカバー範囲&lt;/h2&gt;

&lt;p&gt;IaaSは仮想サーバ以外にもさまざまなサービスを提供している。AWSの例でいうと、ELB, RDS, VPC, S3, CloudFront, IAM, SecurityGroup などなど。&lt;/p&gt;

&lt;p&gt;それらに対するオペレーションをAWS Management ConsoleなどのGUIでやるべきだろうか？&lt;/p&gt;

&lt;h3 id=&quot;gui-configuration-is-hard&quot;&gt;GUI Configuration is hard…&lt;/h3&gt;

&lt;p&gt;さきほどのImmutable Infrastructureの文脈でいうと、GUIによる操作はImmutableではない。なぜならGUIは変わるかもしれないし、GUI操作は明確な言語化できないほどにファジーだからだ。では重要な設定をそのGUI任せにしていいのだろうか？&lt;/p&gt;

&lt;p&gt;Route53やSecurityGroupなどオペレーションミスで一歩間違うと大障害になりかねない。これらのGUIの設定をimmutableにはできないだろうか。じゃあimmutableなインターフェースであるAPIを叩けばいいじゃない。というところで、&lt;strong&gt;Configuration as Code&lt;/strong&gt; という言葉が出て来る。&lt;/p&gt;

&lt;p&gt;この考え方を使えばInfrastructure as Codeの概念をさらに良い感じに敷衍できるのではないかと僕は考えた。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb2/configuratino-as-code.png&quot; alt=&quot;Configuration as Code*&quot; /&gt;&lt;/p&gt;

&lt;p&gt;こう考えるとIaaSの各種サービス群もコード化の対象として捉えることができる。&lt;/p&gt;

&lt;h2 id=&quot;全てがコードになる例&quot;&gt;全てがコードになる例&lt;/h2&gt;

&lt;h3 id=&quot;route53-configuration&quot;&gt;Route53 Configuration&lt;/h3&gt;

&lt;p&gt;Route53のコード化例。こんな感じにRuby DSLになる&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;hosted_zone&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;example.com.&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;rrset&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;example.com.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ttl&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;resource_records&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.2&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;powered by &lt;a href=&quot;https://github.com/winebarrel/roadworker&quot;&gt;roadworker&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;aws_route53_record&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;www&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zone_id&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${aws_route53_zone.primary.zone_id}&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;www.example.com&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;300&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;records&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${aws_eip.lb.public_ip}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;powered by &lt;a href=&quot;https://www.terraform.io/docs/providers/aws/r/route.html&quot;&gt;AWS: aws_route - Terraform by HashiCorp&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;cloudwatch-alarm&quot;&gt;CloudWatch Alarm&lt;/h3&gt;

&lt;p&gt;CloudWatchのAlarmだってDSLになる。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;alarm&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;alarm1&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;AWS/EC2&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;metric_name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;CPUUtilization&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;dimensions&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;InstanceId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;i-XXXXXXXX&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;period&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;statistic&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:average&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;threshold&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;evaluation_periods&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;actions_enabled&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;alarm_actions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ok_actions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;insufficient_data_actions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arn:aws:sns:us-east-1:123456789012:my_topic&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;powered by &lt;a href=&quot;https://github.com/winebarrel/radiosonde&quot;&gt;radiosonde&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;datadog-alert-configuration&quot;&gt;Datadog Alert Configuration&lt;/h3&gt;

&lt;p&gt;さらにコード化される対象はIaaSだけではない。Datadogという監視のアラート設定もコード化される。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;monitor&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Check load avg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;metric alert&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;avg(last_5m):avg:ddstat.load_avg.1m{host:i-XXXXXXXX} &amp;gt; 1&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;@winebarrel@example.net&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;locked&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_host_delay&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;notify_no_data&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;no_data_timeframe&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;notify_audit&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;silenced&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({})&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;powered by &lt;a href=&quot;https://github.com/winebarrel/barkdog&quot;&gt;barkdog&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;github-member-management&quot;&gt;Github Member Management&lt;/h3&gt;

&lt;p&gt;Githubのメンバー管理だってTerraformでできちゃうんだぜ。&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;github_membership&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;membership_for_some_user&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SomeUser&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;member&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;github_repository&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;example&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;example&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;My awesome codebase&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;github_repository_collaborator&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a_repo_collaborator&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;our-cool-repo&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SomeUser&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permission&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;admin&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;powered by &lt;a href=&quot;https://www.terraform.io/docs/providers/github/&quot;&gt;Provider: GitHub - Terraform by HashiCorp&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;全てがプルリクになる&quot;&gt;全てがプルリクになる&lt;/h2&gt;

&lt;p&gt;冒頭に述べたように、コード化されるということはGithubに乗せてプルリクエストを出せるということだ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb2/pull-request.png&quot; alt=&quot;Pull Request&quot; /&gt;&lt;/p&gt;

&lt;p&gt;こんなふうにプルリクになっているとレビューも簡単。&lt;/p&gt;

&lt;h2 id=&quot;コード化するメリット&quot;&gt;コード化するメリット&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;レビューによるチェック体制により、より安全なConfigurationオペレーションを実現できる&lt;/li&gt;
  &lt;li&gt;CIサービスと連携させてテスト・CDの自動化も可能となる&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;コード化することによりGithubワークフロー（プルリク→レビュー→マージ）に乗ることができてハッピー :smile:&lt;/li&gt;
  &lt;li&gt;Infrastructure as Code = Server Configuration as Code + Service Configuration as Code ➜ サーバーだけではなく、サービスそれ自体もコード化されていく。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;感想&quot;&gt;感想&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;今回の発表はKeynoteでスライド作ったけど、Keynoteはレイアウトとかテーマの設定が自由にできてDecksetよりはデザイン凝ろうと思ったときに便利。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/ryotarai/itamae-infra-as-code-xian-zhuang-que-ren-hui&quot;&gt;Itamae - Infra as Code 現状確認会&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://rebuild.fm/25/&quot;&gt;Rebuild: 25: Immutable Infrastructure&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/naoya/infrastructure-as-code&quot;&gt;Infrastructure as Code // Speaker Deck&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mizzy.org/blog/2016/04/22/1/&quot;&gt;Infrastructure as Code 再考&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://chadfowler.com/2013/06/23/immutable-deployments.html&quot;&gt;Trash Your Servers and Burn Your Code: Immutable Infrastructure and Disposable Components&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://martinfowler.com/bliki/InfrastructureAsCode.html&quot;&gt;InfrastructureAsCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;特定のサーバーにデータに依存してしまわないように、データ的にはステートレスなサーバー構成が前提となる&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="ruby" /><category term="roppongirb" /><category term="aws" /><category term="presentation" /><summary type="html">第二回Roppongi.rbを「Infrastructure x Ruby」というテーマで開催した。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.toshimaru.net/images/posts/roppongirb2/og.png" /></entry><entry><title type="html">Railsでデバイス判定するrack-simple_user_agentというgemを作った</title><link href="http://blog.toshimaru.net/gem-rack-simple-user-agent/" rel="alternate" type="text/html" title="Railsでデバイス判定するrack-simple_user_agentというgemを作った" /><published>2016-10-02T00:00:00+09:00</published><updated>2016-10-02T00:00:00+09:00</updated><id>http://blog.toshimaru.net/gem-rack-simple-user-agent</id><content type="html" xml:base="http://blog.toshimaru.net/gem-rack-simple-user-agent/">&lt;p&gt;&lt;a href=&quot;https://github.com/toshimaru/rack-simple_user_agent&quot;&gt;rack-simple_user_agent&lt;/a&gt;というgemを作った。&lt;/p&gt;

&lt;h2 id=&quot;なぜ作ったか&quot;&gt;なぜ作ったか&lt;/h2&gt;

&lt;p&gt;同じコンセプトのgemとしては、&lt;a href=&quot;https://github.com/k0kubun&quot;&gt;k0kubun&lt;/a&gt;さんの&lt;a href=&quot;https://github.com/k0kubun/rack-user_agent&quot;&gt;rack-user_agent&lt;/a&gt;がある。詳細については下記のブログエントリに詳しい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://k0kubun.hatenablog.com/entry/2014/11/21/041949&quot;&gt;Railsでデバイスの判定をするのに便利なgemを作った - k0kubun’s blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ではなぜ新たに別のgemを作ったのかというと、rack-user_agentは内部で判定ロジックとして&lt;a href=&quot;https://github.com/woothee/woothee&quot;&gt;woothee&lt;/a&gt;を使っているのだが、wootheeだとやりたいことに対してややヘビーな感じがしたのと、wootheeの判定ロジックでは僕がやりたい判定が完全には出来なかったからだ。&lt;/p&gt;

&lt;h3 id=&quot;tablet-判定したい&quot;&gt;tablet 判定したい&lt;/h3&gt;

&lt;p&gt;昨今のWebアプリケーションにおいてViewを分けたいとなったときは大体 smartphone, tablet, pc の３つのビューに分けたいのではないだろうか。もしくはsmartphone, pc の２つのビューに分け、tabletはどちらか１つのビューに属するという形にするのではないか。&lt;/p&gt;

&lt;p&gt;wootheeの場合、残念ながらcategoryとしてtabletは用意されていない。実際にwootheeを使ってiPadを判定した場合、カテゴリはsmartphoneと判定されてしまう。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Woothee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Mozilla/5.0 (iPad; CPU OS 9_0_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13A404 Safari/601.1&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Safari&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:smartphone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iPad&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:os_version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;9.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;9.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:vendor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Apple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;この判定だとsmartphoneとtabletのビューを分けたいといったときにやや不便だ。またtabletビューをpcビューと一緒にする場合にも困ってしまう。&lt;/p&gt;

&lt;h3 id=&quot;無条件にbot判定されたくない&quot;&gt;無条件にbot判定されたくない&lt;/h3&gt;

&lt;p&gt;また無条件にcrawlerと判定されてしまうのも困ってしまうケースがある。例えば&lt;a href=&quot;https://www.google.com/webmasters/tools/mobile-friendly/&quot;&gt;Mobile-Friendly Test&lt;/a&gt;でサイトチェックをした場合にsmartphone用の画面が結果として表示されてほしいわけだけど、rack-user_agentを用いた場合、同クローラーが&lt;code class=&quot;highlighter-rouge&quot;&gt;crawler&lt;/code&gt;と判定されてしまい、正しくsmartphoneビューが表示されなくなってしまう。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Woothee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;​Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.96 Mobile Safari/537.36 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Googlebot&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:crawler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UNKNOWN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:os_version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UNKNOWN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UNKNOWN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:vendor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UNKNOWN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;rack-simple_user_agentというソリューション&quot;&gt;rack-simple_user_agentというソリューション&lt;/h2&gt;

&lt;p&gt;これらを解決することが冒頭のgemを作ったモチベーションになっている。ロジックとしては、単純にrequest UA stingに特定のデバイス特有の文字列が含まれているかどうかをチェック・判定するだけのバカ判定機だ。なのでこのgemは &lt;strong&gt;stupidly simple UA detector&lt;/strong&gt; と称することにした。&lt;/p&gt;

&lt;h2 id=&quot;rack-simple_user_agentで可能な判定&quot;&gt;rack-simple_user_agentで可能な判定&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;request.from_smartphone?&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;iPhone, Android, Windows Phone の判定&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;request.from_tablet?&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;iPad, Android Tablet の判定&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;request.from_smartdevice?&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;上記のsmartphone, tabletを含む判定&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;from_googlebot?&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;googlebot かどうかの判定&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2016年にもなってさすがにフィーチャーフォンはもうケアしない。だが現代において普通に使われているデバイスであれば対応したいと考えているので、判定漏れているよとかこの判定も追加してよみたいなのがあれば、Pull request is welcome.&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/toshimaru/rack-simple_user_agent&quot;&gt;rack-simple_user_agent&lt;/a&gt;はtabletの判定をロジック内に含ませることができ、便利。あとシンプルな文字列の判定だけなのでデバイスの判定ロジックにおいて大きなパフォーマンス劣化もしない。&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="gem" /><category term="rails" /><summary type="html">rack-simple_user_agentというgemを作った。</summary></entry><entry><title type="html">AWS S3 + CloudFront のCORS設定手順</title><link href="http://blog.toshimaru.net/s3-cloudfront-cors-setting/" rel="alternate" type="text/html" title="AWS S3 + CloudFront のCORS設定手順" /><published>2016-08-22T00:00:00+09:00</published><updated>2016-08-22T00:00:00+09:00</updated><id>http://blog.toshimaru.net/s3-cloudfront-cors-setting</id><content type="html" xml:base="http://blog.toshimaru.net/s3-cloudfront-cors-setting/">&lt;p&gt;（画像は&lt;a href=&quot;http://aws.clouddesignpattern.org/index.php/CDP:Cache_Distribution%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3&quot;&gt;AWS-CloudDesignPattern&lt;/a&gt;から引用）&lt;/p&gt;

&lt;h2 id=&quot;フォントファイルの豆腐化問題&quot;&gt;フォントファイルの豆腐化問題&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://fontawesome.io/&quot;&gt;Font Awesome&lt;/a&gt;のようなフォントファイルを外部ホスト（例えばS3など）から読み込もうとする場合、&lt;code class=&quot;highlighter-rouge&quot;&gt;Access-Control-Allow-Origin&lt;/code&gt;のヘッダでAllowされていないOriginからのリクエストの場合、いわゆるフォントの豆腐現象が起きます。これは&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/HTTP/HTTP_access_control&quot;&gt;CORS(Cross-Origin Resource Sharing)&lt;/a&gt;
の設定が正しくなされていないためです。今回はAWSのS3+CloudFrontの構成でフォントファイルを配信したいので、S3およびCloudFrontのCORS設定手順および確認方法について説明します。&lt;/p&gt;

&lt;h2 id=&quot;s3の設定&quot;&gt;S3の設定&lt;/h2&gt;

&lt;p&gt;CORSの設定はS3のバケットのプロパティ設定から行えます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/cors/s3.png&quot; alt=&quot;s3 bucket property&quot; /&gt;&lt;/p&gt;

&lt;p&gt;XMLをサンプルとして下記のように設定できます。&lt;/p&gt;

&lt;h3 id=&quot;cors-configuration&quot;&gt;CORS Configuration&lt;/h3&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;CORSConfiguration&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://s3.amazonaws.com/doc/2006-03-01/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;CORSRule&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedOrigin&amp;gt;&lt;/span&gt;http://sample.jp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedOrigin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedOrigin&amp;gt;&lt;/span&gt;https://sample.jp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedOrigin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedMethod&amp;gt;&lt;/span&gt;HEAD&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedMethod&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedMethod&amp;gt;&lt;/span&gt;GET&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedMethod&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;MaxAgeSeconds&amp;gt;&lt;/span&gt;3600&lt;span class=&quot;nt&quot;&gt;&amp;lt;/MaxAgeSeconds&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;ExposeHeader&amp;gt;&lt;/span&gt;ETag&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ExposeHeader&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedHeader&amp;gt;&lt;/span&gt;*&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedHeader&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/CORSRule&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/CORSConfiguration&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AllowedOrigin&lt;/code&gt;で許可したいOriginのURLを設定、&lt;code class=&quot;highlighter-rouge&quot;&gt;AllowedMethod&lt;/code&gt;で許可したいHTTPリクエストメソッドを指定します。それぞれ複数並べることで複数の値を設定することが可能となっています。&lt;/p&gt;

&lt;h3 id=&quot;確認手順&quot;&gt;確認手順&lt;/h3&gt;

&lt;p&gt;正しく設定されているかを確認するために下記のように&lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;コマンドを使って検証してみましょう。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X GET -I -H &quot;Origin: http://sample.jp&quot; https://s3-ap-northeast-1.amazonaws.com/bucket/path
HTTP/1.1 200 OK
x-amz-id-2: xxx
x-amz-request-id: xxx
Date: xxx
Access-Control-Allow-Origin: http://sample.jp
Access-Control-Allow-Methods: GET
Access-Control-Expose-Headers: ETag
Access-Control-Max-Age: 3600
Access-Control-Allow-Credentials: true
Vary: Origin, Access-Control-Request-Headers, Access-Control-Request-Method
Last-Modified: xxx
ETag: &quot;xxx&quot;
Accept-Ranges: bytes
Content-Type: application/json
Content-Length: 14356
Server: AmazonS3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Access-Control-Allow-Origin: http://sample.jp&lt;/code&gt; のレスポンスがヘッダが返ってきており、正しく AllowOrigin されていることが確認できました。&lt;/p&gt;

&lt;h2 id=&quot;cloudfront&quot;&gt;CloudFront&lt;/h2&gt;

&lt;p&gt;実運用の際はS3から配信ではなく、CloudFrontと組み合わせて利用するケースが多いかと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/MigrateS3ToCloudFront.html&quot;&gt;Amazon S3 での CloudFront  の設定&lt;/a&gt;が済んでいることを前提として進めていいきます。&lt;/p&gt;

&lt;h3 id=&quot;cloudfrontの-cors-設定&quot;&gt;CloudFrontの CORS 設定&lt;/h3&gt;

&lt;p&gt;CORSの設定のためには、対象クラウドフロント設定から Behaviors を選択しデフォルトパスパターンの設定を変更する必要があります。OriginヘッダーがS3まで通る必要があるので&lt;code class=&quot;highlighter-rouge&quot;&gt;Origin&lt;/code&gt;ヘッダーを Whitelist Headers に加えてやります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/cors/cloudfront.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;確認手順-1&quot;&gt;確認手順&lt;/h3&gt;

&lt;p&gt;S3と同じく、&lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;で確認してみます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X GET -I -H &quot;Origin: http://sample.jp&quot;  https://xxx.cloudfront.net/bucket/path
HTTP/1.1 200 OK
Content-Type: binary/octet-stream
Content-Length: 123
Connection: keep-alive
Date: xxx
Access-Control-Allow-Origin: http://sample.jp
Access-Control-Allow-Methods: GET
Access-Control-Expose-Headers: ETag
Access-Control-Max-Age: 3600
Access-Control-Allow-Credentials: true
Last-Modified: xxx
ETag: &quot;xxx&quot;
Accept-Ranges: bytes
Server: AmazonS3
Vary: Origin
Age: 9
X-Cache: Hit from cloudfront
Via: 1.1 xxxx.cloudfront.net (CloudFront)
X-Amz-Cf-Id: xxx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;S3と同じく&lt;code class=&quot;highlighter-rouge&quot;&gt;Access-Control-Allow-Origin&lt;/code&gt;ヘッダが設定されていることを確認できました。めでたしめでたし。&lt;/p&gt;

&lt;h3 id=&quot;設定にあたっての注意事項&quot;&gt;設定にあたっての注意事項&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;不正な設定状態のままリクエストをすると、設定を変えたのにもかかわらず、CloudFrontにその不正な状態が残ったままになることがあるっぽい
    &lt;ul&gt;
      &lt;li&gt;その場合は &lt;a href=&quot;http://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/Invalidation.html&quot;&gt;Invalidation&lt;/a&gt;を行い、キャッシュをCloudFrontから消してみると解決するかも&lt;/li&gt;
      &lt;li&gt;Invalidation や設定変更反映はけっこう時間かかるので注意（試行錯誤のスピード落ちるのでもっと速くしてほしいところ…）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;del&gt;現時点ではCloudFrontは HTTP/2 未対応&lt;/del&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;del&gt;2017年くらいには対応してきそうな予感がある（あくまで個人的予想）&lt;/del&gt;&lt;/li&gt;
      &lt;li&gt;:new: 2016年９月にCloudFrontがHTTP/2に対応しました &lt;a href=&quot;https://aws.amazon.com/blogs/aws/new-http2-support-for-cloudfront/&quot;&gt;New – HTTP/2 Support for Amazon CloudFront | AWS Blog&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ブラウザからアクセスされるOriginヘッダは&lt;strong&gt;末尾スラッシュ無し&lt;/strong&gt;である点に注意&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/cors.html&quot;&gt;Cross-Origin Resource Sharing (CORS) - Amazon Simple Storage Service&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/header-caching.html#header-caching-web-cors&quot;&gt;リクエストヘッダーに基づいてオブジェクトをキャッシュするように CloudFront を設定する - Amazon CloudFront&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="aws" /><category term="s3" /><summary type="html">（画像はAWS-CloudDesignPatternから引用）</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.toshimaru.net/images/posts/cors/cache-distribution.png" /></entry><entry><title type="html">Ruby2.3 で導入された frozen_string_literal オプションで Immutable String を実現する</title><link href="http://blog.toshimaru.net/ruby-immutable-string/" rel="alternate" type="text/html" title="Ruby2.3 で導入された frozen_string_literal オプションで Immutable String を実現する" /><published>2016-07-24T00:00:00+09:00</published><updated>2016-07-24T00:00:00+09:00</updated><id>http://blog.toshimaru.net/ruby-immutable-string</id><content type="html" xml:base="http://blog.toshimaru.net/ruby-immutable-string/">&lt;h2 id=&quot;immutable-string-in-ruby3&quot;&gt;Immutable String in Ruby3&lt;/h2&gt;

&lt;p&gt;Ruby3 では文字列がデフォルトで immutable になるという大きな変更が予定されている。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ruby 3.0 では文字列リテラルをデフォルトで immutable （破壊的変更不可） にする、という方針が『決定』しました&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;via. &lt;a href=&quot;http://d.hatena.ne.jp/ku-ma-me/20151004/p1&quot;&gt;[Ruby] Ruby 3.0 の特大の非互換について - まめめも&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この変更の背景としては上リンクに書いてある通り、Rubyの最適化のために文字列のいたるところに&lt;code class=&quot;highlighter-rouge&quot;&gt;.freeze&lt;/code&gt;を付けてプルリクエストを投げる輩が大挙してきたことだ。&lt;/p&gt;

&lt;h2 id=&quot;immutable-string-in-ruby23&quot;&gt;Immutable String in Ruby2.3+&lt;/h2&gt;

&lt;p&gt;実は Ruby2.3 で既にこの Immutable String を有効にする機能が入っている。やり方はRubyファイルの行頭に次のようにマジックコメントを書けばよい。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# frozen_string_literal: true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;frozen_string_literal-の機能を試す&quot;&gt;frozen_string_literal の機能を試す&lt;/h2&gt;

&lt;p&gt;実際に試してみよう。&lt;code class=&quot;highlighter-rouge&quot;&gt;frozen_string_literal&lt;/code&gt;の設定が入っているRubyコードと入っていないRubyコードの２つを用意して実行してみる。&lt;/p&gt;

&lt;h3 id=&quot;frozen_string_literal入りのコード&quot;&gt;frozen_string_literal入りのコード&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;string_with_frozen_option.rb&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# frozen_string_literal: true&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;結果&quot;&gt;結果&lt;/h3&gt;

&lt;p&gt;全て同じ object_id が返ってくる。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ruby string_with_frozen_option.rb
70212460463280
70212460463280
70212460463280
70212460463280
70212460463280
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;frozen_string_literal無しのコード&quot;&gt;frozen_string_literal無しのコード&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;string_without_frozen_option.rb&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;結果-1&quot;&gt;結果&lt;/h3&gt;

&lt;p&gt;全て違う object_id が返ってくる。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ruby string_without_frozen_option.rb
70277165754460
70277165754200
70277165754080
70277165754000
70277165753940
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;frozen_string_literal-はファイル毎に設定される&quot;&gt;frozen_string_literal はファイル毎に設定される&lt;/h2&gt;

&lt;p&gt;たとえば&lt;code class=&quot;highlighter-rouge&quot;&gt;frozen_string_literal&lt;/code&gt;の設定が入ったものと入っていないファイルが実行された場合はどうなるだろうか。Railsで試してみる。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;before_action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:not_frozen&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;not_frozen&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# frozen_string_literal: true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WelcomeController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これで&lt;code class=&quot;highlighter-rouge&quot;&gt;WelcomeController#index&lt;/code&gt;が実行された場合、ログは下記のようになる。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;70346238891860
70346238891080
70346238890280
70346238889340
70346238888420
...
70346229343820
70346229343820
70346229343820
70346229343820
70346229343820
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;つまり&lt;code class=&quot;highlighter-rouge&quot;&gt;WelcomeController&lt;/code&gt;で定義された文字列だけが&lt;code class=&quot;highlighter-rouge&quot;&gt;freeze&lt;/code&gt;されていることがわかる。&lt;/p&gt;

&lt;h2 id=&quot;mutableなstringを定義するにはどうしたらよい&quot;&gt;mutableなStringを定義するにはどうしたらよい？&lt;/h2&gt;

&lt;p&gt;一度 &lt;code class=&quot;highlighter-rouge&quot;&gt;frozen_string_literal: true&lt;/code&gt; のコードを入れると全ての文字列が&lt;code class=&quot;highlighter-rouge&quot;&gt;.freeze&lt;/code&gt;されるので、下記のようなコードは&lt;code class=&quot;highlighter-rouge&quot;&gt;RuntimeError&lt;/code&gt;となる。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# frozen_string_literal: true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bc&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; test.rb:3:in `&amp;lt;main&amp;gt;': can't modify frozen String (RuntimeError)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;この場合の対処法としてはfreezeを解除したい文字列に対して、&lt;code class=&quot;highlighter-rouge&quot;&gt;.dup&lt;/code&gt;を付けてやれば解決する。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# frozen_string_literal: true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dup&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bc&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; abc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Ruby3 の Immutable String に先駆けて、Ruby2.3 以上が前提の実行環境では積極的に&lt;code class=&quot;highlighter-rouge&quot;&gt;frozen_string_literal: true&lt;/code&gt;の設定をしていくべき。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://wyeworks.com/blog/2015/12/1/immutable-strings-in-ruby-2-dot-3&quot;&gt;Immutable strings in Ruby 2.3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bugs.ruby-lang.org/issues/8976&quot;&gt;Feature #8976: file-scope freeze_string directive - Ruby trunk - Ruby Issue Tracking System&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="ruby" /><summary type="html">Immutable String in Ruby3</summary></entry><entry><title type="html">Roppongi.rbで「Rails高速化戦略」を発表しました</title><link href="http://blog.toshimaru.net/roppongirb-speeding-up-rails/" rel="alternate" type="text/html" title="Roppongi.rbで「Rails高速化戦略」を発表しました" /><published>2016-07-19T00:00:00+09:00</published><updated>2016-07-19T00:00:00+09:00</updated><id>http://blog.toshimaru.net/roppongirb-speeding-up-rails</id><content type="html" xml:base="http://blog.toshimaru.net/roppongirb-speeding-up-rails/">&lt;p&gt;自分がオーガナイザーを務めた &lt;a href=&quot;http://roppongirb.connpass.com/event/33502/&quot;&gt;Roppongi.rb #1&lt;/a&gt;で「Rails高速化戦略」という題で発表してきました。スライドは下記になります。&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;37881a2ec2214ef39d85820f3327bbc2&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;発表内容をこちらのブログでも文章形式でざっとまとめてみたいと思います。&lt;/p&gt;

&lt;h2 id=&quot;rails-ruby-遅いよね&quot;&gt;Rails (Ruby) 遅いよね&lt;/h2&gt;

&lt;p&gt;RailsないしRubyはプログラミング言語の中では速くはない言語であることは言うまでもないと思う&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。 実際に「Rails/Ruby遅いよねって今まで思ったことある方どれくらいいますか？」と会場でも聞いてみたところ、予想では半数以上手を挙げてくれると思ったのだけど、実際は30人中3~4人くらい。あまりにも意外な結果だったので自分なりに理由を分析してみると２つあるかなと思う。&lt;/p&gt;

&lt;h3 id=&quot;パフォーマンスを求められないから&quot;&gt;パフォーマンスを求められないから&lt;/h3&gt;

&lt;p&gt;例えば社内の数人が使うような管理画面の場合。この場合、パフォーマンスよりも機能性（ちゃんと検索・閲覧できるかとかCRUD操作ができるかとか）などが優先されると思う。数人だけが使うのでアクセススパイクもないし、パフォーマンスが問題にもなりにくい。&lt;/p&gt;

&lt;h3 id=&quot;railsをフレームワークとして使っていないから&quot;&gt;Railsをフレームワークとして使っていないから&lt;/h3&gt;

&lt;p&gt;すごくパフォーマンスを求められるWebアプリの場合、それが事前にわかっているならまずは言語選択レベルでRailsを選択しないかもしれない。今ならGoとかElixirとかScalaとか代替言語もあるのでそちらを選択した場合はRailsは使わないことになるのでRailsの遅さで困ることもない。&lt;/p&gt;

&lt;h2 id=&quot;それでもやっぱりrailsだ&quot;&gt;それでもやっぱりRailsだ…!&lt;/h2&gt;

&lt;p&gt;それでもやっぱりRuby好きのRubyっ子であれば、Rubyは使いたい… ということで、Railsの高速化をする上での戦略を紹介。&lt;/p&gt;

&lt;h2 id=&quot;ruby-version-up&quot;&gt;Ruby Version Up&lt;/h2&gt;

&lt;p&gt;まずはRubyバージョンアップ。Rubyバージョンの歴史はこんな感じになっている。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2013.2: Ruby 2.0&lt;/li&gt;
  &lt;li&gt;2013.12: Ruby 2.1&lt;/li&gt;
  &lt;li&gt;2014.12: Ruby 2.2&lt;/li&gt;
  &lt;li&gt;2015.12: Ruby 2.3&lt;/li&gt;
  &lt;li&gt;20xx: Ruby 3.0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;去年matzの口からRuby3のコンセプトが発表された。その驚くべき内容が &lt;strong&gt;Ruby 3 x 3&lt;/strong&gt; 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/ruby3x3.png&quot; alt=&quot;ruby 3 x 3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;via. &lt;a href=&quot;https://www.youtube.com/watch?v=E9bO1uqs4Oc&quot;&gt;Ruby3 challenges - RubyKaigi 2015 Keynote - YouTube&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;とあるrailsアプリの場合&quot;&gt;とあるRailsアプリの場合&lt;/h2&gt;

&lt;p&gt;会社で取り組んでいるプロダクトのRubyのバージョンは基本的に最新バージョンを使うようにしているものの、中にはレガシーな環境もある。下記はあるプロダクトでRuby2.0 から Ruby2.1に上げた例。結果としては、Ruby 2.0 =&amp;gt; 2.1 Ruby Version Up だけで レスポンス速度が約2倍向上した。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/ruby2_0-to-2_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;このようにRubyバージョンアップによりアプリケーションコード変更ゼロでも&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;、速度改善が期待できる。古いRubyお使いの方は今すぐRubyのバージョンアップ！&lt;/p&gt;

&lt;h2 id=&quot;what-about-rails&quot;&gt;What about Rails?&lt;/h2&gt;

&lt;p&gt;じゃあRailsはどうだろうか。下記は&lt;a href=&quot;https://github.com/amatsuda&quot;&gt;amatsuda&lt;/a&gt;さんのmatzのRuby 3x3 を受けての発表。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/rails3x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/a_matsuda/3x-rails&quot;&gt;3x Rails // Speaker Deck&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt;が付いていることで分かる通り3倍速くなるという発表というより、まだまだRailsは速くするために工夫の余地があるよ、というような発表。&lt;/p&gt;

&lt;p&gt;下記は同じ&lt;a href=&quot;https://github.com/amatsuda&quot;&gt;amatsuda&lt;/a&gt;さんが発表された&lt;a href=&quot;http://togetter.com/li/955629&quot;&gt;Rails Upgrade Casual Talks&lt;/a&gt;での資料です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/rails-verup1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;via. &lt;a href=&quot;https://speakerdeck.com/a_matsuda/rails-upgrade-casual-talks&quot;&gt;Rails Upgrade Casual Talks // Speaker Deck&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;たしかに色んな機能が追加されている中、Railsが劇的に速くなることは考えにくい。解決策は…?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/rails-verup2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;歯を食いしばってRails/Rubyをバージョンアップ&lt;/strong&gt; :innocent:&lt;/p&gt;

&lt;p&gt;Rails 遅くなってもRuby は速くなっているので、どちらも最新版をしっかり追っかけていけば、遅くなることなくRailsの機能拡張も追っかけていけるのでOK.&lt;/p&gt;

&lt;h2 id=&quot;ボトルネックを潰す&quot;&gt;ボトルネックを潰す&lt;/h2&gt;

&lt;p&gt;Railsアプリをどうボトルネックを発見し潰していくか？&lt;/p&gt;

&lt;h3 id=&quot;推測するな計測せよ&quot;&gt;推測するな、計測せよ　&lt;/h3&gt;

&lt;p&gt;ボトルネックは計測して数値で示すもの。ボトルネックを発見するためのサービス・ツールをいくつか紹介。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://newrelic.com/&quot;&gt;New Relic&lt;/a&gt;: 無料で使えて導入もラクでよい&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/MiniProfiler/rack-mini-profiler&quot;&gt;rack-mini-profiler&lt;/a&gt;: 開発環境導入する。クエリやpartialレンダー時間を表示。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kainosnoema/rack-lineprof&quot;&gt;rack-lineprof&lt;/a&gt;: Rubyのコードを行単位で計測したい場合に有効&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ツールを使った結果ボトルネックになりやすい箇所というとRDBまわり。それを解決するgem・機能を紹介。&lt;/p&gt;

&lt;h2 id=&quot;activerecord-optimization&quot;&gt;ActiveRecord Optimization&lt;/h2&gt;

&lt;h3 id=&quot;mag_right-問題発見型&quot;&gt;:mag_right: 問題発見型&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/flyerhzm/bullet&quot;&gt;bullet&lt;/a&gt;: Kill &lt;code class=&quot;highlighter-rouge&quot;&gt;N+1&lt;/code&gt; issue!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/joker1007/activerecord-cause&quot;&gt;activerecord-cause&lt;/a&gt;: Logs where ActiveRecord actually loads record&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;key-dbスキーマ最適化型&quot;&gt;:key: DBスキーマ最適化型&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/pboling/flag_shih_tzu&quot;&gt;flag_shih_tzu&lt;/a&gt;: Bit fields for ActiveRecord&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/association_basics.html#counter-cache&quot;&gt;counter-cache&lt;/a&gt;: cacheing count query result
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/magnusvk/counter_culture&quot;&gt;counter_culture&lt;/a&gt;: Better counter-cache&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;zap-クエリ効率化型&quot;&gt;:zap: クエリ効率化型&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/k0kubun/activerecord-precount&quot;&gt;activerecord-precount&lt;/a&gt;: Yet another counter_cache alternative.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zdennis/activerecord-import&quot;&gt;activerecord-import&lt;/a&gt;: bulk inserting data&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;クエリを意識してactiverecord使いこなそう&quot;&gt;クエリを意識してActiveRecord使いこなそう&lt;/h2&gt;

&lt;p&gt;ActiveRecordもといORマッパの良さってDBを意識しなくて済むところ。でも高速化を行う上でクエリは避けられない壁。DBを意識せずコードを書いている最近のワカモノはもっとクエリを意識しよう！ &lt;del&gt;老害っぽい発言だ&lt;/del&gt;&lt;/p&gt;

&lt;h2 id=&quot;パーシャルレンダリングを減らす&quot;&gt;パーシャルレンダリングを減らす&lt;/h2&gt;

&lt;h3 id=&quot;n1-partial-rendering&quot;&gt;N+1 partial rendering&lt;/h3&gt;

&lt;p&gt;データN個分&lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt;処理が走ってしまうのを、個人的に &lt;strong&gt;N+1 rendering&lt;/strong&gt; と呼んでいる。データの数N+親のビュー1回で &lt;code class=&quot;highlighter-rouge&quot;&gt;N+1&lt;/code&gt;. 例えばこんなコード。&lt;/p&gt;

&lt;div class=&quot;language-erb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- views/items/index --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-erb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- views/items/_item --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Show'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Edit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edit_item_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Destroy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;method: :delete&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;この場合のログはこうなる。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Processing by ItemsController#index as HTML
  Rendering items/index.html.erb within layouts/application
  Item Load (0.3ms)  SELECT &quot;items&quot;.* FROM &quot;items&quot;
  Rendered items/_item.html.erb (0.5ms)
  Rendered items/_item.html.erb (0.3ms)
  ...snip...
  Rendered items/_item.html.erb (0.5ms)
  Rendered items/_item.html.erb (0.3ms)
  Rendered items/index.html.erb within layouts/application (57.7ms)
Completed 200 OK in 80ms (Views: 77.1ms | ActiveRecord: 0.3ms)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Viewで80msくらいかかっている。&lt;/p&gt;

&lt;h3 id=&quot;collection-rendering&quot;&gt;Collection rendering&lt;/h3&gt;

&lt;p&gt;上記の場合、Collectionレンダーの機能を使えばもっと効率的にrenderできる。&lt;/p&gt;

&lt;div class=&quot;language-erb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- views/items/index --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@items&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-erb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- views/items/_item --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Show'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Edit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edit_item_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Destroy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;method: :delete&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;この場合のログはこうなる。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Processing by ItemsController#index as HTML
  Rendering items/index.html.erb within layouts/application
  Item Load (0.4ms)  SELECT &quot;items&quot;.* FROM &quot;items&quot;
  Rendered collection of items/_item.html.erb [29 times] (6.9ms)
  Rendered items/index.html.erb within layouts/application (10.3ms)
Completed 200 OK in 29ms (Views: 26.4ms | ActiveRecord: 0.4ms)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ビューで25msくらい。だいたい上記の例と比べると1/3くらいになっている。&lt;/p&gt;

&lt;h2 id=&quot;rails-caching&quot;&gt;Rails caching&lt;/h2&gt;

&lt;p&gt;RailsのCacheの仕組みとして&lt;a href=&quot;http://guides.rubyonrails.org/caching_with_rails.html&quot;&gt;公式ガイド&lt;/a&gt;で3つ紹介されているのだが、ご存知だろうか。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Fragment Cache&lt;/strong&gt;: View fragment caching.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Action Cache&lt;/strong&gt;: Controller’s action caching (removed in Rails4).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Page Cache&lt;/strong&gt;: Static page caching (removed in Rails4).&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;1-fragment-cache&quot;&gt;1. Fragment Cache&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/cache-fragment.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;グローバルナビ・サイドバーなどの多く呼ばれる共通コンテンツに有効&lt;/li&gt;
  &lt;li&gt;重い処理が走るビューの一部分であればあるほど高速化が期待できる&lt;/li&gt;
  &lt;li&gt;Advanced Usage: &lt;strong&gt;Russian Doll Caching&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-action-cache&quot;&gt;2. Action Cache&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/action-cache.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rails4で削除されてgem化: &lt;a href=&quot;https://github.com/rails/actionpack-action_caching&quot;&gt;actionpack-action_caching&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Viewの手前のControllerのAction自体の処理が重い場合に有効&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cache_path&lt;/code&gt; でキャッシュキーをカスタマイズ可能
    &lt;ul&gt;
      &lt;li&gt;モデルのupdated_at を組み込んだり、PC/スマフォでキャッシュビュー出し分け可能&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-page-cache&quot;&gt;3. Page Cache&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Rails4で削除されてgem化: &lt;a href=&quot;https://github.com/rails/actionpack-page_caching&quot;&gt;actionpack-page_caching&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;キャッシュ対象となるControllerのActionの生成するHTMLをまるっと静的ファイルに吐き出す&lt;/li&gt;
  &lt;li&gt;その静的ファイルをNGINXなどのWeb Server/Reverse Proxyでハンドリング&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;railsのキャッシュ戦略&quot;&gt;Railsのキャッシュ戦略&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Railsデフォルトの FragmentCache を使ってビューのレンダリングを高速化&lt;/li&gt;
  &lt;li&gt;それでもダメな場合や Controller 自体の処理が重い場合なら、ActionCache/PageCache を検討&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;warning-注意&quot;&gt;:warning: 注意&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;キャッシュしても根っこの問題は消えない&lt;/li&gt;
  &lt;li&gt;キャッシュのライフサイクル管理&lt;/li&gt;
  &lt;li&gt;用法用量を守って正しくお使いください&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;キャッシュしても根っこの問題はバイパスされるだけでそれ自体が解決されるわけではないので、本質的にはその根っこの問題を潰すほうがキャッシュより優先すべき。キャッシュによって&lt;strong&gt;臭いものには蓋&lt;/strong&gt;をしていないか。キャッシュによって大きなボトルネックが隠蔽されていないか。本質的な問題を潰した上でなお高速化したい場合にキャッシュを利用するのが筋の良いキャッシュ戦略だと思う。&lt;/p&gt;

&lt;p&gt;またキャッシュを行うことでそのライフサイクル管理も必要になってくることはアタマに入れておきたい。どういう場合にキャッシュがexpireすべきなのか(あるいはexpireすべきでないのか)、updateすべきなのか、削除すべきなのか。この辺もきちんと考えた上でキャッシュに取り組みたい。&lt;/p&gt;

&lt;h2 id=&quot;静的ファイル配信&quot;&gt;静的ファイル配信&lt;/h2&gt;

&lt;h3 id=&quot;nginx&quot;&gt;NGINX&lt;/h3&gt;

&lt;p&gt;プロダクション運用においては実際Railsが静的ファイルまでサーブすることはなくて、下記のようにNGINXに静的ファイルをサーブさせることが多い。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/nginx.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;cdn&quot;&gt;CDN&lt;/h3&gt;

&lt;p&gt;さらに言うと、Railsの吐く assets:precompile の成果物は、CDNに乗せちゃって配信を最適化してやるともっとよい。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/nginx-cdn.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;レイテンシに負けないプロトコル--http2&quot;&gt;レイテンシに負けないプロトコル = HTTP/2&lt;/h2&gt;

&lt;p&gt;バンド幅大きくなってもページロード時間は大きく変わらない。&lt;strong&gt;光の速度はこれ以上速くならない&lt;/strong&gt;。じゃあどうするか。解決策がHTTP/2.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/http2-latency.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/http2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;via. &lt;a href=&quot;http://www.slideshare.net/kazuho/dena-http2&quot;&gt;ウェブを速くするためにDeNAがやっていること - HTTP/2と、さらにその先&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下記のBEFORE/AFTERは画像の配信をHTTPからHTTP/2に変更した場合のリクエストをキャプチャしたもの。&lt;/p&gt;

&lt;h3 id=&quot;before-http2&quot;&gt;Before HTTP/2&lt;/h3&gt;

&lt;p&gt;HTTP/2前の状態。リクエストが順番に走っていることが見て取れる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/before-http2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;after-http2&quot;&gt;After HTTP/2&lt;/h3&gt;

&lt;p&gt;HTTP/2後の状態。リクエストが見事に多重化されている。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/after-http2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.httpvshttps.com/&quot;&gt;こちらのページ&lt;/a&gt;ではHTTPSの画像ロードの速度の速さを体感できる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/HTTP_vs_HTTPS.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ユーザーの体感速度--サーバーサイドレスポンス--クライアントサイドスピード&quot;&gt;ユーザーの体感速度 = サーバーサイドレスポンス + クライアントサイド・スピード&lt;/h2&gt;

&lt;p&gt;仮にサーバーレスポンスタイムを&lt;code class=&quot;highlighter-rouge&quot;&gt;1ms&lt;/code&gt;にしたとしても、十分に速くなったとはいえない。なぜなら最終的にユーザーが感じるであろうウェブページの体感速度はサーバーサイドのレスポンス速度とクライアントサイドでのページロードのスピードを足し合わせたものだから。サーバーが0msでレスポンス返しても10秒間クライアントサイドの画面が真っ白だったら、ユーザーにとってはそれは10秒待たされてるのと一緒。&lt;/p&gt;

&lt;h3 id=&quot;rails-helloworld-app-の場合&quot;&gt;Rails HelloWorld App の場合&lt;/h3&gt;

&lt;p&gt;Rails5をほぼ素の状態でHello Worldという文字列を出力するアプリをHerokuにデプロイして&lt;a href=&quot;https://developers.google.com/speed/pagespeed/insights/&quot;&gt;Google PageSpeed Insights&lt;/a&gt;で計測してみた。&lt;/p&gt;

&lt;p&gt;結果は80点以下… :weary:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/render-block-js.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Should Fix&lt;/code&gt;として報告されているのは、headタグ内にあるJS読み込みが Render Blocking してますよ、という内容のもの。Webの高速化はサーバーサイドだけで済むようなラクなもんじゃない。&lt;/p&gt;

&lt;h2 id=&quot;amp-zap&quot;&gt;AMP :zap:&lt;/h2&gt;

&lt;p&gt;AMPはWeb高速化のベストプラクティスを詰め込んだ仕様/制限のこと。詳しくは下記が参考になる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@cramforce/why-amp-is-fast-7d2ff1f48597#.tcozirlt5&quot;&gt;Why AMP is fast — Medium&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mozaic.fm/episodes/22/amp.html&quot;&gt;ep22 AMP | mozaic.fm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;またAMPに対応するとページが速くなる他にもおいしいことがあって、GoogleがAMPページをキャッシュしてコンテンツ配信を肩代わりしてくれるのだ。いうなればAMPのためのGoogle無料CDN。これでオーガニック検索のトラフィックはだいぶラクになるかも？&lt;/p&gt;

&lt;p&gt;僕も自分の&lt;a href=&quot;http://blog.toshima.ru/&quot;&gt;英語Tipsブログ&lt;/a&gt;をAMP化してみたが非常に高速にページが表示できている。(完全にAMP化はできていないのだけど) まだAMP試していない人は、AMPすげーはやいのでぜひその速さを体感してみてほしい。そしてWebの高速化にまっすぐ向き合ってもらいたいと思う。&lt;/p&gt;

&lt;h2 id=&quot;その他の参考資料&quot;&gt;その他の参考資料&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/mirakui/high-performance-rails-long-edition&quot;&gt;High Performance Rails (long edition) // Speaker Deck&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/joker1007/railspahuomansuji-ben-falseki&quot;&gt;Railsパフォーマンス基本のキ // Speaker Deck&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://parashuto.com/rriver/development/page-speed-optimization&quot;&gt;デザイナーやディレクターも知っておきたい、ページ表示速度の高速化の基本 – Rriver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;roppongirb-イベントについて&quot;&gt;Roppongi.rb イベントについて&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/hashtag/roppongirb?f=tweets&amp;amp;vertical=default&quot;&gt;#roppongirb hashtag on Twitter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;イベント発表資料: &lt;a href=&quot;http://roppongirb.connpass.com/event/33502/presentation/&quot;&gt;Roppongi.rb 資料一覧 - connpass&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://morizyun.github.io/blog/roppongi-rb-ruby-rails/&quot;&gt;Roppongi.rb #1 発表の密度が濃くて楽しかったYO! - 酒と泪とRubyとRailsと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.techempower.com/benchmarks/&quot;&gt;Round 12 results - TechEmpower Framework Benchmarks&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;ただしRubyバージョン差異による非互換性を解消するための変更は必要だけどね。&amp;nbsp;&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="rails" /><category term="ruby" /><category term="roppongirb" /><category term="presentation" /><category term="web" /><summary type="html">自分がオーガナイザーを務めた Roppongi.rb #1で「Rails高速化戦略」という題で発表してきました。スライドは下記になります。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.toshimaru.net/images/posts/roppongirb/title.png" /></entry></feed>