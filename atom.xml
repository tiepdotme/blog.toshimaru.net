<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://blog.toshimaru.net/atom.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2019-07-26T03:48:23+09:00</updated><id>https://blog.toshimaru.net/atom.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">SmartHR社に体験入社してきた</title><link href="https://blog.toshimaru.net/smarthr-job-trial/" rel="alternate" type="text/html" title="SmartHR社に体験入社してきた" /><published>2019-07-22T00:00:00+09:00</published><updated>2019-07-22T00:00:00+09:00</updated><id>https://blog.toshimaru.net/smarthr-job-trial</id><content type="html" xml:base="https://blog.toshimaru.net/smarthr-job-trial/">&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;体験入社してます &lt;a href=&quot;https://t.co/f2Ga5LE5Es&quot;&gt;pic.twitter.com/f2Ga5LE5Es&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1149139455657119744?ref_src=twsrc%5Etfw&quot;&gt;July 11, 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;SmartHR社の体験入社に参加してきました。同社の体験入社制度に関しては下記の記事に詳しいです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://tech.smarthr.jp/entry/2018/09/20/120000&quot;&gt;エンジニア向けの体験入社制度ができました - SmartHR Tech Blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今回は体験入社を１スプリント分の一週間、営業日換算で４日間体験入社させてもらいました。&lt;/p&gt;

&lt;h2 id=&quot;なぜ参加したか&quot;&gt;なぜ参加したか？&lt;/h2&gt;

&lt;p&gt;SmartHR社のことは&lt;a href=&quot;https://blog.shojimiyata.com/entry/2018/06/01/112424&quot;&gt;RubyKaigi&lt;/a&gt;や&lt;a href=&quot;https://speakerdeck.com/miyasho88/we-are-hiring&quot;&gt;会社紹介資料&lt;/a&gt;などを通して知っており、傍目から良い会社そうだなぁという印象は持っていました。実際にSmartHRの中の人たちとも面談を通して直接話す中で、SmartHR社での働き方に興味が湧き、今回「体験入社をしてみたい！」という僕の申し出を受け入れてもらったかたちとなります。&lt;/p&gt;

&lt;p&gt;僕が特にSmartHR社に関して良いと思った点、興味があった点は下記です。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;オープンな社風&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;会社として＜オープンな社風＞が根付いているように見受けられ、良いと思った&lt;/li&gt;
      &lt;li&gt;このオープンな社風というトピックに関しては下記のブログに詳しいです
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://blog.shojimiyata.com/entry/2018/02/15/125904&quot;&gt;SmartHR が組織運営で一番大切にしていること - 宮田昇始のブログ&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;スタートアップ企業としてはありえない退職率の低さ&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;僕自身、30人くらいの規模から数百人規模になっていく組織のスケール過程を身をもって体験しましたが、こういうスタートアップ企業は端的に言って＜激動の時代＞となります。その荒波の中にあっては振り落とされる人がいたり、いわゆる音楽性の違いによって退出していく人も多くいるはずですが、SmartHR社の場合はそんなことになっておらず、単純にその雰囲気および組織運営の手法に興味がありました&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;なにをやったか&quot;&gt;なにをやったか？&lt;/h2&gt;

&lt;p&gt;体験入社としてJoinしたチームはSmartHR本体の開発をするチームでした。なので今回はSmartHR本体のいくつかの機能改修やバグ修正をやりました。&lt;/p&gt;

&lt;p&gt;初日に行われたスプリント計画に一緒に参加して、Jiraのチケットをいくつかアサインしてもらいました。アサインされたチケットは下記のようなものです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.e-gov.go.jp/shinsei/&quot;&gt;e-Gov電子申請&lt;/a&gt;まわりの改修&lt;/li&gt;
  &lt;li&gt;小さなバグ修正&lt;/li&gt;
  &lt;li&gt;APIの改修&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また上記とは別に一通りのスクラムセレモニーや全社員を対象に行っている経営会議共有会にも参加させてもらいました。&lt;/p&gt;

&lt;h2 id=&quot;成果&quot;&gt;成果&lt;/h2&gt;

&lt;h3 id=&quot;一日目&quot;&gt;一日目&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;開発環境セットアップ&lt;/li&gt;
  &lt;li&gt;経営会議共有会参加&lt;/li&gt;
  &lt;li&gt;スプリントレビュー、スプリントレトロスペクティブ、スプリント計画に参加&lt;/li&gt;
  &lt;li&gt;開発成果: 1 PR&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;二日目&quot;&gt;二日目&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;負債返済のためのモブプロ会に参加&lt;/li&gt;
  &lt;li&gt;開発成果: 2PR&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;三日目&quot;&gt;三日目&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;バックログリファインメントに参加&lt;/li&gt;
  &lt;li&gt;開発成果: 2PR, 1Merge&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;四日目&quot;&gt;四日目&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;開発成果: 3PR 4Merge&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;総評&quot;&gt;総評&lt;/h3&gt;

&lt;p&gt;一部未マージなPRを残すことになってしまったものの、当初にアサインされたチケットはすべて着手することができた点は良かったです💪。結果としては、受け入れチームの期待値と同等かそれ以上の成果は残せたようで良かったです😄。&lt;/p&gt;

&lt;h2 id=&quot;体験入社してみての感想&quot;&gt;体験入社してみての感想&lt;/h2&gt;

&lt;h3 id=&quot;開発編&quot;&gt;開発編&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;開発環境セットアップはWikiにまとめられておりWiki通りの手順で進めていけばすんなり構築することができた
    &lt;ul&gt;
      &lt;li&gt;Rails以外のバックエンドはDocker化されておりバージョンまわりでハマることも無いようになっていて良かった&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;教科書通りのスクラムセレモニーを実施しており、きちんとスクラム回してて偉いなぁという印象でした（僕がスクラムマスターっぽい立ち回りするときはけっこうスクラムセレモニーサボっているので…）&lt;/li&gt;
  &lt;li&gt;良い意味で粛々とプロダクト開発を進めている印象だった
    &lt;ul&gt;
      &lt;li&gt;いわゆるスタートアップなキラキラ系イケイケWeb開発という感じではなかった（決して悪い意味ではないです）&lt;/li&gt;
      &lt;li&gt;一人ひとりがプロダクトに向き合い、オーナーシップをもって開発に取り組んでいる&lt;/li&gt;
      &lt;li&gt;大人な人が多くきちんと協調して開発を進めている印象&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;＜個人＞ではなく、＜チーム＞で課題を解決する姿勢が素晴らしいと思いました&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;例えばデスク（サービスデスク/ヘルプデスク）対応、コードレビューの対応、リリース作業など忙しくて手を付けられそうな人がいれば、手が空いている人が「（私が）やりますよ」と自然に手を挙げて対応をデリゲーションしていっている雰囲気は素晴らしいと感じました
        &lt;ul&gt;
          &lt;li&gt;これをチームで自然にできるようになるのはそう簡単なことではないので、チームとして成熟している証だと感じました&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;僕はもうエンジニアとしてはシニアレベルだしタスクは丸投げでも全然構わなかったけど、きちんと計画の時点で開発方針まである程度あたりをつけて落とし込んでくれたお陰で、とても開発がスムーズに進められました。受け入れメンバーの皆さまには感謝です&lt;/li&gt;
  &lt;li&gt;開発の中できちんと技術負債を減らすことにも尽力されていて良いなぁと思いました
    &lt;ul&gt;
      &lt;li&gt;技術負債担当チームがあったり技術負債返済モブプロ（with &lt;a href=&quot;https://twitter.com/netwillnet&quot;&gt;willnet&lt;/a&gt;さん）みたいな取り組みをしていたり&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;現在の規模でもCTOの芹澤さんがバリバリコード書いている雰囲気があり意外でした&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;開発以外編&quot;&gt;開発以外編&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;退職率の低さについて
    &lt;ul&gt;
      &lt;li&gt;やはり第一に採用でカルチャーマッチする人のみをきちんと選んで採っている点が大きそうです
        &lt;ul&gt;
          &lt;li&gt;参考: &lt;a href=&quot;https://smarthr.co.jp/vision&quot;&gt;Mission | 株式会社SmartHR&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;良いところも悪いところもすべてオープンにする姿勢が社員に響いているのではないでしょうか
        &lt;ul&gt;
          &lt;li&gt;経営会議共有会では出せる数値は詳らかに全部出す&lt;/li&gt;
          &lt;li&gt;経営会議共有会の最後には代表・宮田さんへのAMA（Ask Me Anything）コーナーみたいなのもあって良かった&lt;/li&gt;
          &lt;li&gt;都合の悪いことも含めて情報を隠さない → 現場の不安が変に増幅することもない&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;普段、自分が受け入れチーム側としてオンボーディングを実施することが多かったけど、今回受け入れてもらう側として参加できて新鮮だった&lt;/li&gt;
  &lt;li&gt;今回の体験入社で初めてSmartHRを実際に使わせてもらったけど、とても便利でした。一度使うとたぶん紙での提出とか面倒くさくなりますね。
    &lt;ul&gt;
      &lt;li&gt;各社、SmartHRの導入よろしく頼む🙏&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;smarthr社にマッチしそうな人について&quot;&gt;SmartHR社にマッチしそうな人について&lt;/h2&gt;

&lt;p&gt;体験入社してみてSmartHR社にマッチしそうな人、逆にマッチしなそうと感じる人を書いてみます。&lt;/p&gt;

&lt;h3 id=&quot;マッチしそうな人&quot;&gt;マッチしそうな人&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;SmartHR というサービスが好きな人&lt;/li&gt;
  &lt;li&gt;会社・チーム一丸となってプロダクト作りをしたい人&lt;/li&gt;
  &lt;li&gt;Railsでのサービス作りが好きな人&lt;/li&gt;
  &lt;li&gt;チームワークが得意、好きな人&lt;/li&gt;
  &lt;li&gt;オープンな社風に共感できる人&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;マッチしなそうな人&quot;&gt;マッチしなそうな人&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;プロダクトよりもエッジな技術をひたすら突き詰めたいという人&lt;/li&gt;
  &lt;li&gt;チームワークよりも孤独な作業が好きな人&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;smarthr社への応募はこちらから&quot;&gt;SmartHR社への応募はこちらから&lt;/h3&gt;

&lt;p&gt;上記の「マッチしそうな人」にピンときた方は応募してみると良いかと思います！&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://smarthr.co.jp/recruit&quot;&gt;Recruit | 株式会社SmartHR&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;子会社創業メンバーも募集しているようです。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;そろそろ起業しようかな？と思ってるけど「共同創業者がいない」「ネタがない」というエンジニアさん、SmartHRの子会社の創業メンバーとして一発当てませんか？&lt;br /&gt;&lt;br /&gt;いま2つの会社があなたを求めてます！お金の心配なく、事業とプロダクトに集中できます。興味ある方ぜひDMください！&lt;br /&gt;&lt;br /&gt;（続く&lt;/p&gt;&amp;mdash; 宮田 昇始 (@miyasho88) &lt;a href=&quot;https://twitter.com/miyasho88/status/1151047024613236736?ref_src=twsrc%5Etfw&quot;&gt;July 16, 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3 id=&quot;smarthrについてもっと知りたい&quot;&gt;SmartHRについてもっと知りたい！&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;「SmartHRについてもっと知りたい！」&lt;/strong&gt;という方はこちらもどうぞ。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://shanaiho.smarthr.co.jp/&quot;&gt;SmartHRオープン社内報&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tech.smarthr.jp/&quot;&gt;SmartHR Tech Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.shojimiyata.com/&quot;&gt;宮田昇始のブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;最後に&quot;&gt;最後に&lt;/h2&gt;

&lt;p&gt;他社のスクラム・スプリントを経験するのはなかなかない貴重な機会なので、それを一通り体験できたのはとても良かったです。受け入れていただいたSmartHRさん、ありがとうございました！&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="tech" /><category term="rails" /><summary type="html">体験入社してます pic.twitter.com/f2Ga5LE5Es&amp;mdash; toshimaru (@toshimaru_e) July 11, 2019</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/smarthr.jpeg" /></entry><entry><title type="html">Google App EngineのGo runtimeを1.11から1.12にアップグレードした</title><link href="https://blog.toshimaru.net/gae-go-111-to-112/" rel="alternate" type="text/html" title="Google App EngineのGo runtimeを1.11から1.12にアップグレードした" /><published>2019-07-08T00:00:00+09:00</published><updated>2019-07-08T00:00:00+09:00</updated><id>https://blog.toshimaru.net/gae-go-111-to-112</id><content type="html" xml:base="https://blog.toshimaru.net/gae-go-111-to-112/">&lt;p&gt;Google App Engineで設定しているGoアプリケーションのruntimeを過渡期世代（？）のGo 1.11からGo 1.12にアップグレードしたのでその備忘録。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;前回までのあらすじ&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;GAEを第一世代から第二世代に上げたときの備忘録としてblogged. | Google App Engineを第一世代から第二世代に乗り換えた - Hack Your Design! &lt;a href=&quot;https://t.co/L1sLTXo4VE&quot;&gt;https://t.co/L1sLTXo4VE&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1130339076198940672?ref_src=twsrc%5Etfw&quot;&gt;May 20, 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;きっかけ&quot;&gt;きっかけ&lt;/h2&gt;

&lt;p&gt;「&lt;strong&gt;2019年10月1日までにGo1.11かそれ以上に上げろ&lt;/strong&gt;」というメールがGoogleさんから届いたのでした。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;What do I need to do?&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;To avoid service disruption in your applications, please re-deploy your App Engine Standard applications using Go 1.11 or above before October 1, 2019.&lt;/p&gt;

  &lt;p&gt;If your application uses the App Engine &lt;a href=&quot;https://godoc.org/google.golang.org/appengine&quot;&gt;Go SDK APIs&lt;/a&gt;, please &lt;a href=&quot;https://cloud.google.com/appengine/docs/standard/go111/go-differences&quot;&gt;upgrade to Go 1.11&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;If you are not using these APIs, please &lt;a href=&quot;https://cloud.google.com/appengine/docs/standard/go112/go-differences&quot;&gt;upgrade to Go 1.12&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以前、Go 1.11までは上げていたので正直そのままでもよかったのだけど、せっかくなので1.12まで上げてみることにした。&lt;/p&gt;

&lt;h2 id=&quot;過渡期世代とは&quot;&gt;過渡期世代とは？&lt;/h2&gt;

&lt;p&gt;ちなみにGo 1.11は第一世代から第二世代への過渡期世代と言える。Go 1.12にすることで完全なる第二世代へと移行されることとなる。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;第二世代にはApp Engine API対応の過渡期の世代とApp Engine API非対応の完璧な第二世代があります。&lt;/p&gt;

  &lt;p&gt;ここで言うとJava 8、Go 1.11が過渡期の世代にあたるようです。Go 1.12やPHP 7.2のバージョンの世代は完璧な第二世代にあたるので、App Engine APIは利用不可となります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ref. &lt;a href=&quot;/gae-first-to-second-generation/&quot;&gt;Google App Engineを第一世代から第二世代に乗り換えた&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;アップグレード手順&quot;&gt;アップグレード手順&lt;/h2&gt;

&lt;p&gt;基本的に下記の公式ドキュメントを参考に進めていけばよい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cloud.google.com/appengine/docs/standard/go112/go-differences&quot;&gt;Migrating your App Engine app to Go 1.12  |  App Engine standard environment for Go 1.12 docs  |  Google Cloud&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;appyml&quot;&gt;app.yml&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app.yml&lt;/code&gt;にてruntimeをGo 1.11から1.12へ変更。一番重要な点。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;runtime&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;go112&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/gae/deploy.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cronyml&quot;&gt;cron.yml&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cron.yml&lt;/code&gt;はそのままの書式で変更なしで大丈夫。このcronジョブの機能はGAEのConsole上にメニューとして残り続けるようだ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/gae/cron.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;参考: &lt;a href=&quot;https://cloud.google.com/appengine/docs/standard/go112/scheduling-jobs-with-cron-yaml&quot;&gt;Scheduling Jobs with cron.yaml&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;タスクキュー&quot;&gt;タスクキュー&lt;/h2&gt;

&lt;p&gt;Cloud Tasks でのキュー管理方式に置き換わった。必要なら乗り換えよう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/gae/cloud-tasks.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cloud Tasks の使い方に関してはGoogle App Engineとはまた別の公式ドキュメントを読もう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cloud.google.com/tasks/&quot;&gt;Cloud Tasks Service for Asynchronous Execution  |  Cloud Tasks  |  Google Cloud&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;ローカル開発環境&quot;&gt;ローカル開発環境&lt;/h2&gt;

&lt;h3 id=&quot;dev_appserverpy-は使えない&quot;&gt;dev_appserver.py は使えない&lt;/h3&gt;

&lt;p&gt;今までどおりの &lt;code class=&quot;highlighter-rouge&quot;&gt;dev_appserver.py&lt;/code&gt; を使うと下記のようにエラーが発生して起動できない。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; dev_appserver.py app.yaml
&lt;span class=&quot;go&quot;&gt;...(snip)...
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;RuntimeError: Unknown runtime 'go112';&lt;/span&gt; supported runtimes are &lt;span class=&quot;s1&quot;&gt;'custom'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'go'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'go111'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'java'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'java7'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'java8'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'php55'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'php72'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'python'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'python-compat'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'python27'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'python37'&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Go 1.11 に乗り換えているならば &lt;code class=&quot;highlighter-rouge&quot;&gt;app.go&lt;/code&gt; は素直な実装になっているはずなので、下記のように&lt;code class=&quot;highlighter-rouge&quot;&gt;go run&lt;/code&gt;でローカルにサーバーを起動することができる。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; go run app.go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;カナリアリリースっぽいやつ&quot;&gt;カナリアリリースっぽいやつ&lt;/h3&gt;

&lt;p&gt;下記のように&lt;code class=&quot;highlighter-rouge&quot;&gt;no-promote&lt;/code&gt;オプションを付けることで、本番環境へのトラフィックを振らない形でデプロイができる。これを使った場合、本番URLとは別に確認陽のURLが発行されているので、それを使って動作確認を行った後に本番へと昇格させるかたちとなる。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; gcloud app deploy &lt;span class=&quot;nt&quot;&gt;--no-promote&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;参考: &lt;a href=&quot;https://cloud.google.com/appengine/docs/standard/go112/testing-and-deploying-your-app&quot;&gt;Testing and Deploying your Application&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考資料&quot;&gt;参考資料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/GoogleCloudPlatform/golang-samples/tree/master/appengine/go11x&quot;&gt;golang-samples/appengine/go11x at master · GoogleCloudPlatform/golang-samples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="google-app-engine" /><summary type="html">Google App Engineで設定しているGoアプリケーションのruntimeを過渡期世代（？）のGo 1.11からGo 1.12にアップグレードしたのでその備忘録。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/gae/gae-modern-webapp.png" /></entry><entry><title type="html">『Effective DevOps』読んだ: DevOpsという文化の作り方</title><link href="https://blog.toshimaru.net/effective-devops/" rel="alternate" type="text/html" title="『Effective DevOps』読んだ: DevOpsという文化の作り方" /><published>2019-06-03T00:00:00+09:00</published><updated>2019-06-03T00:00:00+09:00</updated><id>https://blog.toshimaru.net/effective-devops</id><content type="html" xml:base="https://blog.toshimaru.net/effective-devops/">&lt;h2 id=&quot;本書のターゲット&quot;&gt;本書のターゲット&lt;/h2&gt;

&lt;p&gt;本書を「DevOpsの技術的解説書」と期待して読むと肩透かしを食う。本書は&lt;strong&gt;DevOpsを文化・価値観と捉え&lt;/strong&gt;その文化を醸成するための考え方やアプローチについて解説する。&lt;/p&gt;

&lt;p&gt;したがって本書のターゲットとなるのは現場でバリバリ働くエンジニアというよりは、より良い技術組織作りやチームビルディングに興味のある&lt;strong&gt;リーダーやエンジニアマネージャー&lt;/strong&gt;と言える。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/Effective-DevOps-%E2%80%954%E6%9C%AC%E6%9F%B1%E3%81%AB%E3%82%88%E3%82%8B%E6%8C%81%E7%B6%9A%E5%8F%AF%E8%83%BD%E3%81%AA%E7%B5%84%E7%B9%94%E6%96%87%E5%8C%96%E3%81%AE%E8%82%B2%E3%81%A6%E6%96%B9-Jennifer-Davis/dp/4873118352/ref=as_li_ss_il?ie=UTF8&amp;amp;linkCode=li2&amp;amp;tag=toshimaru-22&amp;amp;linkId=5e5f00b190f6e76006ea26658b065bb5&amp;amp;language=ja_JP&quot; target=&quot;_blank&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=4873118352&amp;amp;Format=_SL160_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=JP&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=toshimaru-22&amp;amp;language=ja_JP&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;https://ir-jp.amazon-adsystem.com/e/ir?t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;l=li2&amp;amp;o=9&amp;amp;a=4873118352&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;effective-devopsの4本柱&quot;&gt;Effective DevOpsの4本柱&lt;/h2&gt;

&lt;p&gt;『Effective DevOps』―本書の副題は「&lt;strong&gt;4本柱による持続可能な組織文化の育て方&lt;/strong&gt;」となっている。ではここでいう4本柱とは何か？というと下記4つである。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;コラボレーション&lt;/strong&gt;: チームをどう協調させるべきか&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;アフィニティ&lt;/strong&gt;: チームのコミュニケーションの質をどう上げて団結力を強めるべきか&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ツール&lt;/strong&gt;: どんなツールを採用すべきか&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;スケーリング&lt;/strong&gt;: 組織をどう発展・成長させていくべきか&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;この4本柱でわかる通り、本書はほとんどがコミュニケーションの話であったり、考え方や振る舞い方の話であったりする。&lt;/p&gt;

&lt;p&gt;3本目にツールの話があるように見えるが具体的なツール名を期待してはいけない。「ツールXを使っているからDevOpsだ」という言説は勘違いであり、どんなツールを使っているかは本質的にはDevOpsには関係ないからだ。&lt;/p&gt;

&lt;h2 id=&quot;devopsアンチパターン&quot;&gt;devopsアンチパターン&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;避難文化&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;ミスが発生したときに人を避難し処罰することはやってはならない&lt;/li&gt;
      &lt;li&gt;避難文化があると人々が避難されるまいと情報を隠蔽してしまう&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;サイロ化&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;目的や責任を共有せずあそれぞれバラバラの役割を重視する状態&lt;/li&gt;
      &lt;li&gt;サイロ化が進むと責任を他のチームになすりつけることになる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ヒューマンエラーを原因にしない&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;ミスを犯した人間自体がエラーの原因だとする考え方&lt;/li&gt;
      &lt;li&gt;ヒューマンエラーだと片付けない、そこからチームが学習することが大事&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;コラボレーションの例&quot;&gt;コラボレーションの例&lt;/h2&gt;

&lt;p&gt;コラボレーションの例としては下記のようなものが考えうる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;非同期でのコードレビュー&lt;/li&gt;
  &lt;li&gt;ドキュメンテーション&lt;/li&gt;
  &lt;li&gt;問題のアップデートとバグレポート&lt;/li&gt;
  &lt;li&gt;その週に進んだ内容のデモ&lt;/li&gt;
  &lt;li&gt;定期的な状況・進捗報告&lt;/li&gt;
  &lt;li&gt;ペア作業（ペアプロ、モブプロ）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;個人の成長のために&quot;&gt;個人の成長のために&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;基本を学ぶ
    &lt;ul&gt;
      &lt;li&gt;自分に必要なスキルは何か、チームに必要なスキルは何か、誰が何をしているか基本を学ぶ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;学習能力を高める
    &lt;ul&gt;
      &lt;li&gt;学習プロセスを見直す、学習能力を強化する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;質の高い実践を心がける
    &lt;ul&gt;
      &lt;li&gt;学んでいるスキルを正しく使う&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;惰性的な習慣を見直し、使うツールやテクニックなど自分のスタイルを開発する&lt;/li&gt;
  &lt;li&gt;新しいスキルを学ぶ、既存のスキルを強化する&lt;/li&gt;
  &lt;li&gt;絶えず自分自身に課題を与え自分自身を向上させていく&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;コミュニケーションの手段&quot;&gt;コミュニケーションの手段&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;コミュニケーション手段&lt;/th&gt;
      &lt;th&gt;即時性&lt;/th&gt;
      &lt;th&gt;オーディエンス&lt;br /&gt;への浸透度&lt;/th&gt;
      &lt;th&gt;受け手&lt;br /&gt;の負担&lt;/th&gt;
      &lt;th&gt;コンテキスト&lt;/th&gt;
      &lt;th&gt;構成の&lt;br /&gt;緻密さ&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;電子メール&lt;/td&gt;
      &lt;td&gt;✕&lt;/td&gt;
      &lt;td&gt;○&lt;/td&gt;
      &lt;td&gt;普通&lt;/td&gt;
      &lt;td&gt;多い&lt;/td&gt;
      &lt;td&gt;△&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;臨時会議（ビデオ会議）&lt;/td&gt;
      &lt;td&gt;○&lt;/td&gt;
      &lt;td&gt;✕&lt;/td&gt;
      &lt;td&gt;普通&lt;/td&gt;
      &lt;td&gt;少ない&lt;/td&gt;
      &lt;td&gt;✕&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;チャット&lt;/td&gt;
      &lt;td&gt;△&lt;/td&gt;
      &lt;td&gt;△&lt;/td&gt;
      &lt;td&gt;軽い&lt;/td&gt;
      &lt;td&gt;多い&lt;/td&gt;
      &lt;td&gt;✕&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;正式な会議&lt;/td&gt;
      &lt;td&gt;✕✕&lt;/td&gt;
      &lt;td&gt;○&lt;/td&gt;
      &lt;td&gt;重い&lt;/td&gt;
      &lt;td&gt;少ない&lt;/td&gt;
      &lt;td&gt;○&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Twitter（マイクロブログ）&lt;/td&gt;
      &lt;td&gt;✕&lt;/td&gt;
      &lt;td&gt;△&lt;/td&gt;
      &lt;td&gt;軽い&lt;/td&gt;
      &lt;td&gt;多い&lt;/td&gt;
      &lt;td&gt;✕&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GitHubのプルリクエスト&lt;/td&gt;
      &lt;td&gt;✕&lt;/td&gt;
      &lt;td&gt;△&lt;/td&gt;
      &lt;td&gt;普通&lt;/td&gt;
      &lt;td&gt;普通&lt;/td&gt;
      &lt;td&gt;△&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;付箋紙のメモ&lt;/td&gt;
      &lt;td&gt;✕✕&lt;/td&gt;
      &lt;td&gt;△&lt;/td&gt;
      &lt;td&gt;軽い&lt;/td&gt;
      &lt;td&gt;多い&lt;/td&gt;
      &lt;td&gt;✕&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PagerDutyアラート&lt;/td&gt;
      &lt;td&gt;○&lt;/td&gt;
      &lt;td&gt;○&lt;/td&gt;
      &lt;td&gt;重い&lt;/td&gt;
      &lt;td&gt;普通&lt;/td&gt;
      &lt;td&gt;✕&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;書籍・ブログ記事&lt;/td&gt;
      &lt;td&gt;✕✕&lt;/td&gt;
      &lt;td&gt;✕&lt;/td&gt;
      &lt;td&gt;普通&lt;/td&gt;
      &lt;td&gt;普通&lt;/td&gt;
      &lt;td&gt;○&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;画像・グラフ&lt;/td&gt;
      &lt;td&gt;✕&lt;/td&gt;
      &lt;td&gt;✕&lt;/td&gt;
      &lt;td&gt;軽い&lt;/td&gt;
      &lt;td&gt;多い&lt;/td&gt;
      &lt;td&gt;✕✕&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;即時性&lt;/strong&gt;: コミュニケーションがどれだけ早く成立するか&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;オーディエンスへの浸透度&lt;/strong&gt; : オーディエンスにメッセージを届けるためにどれくらい効果的か&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;負担&lt;/strong&gt;: そのコミュニケーションに参加するための必要な時間と労力&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;コンテキスト&lt;/strong&gt;: 特定のコミュニケーション方法で必要とされるコンテキストがどれくらいあるか&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;構成の緻密さ&lt;/strong&gt;: 伝えたいことがどれくらい緻密に構成されていなければいけないか&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;優れたリーダーの条件&quot;&gt;優れたリーダーの条件&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;周囲から最良のものを引き出す
    &lt;ul&gt;
      &lt;li&gt;自分自身や少数の「ロックスター」だけを重視してはならない。周りにいるすべてのひとたちから裁量のものを引き出せ&lt;/li&gt;
      &lt;li&gt;優秀な組織とそうでない組織の違いはこの能力の有無で出る&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;メンバー個人のビジョンと企業やチームのビジョンを一致させるように支援する&lt;/li&gt;
  &lt;li&gt;規範たれ
    &lt;ul&gt;
      &lt;li&gt;リーダーは自分が期待している行動の規範となるべき&lt;/li&gt;
      &lt;li&gt;まわりのひとはリーダーの悪い行動も真似ることがあるので気をつけろ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;クソの傘たれ
    &lt;ul&gt;
      &lt;li&gt;上層部から強力（不条理）な指示があった場合にチームを守る&lt;/li&gt;
      &lt;li&gt;メンバーの仕事の邪魔になるバカげたことをできる限りシャットアウト&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;リーダーは「私」中心に考えない、「私たち」、つまりチームを中心に考える&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;対立のマネジメント&quot;&gt;対立のマネジメント&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;対立があること自体はチームの健全性を示す
    &lt;ul&gt;
      &lt;li&gt;対立はチームに新しい発想や視点をもたらす&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;個人・チーム・組織が成長するには健全な対立を解決するスキルが必要&lt;/li&gt;
  &lt;li&gt;対立の要因
    &lt;ul&gt;
      &lt;li&gt;チームの目標と個人の目標の不一致&lt;/li&gt;
      &lt;li&gt;組織の目標と個人の目標の不一致&lt;/li&gt;
      &lt;li&gt;インセンティブの不一致&lt;/li&gt;
      &lt;li&gt;チーム外部との対立
        &lt;ul&gt;
          &lt;li&gt;チームごとのモチベーション、目標の違いが原因&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;非現実的な期待
        &lt;ul&gt;
          &lt;li&gt;マネジメント側の責任&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;新技術導入時の注意事項&quot;&gt;新技術導入時の注意事項&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;新技術の既知のリスクはなにか？&lt;/li&gt;
  &lt;li&gt;どんな未知の不確定要素にぶつかる可能性があるか？&lt;/li&gt;
  &lt;li&gt;既存の記述では解決できない、どんな問を題解決しようとしているのか？&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;その他の読書メモ&quot;&gt;その他の読書メモ&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;ブリリアントジャークは採用の対象外にすべき p99&lt;/li&gt;
  &lt;li&gt;組織再編時に自問すべきこと p102
    &lt;ul&gt;
      &lt;li&gt;なぜ行われているか&lt;/li&gt;
      &lt;li&gt;タイミングは適切か&lt;/li&gt;
      &lt;li&gt;仕事は変わった？&lt;/li&gt;
      &lt;li&gt;後退局面ではないか？&lt;/li&gt;
      &lt;li&gt;人手不足に陥っていないか？&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;危機的状況時のコミュニケーションテクニック p133
    &lt;ul&gt;
      &lt;li&gt;CUS
        &lt;ul&gt;
          &lt;li&gt;Concerned&lt;/li&gt;
          &lt;li&gt;Unsure&lt;/li&gt;
          &lt;li&gt;Safety&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;SBAR
        &lt;ul&gt;
          &lt;li&gt;Situatonal&lt;/li&gt;
          &lt;li&gt;Background&lt;/li&gt;
          &lt;li&gt;Assessments&lt;/li&gt;
          &lt;li&gt;Recommendation&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;大がかりな文化的、技術的改革を成し遂げるためには共通のビジョン、目標、基準が必要 p136&lt;/li&gt;
  &lt;li&gt;ハードスキルだけでなくソフトスキルの評価も必要 p142&lt;/li&gt;
  &lt;li&gt;技術だけでなく人間関係もケアしろ p155&lt;/li&gt;
  &lt;li&gt;devops改革を成功させるためにトップダウンの支援も必要 p158&lt;/li&gt;
  &lt;li&gt;ツールが文化に影響を与える p182
    &lt;ul&gt;
      &lt;li&gt;例: Slack導入が組織のコミュニケーション様式に影響を与える&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;思いやりの文化 p199
    &lt;ul&gt;
      &lt;li&gt;感謝の重要性&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;非難のない文化 p200&lt;/li&gt;
  &lt;li&gt;ツールの合意を得ることは難しい、声のでかい人をどう判断するか p215
    &lt;ul&gt;
      &lt;li&gt;決定プロセスに参加させる p216&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;チームの定着
    &lt;ul&gt;
      &lt;li&gt;報酬 p231
        &lt;ul&gt;
          &lt;li&gt;給料上げるためには転職が一番よい&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;特典 p233
        &lt;ul&gt;
          &lt;li&gt;リモート&lt;/li&gt;
          &lt;li&gt;教育&lt;/li&gt;
          &lt;li&gt;フレックス&lt;/li&gt;
          &lt;li&gt;ワークライフバランス&lt;/li&gt;
          &lt;li&gt;有給休暇&lt;/li&gt;
          &lt;li&gt;退職金&lt;/li&gt;
          &lt;li&gt;健康保険&lt;/li&gt;
          &lt;li&gt;カジュアルドレス&lt;/li&gt;
          &lt;li&gt;移動手段&lt;/li&gt;
          &lt;li&gt;性別不問のトイレ&lt;/li&gt;
          &lt;li&gt;託児所&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;昇進のプロセスを可視化 p235&lt;/li&gt;
  &lt;li&gt;簡単ではないが実行可能なワークロードを与える p235&lt;/li&gt;
  &lt;li&gt;品質の定義 p253&lt;/li&gt;
  &lt;li&gt;価値観を伝える p292
    &lt;ul&gt;
      &lt;li&gt;相手に心の準備&lt;/li&gt;
      &lt;li&gt;コミュニケーションスキルのレベルアップ&lt;/li&gt;
      &lt;li&gt;可能なら対面&lt;/li&gt;
      &lt;li&gt;記録して繰り返す&lt;/li&gt;
      &lt;li&gt;情報を可視化し共有する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;退職を口止めするな p312&lt;/li&gt;
  &lt;li&gt;文化的負債 p314&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;技術組織をリードする立場の人であれば『Effective DevOps』を読んでおいて損はなさそう&lt;/li&gt;
  &lt;li&gt;DevOpsは文化そのものであり、自動化しているからdevops、高度なツールを導入しているからdevopsとかそういったものではない&lt;/li&gt;
  &lt;li&gt;DevOpsの４本柱はコラボレーション、アフィニティ、ツール、スケーリング&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=4873118352&amp;amp;linkId=d0c1dc91fabdea3242b72abcd7eeb43d&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;参考資料&quot;&gt;参考資料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ryuzee.com/contents/blog/7126&quot;&gt;【資料公開】Effective DevOps | Ryuzee.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="読書" /><summary type="html">本書のターゲット</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/effective_devops.jpg" /></entry><entry><title type="html">Google App Engineを第一世代から第二世代に乗り換えた</title><link href="https://blog.toshimaru.net/gae-first-to-second-generation/" rel="alternate" type="text/html" title="Google App Engineを第一世代から第二世代に乗り換えた" /><published>2019-05-19T00:00:00+09:00</published><updated>2019-05-19T00:00:00+09:00</updated><id>https://blog.toshimaru.net/gae-first-to-second-generation</id><content type="html" xml:base="https://blog.toshimaru.net/gae-first-to-second-generation/">&lt;p&gt;Google App Engineを第一世代から第二世代に乗り換えました。GoとPHPの環境をGoogle App Engine上にもっているのですが、それぞれGoは1.9から1.11、PHPは5.5から7.2へのアップデートとなります。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Google App Engine で動かしているGoの環境を1.9から1.11に上げた。わりとすんなりいけた&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1128368940919529472?ref_src=twsrc%5Etfw&quot;&gt;May 14, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;勢いでPHP on Google App Engine もphp 5.5からphp 7.2に上げといた&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1129004376566030336?ref_src=twsrc%5Etfw&quot;&gt;May 16, 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;第一世代から第二世代の比較&quot;&gt;第一世代から第二世代の比較&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;第一世代と第二世代は何が違うのか？&lt;/strong&gt; &lt;a href=&quot;https://cloud.google.com/appengine/docs/standard/runtimes&quot;&gt;公式ドキュメント&lt;/a&gt;を参照します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/gae/first-vs-second.png&quot; alt=&quot;first vs second&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ポイントとしては下記になるでしょうか。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;サポート言語のバージョンアップ&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/google/gvisor&quot;&gt;gVisor&lt;/a&gt;ベースなコンテナサンドボックス環境&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp&lt;/code&gt;へのRead/Writeアクセス&lt;/li&gt;
  &lt;li&gt;外部ネットワーク通信が自由に可能に&lt;/li&gt;
  &lt;li&gt;どんな拡張・ライブラリも利用可能に&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;どのように移行したらよいの&quot;&gt;どのように移行したらよいの？&lt;/h2&gt;

&lt;p&gt;下記のようにアプリケーションの移行のための公式ドキュメントが用意されているのでそれを参照しながら進めるのがよいでしょう。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/appengine/docs/standard/go111/go-differences&quot;&gt;Migrating your App Engine app from Go 1.9 to Go 1.11&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/appengine/docs/standard/php7/php-differences&quot;&gt;Migrating Your App from PHP 5.5 to PHP 7.2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;注意点&quot;&gt;注意点&lt;/h2&gt;

&lt;h3 id=&quot;appyaml-の変更&quot;&gt;app.yaml の変更&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app.yaml&lt;/code&gt;で定義した&lt;code class=&quot;highlighter-rouge&quot;&gt;api_version&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;login&lt;/code&gt;が使えなくなるなど&lt;code class=&quot;highlighter-rouge&quot;&gt;app.yaml&lt;/code&gt;を書き換える必要があります。この変更は先に引用した公式の移行ドキュメント通りにすすめていけば問題ないです。&lt;/p&gt;

&lt;p&gt;公式がGitHub上でサンプルコードを提供しているのでそれを見るのが手っ取り早いかもしれません。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/GoogleCloudPlatform/php-docs-samples/tree/master/appengine/php72&quot;&gt;PHPのGitHubサンプル&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/GoogleCloudPlatform/golang-samples/tree/master/appengine/go11x&quot;&gt;GoのGitHubサンプル&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;第一世代と第二世代の間の過渡期世代がある&quot;&gt;第一世代と第二世代の間の過渡期世代がある&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/gae/gae-1st-2nd.png&quot; alt=&quot;first vs second&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;サンドボックスの制限あり かつ App Engine API 対応 の 純粋な 1st gen ランタイム&lt;/li&gt;
    &lt;li&gt;サンドボックスの制限なし かつ App Engine API 対応 の 過渡期のランタイム&lt;/li&gt;
    &lt;li&gt;サンドボックスの制限なし かつ App Engine API 非対応 の 純粋な 2nd gen ランタイム&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;の3つに分けることができます。そして 過渡期のランタイム が古い定義では区別せずに 2nd gen と呼ばれていたのに対し、新しい定義では区別せずに 1st gen と呼ばれています。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ref. &lt;a href=&quot;https://qiita.com/apstndb/items/314e461aed518a4ad26f#%E8%80%83%E5%AF%9F&quot;&gt;GAE Go 1.11 ランタイムが公式には 2nd gen ではなくなった件について - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上引用の通り、&lt;strong&gt;第二世代にはApp Engine API対応の過渡期の世代とApp Engine API非対応の完璧な第二世代があります&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;ここで言うとJava 8、Go 1.11が過渡期の世代にあたるようです。Go 1.12やPHP 7.2のバージョンの世代は完璧な第二世代にあたるので、App Engine APIは利用不可となります。&lt;/p&gt;

&lt;h3 id=&quot;php72は-dev_appserverpy-が使えない&quot;&gt;PHP7.2は dev_appserver.py が使えない&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;dev_appserver.py is not supported with the PHP 7.2 runtime. To test your application and run it locally, you must download and install PHP 7.2 and set up a web server.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ref. &lt;a href=&quot;https://cloud.google.com/appengine/docs/standard/php7/php-differences#running_your_application_locally&quot;&gt;Migrating Your App from PHP 5.5 to PHP 7.2  |  App Engine standard environment for PHP 7.2 docs  |  Google Cloud&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PHP7.2を利用する場合 &lt;code class=&quot;highlighter-rouge&quot;&gt;dev_appserver.py&lt;/code&gt; は使えなくなるようなので、PHPのビルトインウェブサーバーを使えとのことです。下記のコマンドでPHPが動作するWebサーバーを起動させましょう。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ php -S localhost:8080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;参考: &lt;a href=&quot;/simple-command-web-server/&quot;&gt;超簡単コマンドでローカルにHTTPサーバーを起動する方法&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;app-engine-apiの移行先&quot;&gt;App Engine APIの移行先&lt;/h2&gt;

&lt;p&gt;App Engine APIが使えなくなった後、どのようなサービスに移行したらいいのでしょうか？ 下記のようにまとめることができるでしょう。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Users -&amp;gt; Identity-Aware Proxy?&lt;/li&gt;
    &lt;li&gt;Memcache -&amp;gt; Cloud Memorystore for Redis&lt;/li&gt;
    &lt;li&gt;Datastore -&amp;gt; Cloud Datastore&lt;/li&gt;
    &lt;li&gt;Search -&amp;gt; …?&lt;/li&gt;
    &lt;li&gt;Mail -&amp;gt; SendGrid?&lt;/li&gt;
    &lt;li&gt;TaskQueue -&amp;gt; Cloud Tasks&lt;/li&gt;
    &lt;li&gt;Cron -&amp;gt; Cloud Scheduler&lt;/li&gt;
    &lt;li&gt;Image -&amp;gt; …?&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;ref. &lt;a href=&quot;https://github.com/gcpug/nouhau/blob/0bf7d48d3638f6e3969358ebbcb0ecf5d900f0e2/app-engine/note/gaego19-migration-gaego111/README.md&quot;&gt;App Engine Standard Go 1.9 migration to Go 1.11 · gcpug/nouhau&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;個人的には &lt;code class=&quot;highlighter-rouge&quot;&gt;login:required&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;login:admin&lt;/code&gt; の&lt;a href=&quot;https://github.com/gcpug/nouhau/blob/0bf7d48d3638f6e3969358ebbcb0ecf5d900f0e2/app-engine/note/gaego19-migration-gaego111/README.md#loginrequired--loginadmin-%E3%81%AE%E5%BB%83%E6%AD%A2&quot;&gt;廃止&lt;/a&gt;が一番辛くて、移行も大変だなぁと思うところであります。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/apstndb/items/314e461aed518a4ad26f&quot;&gt;GAE Go 1.11 ランタイムが公式には 2nd gen ではなくなった件について - Qiita&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://koni.hateblo.jp/entry/2018/12/11/100000&quot;&gt;Google App Engine PHP 7.2 がリリース！これまでの違いと利用手順 - koni blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gcpug/nouhau/blob/master/app-engine/note/gaego19-migration-gaego111/README.md&quot;&gt;App Engine Standard Go 1.9 migration to Go 1.11に最低限必要なこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="google-app-engine" /><summary type="html">Google App Engineを第一世代から第二世代に乗り換えました。GoとPHPの環境をGoogle App Engine上にもっているのですが、それぞれGoは1.9から1.11、PHPは5.5から7.2へのアップデートとなります。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/gae/first-vs-second.png" /></entry><entry><title type="html">Google Custom Searchのサイト設置方法</title><link href="https://blog.toshimaru.net/google-custom-search-engine/" rel="alternate" type="text/html" title="Google Custom Searchのサイト設置方法" /><published>2019-03-08T00:00:00+09:00</published><updated>2019-03-08T00:00:00+09:00</updated><id>https://blog.toshimaru.net/google-custom-search-engine</id><content type="html" xml:base="https://blog.toshimaru.net/google-custom-search-engine/">&lt;p&gt;サイトにGoogle Custom Searchを設定・設定しましたのでその手順をメモします。&lt;/p&gt;

&lt;h2 id=&quot;google-custom-searchカスタム検索エンジンとは&quot;&gt;Google Custom Search（カスタム検索エンジン）とは？&lt;/h2&gt;

&lt;p&gt;Google Custom Search（カスタム検索エンジン）はGoogleの検索アルゴリズムでサイト内検索の結果を表示してくれるサービスです。&lt;strong&gt;カスタム検索&lt;/strong&gt; と銘打っている通り、検索設定や検索結果のデザイン・レイアウトをカスタマイズすることが可能です。&lt;/p&gt;

&lt;h2 id=&quot;google-custom-searchのタグを取得手順&quot;&gt;Google Custom Searchのタグを取得手順&lt;/h2&gt;

&lt;p&gt;Google Custom Searchのタグの取得手順を説明していきます。&lt;/p&gt;

&lt;h3 id=&quot;検索エンジンを追加&quot;&gt;検索エンジンを追加&lt;/h3&gt;

&lt;p&gt;まずは検索エンジンを追加します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/cse/top1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;追加すると下記のような基本設定メニューと右側には検索フォームのプレビューが現れます。必要に応じて設定してください。基本的にはそのままでも大丈夫でしょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/cse/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ちなみにAdsenseとアカウントを接続していれば収益化も可能なようです。今回はOffにしています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/cse/adsense.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;デザイン設定&quot;&gt;デザイン設定&lt;/h3&gt;

&lt;p&gt;左のメニューからデザインメニューを開けば、検索結果のレイアウトを選択することができます。今回は全幅を選択しました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/cse/design.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;デフォルトでGoogleがいくつかのテーマを用意してくれています。特にこだわりなければデフォルトでいいでしょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/cse/theme.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;デザインカスタマイズ&quot;&gt;デザインカスタマイズ&lt;/h3&gt;

&lt;p&gt;デザインの詳細なカスタムも可能です。下記のメニューからカラーコードを設定することが可能です。今回はブログの背景色（&lt;code class=&quot;highlighter-rouge&quot;&gt;F3F3F3&lt;/code&gt;）と合わせます。本項目はサイトのテイストに合わせて変更してください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/cse/custom.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;検索結果も本ブログの背景色（&lt;code class=&quot;highlighter-rouge&quot;&gt;F3F3F3&lt;/code&gt;）に合わせておきます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/cse/custom2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;コードを取得&quot;&gt;コードを取得&lt;/h3&gt;

&lt;p&gt;「&lt;strong&gt;保存してコードを取得&lt;/strong&gt;」すればコードが取得できます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/cse/code.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;コードをサイトに設置&quot;&gt;コードをサイトに設置&lt;/h2&gt;

&lt;p&gt;さぁこれでコードが準備できました。では次にこのコードをサイトに貼ります。今回は&lt;code class=&quot;highlighter-rouge&quot;&gt;search.html&lt;/code&gt;に下記のようにコードを貼ることにしました。検索表示したいエリアにコードをそのまま貼り付けただけです。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;search&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;011796726412992573594:-wfuo7spt_k&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gcse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;gcse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;text/javascript&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;gcse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;gcse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://cse.google.com/cse.js?cx=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insertBefore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gcse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;gcse:search&amp;gt;&amp;lt;/gcse:search&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;検索フォーム&quot;&gt;検索フォーム&lt;/h2&gt;

&lt;p&gt;検索フォームは下記のように作成することができます。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;search-form&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/search&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;get&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;search&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;search-txt&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;q&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Search&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt;には上手順で作成したコードの貼ってあるページ先に設定してください。&lt;/li&gt;
  &lt;li&gt;methodには&lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt;を設定してください&lt;/li&gt;
  &lt;li&gt;検索クエリは&lt;code class=&quot;highlighter-rouge&quot;&gt;q&lt;/code&gt;で機能します&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この検索フォームを使って下記のような検索結果が表示させることができれば成功です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/cse/result.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;現在のウィンドウで検索結果を開く&quot;&gt;現在のウィンドウで検索結果を開く&lt;/h2&gt;

&lt;p&gt;そのままだと別ウィンドウで検索結果が開いてしまいます。同一ウィンドウで開くようにするためにはコード内のタグを下記のように変更すれば同一ウィンドウで開くことができるようになります。&lt;code class=&quot;highlighter-rouge&quot;&gt;linktarget=&quot;_self&lt;/code&gt; の属性が追加されているのが変更点です。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;gcse:search&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;linktarget=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;_self&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/gcse:search&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考ドキュメント&quot;&gt;参考ドキュメント&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/custom-search/docs/element&quot;&gt;Custom Search Element Control API  |  Custom Search  |  Google Developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="seo" /><summary type="html">サイトにGoogle Custom Searchを設定・設定しましたのでその手順をメモします。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/cse/og.png" /></entry><entry><title type="html">Roppongi.rb#8で「Make Rails Documents SEO(Search Engine Optimized)」を発表しました</title><link href="https://blog.toshimaru.net/make-rails-documents-seo-search-engine-optimized/" rel="alternate" type="text/html" title="Roppongi.rb#8で「Make Rails Documents SEO(Search Engine Optimized)」を発表しました" /><published>2019-02-25T00:00:00+09:00</published><updated>2019-02-25T00:00:00+09:00</updated><id>https://blog.toshimaru.net/make-rails-documents-seo-search-engine-optimized</id><content type="html" xml:base="https://blog.toshimaru.net/make-rails-documents-seo-search-engine-optimized/">&lt;p&gt;&lt;a href=&quot;https://roppongirb.connpass.com/event/118218/&quot;&gt;Roppongi.rb #8&lt;/a&gt;にて「Make Rails Documents SEO(Search Engine Optimized)」と題して発表してきた。発表スライドは下記になる。&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;2238d7f3d662436b943b125a7b10fec1&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;railsdocgithubio&quot;&gt;railsdoc.github.io&lt;/h2&gt;

&lt;p&gt;発表では僕が過去に行ったいくつかのRails公式ドキュメントのSEO対応の紹介とともに、現在進めているプロジェクトである&lt;a href=&quot;https://railsdoc.github.io/&quot;&gt;railsdoc.github.io&lt;/a&gt;を紹介した。&lt;/p&gt;

&lt;p&gt;GitHub: &lt;a href=&quot;https://github.com/railsdoc/railsdoc.github.io&quot;&gt;railsdoc/railsdoc.github.io: Rails API Documentation.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;railsdocgithubioのゴール&quot;&gt;railsdoc.github.ioのゴール&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://api.rubyonrails.org/&quot;&gt;api.rubyonrails.org&lt;/a&gt;をSEO強くする&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://api.rubyonrails.org/&quot;&gt;api.rubyonrails.org&lt;/a&gt;を使いやすくする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下記はついでにできると良いなーと考えていること。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;フロントの技術を少しだけモダンに
    &lt;ul&gt;
      &lt;li&gt;bootstrapを使ってデザイン構成しやすくする&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GitHubといい感じの連携&lt;/li&gt;
  &lt;li&gt;AMP対応もできると良さそう&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;railsdocgithubioの今後&quot;&gt;railsdoc.github.ioの今後&lt;/h2&gt;

&lt;p&gt;発表内で紹介したが今後については下記のように考えている。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;コードベース整備中 &amp;amp; 未実装箇所の実装&lt;/li&gt;
  &lt;li&gt;folk版sdocじゃない独自のドキュメント生成gemを作りたい&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;紹介したprissue&quot;&gt;紹介したPR/Issue&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rails/weblog/pull/88&quot;&gt;Introduce jekyll-seo-tag by toshimaru · Pull Request #88 · rails/weblog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rails/homepage/pull/73&quot;&gt;Add Jekyll SEO tag and Jekyll sitemap by benbalter · Pull Request #73 · rails/homepage&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/pull/34860&quot;&gt;Make Ruby on Rails Guides SNS-friendly by toshimaru · Pull Request #34860 · rails/rails&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/issues/27633&quot;&gt;No Rails 5 in apidock.com/rails · Issue #27633 · rails/rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;紹介したrails公式ドキュメント&quot;&gt;紹介したRails公式ドキュメント&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;rubyonrails.org&quot;&gt;rubyonrails.org&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;weblog.rubyonrails.org&quot;&gt;weblog.rubyonrails.org&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;guides.rubyonrails.org&quot;&gt;guides.rubyonrails.org&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;api.rubyonrails.org&quot;&gt;api.rubyonrails.org&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;その他&quot;&gt;その他&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;発表には&lt;a href=&quot;https://www.deckset.com/&quot;&gt;Deckset2&lt;/a&gt;を使った（ずっとDeckset1使ってたけど2にUpdateした）。&lt;/li&gt;
  &lt;li&gt;何かあればイシューに書いてほしい &lt;a href=&quot;https://github.com/railsdoc/railsdoc.github.io/issues&quot;&gt;github.com/railsdoc/railsdoc.github.io/issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="presentation" /><category term="seo" /><summary type="html">Roppongi.rb #8にて「Make Rails Documents SEO(Search Engine Optimized)」と題して発表してきた。発表スライドは下記になる。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/roppongirb8/og.png" /></entry><entry><title type="html">VOYAGE GROUPの『公開技術力評価会』に行ってエンジニア評価と給与設定について本気出して考えた</title><link href="https://blog.toshimaru.net/vg-tech-assessment/" rel="alternate" type="text/html" title="VOYAGE GROUPの『公開技術力評価会』に行ってエンジニア評価と給与設定について本気出して考えた" /><published>2019-02-08T00:00:00+09:00</published><updated>2019-02-08T00:00:00+09:00</updated><id>https://blog.toshimaru.net/vg-tech-assessment</id><content type="html" xml:base="https://blog.toshimaru.net/vg-tech-assessment/">&lt;p&gt;先日&lt;a href=&quot;https://voyagegroup.connpass.com/event/111412/&quot;&gt;VOYAGE GROUP エンジニアの公開ガチ評価会&lt;/a&gt;というイベントに行ってきた。イベントの細かな内容まとめは&lt;a href=&quot;https://shinkufencer.hateblo.jp/entry/2019/01/30/235537&quot;&gt;他の方のブログ&lt;/a&gt;に譲るとして、エンジニアの評価についていろいろ考える良いきっかけとなったので書いてみる。&lt;/p&gt;

&lt;h2 id=&quot;人の評価は難しい&quot;&gt;人の評価は難しい&lt;/h2&gt;

&lt;p&gt;（エンジニアに限らず）&lt;strong&gt;人の評価は難しい&lt;/strong&gt;。自分も人を評価する立場になって改めて思う。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;付与できる昇給額やインセンティブに対して使える原資は限られている。加えて、本人の高い自己評価に対して組織の求める期待値との乖離や、他のメンバーとの相対評価の間にミスマッチがあるケースだって少なくない。&lt;/p&gt;

  &lt;p&gt;良い評価を伝えられる人と残念な結果を伝えなければならない人のことを考え、与えられた予算の中で精一杯納得感のある評価を伝えたいと思い悩む日々。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://note.mu/kazukomati/n/nd02cbddf40f5&quot;&gt;マネージャーの視点から見える向こう側の景色｜Kazutaka Irie｜note&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;僕自身、評価では苦い思いをしてきた。所属するチームの上長・部の上長ともに高い評価を貰ったのに天の意思によりランク・お給料ともに無風だった経験。自らの技術力を総動員してプロジェクトのイニシャルリリースを成功に導いたが、その後プロジェクト自体が失敗したために社内的にその功績は全く評価されなかった経験。市場価値より低く買い叩かれているなという経験&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;そんな僕自身の苦い経験から「&lt;strong&gt;自分が評価するメンバーにはできる限り納得感のある評価をしたい&lt;/strong&gt;」という強い思いがあり、今回のイベント参加に至った。&lt;/p&gt;

&lt;h2 id=&quot;納得感のある評価&quot;&gt;納得感のある評価&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;評価は納得感があればなんだっていい&lt;/strong&gt; と個人的に思っている。&lt;/p&gt;

&lt;p&gt;極論、そこに納得感があるのであればじゃんけんで評価を決めても良い。例えば組織の全員が自他ともに「みんながんばっているよ、優劣はとくにないよ」という認識で評価が画一化されているのであれば「じゃあ今期の評価はじゃんけんで」という提案はもしかしたら受け入れてもらえるかもしれない&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;。たとえじゃんけんだとしてもそれにメンバー全員が納得し不満が全く無いのであれば、それは立派な評価だ。&lt;/p&gt;

&lt;p&gt;だが実際問題、全員が納得できるような評価を行うのは極めて難しい。全ての評価が良いものになるとは限らないし、自己評価と会社からの評価が必ずしも一致はしないからだ。その齟齬が生じていたときに評価者は被評価者にいかに納得できる理由を提示できるかが重要だ。&lt;/p&gt;

&lt;h2 id=&quot;技術力評価会&quot;&gt;技術力評価会&lt;/h2&gt;

&lt;p&gt;そういう意味でVOYAGEさんのエンジニア技術評価会はエンジニアにとって納得感のある評価が可能な評価制度になっていると感じた。具体的には下記のポイントである。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;定量化しない&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;オープンな評価&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;揚げ足取りをしない&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;複数人の専門家による評価&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;社外評価者&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ビジネス指向&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;e35aab51031244dd9ed3aaeac157871b&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;定量化しない&quot;&gt;定量化しない&lt;/h3&gt;

&lt;p&gt;まず面白いなと思ったのは技術力評価会では &lt;strong&gt;評価を定量化しない&lt;/strong&gt; ということだ。多くの企業では評価は何かしらの形で定量化してアウトプットすると思う。例えばABCDEの五段階評価、100点満点中何点などだ。&lt;/p&gt;

&lt;p&gt;定量的な評価アプローチはわかりやすい反面、評価者の評価の甘辛で評価が低くなったり高くなったりすることがあり難しい。また評価基準もまちまちになりがちで、全社的に公平な評価基準を作ることは個人的には無理だと思う（例えば100点満点だとしたら100点となる基準は何か？/その基準は明確かつ公平か？/120点の人の20点は評価されないのか？など）。&lt;/p&gt;

&lt;p&gt;技術力評価会では定量化しない代わりにフィードバックとなる文章をしっかり書くという構造になっている。無理に定量化するよりもこのように文書を通じたフィードバックを行うほうが上述の定量化の問題も起きないし、被評価者の納得感も得られやすいと思う。&lt;/p&gt;

&lt;h3 id=&quot;オープンな評価&quot;&gt;オープンな評価&lt;/h3&gt;

&lt;p&gt;各人のランク（グレード）および &lt;strong&gt;評価結果をGitHubでオープンにしている&lt;/strong&gt; ということも興味深い。&lt;/p&gt;

&lt;p&gt;評価をオープンにすることは評価の透明性が担保される一方で、「なぜあの人が私/俺よりランクが高いのか？」という不満も呼び込みやすく諸刃の剣の施策だ。ただVOYAGEさんの場合、被評価者の声を拾いつつ評価制度を納得感のあるようにブラッシュアップしてきているようなのでオープンにすることで得られるメリットのほうが大きいと感じた。&lt;/p&gt;

&lt;p&gt;オープンにすることでロールモデルのイメージが得られるのも良い。同じチームにおいてAさんよりランクが上のBさんがいたとする。この状況においてAさんは下記の様な具体的なアクションをとることができる。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;「Bさん（ロールモデル）のように行動すればランクが上がる」&lt;/li&gt;
  &lt;li&gt;オープンになっているBさんの評価をみにいく&lt;/li&gt;
  &lt;li&gt;Bさんの評価されているところを確認する&lt;/li&gt;
  &lt;li&gt;Bさんの評価されているところを真似る&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;このような組織全体がレベルアップしていく絵を描きやすい。&lt;/p&gt;

&lt;p&gt;他に評価をオープンにしている会社の例としてはペパボさんがある。こちらも参照されたい。&lt;a href=&quot;https://tech.pepabo.com/2018/06/14/engineer-assessment/&quot;&gt;ペパボのエンジニア文化を醸成するエンジニア評価制度 - ペパボテックブログ&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;揚げ足取りをしない&quot;&gt;揚げ足取りをしない&lt;/h3&gt;

&lt;p&gt;基本的に評価会においては揚げ足取りをしない。揚げ足となる指摘としては例えば「ここtypoあるね？」「スタイルガイドに沿っていないコードじゃない？」などだ。誰だって小さなミスはある。本質的な部分のみで評価しようという姿勢がよかった。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;揚げ足取りはやらないってのは地味にめちゃくちゃ重要な気がする。本質的な指摘で評価したいよね&lt;a href=&quot;https://twitter.com/hashtag/vg_tech_assessment?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#vg_tech_assessment&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1090566565148278785?ref_src=twsrc%5Etfw&quot;&gt;January 30, 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3 id=&quot;複数人の専門家による評価&quot;&gt;複数人の専門家による評価&lt;/h3&gt;

&lt;p&gt;フロントエンジニアの技術力をバックエンドエンジニアは評価できない。逆もまた然りでバックエンドエンジニアの技術力をフロントエンジニアは評価できない。このように異なる職種の異なる技術スタックのエンジニア同士は基本的に評価はできない。&lt;/p&gt;

&lt;p&gt;VOYAGEさんの場合、チーム関係なくチームを跨いで &lt;strong&gt;二人以上の適切な評価者が設定されるような仕組みを取ることで評価者・被評価者のミスマッチを防ぐ&lt;/strong&gt;。被評価者をきちんと評価できる技術者がきちんとアサインされるわけだ。&lt;/p&gt;

&lt;p&gt;そして一人ではなく二人以上とすることもポイントだと思っていて、複数の評価観点・視座で評価を行うことで偏った評価を防ぐことができる（実際、評価会の中で評価者によって意見が分かれる場面があった）。&lt;/p&gt;

&lt;h3 id=&quot;社外評価者&quot;&gt;社外評価者&lt;/h3&gt;

&lt;p&gt;なまじ社内事情がわかっていると（チームのメンバー状況・プロダクトの歴史やバックグラウンドなど）、意図せずとも社内のコンテキストによるバイアスが入るかもしれない。また社内の評価基準が社外の評価―つまり業界的な評価基準と離れてしまうかもしれない。あるいは社内のリソースだけで十分な専門家の観点を用意できないかもしれない（例えば機械学習エンジニアの領域など）。&lt;/p&gt;

&lt;p&gt;これらの問題を解消し評価をフェアに行うために &lt;strong&gt;評価者を外部から招いて３人目の評価者として入れる&lt;/strong&gt; のは良いアイディアだと思った。外部の”強い”エンジニアの評価となれば被評価者の納得感も増すはずだ。&lt;/p&gt;

&lt;h3 id=&quot;ビジネス指向&quot;&gt;ビジネス指向&lt;/h3&gt;

&lt;p&gt;評価会では技術選定について聞く場面もあった。「なぜその技術選定（今回でいうとReact.js）に至ったのか？」&lt;/p&gt;

&lt;p&gt;「流行ってるからReact.js」「jQueryはイケてないのでReact.js」…こういった回答だと不十分でもう一歩本質的な理由に踏み込むように評価者が導くように質問を展開していたのが印象的だった。&lt;/p&gt;

&lt;p&gt;本質的な理由としては「DOMにステートを持たせたくない」「フロントエンドをテスタブルにしたい 」「メンテナビリティを高めたい」のようなもので、それが最終的にプロダクトの品質向上に繋がりビジネス的にもインパクトがあるよね？というところまで一緒に落とし込んでいるのが流石だと感じた。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;「技術的な投資判断はどのようにプロセスを経てなされたのか」良い観点の質問だなぁ&lt;a href=&quot;https://twitter.com/hashtag/vg_tech_assessment?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#vg_tech_assessment&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1090570758693122048?ref_src=twsrc%5Etfw&quot;&gt;January 30, 2019&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;エンジニアはともすると技術選定や設計の場面でエゴに走りがちだ。そこで &lt;strong&gt;評価者がきちんとビジネス的な視座を持たせてあげるように誘導&lt;/strong&gt; してあげることで、エンジニアだけではなくビジネス側に所属する人たちにも評価してもらえるような理由付けをしている点が素晴らしいと思った。&lt;/p&gt;

&lt;h2 id=&quot;エンジニアの評価制度の設計と導入&quot;&gt;エンジニアの評価制度の設計と導入&lt;/h2&gt;

&lt;p&gt;さてここまで「エンジニア技術力評価会は良い制度だった」という話をしてきたわけだが、いざ自分の所属組織でも導入するか？と問われるとおそらくやらないし、やってみようぜ！という提案もしないと思う。&lt;/p&gt;

&lt;p&gt;なぜか？　理由はコストが高すぎるから。評価者一人に対して被評価者が10人アサインされるとしよう。評価時間90分×10人分で900分、評価会単体の時間だけで15時間。それに加えて一人ひとりの評価を記入する時間を30分上乗せするとして30分x10人分で300分でプラス5時間。つまりランクの高い評価者一人あたり最低でも20時間（営業日換算で2.5営業日）は奪われるわけだ。&lt;/p&gt;

&lt;p&gt;納得感のある評価を徹底するのはコストがかかる。もちろんそれだけのコストをかけるだけのメリットは享受できると思う。しかし不満もそこまでなくそこそこ上手く回っている既存のエンジニアの技術力評価をひっくり返してまで導入するかというと答えはNOだとは思う。&lt;/p&gt;

&lt;p&gt;もし既存の技術力評価に問題があったとしてもなかなか導入は難しいと感じる。なぜならそれだけのコストがかかる制度導入は関係各所のコンセンサスを得るのが難しいからだ。ボトムアップで突き上げて制度を導入するには相当なパワーと時間が必要だ。&lt;/p&gt;

&lt;p&gt;ではどう導入するのが一番手っ取り早いかというと、CTOなどからトップダウンで制度を導入することだ。VOYAGEさんの場合もCTOの小賀さんの強い力と思いがあったからこそ実現した制度だと感じた。&lt;/p&gt;

&lt;h2 id=&quot;ランクと給与をマッチさせるべきか&quot;&gt;ランクと給与をマッチさせるべきか？&lt;/h2&gt;

&lt;p&gt;全く別の論点として、ランクと給与をマッチさせるべきかどうかという話がある。VOYAGEさんの場合、技術力評価などによって決まるグレードと給与が緩やかに結びついているという話を懇親会で聞いた。&lt;/p&gt;

&lt;h3 id=&quot;給与テーブル&quot;&gt;給与テーブル&lt;/h3&gt;

&lt;p&gt;多くの企業は下記のような給与テーブルが設定されていると思う。下記はSmartHRさんの例だ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/tech_assessment/smarthr.png&quot; alt=&quot;給与テーブル&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/miyasho88/we-are-hiring&quot;&gt;SmartHR会社紹介資料 - Speaker Deck&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この給与テーブルの仕組みは厳密に運用できていれば納得感もあるだろうし問題ないと思う。しかし問題があるケースとしては例外を作ってしまうことだ。具体的には前職の給与のスライドによって給与テーブルから外れる人が出てしまうこと。これをやると &lt;strong&gt;給与テーブルという仕組み自体が崩壊し評価制度が矛盾を引き起こしひいてはエンジニアの不満・軋轢へとつながっていく&lt;/strong&gt;。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;現年収を聞く理由は下記の2つくらいしか思い浮かびません。&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;エンジニアを安く採用したい&lt;/li&gt;
    &lt;li&gt;自社で評価せず、他社の評価を使って楽したい&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;給与テーブルや評価基準を明確にしている企業様は現年収を聞かないようにして頂けると、「この企業は評価基準が明確なのか」と分かるので聞かないようにして頂ければ幸いです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://sinsoku.hatenablog.com/entry/2018/03/06/002028&quot;&gt;面接で現年収(前職の年収)を聞かれるのが嫌い - アジャイルSEの憂鬱&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;その点SmartHRさんは下記の記事の通り厳格な給与テーブルの運用を行っており素晴らしい姿勢だと思う。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;現年収や希望年収を聞かずに、経験や能力、期待する役割、社内の水準と照らし合わせてオファー金額を決めています。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.shojimiyata.com/entry/2019/01/14/234020&quot;&gt;SmartHR社が面談で「現年収・希望年収」を聞かない理由 - 宮田昇始のブログ&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;市場価値で給与を決定&quot;&gt;市場価値で給与を決定&lt;/h3&gt;

&lt;p&gt;サイボウズさんの場合、社内評価だけで給与を決めるということはせず &lt;strong&gt;市場価値で給料を決めている&lt;/strong&gt;。市場価値という概念を取り入れて給与を決めるのはなかなか他に例を聞かず、非常に面白い取り組みだと思った。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;サイボウズの給与は「その人の市場価値」で決定されます。市場価値とは「社外的価値」と「社内的価値」の2つで決まります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://cybozushiki.cybozu.co.jp/articles/m001020.html&quot;&gt;サイボウズの給料は「あなたが転職したらいくら？」で決めています | サイボウズ式&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;エンジニアは給与によって転職してしまうことが多い。社内で高く評価しているのにもかかわらず、お金という理由だけで転職してしまうのだとしたらそれは不幸なことだ。そういった不幸な転職を防ぐために市場価値を給与の決定要因にするのは悪くない判断だと思う。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;思い切った賃金テーブルの改定が行えない企業が世の中には多いようで、&lt;a href=&quot;https://b.hatena.ne.jp/entry/356805083/comment/mizchi&quot;&gt;転職すると年収が上がるというバグ&lt;/a&gt;が報告されている。&lt;/p&gt;

  &lt;p&gt;（中略）&lt;/p&gt;

  &lt;p&gt;社内で手放したくないエンジニアがいるという企業は、年収バグ起因で他の企業に転職されちゃう前にきちんと実力・成果に応じた報酬設定を行うべきた。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.toshimaru.net/engineer-hiring/&quot;&gt;『その「エンジニア採用」が不幸を生む』を読んだ ~優秀エンジニアをどう採用するか~ - Hack Your Design!&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;人を正しく評価する社会であってほしい&quot;&gt;人を正しく評価する社会であってほしい&lt;/h2&gt;

&lt;p&gt;エンジニアの転職市場は活況でまだしばらくその情報は続きそうだ。エンジニアを正しく評価し適切な給与設定をしなければ簡単に他社になびいてしまう。&lt;/p&gt;

&lt;p&gt;本記事ではVOYAGEさんのエンジニア技術力評価会制度、SmartHRさんの厳格な給与テーブル運用、サイボウズさんの市場価格よる給与決定を紹介した。どれも素晴らしい取り組み・姿勢であり各社「正しい評価をしよう」という努力が見て取れる。&lt;/p&gt;

&lt;p&gt;本記事ではエンジニア評価という切り口だったため、エンジニアに焦点をあてた内容になった。しかしエンジニアだけではない。&lt;strong&gt;優秀な人が優秀な人として正しく評価される&lt;/strong&gt;―そんな社会であってほしいと切に願う。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;能力の高い人は静かにうつむいて仕事に打ち込む傾向があるいうことです。仕事での業績が認められ、何も言わずに出世の道が開かれることを望み、自分から申し出なければならないと知ると、憤りを覚えて不満をこぼすようになり、最終的にもっと評価してもらえると感じられる場所へ飛び立っていきます。そして、そのパターンを繰り返します。&lt;/p&gt;

  &lt;p&gt;往々にして経営者は優秀な人材が辞めていくことに驚き、理由がわからないでいます。これは経営者が配慮していなかったことが原因ですが、社員が去るまでその人材の価値を理解していない経営者がいるのは残念なことです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://jp.quora.com/%E8%83%BD%E5%8A%9B%E3%81%AE%E9%AB%98%E3%81%84%E4%BA%BA%E3%81%8C%E5%87%BA%E4%B8%96%E3%81%97%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF%E3%81%AA%E3%81%9C%E3%81%A7%E3%81%99%E3%81%8B&quot;&gt;能力の高い人が出世しないのはなぜですか？ - Quora&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://seleck.cc/834&quot;&gt;VOYAGEのエンジニア評価制度の全貌。「技術力評価会」による、人が育つ組織の作り方 | SELECK [セレック]&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/makoga/technology-assessment-2018-04-25&quot;&gt;エンジニアの技術力評価は難しい? - 7年間運用してきた技術力評価制度の改善の歴史 ‒ / technology assessment 2018 04 25 - Speaker Deck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;市場価値のソースは転職ドラフト。ちなみに今は市場価値以上のお賃金はもらってますよ。念の為。 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;実際はこのケースにおいては全員を同じようにランクアップさせるのが良いとは思う &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="評価" /><category term="tech" /><summary type="html">先日VOYAGE GROUP エンジニアの公開ガチ評価会というイベントに行ってきた。イベントの細かな内容まとめは他の方のブログに譲るとして、エンジニアの評価についていろいろ考える良いきっかけとなったので書いてみる。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/tech_assessment/og.png" /></entry><entry><title type="html">2018年 買ってよかったもの</title><link href="https://blog.toshimaru.net/2018-must-buy/" rel="alternate" type="text/html" title="2018年 買ってよかったもの" /><published>2018-12-30T00:00:00+09:00</published><updated>2018-12-30T00:00:00+09:00</updated><id>https://blog.toshimaru.net/2018-must-buy</id><content type="html" xml:base="https://blog.toshimaru.net/2018-must-buy/">&lt;p&gt;2018年に買ってよかったものを紹介してみます。&lt;/p&gt;

&lt;h2 id=&quot;モバイル端末&quot;&gt;モバイル端末&lt;/h2&gt;

&lt;h3 id=&quot;pixel-3&quot;&gt;Pixel 3&lt;/h3&gt;

&lt;p&gt;まだ使い始めて二ヶ月足らずだけど最高の端末だった。特にカメラが最高。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://store.google.com/jp/product/pixel_3&quot;&gt;Google Pixel 3 - Googleストア&lt;/a&gt;&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Hello from Pixel 3. &lt;a href=&quot;https://t.co/gY7irDkWCv&quot;&gt;pic.twitter.com/gY7irDkWCv&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1065836078542675970?ref_src=twsrc%5Etfw&quot;&gt;November 23, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;pixel 3 夜景モードのテストショット。加工なしでこの仕上がりはすごいよなぁ &lt;a href=&quot;https://t.co/0dlnCv4ePv&quot;&gt;pic.twitter.com/0dlnCv4ePv&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1078275269935325184?ref_src=twsrc%5Etfw&quot;&gt;December 27, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3 id=&quot;anker-powerwave-75-standqi-ワイヤレス急速充電器&quot;&gt;Anker PowerWave 7.5 Stand（Qi ワイヤレス急速充電器）&lt;/h3&gt;

&lt;p&gt;公式のPixelスタンドが高すぎるのでこちらをAmazonサイバーマンデーセールで購入。公式と違って高速充電は対応していないものの、十分な充電速度。ワイヤレス充電はUSB-C差込口も傷まないし置くだけだけし最高。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B07DJC28GS&amp;amp;linkId=a2f0a55f62646f64c9d1d033edbdb808&quot;&gt;&lt;/iframe&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Qiのワイヤレス充電器で得られる体験、控えめに言って最高だな&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1072085372186710016?ref_src=twsrc%5Etfw&quot;&gt;December 10, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;イヤホン&quot;&gt;イヤホン&lt;/h2&gt;

&lt;h3 id=&quot;sony-wi-1000x-ノイズキャンセリングbluetoothイヤホン&quot;&gt;SONY WI-1000X ノイズキャンセリングBluetoothイヤホン&lt;/h3&gt;

&lt;p&gt;ノイズキャンセリングBluetoothイヤホン。数あるノイズキャンセリングイヤホンの中で音質が最高だったコレをチョイス。はじめてのBluetooth+ノイズキャンセリング体験だったけどすごく良かった。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B0756H1WL3&amp;amp;linkId=b683c4d1c0ce6ea148dbc7ed0886f986&quot;&gt;&lt;/iframe&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;ノイズキャンセリングイヤホンずっとほしくて家電屋でSony WI-1000X試聴したらビビッときて衝動的に買っちゃったよねー &lt;a href=&quot;https://t.co/GZPxswpEEk&quot;&gt;pic.twitter.com/GZPxswpEEk&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/955816780689170433?ref_src=twsrc%5Etfw&quot;&gt;January 23, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3 id=&quot;final-e3000-カナル型イヤホン&quot;&gt;final E3000 カナル型イヤホン&lt;/h3&gt;

&lt;p&gt;こちらは有線のイヤホン。値段のわりに音質がすごくぶる良くコスパが高い。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B075G6S4RS&amp;amp;linkId=031ccbf21d9500db5aa9f1139101116c&quot;&gt;&lt;/iframe&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-cards=&quot;hidden&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;メーカー信頼して買った比較的安価のイヤホンの音質が全く気に食わなかったのでヨドバシにイヤホン探しの旅に来てコスパが良いと評判のfinalのEシリーズ聴いたら一発で気に入ってその場で購入してしまった（既に購入したやつの価格と合わせて最初から良いやつ買えっていうね）&lt;a href=&quot;https://t.co/Ybvjdbfksj&quot;&gt;https://t.co/Ybvjdbfksj&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1048189018007977984?ref_src=twsrc%5Etfw&quot;&gt;October 5, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;pc周辺機器&quot;&gt;PC周辺機器&lt;/h2&gt;

&lt;h3 id=&quot;anker-usb-c-to-hdmiケーブル&quot;&gt;Anker USB-C to HDMIケーブル&lt;/h3&gt;

&lt;p&gt;Apple公式のMultiportアダプターで4Kディスプレイにつなげるとリフレッシュレートが30Hzしか出ず「どうにかならんかなー」って思っていたら同僚が「これ使えばもっとリフレッシュレート出るよ」ということで教えていただいた商品。&lt;/p&gt;

&lt;p&gt;実際つなげてみると確実にMultiportアダプターのときよりはヌルヌルに描画された。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=FFFFFF&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B07DC2LF36&amp;amp;linkId=567b930017b52df1e93b11aee2b3232f&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;hhkb尊師スタイルグッズ&quot;&gt;HHKB尊師スタイル・グッズ&lt;/h3&gt;

&lt;p&gt;外部キーボードはHHKBをたまに使っているのだが、&lt;a href=&quot;https://qiita.com/midorinokimi/items/8da9f234e96f1fa0f9e0&quot;&gt;尊師スタイル&lt;/a&gt;が気に入っている。尊師スタイルをサポートするグッズを揃えてみるとなかなかキーボード体験が上がって良かった。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B077ZSGQDH&amp;amp;linkId=1a7ae27cd2f239a0cce12f6199e2fdb0&quot;&gt;&lt;/iframe&gt;
&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B06VW4GKX9&amp;amp;linkId=4dd026153159488ccfbcd5e4530e157a&quot;&gt;&lt;/iframe&gt;
&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B01LYYULYJ&amp;amp;linkId=43ea33b5f8f625d59424622466bdd0d7&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;本&quot;&gt;本&lt;/h2&gt;

&lt;h3 id=&quot;エンジニアリング組織論への招待エンジニアのためのマネジメントキャリアパス&quot;&gt;エンジニアリング組織論への招待/エンジニアのためのマネジメントキャリアパス&lt;/h3&gt;

&lt;p&gt;今年は技術本よりはマネジメント関連本を読む機会が多かった。特に下記二冊はよかったのでピックアップ。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=4774196053&amp;amp;linkId=4f05e000e36b73d1be48fc7f03e1b7dd&quot;&gt;&lt;/iframe&gt;
&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=4873118484&amp;amp;linkId=22f90de35d37f23d7e4f29db3a87e3fb&quot;&gt;&lt;/iframe&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;『エンジニアリング組織論』『エンジニアのためのマネジメントキャリアパス』の2冊はエンジニアマネージャー必読の〈２大青本〉だと思ってます&lt;a href=&quot;https://twitter.com/hashtag/em_meetup?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#em_meetup&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1073576241473581057?ref_src=twsrc%5Etfw&quot;&gt;December 14, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h3 id=&quot;hunterhunter&quot;&gt;HUNTER×HUNTER&lt;/h3&gt;

&lt;p&gt;ちゃんと連載が続いて単行本が出て本当に良かった。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B07HQLKJZR&amp;amp;linkId=33bcbe45e296f718b07f25ac79139ef1&quot;&gt;&lt;/iframe&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-cards=&quot;hidden&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;おっしゃああ🤩「HUNTER×HUNTER」5カ月半ぶりに連載再開へ 22日発売号で &lt;a href=&quot;https://twitter.com/hashtag/ldnews?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#ldnews&lt;/a&gt; &lt;a href=&quot;https://t.co/QmhUei4IY9&quot;&gt;https://t.co/QmhUei4IY9&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1037118124443688961?ref_src=twsrc%5Etfw&quot;&gt;September 4, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-cards=&quot;hidden&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;知ってた…😪「HUNTER×HUNTER」次号より休載、冨樫義博「次の10週分ネームは出来ている」 - コミックナタリー &lt;a href=&quot;https://t.co/WXc72ERNuL&quot;&gt;https://t.co/WXc72ERNuL&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1066918072416534528?ref_src=twsrc%5Etfw&quot;&gt;November 26, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;その他&quot;&gt;その他&lt;/h2&gt;

&lt;h3 id=&quot;フレンチプレスコーヒーメーカー&quot;&gt;フレンチプレスコーヒーメーカー&lt;/h3&gt;

&lt;p&gt;今まで豆をドリップで淹れていたけど、フレンチプレスのほうが美味しくいただけそうな豆をもらったので買ってみた。使った後のコーヒー豆の処理が大変という話を聞いていたのだけど、水切りネットを使うと処理も簡単にできるらしいということで、あわせて買うと後処理が簡単になって良かった。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B0018JXAC2&amp;amp;linkId=da3e7aed90147e93304ccd78e95fbf30&quot;&gt;&lt;/iframe&gt;
&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=B00MLXV2SS&amp;amp;linkId=302b10666e653ceb0463b4c5aa801d45&quot;&gt;&lt;/iframe&gt;</content><author><name>Toshimaru</name></author><category term="pixel" /><summary type="html">2018年に買ってよかったものを紹介してみます。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/pixel/pixel3.png" /></entry><entry><title type="html">はじめてのCircleCI Orbsを公開した</title><link href="https://blog.toshimaru.net/my-first-circleci-orbs/" rel="alternate" type="text/html" title="はじめてのCircleCI Orbsを公開した" /><published>2018-12-02T00:00:00+09:00</published><updated>2018-12-02T00:00:00+09:00</updated><id>https://blog.toshimaru.net/my-first-circleci-orbs</id><content type="html" xml:base="https://blog.toshimaru.net/my-first-circleci-orbs/">&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I published my first CircleCI Orb! » CircleCI Orb Registry - toshimaru/bundle-install &lt;a href=&quot;https://t.co/Ikd11JmEFd&quot;&gt;https://t.co/Ikd11JmEFd&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1068431295804465152?ref_src=twsrc%5Etfw&quot;&gt;November 30, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;はじめてのCircleCI Orbsを公開した。そのメモ。&lt;/p&gt;

&lt;h2 id=&quot;circleci-orbsとは&quot;&gt;CircleCI Orbsとは&lt;/h2&gt;

&lt;p&gt;2018年11月に正式公開されたCircleCI Orbs。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;本日Orbsをリリースしました🥳OrbsはWorkflow以来のメジャーアップデートです。OrbsはCircleCIの設定をパッケージ化する仕組みで、誰でも自分のOrbsを公開できます。これはCI/CDサービスとしては初の試みで、今後はユーザーやパートナーを巻き込んでCircleCIのエコシステムを構築することができます。&lt;/p&gt;&amp;mdash; CircleCI Japan (@CircleCIJapan) &lt;a href=&quot;https://twitter.com/CircleCIJapan/status/1060285769124696064?ref_src=twsrc%5Etfw&quot;&gt;November 7, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;要はいろんなレポジトリで使っている共通のCircleCIの設定を共通化できる仕組みのこと。&lt;/p&gt;

&lt;h2 id=&quot;作ってみた&quot;&gt;作ってみた&lt;/h2&gt;

&lt;p&gt;僕もいろんなRuby on Railsプロジェクトでよく使うコマンド、&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;をCircleCI Orbsを使って共通化してみることにしてみました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;結果できたのがこちら: &lt;a href=&quot;https://circleci.com/orbs/registry/orb/toshimaru/bundle-install&quot;&gt;CircleCI Orb Registry - toshimaru/bundle-install&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;GitHubソースコードはこちら: &lt;a href=&quot;https://github.com/toshimaru/bundle-install&quot;&gt;toshimaru/bundle-install&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;作り方&quot;&gt;作り方&lt;/h2&gt;

&lt;h3 id=&quot;install-circleci-command&quot;&gt;Install circleci command&lt;/h3&gt;

&lt;p&gt;まずはcircleciコマンドを入手。MacOSの場合下記のようにbrewで入れることができます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install circleci
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;namespace-作成&quot;&gt;namespace 作成&lt;/h3&gt;

&lt;p&gt;namespaceを取得します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ circleci namespace create toshimaru github toshimaru
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;orb-作成&quot;&gt;Orb 作成&lt;/h3&gt;

&lt;p&gt;namespace以下のorb名を作成します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ circleci orb create toshimaru/bundle-install
Orb toshimaru/bundle-install created.
Please note that any versions you publish of this orb are world-readable.

You can now register versions of toshimaru/bundle-install using circleci orb publish.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;publish-circleci-orb&quot;&gt;Publish CircleCI Orb&lt;/h3&gt;

&lt;p&gt;作成した&lt;code class=&quot;highlighter-rouge&quot;&gt;orb.yml&lt;/code&gt;を公開します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ circleci orb publish src/orb.yml toshimaru/bundle-install@0.0.1
Orb toshimaru/bundle-install@0.0.1 was published.
Please note that this is an open orb and is world-readable.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;作成したorbを使う&quot;&gt;作成したOrbを使う&lt;/h2&gt;

&lt;p&gt;次に作成したOrbを使う側、呼び出す側の設定です。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;orbs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;bundle-install&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;toshimaru/bundle-install@0.1.0&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;docker&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;circleci/ruby&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;checkout&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle-install/bundle-install&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# - bundle exec rspec&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;実際に下記のPRでOrbの変更例が見れますのでご参照ください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/toshimaru/RailsTwitterClone/pull/264/files&quot;&gt;Introduce CircleCI Orbs by toshimaru · Pull Request #264&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考にした記事&quot;&gt;参考にした記事&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;全体的にこちらの手順を参考にさせていただきました。 &lt;a href=&quot;https://blog.tsub.me/post/introducing-to-circleci-orbs/&quot;&gt;CircleCI Orbs 入門 | tsub’s blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;ファイルの構成などこちらを参考にさせていただきました。https://github.com/sue445/circleci-ruby-orbs&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="circleci" /><summary type="html">I published my first CircleCI Orb! » CircleCI Orb Registry - toshimaru/bundle-install https://t.co/Ikd11JmEFd&amp;mdash; toshimaru (@toshimaru_e) November 30, 2018</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/circleci-orb.png" /></entry><entry><title type="html">reviewdogを使ってCI上でRuboCop自動レビューを動かす</title><link href="https://blog.toshimaru.net/reviewdog-rubocop/" rel="alternate" type="text/html" title="reviewdogを使ってCI上でRuboCop自動レビューを動かす" /><published>2018-11-19T00:00:00+09:00</published><updated>2018-11-19T00:00:00+09:00</updated><id>https://blog.toshimaru.net/reviewdog-rubocop</id><content type="html" xml:base="https://blog.toshimaru.net/reviewdog-rubocop/">&lt;p&gt;&lt;a href=&quot;https://github.com/rubocop-hq/rubocop&quot;&gt;rubocop&lt;/a&gt;の自動レビューを&lt;a href=&quot;https://github.com/haya14busa/reviewdog&quot;&gt;reviewdog&lt;/a&gt;を使ってやってみたのでその知見です。&lt;/p&gt;

&lt;h2 id=&quot;auto-rubocop-on-circleci-powered-by-reviewdog&quot;&gt;Auto-RuboCop on CircleCI powered by reviewdog&lt;/h2&gt;

&lt;p&gt;僕の作っているプロジェクトでrubocop自動レビューをCircleCI上で設定してみました。そのプルリクエストを見てもらうのが一番早いと思いますので、下記リンクより差分を確認してください。&lt;/p&gt;

&lt;p&gt;https://github.com/toshimaru/RailsTwitterClone/pull/254&lt;/p&gt;

&lt;h3 id=&quot;1-configymlの設定&quot;&gt;1. &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yml&lt;/code&gt;の設定&lt;/h3&gt;

&lt;p&gt;基本的には&lt;a href=&quot;https://github.com/haya14busa/reviewdog#circle-ci&quot;&gt;公式READMEのCircleCIセットアップ手順&lt;/a&gt;通りですが、まずは下記のようにreviewdogのバイナリを&lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;経由で落とします。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 環境変数でダウンロードするreviewdogのバージョンを指定&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;REVIEWDOG_VERSION&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0.9.11&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# reviewdogをcurlでダウンロード&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install reviewdog&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;curl -fSL https://github.com/haya14busa/reviewdog/releases/download/$REVIEWDOG_VERSION/reviewdog_linux_amd64 -o reviewdog &amp;amp;&amp;amp; chmod +x ./reviewdog&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2コメントできるtokenを取得--設定&quot;&gt;2.コメントできるTokenを取得 &amp;amp; 設定&lt;/h3&gt;

&lt;p&gt;reviewdogにコメントさせるためにはコメントできる権限を持ったGitHub Tokenが必要になります。下記手順でGitHub Tokenを取得してください。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/settings/tokens&quot;&gt;アクセストークンの取得ページ&lt;/a&gt;にいく&lt;/li&gt;
  &lt;li&gt;下記の権限を設定してTokenを発行
    &lt;ul&gt;
      &lt;li&gt;Privateレポジトリの設定: &lt;code class=&quot;highlighter-rouge&quot;&gt;repo&lt;/code&gt;をチェック&lt;/li&gt;
      &lt;li&gt;Publicレポジトリの設定: &lt;code class=&quot;highlighter-rouge&quot;&gt;public_repo&lt;/code&gt;をチェック&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これでTokenが発行できましたので、次にそのTokenの設定です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CircleCIの環境変数の設定画面を開く&lt;/li&gt;
  &lt;li&gt;下記の環境変数を設定
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;REVIEWDOG_GITHUB_API_TOKEN&lt;/code&gt;の値に前手順で取得したTokenを設定&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これにてreviewdogにコメントできる権限が付与されました。&lt;/p&gt;

&lt;h3 id=&quot;3-rubucopの結果をreviewdogで通知&quot;&gt;3. rubucopの結果をreviewdogで通知&lt;/h3&gt;

&lt;p&gt;あとはいつも通りのrubocopのコマンドをパイプしてreviewdogに渡してあげればOK。その際のオプションは &lt;code class=&quot;highlighter-rouge&quot;&gt;-f=rubocop&lt;/code&gt;（rubocopフォーマット指定）, &lt;code class=&quot;highlighter-rouge&quot;&gt;-reporter=github-pr-review&lt;/code&gt;（GitHub PRレビューコメント形式の指定） の２つを指定します。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle exec rubocop | ./reviewdog -f=rubocop -reporter=github-pr-review&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;完成yamlイメージ&quot;&gt;完成yamlイメージ&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.circleci/config.yml&lt;/code&gt;の完成イメージは下記です（完全なyamlファイル&lt;a href=&quot;https://github.com/toshimaru/RailsTwitterClone/pull/254/files&quot;&gt;当該Pull Request&lt;/a&gt;より確認してください）。なおCircleCIはversion2.1を使用していることに注意してください（現時点の最新バージョン）。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2.1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;executors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;working_directory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;~/app&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;docker&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;circleci/ruby:2.5-node-browsers&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;RAILS_ENV&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;REVIEWDOG_VERSION&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.9.11&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;rubocop&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;executor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;checkout&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle_install&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install reviewdog&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;curl -fSL https://github.com/haya14busa/reviewdog/releases/download/$REVIEWDOG_VERSION/reviewdog_linux_amd64 -o reviewdog &amp;amp;&amp;amp; chmod +x ./reviewdog&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;なぜreviewdogなのか&quot;&gt;なぜreviewdogなのか&lt;/h2&gt;

&lt;p&gt;ruboop自動レビューのためのツールとして、既にあるツールに&lt;a href=&quot;https://github.com/packsaddle/ruby-saddler&quot;&gt;Saddler&lt;/a&gt;や&lt;a href=&quot;https://github.com/prontolabs/pronto&quot;&gt;pronto&lt;/a&gt;などがありますが、なぜそれらを使わずにreviewdogを採用したのかというと下記の理由からです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Goのシングルバイナリポン置き(curlワンコマンド)でSetupがめちゃくちゃ楽&lt;/li&gt;
  &lt;li&gt;Language Agnostic(Ruby以外もGo, PHP, Pythonなど他言語で使える)&lt;/li&gt;
  &lt;li&gt;Go実装でパフォーマンスが良い&lt;/li&gt;
  &lt;li&gt;Activeにメンテされている&lt;/li&gt;
  &lt;li&gt;READMEドキュメントが充実している&lt;/li&gt;
  &lt;li&gt;日本人が作っている!!（おまけ理由&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;最後に&quot;&gt;最後に&lt;/h2&gt;

&lt;p&gt;本記事ではRubyプロジェクトのrubocop checkをreviewdogを使ってCircleCI上で動かす例を紹介しました。&lt;/p&gt;

&lt;p&gt;公式READMEにはTravisCI上での動かし方であったり、GitHubの新機能・GitHub Checks形式での動かし方も記載されておりますので、興味があるかたは公式READMEをご参照ください。&lt;/p&gt;

&lt;h2 id=&quot;参考資料&quot;&gt;参考資料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/haya14busa/reviewdog&quot;&gt;haya14busa/reviewdog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://haya14busa.com/reviewdog/&quot;&gt;reviewdog を飼ってコードレビューや開発を改善しませんか - haya14busa&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/azu/items/c563da0b5455a1b1dca2&quot;&gt;reviewdogを使ってtextlintの結果をPull Requestに書き込む方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="rubocop" /><category term="github" /><category term="circleci" /><summary type="html">rubocopの自動レビューをreviewdogを使ってやってみたのでその知見です。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/rubocop_x_reviewdog.jpg" /></entry></feed>