<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Hack Your Design!]]></title>
  <link href="http://blog.toshimaru.net/atom.xml" rel="self"/>
  <link href="http://blog.toshimaru.net/"/>
  <updated>2013-11-19T09:53:40+00:00</updated>
  <id>http://blog.toshimaru.net/</id>
  <author>
    <name><![CDATA[Toshimaru]]></name>
  </author>

  
  <entry>
    <title type="html"><![CDATA[Rakeタスクにエイリアスを付ける]]></title>
    <link href="http://blog.toshimaru.net/rake-alias/"/>
    <updated>2013-11-17T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/rake-alias</id>
    <content type="html"><![CDATA[<p>RubyのRakeタスクにエイリアス付けたいときってありません？</p>

<p>僕はあります。<code>rake create</code>なんていうタスクがあったとしたら、何らかの手癖のせいで<code>rake new</code>とか打っちゃうことがあるんですよ。</p>

<p>そういうときは<code>alias_task</code>なんていう関数を作ってやって、タスク名に別のエイリアス名を割り当ててやればOK。具体的にはこんな感じです。</p>

<pre><code>def alias_task(tasks)
    tasks.each do |new_name, old_name|
        task new_name, [*Rake.application[old_name].arg_names] =&gt; [old_name]
    end
end

alias_task [
    [:new, :create],
    [:dc,  :db_create]
]
</code></pre>

<p>ここでは</p>

<ul>
  <li><code>create</code>タスクに<code>new</code>というエイリアス名を</li>
  <li><code>db_create</code>タスクに<code>dc</code>というエイリアス名を</li>
</ul>

<p>割り当てています。</p>

<h3 id="section">参考</h3>
<ul>
  <li><a href="http://stackoverflow.com/questions/7656541/the-alias-of-task-name-in-rake">The alias of task name in rake</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jekyllでgit pushをフックしてGithubPageへ自動デプロイするようにした]]></title>
    <link href="http://blog.toshimaru.net/autodeploy-jekyll/"/>
    <updated>2013-11-15T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/autodeploy-jekyll</id>
    <content type="html"><![CDATA[<p>本ブログはJekyllを使って構築しているのですが<code>git push</code>したときにTravis-CIと連携してTravis上でビルドしてGithub Pageへとデプロイするように変更してみました。作業にあたっては下記ブログを参考にさせていただきました。</p>

<p><a href="http://pchw.github.io/blog/2013/06/27/octopress-travis/">OctopressとTravis CIを連携させてBlog生成を自動にする</a></p>

<p>上手順において２点、注意点があります。</p>

<ul>
  <li><code>brew install travis</code>でtravisコマンドはインストールできなくなっているっぽいので<code>gem install travis</code>で対応すること。</li>
  <li>上記では公開鍵暗号方式を使っているが、<a href="https://help.github.com/articles/creating-an-access-token-for-command-line-use">OAuth access tokens</a>を使ったほうが手間がかからなくて楽です。</li>
</ul>

<p>ということで公開鍵暗号方式ではなくOAuth Tokenを使うようにします。その場合は下記が参考になります。</p>

<p><a href="http://tricknotes.hateblo.jp/entry/2013/06/17/020229">Middleman で作った web サイトを Travis + GitHub pages でお手軽に運用する</a></p>

<p>デプロイまでの流れとしてはこんな感じです。</p>

<ol>
  <li>githubにエントリをpushする</li>
  <li>pushをフックしてTravisCI起動（事前にService HooksでTravisと連携するように設定してある）</li>
  <li>Travis上でスタティックサイトをビルド</li>
  <li>TravisからgithubへとToken通してpushする</li>
</ol>

<p>結果的に作成した<code>.travis.yml</code>,<code>Rakefile</code>はこんな感じです。</p>

<ul>
  <li><a href="https://github.com/toshimaru/blog.toshimaru.net/blob/master/.travis.yml">.travis.yml</a></li>
  <li><a href="https://github.com/toshimaru/blog.toshimaru.net/blob/master/Rakefile">Rakefile</a></li>
</ul>

<p>このように設定しておけばGithub上だったり<a href="http://prose.io/">prose.io</a>みたいなサービス使ってWEB上でも記事を投稿できてグッドですね。（実際はローカル上のエディタでの編集が慣れているのでWEB編集画面は使わないけど…）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技術的に尖ってないスタートアップ企業は潰れるべき]]></title>
    <link href="http://blog.toshimaru.net/startup-technology/"/>
    <updated>2013-11-14T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/startup-technology</id>
    <content type="html"><![CDATA[<p>海外で仕事探しをする中でいくつかのWEB系スタートアップ企業を見た。「海外のスタートアップ」というと響きだけはとても良いかもしれない。敏腕な経営者がいて優秀なエンジニアたちがアジャイルなスタイルでスピーディにサービスを作っている―こんなイメージだろうか。しかし僕が見た限りでいうとそうでもないようだ。</p>

<h2 id="section">一見しっかりしてそうだが…？</h2>

<p>自分が勤めているスタートアップの環境でいうと、作ってるプロダクトはしっかりしてる。少なくともしっかりしているように見える。PHPのMVCフレームワークを使い、JSコードも少なからず存在する中規模以上のWEBアプリケーションだ。nodejsを使っている跡もあり新しいテクノロジーもそれなりに取り入れようとはしているようだ（だが完全に使いこなせていない）。仕事の進め方もデイリースクラムを取り入れていたりアジャイルな感じだ。</p>

<p>一見全てはうまく回っているように見える。しかし実際の現場視点でコードを覗いてみるとそんなことはなかった。MVC構造になっているものの度重なる機能追加/変更でスパゲッティ化。使っていないコードがgitの管理下に。Githubホストされてるのに使われないプルリクエスト、無いコードレビュー。大幅改善したい欲求はあるものの、テストコードがなくリファクタリングにもなかなか手が出せない。</p>

<p>上記のようなコードが残っているという事実は同時に中のエンジニアもそこまで優秀じゃないということが伺える。もうそれでいいと思考停止している。空気が腐っている。これは良くない。なぜなら腐った環境に優秀なエンジニアは来ないからだ。</p>

<h2 id="section-1">スタートアップはどうエンジニアを誘致すべき？</h2>

<p>ところでスタートアップはどのように優秀なエンジニアを誘致すべきなのか？　僕は以下の観点で考えている。</p>

<ul>
  <li>会社の今後の成長が高い可能性で見込まれる</li>
  <li>金銭的なインセンティブがある（給与高い）</li>
  <li>尖ってる技術を使用している</li>
</ul>

<p>１つ目の「今後の成長が見込まれる」という点はスタートアップであればマストだと思う。誰が成長が見込まれない小さい企業に加わりたいだろうか？　成長・成功こそスタートアップの醍醐味であり、キーワードだと思う。</p>

<p>２つ目の「金銭的インセンティブ」、３つ目の「尖った技術」は両方あればベストだが少なくともどちらか１つは最低限必要だろう。つまり金銭的なインセンティブが無いのであれば尖った技術を使用しているべきだし、尖った技術が無いのであれば金銭的なインセンティブを与えるべきだ。（「尖った技術」が何か、という話は本エントリでは議論しない）</p>

<p>前者の「金無し、技術有り」の場合、「お金はもらえなくともその技術を学ぶことそのものが金銭以上の価値がある」と考えるエンジニアが誘致できる。その場合、使う技術は本当に尖っている必要があると思う。求人市場においてその技術の求人を見つけるのが非常に難しいくらいには希少価値があるべきだ。この場合のエンジニアは会社の成長とともに給与もアップというキャリアパスが本望だろう。</p>

<p>後者の「技術無し、金有り」の場合、単純に金目的のエンジニアが誘致できる。金目的というと響きがなんとなく悪い気もするがこの状況はそんなに悪くないようにも思える。というのも入社してから「自分自身で腐った技術を尖らせていく」ということが可能になるからだ。もしその改善の成果が上がったとしたらそのエンジニアの社内評価も上がるだろうし当該エンジニア自身の満足度も上がるだろう。上記のケースでは味わえない充足感がある。</p>

<p>金銭インセンティブもなく技術的にも尖っていない中で「成長が望めます！」というモチベーションのみで働かせるのは「やりがいの搾取」だろう。これはブラック企業と何ら体質的に変わりがない。彼らにとってエンジニアは使い捨ての労働力なのだろう。</p>

<h2 id="section-2">まとめ</h2>

<p>つまりスタートアップには「成長」を前提とし、それに加え「金銭インセンティブ」「尖った技術」は必要だと思う。なので金銭インセンティブもなく技術レベルも低い会社はエンジニアにとっては潰れるべき会社だ。</p>

<p>また個人的には技術力の低いスタートアップ企業、そしてそれを是とする企業は本当にビジネスを成功させる気があるのか疑ってしまう。スタートアップこそスピーディにビジネスを展開していくべきで、だからこそスピーディな開発が可能なRailsが選ばれてるのであって（そういう意味でスタートアップとRailsの親和性は高い）…。やっぱりまともに技術を扱っていない会社は信用ならない、というのが僕の考えだ。</p>

<hr />

<p>っていうことをPHP4使用、テスト全く無し、クラウド環境使用せず、バージョンコントロールも行わず、そして金払いも悪いスタートアップと話をしながらつらつら考えてた。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2ヶ月間WEBエンジニアとして海外で働いてみて感じたこと]]></title>
    <link href="http://blog.toshimaru.net/my-impression-after-working-2-months/"/>
    <updated>2013-11-05T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/my-impression-after-working-2-months</id>
    <content type="html"><![CDATA[<p>海外（カナダ・バンクーバー）で働き始めて2ヶ月間が経った。2ヶ月間働いてみてなんとなく感じてることを書き綴ってみる。</p>

<h2 id="section">仕事の進め方は緩い</h2>
<p>デッドラインに遅れるのはけっこう平気でしてる。デッドラインが今週中というようなタスクを「あとちょっとで終わる！」「ほぼ完了と言って良い」なんていいながら3週間くらい平気でスケジュール遅延している。そしてそのタスクの担当者はバケーションに入るとかで結局中途半端な感じのタスクを置き土産として長期休暇に入っていった。アッパレである。</p>

<p>さすがに2週くらい遅れた時点でもっと上司がキツく詰め寄ったり、タスク担当者が残業をしたりとかしないのか！？とか思ったがそんなこともなかった。まぁきっとそういうもんなんだろう。</p>

<h2 id="section-1">スピード感</h2>
<p>意思決定が早いのでスピード感がある。例えば自分が今の仕事就く前に軽くかかわったウェブ制作のバイトの話をすると、かかわったのは僅か2ヶ月足らずくらいなんだけど、その短い内に「プロジェクトもっとうまく回したいわー」ってノリで<a href="https://trello.com/">Trello</a>というタスク管理ツールをポンと使い始めたり、その中での管理のやり方がイケてなかったということでやり方をガラッと刷新したり<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup>、素早いトライ＆エラーでさくさく改善していく感じだった。</p>

<p>逆にこのスピード感が裏目に出ることもあって（自分の中では）全くまともにテストできていない機能を、「見た感じ大丈夫っぽいね！よしっ！来週デプロイいこう！」とかいうノリでボスがデプロイを決めて焦った。不具合が出たのは言うまでもない。（幸いにして小さいものだったが）</p>

<p>あと上でTrelloという外部サービスのタスク管理ツールを紹介したけど、サードパーティのサービスを有効活用しているイメージがある。ドキュメントはDropboxやGoogleDocで共有。FAQを<a href="http://www.zendesk.com/">zendesk</a>というサービスで運営してたり。サービスの監視を<a href="http://newrelic.com/">NewRelic</a>で行ってたり。北米にはこういった類の機能の一部だったり開発の面倒くさいところの一部を外部に委譲できちゃうサービスが豊富で良い。</p>

<h2 id="section-2">実力社会</h2>
<p>実力あればたぶん給料もついてくるし、ばんばんリクルーターからGithubやLinkedIn経由で声がかかる。<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup></p>

<p>自分の場合、英語の部分で実力不足を感じたので別に給与とか（こっちで生活できる程度に貰えれば）どーでもいいや、って口だったけど技術スキルの部分で会社に認めてもらって日本にいたときと同じ水準くらいの給与は貰えている。嬉しい誤算だ。</p>

<p>日本にいたときに感じた年功序列的な価値観は当たり前だがない。基本は実力社会だ。もちろん年功序列社会と実力社会、どちらにも良い面悪い面があり人によって向き不向きはあるだろうが、後者を好む僕にとっては今の環境は良い環境だと言える。</p>

<h2 id="section-3">なんだかんだいって英語は壁</h2>
<p>「こういう職業（技術職）だから英語得意じゃないけどイケるっしよ！」ってことで海外来て実際仕事見つけてそれなりに仕事はこなせているわけだけど、それでもやっぱり英語は壁になる。</p>

<p>この辺は自分がジョインした企業がスタートアップ企業だからってのに起因しているのかもしれない。スタートアップのようなあんまり整備されていない環境下では、口頭でのコミュニケーションがコラボレーションの基本になりやすい。だからそこで発言・対話できないと企業への積極的なコミットはなかなか難しい。</p>

<p>プログラミングスキル的な話をすると全くもって問題ない。むしろ未整備な部分を整備していきたい思いがある。しかしその辺は英語が壁になって具体的かつ説得力のあるプロポーザルが出せず、実際にやろうという流れに持っていくまでにはなかなか行けない。なので今はプロジェクトリーダーにある程度の流れを作ってもらって、その流れの中で立ち回るのがやっとな感じ。ボスとの対話の中で一緒に流れを作っていくまでのレベルまでは達していない。</p>

<h2 id="section-4">定時終業…からの自分の時間</h2>
<p>定時あがりがデフォ。6時以降までオフィスに居るとほとんど人が居なくなり、いたたまれない気持ちになる。話には聞いていたが、日本人でハードワークした経験がある僕にとって実際にコレを体験してみると感動モノである。</p>

<p>毎日安定して6時には帰れるので終業後、自分のための＋α（プラスアルファ）の時間が必ず作れる。この時間がとてもとても大きい。</p>

<p>もちろんこの時間をダラダラと過ごしても構わない、ただこの時間を有効活用すればエンジニアはいろいろと捗るのだ。例えば自分がやったこと、あるいはやろうとしていることでいうと、</p>

<ul>
  <li>英語の勉強</li>
  <li>技術を磨くための勉強</li>
  <li>オンラインスクールに通う</li>
  <li>Webサービス作ってみよう！</li>
</ul>

<p>英語ならポッドキャスト聞いたり、Netflixで映画・ドラマを観たりした。技術を勉強するために新たなプログラミング言語を勉強したり、オープンソースにかかわったりするのも良いだろう<sup id="fnref:3"><a href="#fn:3" class="footnote">3</a></sup>。オンラインスクールは僕は<a href="https://www.codeschool.com/">CodeSchool</a>を始めた。<a href="https://www.coursera.org/">coursera</a>でオンラインコースを受講してみるのもアリだ<sup id="fnref:4"><a href="#fn:4" class="footnote">4</a></sup>。何か作りたいものがあるなら自分の時間をじっくり使って作ってみるのが良いだろう。</p>

<p>これは本当に貴重な時間だ。日本だと仕事が優先になってなかなか自分のやりたいことにまで手が行かないのが実情だろう。</p>

<p>そして海外で働く最大のメリットはこの<strong>労働環境の部分</strong>であると思う。実際こっちで会った日本人エンジニアの方々は皆そう言っている。今、1年前の僕を振り返ってみて純粋に不思議に思う。「終電近くまで残業して、なんでそんな頑張ってんの？」</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>プロジェクト別にタスクを分割してたけど2週間くらいやってうまく回らなかったから担当者別にタスクを分割するように変えた。 <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>といっても適当に声掛けまくっているリクルーターもいるのでそこは勘違いしないように。 <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>毎日安定して帰れるので<a href="http://kannokanno.hatenablog.com/entry/2013/10/31/165647">半年休職して勉強する</a>必要もないと思う。 <a href="#fnref:3" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p><a href="http://d.hatena.ne.jp/Chikirin/20131101">学習の高速道路</a>バンザイ！ <a href="#fnref:4" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Composerで始める PHPのライブラリ管理]]></title>
    <link href="http://blog.toshimaru.net/how-to-use-composer-autoload/"/>
    <updated>2013-10-24T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/how-to-use-composer-autoload</id>
    <content type="html"><![CDATA[<p>PHPも<a href="http://getcomposer.org/">Composer</a>の登場によりライブラリのインストール、依存性管理が格段に楽になりました。既にPHPのライブラリ管理のスタンダードになっていますが、改めてComposerの導入手順について紹介してみたいと思います。</p>

<h2 id="composer">Composerのインストール</h2>

<p>PHPのバージョンは5.3以降が必要です。PHP5.2以前はさっさと捨てるべし！</p>

<pre><code>$ curl -s https://getcomposer.org/installer | php
</code></pre>

<p>さてこれで<code>composer.phar</code>が手に入りました。<code>composer</code>コマンドを使えるようにするためにパスの通った場所に<code>composer.phar</code>を移動しましょう。</p>

<pre><code>$ sudo mv composer.phar /usr/local/bin/composer
</code></pre>

<p><code>composer</code>コマンド準備完了です。</p>

<pre><code>$ composer
   ______
  / ____/___  ____ ___  ____  ____  ________  _____
 / /   / __ \/ __ `__ \/ __ \/ __ \/ ___/ _ \/ ___/
/ /___/ /_/ / / / / / / /_/ / /_/ (__  )  __/ /
\____/\____/_/ /_/ /_/ .___/\____/____/\___/_/
                    /_/
Composer version b482ebe0ca18321d9322bd913af73c1c55adebf1 2013-09-23 09:55:49
</code></pre>

<h2 id="section">依存関係の記述</h2>

<p>composerはプロジェクトルートの<code>composer.json</code>ファイルにライブラリを記述することで依存関係の管理を行います。（composer.jsonはnpmにおけるpackage.jsonみたいなものです）早速ファイルを作ってライブラリを記述してみましょう。</p>

<pre><code>$ touch composer.json
</code></pre>

<p><code>composer.json</code>ファイルに下記のように記述します。ここではPHPUnitをインストールしてみます。</p>

<pre><code>{
    "require": {
        "phpunit/phpunit": "3.7.*"
    }
}
</code></pre>

<h2 id="section-1">ライブラリのインストール</h2>

<p><code>composer.json</code>ファイルを記述し終えたら、composerコマンドでライブラリのインストールを行います。</p>

<pre><code>$ composer install
Loading composer repositories with package information
Installing dependencies (including require-dev)
  - Installing symfony/yaml (v2.3.6)
    Loading from cache

  - ..............

  - Installing phpunit/phpunit (3.7.28)
    Loading from cache

phpunit/phpunit suggests installing phpunit/php-invoker (&gt;=1.1.0,&lt;1.2.0)
Writing lock file
Generating autoload files
</code></pre>

<p>うまいこといきました。ライブラリは<code>vendor</code>ディレクトリ下に格納されます。この時同時にバージョン情報が書かれた<code>composer.lock</code>ファイルも生成します。</p>

<h2 id="section-2">ライブラリのアップデート</h2>

<p>ライブラリのアップデートに関しては下記のコマンドでOK.</p>

<pre><code>$ composer update
</code></pre>

<h2 id="section-3">まとめ</h2>

<p>モダンなPHPパッケージ管理であればComposer一択でしょう。PEARとの使い分けに関しては<a href="http://ja.phptherightway.com/#依存関係の管理">PHP Right Way</a>にはこのように書いてあります。</p>

<blockquote>
  <ul>
    <li>Composer を使うのは、ひとつのプロジェクトにおける依存関係を管理するとき。</li>
    <li>PEAR を使うのは、システム全体の PHP 環境の依存関係を管理するとき。</li>
  </ul>
</blockquote>

<p>大抵の場合、後者のようにシステム全体で依存性管理をしなきゃならん理由はないと思うのでComposerで依存管理を行いましょう！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPって言うほど悪い言語じゃない]]></title>
    <link href="http://blog.toshimaru.net/php-is-not-bad-language/"/>
    <updated>2013-10-20T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/php-is-not-bad-language</id>
    <content type="html"><![CDATA[<p><strong>※ただしPHP5.3以降に限る。</strong></p>

<p>PHPってよく「PHP(笑)」って後ろに笑マークが付いたり、Disられたりすることが多い。でも僕には「笑」を付けるほどPHPは悪い言語だとは思えないんだよね。</p>

<h2 id="php">PHPの良いところ</h2>

<p>PHPの良さはなんといってもとっつきやすさだと思う。何も知らない初学者が「WEBページ作りたいよ！WEBプログラミングしたいよ！」といったときにPHPは第一の選択肢となると思う。なんせPHPは「ぴーえっちぴー：はいぱーてきすとぷろせっさー」なんだからな！　HyperText作るための言語、それこそPHPの本質たるところなのです。</p>

<p>逆にその手軽さがイケてないコードを量産していてるとも言えて、結果的にそうやって生まれたイケてないコードのいくつかを見て「PHPダメ」って判断してしまいがちだけど、それは早急だと思う<sup id="fnref:phpway"><a href="#fn:phpway" class="footnote">1</a></sup>。</p>

<p>またPHPの<a href="http://blog.clock-up.jp/entry/2013/09/01/141859">公式リファレンスは他のどの言語よりも情報が充実していると思う</a>。簡潔な良いコード例がたくさん載ってるし、PHPのバージョン情報も明記されている。PHPは日本語情報もたくさんあるので困ったときに日本語で検索して情報も出やすい。</p>

<h2 id="php-1">PHPの悪いところ</h2>

<p>とはいえ、PHPは関数が直感に反していていたり、引数が覚えにくかったり、まぁイケてないところは<a href="http://www.rubyist.net/~matz/20080126.html#p04">たくさんある</a>。それは認めよう。</p>

<p>ただ近年のPHP動向とか知ってる？　けっこう凄いんだぜ？</p>

<h2 id="php-2">近年のPHPの進化</h2>

<p><a href="http://getcomposer.org/">Composer</a>で外部ライブラリのインストール、依存関係管理できる。フレームワークもMVCな<a href="https://github.com/symfony/symfony">Symfony</a>,<a href="https://github.com/cakephp/cakephp">CakePHP</a>,<a href="https://github.com/fuel/fuel">FuelPHP</a>から、SinatraライクのMicroフレームワークな<a href="https://github.com/codeguy/Slim">Slim</a>,<a href="https://github.com/fabpot/Silex">Silex</a>だってある。CakePHPなんかは日本で人気が高く日本語情報がネットに沢山あってググりやすい。<a href="https://github.com/laravel/laravel">Laravel</a>なんかは今グングン成長している注目株のMVCフレームワークだ。<a href="https://github.com/sebastianbergmann/phpunit">PHPUnit</a>でテストも書ける。PHPUnitの書き方がイケてない？　ならモダンな<a href="https://github.com/atoum/atoum">atoum</a>もある。PHPは遅い？　<a href="http://phalconphp.com/en/">The fastest
PHP Framework, Phalcon</a>という選択肢も今ならある。</p>

<h2 id="php-3">PHPのコードは汚い？</h2>

<p>正直5.2以前はけっこう汚いコードが多いと思う。PHP4の書き方の名残があるコードなんて最低だ。ただ5.3以降は綺麗に書けるようになってきてる。</p>

<p>PHP5.3以降からは名前空間がサポートされて、これとComposerのAutoloadの機能を使えば<code>require</code>地獄から解放される。他にも5.3では無名関数がサポートされた。</p>

<p>PHP5.4からは新しいショートArrayシンタックスが追加されてかつてのArray地獄からは解放されそうだし、Traitの導入によりRubyのMix-inみたいなことも可能になった。</p>

<p>PHP5.5ではジェネレータの機能により<code>yield</code>キーワードが使えるようになったり、<code>finally</code>節も追加される（この辺は今更感ありまくりだけど）。</p>

<p>シンタックスとか言語特性上限界がありますけど（PHPは言語特性上、クソコードが書きやすい）、Rubyでもきっとクソなコード書く人はクソなコードを書くだろうし、Ruby on Railsでもレールの乗り方を無視してクソみたいなコードを書く奴もいるだろう。クソコードはPHPに限った話じゃないぜ、たぶん。</p>

<h2 id="phpweb">PHPがWEBを作ってる！</h2>

<p>Googleが無縁であるはずのPHPをGoogle App Engineの言語の一つとして採用したのはなぜか？　<a href="http://agilecatcloud.com/2013/07/04/google-app-engine-%E3%81%8C-php-%E3%82%92%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%99%E3%82%8B%EF%BC%9A-%E3%81%AA%E3%81%9C%E3%81%AA%E3%82%89-75-%E3%81%AE-web-%E3%82%92%E3%82%AB%E3%83%90%E3%83%BC/">PHPがWEBの75％を作っている、とGoogleが判断した</a>からだ。</p>

<p>世界で一番使われているCMSはなにか？　WordPressだ。PHPで作られている<sup id="fnref:wp"><a href="#fn:wp" class="footnote">2</a></sup>。</p>

<p>世界最大のSNS、Facebookで使われている言語はなにか？　PHPだ。さらに彼らは<a href="http://2013.8-p.info/japanese/09-28-languages.html">HipHopというPHPから C++への変換するソフトを作るというかなり頭のイカれたことをやっていたり、Hackという型付のPHP方言を使用していたり</a>するらしい。Facebook、お前のPHP愛が怖い<sup id="fnref:fbd"><a href="#fn:fbd" class="footnote">3</a></sup>。</p>

<h2 id="php-4">PHPを笑うな</h2>

<p>「PHP（笑）」って言っている人がどれだけ上記のような状況を知った上で笑っているのだろうか。僕は上記の状況を鑑みるにもうPHPに「笑」なんて付けることはできない。むしろ軽率に付けててゴメン、とおもった。</p>

<p>正直自分も今まで、PHPの後ろに「笑」が付いていた。技術ブログ界隈でPHPがよくDisられたりするのを見聞きしてたから僕も知らず知らずのうちにPHPをネタにしてたんだ。でも冷静に考えるとその当時、PHPの良さなんて何も知らなかったのだ。</p>

<h2 id="section">なんか見たことある光景？</h2>

<p>この光景、デジャヴじゃね？とも思った。</p>

<p>JavaScriptだって<a href="http://bl.ocks.org/anonymous/raw/6281225/#9">AJAX技術の台頭で持て囃される以前は言語として見放されていた</a>。それがAJAX以降どうだ。どんどん便利なライブラリが誕生し、JSを使ったリッチなUIの提供は当たり前となった。そしてNodeの登場以降は全世界の優秀なエンジニアたちがそのテクノロジーの可能性にこぞって注目した。<a href="http://altjs.org/">AltJS</a>の勢いも強まっている。</p>

<p>PHPはさすがにJSまでの再評価までいかなくとも、少なくともWEB言語の第一位の座に居座り続けてもいいのではないかと思う（そして今後のPHPの進化にも期待したい）。</p>

<h2 id="section-1">最後に</h2>

<p>「PHP（笑）」の時代は終わりを告げた。ぼくはPHPは悪い言語だとは思わないし、お世辞にもすごく良い言語とも言うことはできない。ただ侮れない言語であると思うのです。</p>

<p>PHPはPerlほど真面目じゃないし、Pythonほどスマートじゃないし、Rubyほど垢抜けてないし、JavaScriptほど流行に敏感じゃないけど、そんなPHPが、僕は嫌いじゃない。</p>

<blockquote class="twitter-tweet"><p><a href="http://t.co/oYy20r6aYU">http://t.co/oYy20r6aYU</a> 「ぼくの経験上、一番PHPをバカにし、言語の重要性をうそぶく連中は、大体自分たちが提唱する言語でもロクな仕事ができないことが多い」。これはわからないけれど、自分の経験から語ると、優秀なエンジニアだなと思う人ほどPHPを評価している感じ</p>&mdash; 紀平 拓男（Takuo Kihira） (@tkihira) <a href="https://twitter.com/tkihira/statuses/384552044247257088">September 30, 2013</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<div class="footnotes">
  <ol>
    <li id="fn:phpway">
      <p>「そんなこといってもぉ、どんなコード書いたらイケてるとかわかんないしぃ」というスイーツなそこのあなた。<a href="http://www.phptherightway.com/">PHP The Right Way.</a>を今すぐ嫁。「技術書高ぃしぃ〜、重ぃしぃ〜、いゃ〜」とか「英語とか読めないしぃ〜」とかつべこべ言う前に無料だし<a href="http://ja.phptherightway.com/">日本語版</a>もあるので黙って全部読むべし。 <a href="#fnref:phpway" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:wp">
      <p>と、ここでホンネを言うと、WordPressの作りはかなり<a href="http://mask-legacy.tumblr.com/post/62315583278/in-wordpress-phpcon2013-wctokyo">アレ</a>なので個人的にはさっさと世代交代してほしいのだわ <a href="#fnref:wp" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:fbd">
      <p><a href="http://japan.internet.com/webtech/20131018/5.html">今後はD言語</a>なのか？ <a href="#fnref:fbd" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitのrevertの-m(mainline)オプションについて]]></title>
    <link href="http://blog.toshimaru.net/git-revert-mainline/"/>
    <updated>2013-10-16T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/git-revert-mainline</id>
    <content type="html"><![CDATA[<p><code>git revert</code>しているとこんなエラーに出くわしました。</p>

<pre><code>$ g revert xxxxx
error: Commit xxxxx is a merge but no -m option was given.
fatal: revert failed
</code></pre>

<p>「コミットxxxxxはマージだけど、<code>-m</code>が指定されていないよ！」ってことなんですがどういうことでしょう？</p>

<p>普通に考えてみると当然のことで、マージコミットですから<code>revert</code>といったときにどのブランチ状態に戻るかを指定しなければrevertできないよということです。つまり下記のようなヒストリーがあったときに、</p>

<pre><code>*   1459267 - Merge pull request #4 from branch3
|\
| * 344fd52 - (branch3) Add sentence
| * 2b30235 - add file
* | dbc65f4 - add revert commit2
* | f0b0a91 - add revert commit 1
</code></pre>

<p><code>&lt;1459267&gt;</code>のマージをrevertした場合に、<code>&lt;344fd52&gt;</code>か<code>&lt;dbc65f4&gt;</code>かどっちに戻すかがわかんないっちゅうことです。</p>

<p>このmainlineは1から始まり「1がマージされた側のブランチ」「2がマージする側のブランチ」になるようなので多くの場合、前者に戻したいと思うので1を指定しとけばよいということになります。結果としては下記のコマンド。</p>

<pre><code>$ g revert -m 1 1459267
</code></pre>

<p>以上でした。</p>

<h3 id="section">参考</h3>

<ul>
  <li><a href="http://d.hatena.ne.jp/koba04/20121122/1353512656">gitのmerge-commitをrevertする</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[超簡単なコマンドでローカルにHTTPサーバーを起動]]></title>
    <link href="http://blog.toshimaru.net/simple-command-web-server/"/>
    <updated>2013-10-07T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/simple-command-web-server</id>
    <content type="html"><![CDATA[<p>個人的には<a href="http://php.net/manual/ja/features.commandline.webserver.php">PHPのビルトインウェブサーバー</a>の<code>PHP -S</code>コマンドが使いたいけど、php5.4以降じゃないと使えないのが難点。Macだとデフォルトで入ってるPHPバージョンは5.3なのでこのコマンドは使えない。ということでpythonの力をお借りして簡単にHTTPサーバが起動できる。</p>

<p><code>python -m SimpleHTTPServer</code></p>

<p>これでポート8000でWebサーバが起動。ポート指定したければこう。</p>

<p><code>python -m SimpleHTTPServer 8888</code></p>

<p>スタティックなサイトをサクッと確認したいときに使えます。以上、簡単なTIPSでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【RVM】gem install時に出るSSL_connectエラー解決法]]></title>
    <link href="http://blog.toshimaru.net/fix-rvm-ssl-error/"/>
    <updated>2013-10-06T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/fix-rvm-ssl-error</id>
    <content type="html"><![CDATA[<p>RVMを使って<code>gem install</code>をするとこんなエラーが出た</p>

<pre><code>$ gem install rails
ERROR:  Could not find a valid gem 'rails' (&gt;= 0), here is why:
  　　　　Unable to download data from https://rubygems.org/ - SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed (https://s3.amazonaws.com/production.s3.rubygems.org/latest_specs.4.8.gz)
</code></pre>

<p>SSL証明書が古いためらしく下記コマンドで証明書をアップデートする。</p>

<pre><code>$ rvm osx-ssl-certs update all
</code></pre>

<p>これで解決！</p>

<h3 id="section">参考</h3>
<ul>
  <li><a href="http://railsapps.github.io/openssl-certificate-verify-failed.html">OpenSSL Errors and Rails – Certificate Verify Failed</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS3でフリップアニメーションの実装]]></title>
    <link href="http://blog.toshimaru.net/css-flip/"/>
    <updated>2013-10-05T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/css-flip</id>
    <content type="html"><![CDATA[<p>CSSでフリップアニメーション実装してみます。</p>

<p><a href="http://toshimaru.net/demo/css-flip/" class="btn btn-primary">Demo</a></p>

<p>CSS/HTMLそれぞれのソースは以下のような感じです。</p>

<script src="https://gist.github.com/toshimaru/6402ad27da9f39554518.js"></script>

<h3 id="section">参考</h3>

<ul>
  <li><a href="http://davidwalsh.name/css-flip">Create a CSS Flipping Animation</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[僕が単身海外（バンクーバー）に来て仕事を見つけるまでにやったこと]]></title>
    <link href="http://blog.toshimaru.net/how-to-find-job-in-Vancouver/"/>
    <updated>2013-09-30T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/how-to-find-job-in-Vancouver</id>
    <content type="html"><![CDATA[<p>バンクーバで就活して仕事をゲットしました。結果から言うと二ヶ月間就活して、二社からOKの返事をもらった。僕みたいに海外で仕事をしたいと思っているエンジニアのためにもその過程を書いてみようと思います。</p>

<h2 id="section">僕のスペック</h2>
<p>日本の企業でエンジニア歴3年。出自は文系なのでまともにプログラミング始めたのは会社入社後。もともとWEBに興味があったお陰かエンジニア歴3年にしては技術力はマシなほうだと思ってる。人に大々的に誇れるような物は持ってないけど、趣味でWebアプリ作ってみたりGithubにコード上げたりして、一応曲がりなりにも見せれるものはあるレベル。</p>

<p>英語に関してはTOEICは750くらい。スピーキング力は半年足らずにしては喋れるほうと言われるくらい。</p>

<h2 id="section-1">バンクーバ来てから見つけるまでのフロー</h2>

<h3 id="section-2">１． 語学学校で英語のお勉強（2ヶ月間）</h3>

<p>就活の前に英語をもっと磨かねば、ということで8weeksの短期集中スピーキングコースにまず通うことにした。<a href="http://blog.toshimaru.net/graduate-from-langschool/">この期間はひたすら英語力を伸ばすことに注力</a>、拙いながら英語で意思疎通するレベルまではいけたと思う。</p>

<p>この期間に並行してレジュメ・カバーレターの書き方、面接の受け方あたりをレクチャーしてもらった。</p>

<h3 id="section-3">２． 就職活動開始１ヶ月目（レジュメ＆カバーレター送付）</h3>

<p>最初はレジュメを書くところから。それを添削してもらいつつある程度固まったところで、各社にカバーレターの送付を開始。カバーレターは各社毎に内容を変えていたのでけっこうダルかった。</p>

<p>あと他の人に名前とか顔とか覚えてもらいやすいように<a href="http://blog.toshimaru.net/business-card-in-Vancouver/">名刺を作ったり</a>もした。</p>

<p>また技術的なインタビューに備えてこの頃(7月)からGithubにできる限り何かしら勉強用のコードを毎日コミットするようにした。</p>

<h3 id="section-4">３． 就職活動開始２ヶ月目（面接）</h3>

<p>ちょくちょく面接が入ってくる。もちろん面接では英語で話すことになるので、就活中も英語スキルをkeep&amp;improveすべく短時間で行きたいときに行ける英語のレッスンに通ったりしてた。</p>

<p>一ヶ月半やってあんまり手応えがなくて「やっぱ難しいのかなー」と思い始めた次の週くらいに２社からオファーを貰えた。諦めない心、大事。</p>

<h2 id="section-5">アプライした会社</h2>
<p>基本的にはWEB系の企業がメインです。アプライしたポジションは「PHP Developer」「Front End Developer」「Ruby Developer」が中心。前職で使っていた主な言語がPHPだったこともあり結果的にはPHPのポジションへのアプライが好感触だった。オファーをもらったところもPHPの会社。</p>

<p>通過率は10社くらいにカバーレター送って返事が来るのが5社くらいだったので大体50％。そこから対面での面接、Skype面接やらがある感じ。</p>

<h2 id="section-6">面接で聞かれること</h2>
<p>面接では志望動機みたいなことは全く聞かれなかった（ちなみにこのへんの話は大体カバーレターに盛り込んだ）。自分の場合大きくトピックは２つに分けられる。１つ目、前半の話題はレジュメをもとに前職でやってきたこととか、持ってるスキルの話。</p>

<p>２つ目の後半の話は腕試し的な意味で技術的なことが聞かれた。回答形式には口頭もあったし筆記もあったしPC上（ネット環境無）にタイプして、ってのもあった。このへんは会社によって全然違うみたい。</p>

<h2 id="section-7">面接で聞かれた技術的なこと</h2>
<p>例えばGoogleとかであればものすごい高レベルなことを聞かれるのかもしれないのだけど、自分がアプライしたところはそんな難しいことは聞いてこなかった。具体的には、</p>

<ul>
  <li>FizzBuzz書け</li>
  <li>OOPを説明して</li>
  <li>RESTfulなAPI設計とはどんなんでしょう</li>
  <li>デザインパターンのアレを書いてみて</li>
</ul>

<p>と、エンジニアであれば知っていて当然のことばかり。個人的にはもう少し難解なアルゴリズムの問題とか、答えが１つでない複雑な問題とか出ることを予想してたけどそんなことなかった。「JavaScriptでクラス書け」みたいなちょっと「？」ってなる質問もあったけどまぁなんとなく質問の意図は伝わるし、いわゆる悪問的なものはなかった。</p>

<p>余談だがフロントエンドデベロッパーの面接受けたときに、面接対策として事前に<a href="http://blog.toshimaru.net/Front-end-Developer-Interview-Questions-Japanese/">Front-end Job Interview Questionsを日本語訳したりした</a>んだが、面接官がその英語版を片手に僕に質問をして来たときは笑いをこらえるのが大変だった。</p>

<p>英語力は問題になるかと思ったけど、向こうもこちらが英語は流暢でないことはわかった上で臨んでくれているわけで、けっこう英語のスピードや表現に気を遣ってくれているので、そこまで英語は致命的な問題にはならなかった。そもそも英語はネイティブには負けるのは当たり前なので、コードで勝負すべきだと思う。</p>

<h2 id="section-8">使ったサイト</h2>

<h3 id="indeedcahttpwwwindeedca"><a href="http://www.indeed.ca/">Indeed.ca</a></h3>
<p>一番お世話になったサイト。色んなサイトから求人の情報を集約してくれているのでここで気になる求人チェックしておけば安心かな、という感じ。検索の使い勝手もなかなかいい。会員登録してここにレジュメを掲載しておくと良いと思う。</p>

<h3 id="craigslisthttpvancouverencraigslistca"><a href="http://vancouver.en.craigslist.ca/">craigslist</a></h3>
<p>無料の掲示板ということで求人の質はかなりバラツキがあり。穴場の求人を見つけるのにザッと眺めるくらいが丁度いいかと思う。</p>

<p>（実は自分はここで就活中にWEB開発のバイトを見つけて小銭を稼いでたりしてた。）</p>

<h3 id="linkedinhttpwwwlinkedincom"><a href="http://www.linkedin.com/">linkedin</a></h3>
<p>ここで自分のスキル、経験を掲載してるとリクルータとかからメールが来たりする。自分はこっちに来てからアカウント作ったのでlinkedin上のコネクションがあんま無かったのは見栄え的な意味でマイナスだったかもしれない。</p>

<h3 id="monstarcahttpwwwmonsterca"><a href="http://www.monster.ca/">Monstar.ca</a></h3>
<p>正直登録しただけで、あんま使わなかった。Indeedで十分かな。</p>

<h3 id="meetupcomhttpwwwmeetupcom"><a href="http://www.meetup.com/">meetup.com</a></h3>
<p>現地のエンジニアが集まるようないわゆる勉強会を探すならココ。ミートアップに参加したことで、バンクーバ在住、Hootsuite勤務の日本人エンジニアに会うことができたりした。勉強会を主催している会社にアプライしてみたりするのもいいと思う。</p>

<h2 id="section-9">海外就活にあたり参考にしたサイト・情報など</h2>

<h3 id="httptaichinocomdaily-lifedaily-life-in-america4187"><a href="http://taichino.com/daily-life/daily-life-in-america/4187">[アメリカ日記12] ニューヨークで就職活動した話</a></h3>

<p>Indeed中心で仕事を探し始めたのはこの記事がきっかけでした。この記事のお陰で北米の採用がだいぶイメージすることができた。ありがたや。</p>

<h3 id="web5httpwebyaopdsgncomabroadwearewebyainvancouver"><a href="http://webya.opdsgn.com/abroad/wearewebyainvancouver/">日本で全く冴えなかったWeb屋が海外就職する為に必要だった絶対の5カ条！</a></h3>

<p><a href="http://webya.opdsgn.com/">バンクーバのWeb屋</a>で有名なセナさんのブログの記事。</p>

<ul>
  <li>「海外で成功する秘訣はズバリ、図太さ」</li>
  <li>「ポートフォリオの数は1つでも多く」</li>
  <li>「日本人の仕事のきめ細やかさは最大の武器」</li>
</ul>

<p>セナさんとは現地で直接コンタクトを取り直接アドバイスをいただくことができた。感謝！</p>

<h3 id="ios-httpdhatenanejpshu223201305201369014230"><a href="http://d.hatena.ne.jp/shu223/20130520/1369014230">アメリカでのiOSアプリ開発の仕事にありつけました </a></h3>

<p><a href="http://d.hatena.ne.jp/shu223/20130306/1362551633">海外就労のためにスペインに滞在</a>したこともある<a href="https://twitter.com/shu223">@shu223</a>さん。そのアグレッシブな姿勢はぜひ見習わなければ、と強く思いました。</p>

<h2 id="section-10">その他感じたことなど</h2>
<ul>
  <li>日本と違い「コンピュータサイエンス」の学位はかなり重宝される印象。その点で自分はレジュメでの選考時に割と不利に働いたかも？</li>
  <li>リクルータは結構あてにならない。適当にテンプレメールをエンジニアに送りまくってる感じのリクルータも多い印象。もちろん中にはちゃんと面倒見てくれる方もいるが。
*　本文に書かなかったが、面接の最後に「んでいくらほしーの？」聞かれることが多かった。自分はその質問の答えは持っていなかったので、回答がしどろもどろになってしまった。この答えを用意しておくといいと思う。</li>
</ul>

<h2 id="section-11">ここがポイント！</h2>
<p>こちらで働いている日本人エンジニアの方が「英語を喋ったら負け、コードで示せ」と仰ってましたが、その通りだと思います。英語でネイティブに負けるのは当然なんだから、何で勝負するかっていったらコードしかないんですよ。どうやって見せるか？　今ならHerokuでWebアプリケーションも簡単に公開できるし、コードもGithubで公開できるでしょう。んでこれ見よがしにレジュメの先頭の連絡先の下にでもgithubのアカウントとか載せときゃいいんじゃないですかね。</p>

<p>とにかくポートフォリオなりgithubアカウントなりで、自分のスキルを証明できるものを用意しておくこと、それが重要。あとはスキルテストのときに存分に力を見せつけてやるのだ！　日本人、普通に世界で闘えますよ。</p>

<h2 id="section-12">まとめ</h2>
<p>この記事をきっかけに一人でも多くのエンジニアが海外に出るきっかけになったら嬉しいことこの上ないなーって思ってます。今ならワーホリとって海外に行くのは全然難しいことじゃない。腕に自信があるエンジニアで、世界に出たいとお思いの方は是非日本から出てみるといいと思う！　以上！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[バンクーバで個人用の名刺を作った]]></title>
    <link href="http://blog.toshimaru.net/business-card-in-Vancouver/"/>
    <updated>2013-09-29T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/business-card-in-Vancouver</id>
    <content type="html"><![CDATA[<p>ちょっと前の話になりますがバンクーバに来て名前を覚えてもらうために作った個人用の名刺。自分でWEBからデザインすることが出来たので自分でデザインした。</p>

<h2 id="section">コンセプト</h2>
<p>基本シンプルにした。表は名前と連絡先。裏は黒基調に漢字版の僕の名前。なぜ漢字の名前を入れたかというと、以前アメリカ滞在中に漢字でクレジットカードのサインしたときに店員がえらくそれを気に入っていたので「漢字で書いとけばCoolだと思われてより覚えてもらえるんじゃないか！」というのが理由。特に深い意味はない。</p>

<p>あと紙質は黒が映えるようにちょっと光沢のある感じのやつを選んだ。</p>

<h2 id="section-1">作ったところ</h2>
<p><a href="http://www.jukeboxprint.com/index.php">Juke Box Print</a>というところで作った。（ここはバンクーバーのWEB屋のセナさんから教えていただいた）</p>

<h2 id="section-2">作ってみての感想とか反省とか</h2>

<h3 id="section-3">縮尺は100%で確認する</h3>
<p>縮尺をちゃんと100%で確認してなかったので、仕上がりの文字サイズが自分の思ったよりも小さいものになってしまっていた。</p>

<h3 id="section-4">印刷方法はオフセット印刷にすべき</h3>
<p>ケチってデジタル印刷を選んだけど、小さい文字が少し霞んでしまっていたのでやっぱケチらずオフセット印刷でよかったな、と。</p>

<h3 id="pt">厚みは14ptくらいはほしいところ</h3>
<p>名刺が薄っぺらいと安っぽい印象を与えてしまうので、個人的に名刺の厚さは14PTくらいは欲しい。</p>

<h3 id="section-5">紙質とかに拘りたいなら実物見なきゃわからん。</h3>
<p>今回の印刷屋さんはリアルショップがあったので、リアルショップまで足を運んで紙質や仕上がり具合などを実際に確認した。こればっかりはオンラインでは確認できないのでしっかり自分の納得のいくものを作りたいのであれば、ちゃんと実物を確認すべき。</p>

<h3 id="section-6">日本より価格高い</h3>
<p>学生時代に個人用の名刺は作ったことあるんだけど、日本で名刺作るより全体的に相場が高い気がした（今回の場合いろいろといい紙を選んだのもあるけど100枚60カナダドル、そんなもん？）。</p>

<h3 id="section-7">あんまこっちの人って名刺持たないんだね！</h3>
<p>名刺作った目的はミートアップとか参加したときに他のエンジニアさんと名刺交換できたらいいなーっていう感じだったんだけど、こっちのエンジニアの人ってあんま名刺持たない。CEO/CTOクラスの人、もしくはセールスの人とかじゃないとそんなに持ち歩いていないみたい。</p>

<p>まぁそれでも一方的に「これあげる！」って感じで配ったから役には立ったわけですが。（笑）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[仕事をゲットした in バンクーバー]]></title>
    <link href="http://blog.toshimaru.net/get-a-job-in-vancouver/"/>
    <updated>2013-09-16T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/get-a-job-in-vancouver</id>
    <content type="html"><![CDATA[<p>バンクーバーにて仕事（WEBエンジニア）をゲットした。とりあえずは目標が達成できて一安心。仕事を見つけるまでにやったことなどは後日ブログに上げたいと思います。</p>

<p>報告まで。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zshでRVMを使うと「RVM is not a function,...」]]></title>
    <link href="http://blog.toshimaru.net/zsh-rvm/"/>
    <updated>2013-08-27T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/zsh-rvm</id>
    <content type="html"><![CDATA[<p>zshでRVM動かそうとして下記のエラーで止まったので対処法をメモ。</p>

<pre><code>➜  ~  rvm use 2.0.0
RVM is not a function, selecting rubies with 'rvm use ...' will not work.

You need to change your terminal emulator preferences to allow login shell.
Sometimes it is required to use `/bin/bash --login` as the command.
Please visit https://rvm.io/integration/gnome-terminal/ for a example.
</code></pre>

<p>下記スクリプトを読み込む一行を .zshrc に追加してやればok.</p>

<pre><code>source ~/.rvm/scripts/rvm
</code></pre>

<p>もう一度動かしてみる。</p>

<pre><code>➜  ~  rvm use 2.0
Using /Users/user/.rvm/gems/ruby-2.0.0-p247
</code></pre>

<p>うむ。OK.</p>

<h2 id="section">参考</h2>
<p><a href="http://stackoverflow.com/questions/9336596/rvm-installation-not-working-rvm-is-not-a-function">rvm installation not working: “RVM is not a function”</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[マイナーJS・CSSライブラリのCDNはcdnjs.comがいい感じ]]></title>
    <link href="http://blog.toshimaru.net/cdn-js/"/>
    <updated>2013-08-17T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/cdn-js</id>
    <content type="html"><![CDATA[<p>Web制作において外部でホストされているライブラリを読み込むことは多いですね。こんな感じで。</p>

<pre><code>&lt;script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"&gt;&lt;/script&gt;
</code></pre>

<p>CDNは安心と信頼のGoogleのCDNを使いたいところですが、メジャーなライブラリしかホストされていません。例えばBackbone.jsとかはホストされていない。</p>

<p>そこで使うべきは <a href="http://cdnjs.com/">cdnjs.com</a>。</p>

<p>マイナーなものでも名前が通ってるライブラリであれば本CDNに登録されている印象です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac購入時に僕がインストールしたアプリや設定を公開するよ]]></title>
    <link href="http://blog.toshimaru.net/mac-setup/"/>
    <updated>2013-08-16T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/mac-setup</id>
    <content type="html"><![CDATA[<p>MacのSSDが逝ってしまいデータが全て吹っ飛びました。その際にMacを再セットアップしたので、その時インストールしたアプリや設定を公開してみたいと思います。</p>

<h3 id="section">ブラウザ</h3>

<ul>
  <li><a href="http://www.google.com/chrome/">Chrome</a></li>
  <li><a href="http://www.mozilla.org/en-US/firefox/new/">Firefox</a></li>
  <li><a href="http://www.opera.com/computer/mac">Opera</a></li>
</ul>

<p>Chromeがメインブラウザなのでインストール。Firefoxもたまに使うことがあるので一応インストールしておく。</p>

<p>Operaはオプションでどうぞ。<a href="http://www.forest.impress.co.jp/docs/news/20130702_606154.html">Operaは15でレンダリングエンジンがWebkitベースになる</a>ので要らない気もしますが、元Operaユーザとしてインストール。</p>

<h3 id="section-1">コミュニケーション</h3>

<ul>
  <li><a href="https://itunes.apple.com/us/app/twitter/id409789998">Twitterクライアント</a></li>
  <li><a href="https://itunes.apple.com/us/app/airmail/id573171375">Airmail</a></li>
  <li><a href="http://www.skype.com/ja/download-skype/skype-for-computer/">Skype</a></li>
</ul>

<p>Skypeの代わりにGoogle Hangoutsとか使ってもいいかも。</p>

<h3 id="section-2">エディタ</h3>

<ul>
  <li><a href="http://www.sublimetext.com/2">Sublime Text 2</a></li>
  <li><a href="https://code.google.com/p/macvim-kaoriya/">MacVim</a></li>
</ul>

<p>メインエディタであるSublimeをインストール。</p>

<h3 id="section-3">クラウドストレージ</h3>

<ul>
  <li><a href="https://evernote.com/">Evernote</a></li>
  <li><a href="https://www.dropbox.com/">Dropbox</a></li>
  <li><a href="http://www.google.com/drive/about.html">Google Drive</a></li>
</ul>

<p>この辺がメジャーですかね。</p>

<h3 id="development">開発/Development</h3>

<ul>
  <li><a href="https://itunes.apple.com/us/app/xcode/id497799835">Xcode</a></li>
  <li><a href="http://mac.github.com/">Github</a></li>
  <li><a href="http://www.sourcetreeapp.com/">Source Tree</a></li>
</ul>

<p>Githubは基本的にコマンド通して使ってますがGUIバージョンもインストール。Source Treeもgit用に。</p>

<h3 id="section-4">フォント</h3>

<ul>
  <li><a href="http://levien.com/type/myfonts/inconsolata.html">Inconsolata</a></li>
  <li><a href="https://github.com/yascentur/Ricty">Ricty</a></li>
  <li><a href="http://dejavu-fonts.org/wiki/Main_Page">DEJA VU SANS MONO</a></li>
</ul>

<p>上２つは有名ですが、最近のお気にはDEJA VU SANS MONO。</p>

<h3 id="section-5">ターミナル設定</h3>

<ul>
  <li><a href="http://brew.sh/">homebrew</a></li>
  <li>zsh + <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a></li>
  <li><a href="https://rvm.io/">RVM</a></li>
</ul>

<p>homebrewは基本ですね。zshもbrewでインストール。RVMも入れときましょう。</p>

<h3 id="section-6">その他</h3>
<ul>
  <li><a href="https://itunes.apple.com/us/app/pocket/id568494494">Pocket</a></li>
  <li><a href="https://itunes.apple.com/jp/app/kindle/id405399194">Kindle</a></li>
  <li><a href="http://www.google.co.jp/ime/">Google日本語入力</a></li>
  <li><a href="http://office.microsoft.com/">Microsoft Office</a></li>
</ul>

<p>この辺は各個人使っているサービスに応じて。MS Officeはサブスクリプション形式のoffice365がいいでしょう。</p>

<h3 id="section-7">導入見送ったやつ</h3>
<ul>
  <li><a href="http://boxen.github.com/">boxen</a> を使った環境構築</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ChromeのDevToolでlocalStrageのデータをイジイジする]]></title>
    <link href="http://blog.toshimaru.net/chrome-dev-tool-localstrage/"/>
    <updated>2013-08-15T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/chrome-dev-tool-localstrage</id>
    <content type="html"><![CDATA[<p>ChromeのDevToolでローカルストレージのデータをイジったことなかったけど、簡単にできたのでメモ。</p>

<p>例えばTODOデータをローカルストレージに保存している<a href="http://todomvc.com/architecture-examples/backbone/">TodoMVC</a>で上記のようにデータを作ってみる。</p>

<p>こんな感じで閲覧できる。</p>

<p><img src="/images/posts/localstrage/ls.png" alt="chrome-localstrage" /></p>

<p>ローカルストレージのデータを<code>TODO1</code>を<code>TODO123</code>に変更してみる。</p>

<p><img src="/images/posts/localstrage/ls2.png" alt="chrome-localstrage" /></p>

<p>ページをリロードしてみる。ローカルストレージからデータの初期化が行われるので、<code>TODO123</code>になっていることが確認できます。</p>

<p><img src="/images/posts/localstrage/ls3.png" alt="chrome-localstrage" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「フロントエンドデベロッパー面接時の質問事項」日本語訳しました]]></title>
    <link href="http://blog.toshimaru.net/Front-end-Developer-Interview-Questions-Japanese/"/>
    <updated>2013-08-06T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/Front-end-Developer-Interview-Questions-Japanese</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/darcyclarke/Front-end-Developer-Interview-Questions">Front-end Job Interview Questions(Github)</a>を日本語訳しました。</p>

<p><a href="https://github.com/darcyclarke/Front-end-Developer-Interview-Questions/tree/master/Japanese">日本語訳はこちら</a></p>

<p>質問項目としては下記のようになります。</p>

<ul>
  <li>一般的な質問事項</li>
  <li>HTMLに関する質問事項</li>
  <li>JSに関する質問事項</li>
  <li>jQueryに関する質問事項</li>
  <li>CSSに関する質問事項</li>
</ul>

<p>フロントエンドデベロッパーの方は自分の実力試し、あるいは知識の復習として回答を考えてみてはいかがでしょうか？  自分もやってみましたが案外知らないこと、うろ覚えになっていることが多かったです。 </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[underscore.jsのテンプレートのデフォルトデリミタを変更する]]></title>
    <link href="http://blog.toshimaru.net/underscore-template-in-erb/"/>
    <updated>2013-08-05T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/underscore-template-in-erb</id>
    <content type="html"><![CDATA[<p>erb内でunderscore.jsのテンプレートを使おうとするとerbのデリミタと競合してしまってエラーになってしまう。そういう時は下記のようにunderscoreテンプレートのデリミタを変更してやればよい。</p>

<pre><code>_.templateSettings = {
  interpolate : /\{\{(.+?)\}\}/g,
  escape: /\{\{-(.+?)\}\}/g
};
</code></pre>

<p>これで<code>{{ hoge }}</code>というmustacheライクなデリミタに変更できる。</p>

<h2 id="section">参考</h2>
<ul>
  <li><a href="http://null.ly/post/20000241563/underscore-js-erb">Underscore.js のテンプレートを ERB の中で使う</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MACアドレスを変更するコマンド]]></title>
    <link href="http://blog.toshimaru.net/change-mac-address/"/>
    <updated>2013-08-02T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/change-mac-address</id>
    <content type="html"><![CDATA[<p>MACアドレスを変更するコマンドが思ったより簡単に実行できたのでご紹介。(MAC OS X 10.8)</p>

<pre><code>sudo ifconfig en0 ether XX:XX:XX:XX:XX:XX
</code></pre>

<p>MACアドレスを適当に生成したければこちらをどうぞ。</p>

<pre><code>openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/.$//'
</code></pre>

<h2 id="section">参考</h2>
<ul>
  <li><a href="http://whatismyipaddress.com/change-mac">How do I change my MAC address?</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
