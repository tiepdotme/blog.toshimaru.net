<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.6">Jekyll</generator><link href="http://blog.toshimaru.net/atom.xml" rel="self" type="application/atom+xml" /><link href="http://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2016-07-24T03:21:33+09:00</updated><id>http://blog.toshimaru.net/</id><title>Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title>Ruby2.3 で導入された frozen_string_literal オプションを試す</title><link href="http://blog.toshimaru.net/ruby-immutable-string/" rel="alternate" type="text/html" title="Ruby2.3 で導入された frozen_string_literal オプションを試す" /><published>2016-07-24T00:00:00+09:00</published><updated>2016-07-24T00:00:00+09:00</updated><id>http://blog.toshimaru.net/ruby-immutable-string</id><content type="html" xml:base="http://blog.toshimaru.net/ruby-immutable-string/">&lt;h2 id=&quot;immutable-string-in-ruby3&quot;&gt;Immutable String in Ruby3&lt;/h2&gt;

&lt;p&gt;Ruby3 では文字列がデフォルトで immutable になるという大きな変更が予定されている。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ruby 3.0 では文字列リテラルをデフォルトで immutable （破壊的変更不可） にする、という方針が『決定』しました&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;via. &lt;a href=&quot;http://d.hatena.ne.jp/ku-ma-me/20151004/p1&quot;&gt;[Ruby] Ruby 3.0 の特大の非互換について - まめめも&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この変更の背景としては上リンクに書いてある通り、Rubyの最適化のために文字列のいたるところ&lt;code class=&quot;highlighter-rouge&quot;&gt;.freeze&lt;/code&gt;を付けてプルリクエストを投げる輩が大挙してきたことだ。&lt;/p&gt;

&lt;h2 id=&quot;immutable-string-in-ruby23&quot;&gt;Immutable String in Ruby2.3+&lt;/h2&gt;

&lt;p&gt;Ruby2.3 では既にこの Immutable String を有効にする機能が入っている。やり方はRubyファイルの行頭に次のように書けばよい。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# frozen_string_literal: true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;frozenstringliteral-&quot;&gt;frozen_string_literal の機能を試す&lt;/h2&gt;

&lt;p&gt;実際に試してみよう。下記の２ファイルを用意して実行する。&lt;/p&gt;

&lt;h3 id=&quot;stringwithfrozenoptionrb&quot;&gt;string_with_frozen_option.rb&lt;/h3&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# frozen_string_literal: true&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section&quot;&gt;結果&lt;/h3&gt;

&lt;p&gt;全て同じ object_id が返ってくる。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ruby string_with_frozen_option.rb
70212460463280
70212460463280
70212460463280
70212460463280
70212460463280
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;stringwithoutfrozenoptionrb&quot;&gt;string_without_frozen_option.rb&lt;/h3&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-1&quot;&gt;結果&lt;/h3&gt;

&lt;p&gt;全て違う object_id が返ってくる。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ruby string_without_frozen_option.rb
70277165754460
70277165754200
70277165754080
70277165754000
70277165753940
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;frozenstringliteral--1&quot;&gt;frozen_string_literal はファイル毎に設定される&lt;/h2&gt;

&lt;p&gt;たとえば&lt;code class=&quot;highlighter-rouge&quot;&gt;frozen_string_literal&lt;/code&gt;の設定が入ったものと入っていないファイルが実行された場合はどうなるだろうか。Railsで試してみる。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;before_action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:not_frozen&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;not_frozen&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# frozen_string_literal: true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WelcomeController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これで&lt;code class=&quot;highlighter-rouge&quot;&gt;WelcomeController#index&lt;/code&gt;が実行された場合、ログは下記のようになる。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;70346238891860
70346238891080
70346238890280
70346238889340
70346238888420
...
70346229343820
70346229343820
70346229343820
70346229343820
70346229343820
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;つまり&lt;code class=&quot;highlighter-rouge&quot;&gt;WelcomeController&lt;/code&gt;で定義された文字列だけが frozen されていることがわかる。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Ruby3 の Immutable String に先駆けて、Ruby2.3 以上が前提の実行環境では積極的に&lt;code class=&quot;highlighter-rouge&quot;&gt;frozen_string_literal: true&lt;/code&gt;の設定をしていくべき。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://wyeworks.com/blog/2015/12/1/immutable-strings-in-ruby-2-dot-3&quot;&gt;Immutable strings in Ruby 2.3&lt;/a&gt;&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="ruby" /><summary>Immutable String in Ruby3</summary></entry><entry><title>Roppongi.rbで「Rails高速化戦略」を発表しました</title><link href="http://blog.toshimaru.net/roppongirb-speeding-up-rails/" rel="alternate" type="text/html" title="Roppongi.rbで「Rails高速化戦略」を発表しました" /><published>2016-07-19T00:00:00+09:00</published><updated>2016-07-19T00:00:00+09:00</updated><id>http://blog.toshimaru.net/roppongirb-speeding-up-rails</id><content type="html" xml:base="http://blog.toshimaru.net/roppongirb-speeding-up-rails/">&lt;p&gt;自分がオーガナイザーを務めた &lt;a href=&quot;http://roppongirb.connpass.com/event/33502/&quot;&gt;Roppongi.rb #1&lt;/a&gt;で「Rails高速化戦略」という題で発表してきました。スライドは下記になります。&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;37881a2ec2214ef39d85820f3327bbc2&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;発表内容をこちらのブログでも文章形式でざっとまとめてみたいと思います。&lt;/p&gt;

&lt;h2 id=&quot;rails-ruby-&quot;&gt;Rails (Ruby) 遅いよね&lt;/h2&gt;

&lt;p&gt;RailsないしRubyはプログラミング言語の中では速くはない言語であることは言うまでもないと思う&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。 実際に「Rails/Ruby遅いよねって今まで思ったことある方どれくらいいますか？」と会場でも聞いてみたところ、予想では半数以上手を挙げてくれると思ったのだけど、実際は30人中3~4人くらい。あまりにも意外な結果だったので自分なりに理由を分析してみると２つあるかなと思う。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;パフォーマンスを求められないから&lt;/h3&gt;

&lt;p&gt;例えば社内の数人が使うような管理画面の場合。この場合、パフォーマンスよりも機能性（ちゃんと検索・閲覧できるかとかCRUD操作ができるかとか）などが優先されると思う。数人だけが使うのでアクセススパイクもないし、パフォーマンスが問題にもなりにくい。&lt;/p&gt;

&lt;h3 id=&quot;rails&quot;&gt;Railsをフレームワークとして使っていないから&lt;/h3&gt;

&lt;p&gt;すごくパフォーマンスを求められるWebアプリの場合、それが事前にわかっているならまずは言語選択レベルでRailsを選択しないかもしれない。今ならGoとかElixirとかScalaとか代替言語もあるのでそちらを選択した場合はRailsは使わないことになるのでRailsの遅さで困ることもない。&lt;/p&gt;

&lt;h2 id=&quot;rails-1&quot;&gt;それでもやっぱりRailsだ…!&lt;/h2&gt;

&lt;p&gt;それでもやっぱりRuby好きのRubyっ子であれば、Rubyは使いたい… ということで、Railsの高速化をする上での戦略を紹介。&lt;/p&gt;

&lt;h2 id=&quot;ruby-version-up&quot;&gt;Ruby Version Up&lt;/h2&gt;

&lt;p&gt;まずはRubyバージョンアップ。Rubyバージョンの歴史はこんな感じになっている。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2013.2: Ruby 2.0&lt;/li&gt;
  &lt;li&gt;2013.12: Ruby 2.1&lt;/li&gt;
  &lt;li&gt;2014.12: Ruby 2.2&lt;/li&gt;
  &lt;li&gt;2015.12: Ruby 2.3&lt;/li&gt;
  &lt;li&gt;20xx: Ruby 3.0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;去年matzの口からRuby3のコンセプトが発表された。その驚くべき内容が &lt;strong&gt;Ruby 3 x 3&lt;/strong&gt; 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/ruby3x3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=E9bO1uqs4Oc&quot;&gt;Ruby3 challenges - RubyKaigi 2015 Keynote - YouTube&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;rails-2&quot;&gt;とあるRailsアプリの場合&lt;/h2&gt;

&lt;p&gt;会社で取り組んでいるプロダクトのRubyのバージョンは基本的に最新バージョンを使うようにしているものの、中にはレガシーな環境もある。下記はあるプロダクトでRuby2.0 から Ruby2.1に上げた例。結果としては、Ruby 2.0 =&amp;gt; 2.1 Ruby Version Up だけで レスポンス速度が約2倍向上した。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/ruby2_0-to-2_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;このようにRubyバージョンアップによりアプリケーションコード変更ゼロでも&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;、速度改善が期待できる。古いRubyお使いの方は今すぐRubyのバージョンアップ！&lt;/p&gt;

&lt;h2 id=&quot;what-about-rails&quot;&gt;What about Rails?&lt;/h2&gt;

&lt;p&gt;じゃあRailsはどうだろうか。下記はマツダさんのmatzのRuby 3x3 を受けての発表。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/rails3x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/a_matsuda/3x-rails&quot;&gt;3x Rails // Speaker Deck&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt;が付いていることで分かる通り3倍速くなるという発表というより、まだまだRailsは速くするために工夫の余地があるよ、というような発表。&lt;/p&gt;

&lt;p&gt;下記は同じマツダさんが発表された&lt;a href=&quot;http://togetter.com/li/955629&quot;&gt;Rails Upgrade Casual Talks&lt;/a&gt;での資料です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/rails-verup1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/a_matsuda/rails-upgrade-casual-talks&quot;&gt;Rails Upgrade Casual Talks // Speaker Deck&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;たしかに色んな機能が追加されている中、Railsが劇的に速くなることは考えにくい。解決策は…?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/rails-verup2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;歯を食いしばってRails/Rubyをバージョンアップ&lt;/strong&gt;:innocent:&lt;/p&gt;

&lt;p&gt;Rails 遅くなってもRuby は速くなっているので、どちらも最新版をしっかり追っかけていけば、遅くなることなくRailsの機能拡張も追っかけていけるのでOK.&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;ボトルネックを潰す&lt;/h2&gt;

&lt;p&gt;Railsアプリをどうボトルネックを発見し潰していくか？&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;推測するな、計測せよ　&lt;/h3&gt;

&lt;p&gt;ボトルネックは計測して数値で示すもの。ボトルネックを発見するためのサービス・ツールをいくつか紹介。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://newrelic.com/&quot;&gt;New Relic&lt;/a&gt;: 無料で使えて導入もラクでよい&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/MiniProfiler/rack-mini-profiler&quot;&gt;rack-mini-profiler&lt;/a&gt;: 開発環境導入する。クエリやpartialレンダー時間を表示。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kainosnoema/rack-lineprof&quot;&gt;rack-lineprof&lt;/a&gt;: Rubyのコードを行単位で計測したい場合に有効&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ツールを使った結果ボトルネックになりやすい箇所というとRDBまわり。それを解決するgem・機能を紹介。&lt;/p&gt;

&lt;h2 id=&quot;activerecord-optimization&quot;&gt;ActiveRecord Optimization&lt;/h2&gt;

&lt;h3 id=&quot;magright-&quot;&gt;:mag_right: 問題発見型&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/flyerhzm/bullet&quot;&gt;bullet&lt;/a&gt;: Kill &lt;code class=&quot;highlighter-rouge&quot;&gt;N+1&lt;/code&gt; issue!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/joker1007/activerecord-cause&quot;&gt;activerecord-cause&lt;/a&gt;: Logs where ActiveRecord actually loads record&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;key-db&quot;&gt;:key: DBスキーマ最適化型&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/pboling/flag_shih_tzu&quot;&gt;flag_shih_tzu&lt;/a&gt;: Bit fields for ActiveRecord&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/association_basics.html#counter-cache&quot;&gt;counter-cache&lt;/a&gt;: cacheing count query result
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/magnusvk/counter_culture&quot;&gt;counter_culture&lt;/a&gt;: Better counter-cache&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;zap-&quot;&gt;:zap: クエリ効率化型&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/k0kubun/activerecord-precount&quot;&gt;activerecord-precount&lt;/a&gt;: Yet another counter_cache alternative.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zdennis/activerecord-import&quot;&gt;activerecord-import&lt;/a&gt;: bulk inserting data&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;activerecord&quot;&gt;クエリを意識してActiveRecord使いこなそう&lt;/h2&gt;

&lt;p&gt;ActiveRecordもといORマッパの良さってDBを意識しなくて済むところ。でも高速化を行う上でクエリは避けられない壁。DBを意識せずコードを書いている最近のワカモノはもっとクエリを意識しよう！ &lt;del&gt;老害っぽい発言だ&lt;/del&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;パーシャルレンダリングを減らす&lt;/h2&gt;

&lt;h3 id=&quot;n1-partial-rendering&quot;&gt;N+1 partial rendering&lt;/h3&gt;

&lt;p&gt;データN個分&lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt;処理が走ってしまうのを、個人的に &lt;strong&gt;N+1 rendering&lt;/strong&gt; と呼んでいる。データの数N+親のビュー1回で &lt;code class=&quot;highlighter-rouge&quot;&gt;N+1&lt;/code&gt;. 例えばこんなコード。&lt;/p&gt;

&lt;div class=&quot;language-erb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- views/items/index --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-erb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- views/items/_item --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Show&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Edit&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edit_item_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Destroy&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;method: :delete&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;この場合のログはこうなる。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Processing by ItemsController#index as HTML
  Rendering items/index.html.erb within layouts/application
  Item Load (0.3ms)  SELECT &quot;items&quot;.* FROM &quot;items&quot;
  Rendered items/_item.html.erb (0.5ms)
  Rendered items/_item.html.erb (0.3ms)
  ...snip...
  Rendered items/_item.html.erb (0.5ms)
  Rendered items/_item.html.erb (0.3ms)
  Rendered items/index.html.erb within layouts/application (57.7ms)
Completed 200 OK in 80ms (Views: 77.1ms | ActiveRecord: 0.3ms)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Viewで80msくらいかかっている。&lt;/p&gt;

&lt;h3 id=&quot;collection-rendering&quot;&gt;Collection rendering&lt;/h3&gt;

&lt;p&gt;上記の場合、Collectionレンダーの機能を使えばもっと効率的にrenderできる。&lt;/p&gt;

&lt;div class=&quot;language-erb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- views/items/index --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@items&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-erb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- views/items/_item --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Show&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Edit&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edit_item_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Destroy&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;method: :delete&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;この場合のログはこうなる。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Processing by ItemsController#index as HTML
  Rendering items/index.html.erb within layouts/application
  Item Load (0.4ms)  SELECT &quot;items&quot;.* FROM &quot;items&quot;
  Rendered collection of items/_item.html.erb [29 times] (6.9ms)
  Rendered items/index.html.erb within layouts/application (10.3ms)
Completed 200 OK in 29ms (Views: 26.4ms | ActiveRecord: 0.4ms)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ビューで25msくらい。だいたい上記の例と比べると1/3くらいになっている。&lt;/p&gt;

&lt;h2 id=&quot;rails-caching&quot;&gt;Rails caching&lt;/h2&gt;

&lt;p&gt;RailsのCacheの仕組みとして&lt;a href=&quot;http://guides.rubyonrails.org/caching_with_rails.html&quot;&gt;公式ガイド&lt;/a&gt;で3つ紹介されているのだが、ご存知だろうか。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Fragment Cache&lt;/strong&gt;: View fragment caching.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Action Cache&lt;/strong&gt;: Controller’s action caching (removed in Rails4).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Page Cache&lt;/strong&gt;: Static page caching (removed in Rails4).&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;fragment-cache&quot;&gt;1. Fragment Cache&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/cache-fragment.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;グローバルナビ・サイドバーなどの多く呼ばれる共通コンテンツに有効&lt;/li&gt;
  &lt;li&gt;重い処理が走るビューの一部分であればあるほど高速化が期待できる&lt;/li&gt;
  &lt;li&gt;Advanced Usage: &lt;strong&gt;Russian Doll Caching&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;action-cache&quot;&gt;2. Action Cache&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/action-cache.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rails4で削除されてgem化: &lt;a href=&quot;https://github.com/rails/actionpack-action_caching&quot;&gt;actionpack-action_caching&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Viewの手前のControllerのAction自体の処理が重い場合に有効&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cache_path&lt;/code&gt; でキャッシュキーをカスタマイズ可能
    &lt;ul&gt;
      &lt;li&gt;モデルのupdated_at を組み込んだり、PC/スマフォでキャッシュビュー出し分け可能&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;page-cache&quot;&gt;3. Page Cache&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Rails4で削除されてgem化: &lt;a href=&quot;https://github.com/rails/actionpack-page_caching&quot;&gt;actionpack-page_caching&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;キャッシュ対象となるControllerのActionの生成するHTMLをまるっと静的ファイルに吐き出す&lt;/li&gt;
  &lt;li&gt;その静的ファイルをNGINXなどのWeb Server/Reverse Proxyでハンドリング&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rails-3&quot;&gt;Railsのキャッシュ戦略&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Railsデフォルトの FragmentCache を使ってビューのレンダリングを高速化&lt;/li&gt;
  &lt;li&gt;それでもダメな場合や Controller 自体の処理が重い場合なら、ActionCache/PageCache を検討&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;warning-&quot;&gt;:warning: 注意&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;キャッシュしても根っこの問題は消えない&lt;/li&gt;
  &lt;li&gt;キャッシュのライフサイクル管理&lt;/li&gt;
  &lt;li&gt;用法用量を守って正しくお使いください&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;キャッシュしても根っこの問題はバイパスされるだけでそれ自体が解決されるわけではないので、本質的にはその根っこの問題を潰すほうがキャッシュより優先すべき。キャッシュによって&lt;strong&gt;臭いものには蓋&lt;/strong&gt;をしていないか。キャッシュによって大きなボトルネックが隠蔽されていないか。本質的な問題を潰した上でなお高速化したい場合にキャッシュを利用するのが筋の良いキャッシュ戦略だと思う。&lt;/p&gt;

&lt;p&gt;またキャッシュを行うことでそのライフサイクル管理も必要になってくることはアタマに入れておきたい。どういう場合にキャッシュがexpireすべきなのか(あるいはexpireすべきでないのか)、updateすべきなのか、削除すべきなのか。この辺もきちんと考えた上でキャッシュに取り組みたい。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;静的ファイル配信&lt;/h2&gt;

&lt;h3 id=&quot;nginx&quot;&gt;NGINX&lt;/h3&gt;

&lt;p&gt;プロダクション運用においては実際Railsが静的ファイルまでサーブすることはなくて、下記のようにNGINXに静的ファイルをサーブさせることが多い。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/nginx.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;cdn&quot;&gt;CDN&lt;/h3&gt;

&lt;p&gt;さらに言うと、Railsの吐く assets:precompile の成果物は、CDNに乗せちゃって配信を最適化してやるともっとよい。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/nginx-cdn.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;http2&quot;&gt;レイテンシに負けないプロトコル = HTTP/2&lt;/h2&gt;

&lt;p&gt;バンド幅大きくなってもページロード時間は大きく変わらない。&lt;strong&gt;光の速度はこれ以上速くならない&lt;/strong&gt;。じゃあどうするか。解決策がHTTP/2.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/http2-latency.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/http2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.slideshare.net/kazuho/dena-http2&quot;&gt;ウェブを速くするためにDeNAがやっていること - HTTP/2と、さらにその先&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下記のBEFORE/AFTERは画像の配信をHTTPからHTTP/2に変更した場合のリクエストをキャプチャしたもの。&lt;/p&gt;

&lt;h3 id=&quot;before-http2&quot;&gt;Before HTTP/2&lt;/h3&gt;

&lt;p&gt;HTTP/2前の状態。リクエストが順番に走っていることが見て取れる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/before-http2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;after-http2&quot;&gt;After HTTP/2&lt;/h3&gt;

&lt;p&gt;HTTP/2後の状態。リクエストが見事に多重化されている。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/after-http2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.httpvshttps.com/&quot;&gt;こちらのページ&lt;/a&gt;ではHTTPSの画像ロードの速度の速さを体感できる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/HTTP_vs_HTTPS.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;ユーザーの体感速度 = サーバーサイドレスポンス + クライアントサイド・スピード&lt;/h2&gt;

&lt;p&gt;仮にサーバーレスポンスタイムを&lt;code class=&quot;highlighter-rouge&quot;&gt;1ms&lt;/code&gt;にしたとしても、十分に速くなったとはいえない。なぜなら最終的にユーザーが感じるであろうウェブページの体感速度はサーバーサイドのレスポンス速度とクライアントサイドでのページロードのスピードを足し合わせたものだから。サーバーが0msでレスポンス返しても10秒間クライアントサイドの画面が真っ白だったら、ユーザーにとってはそれは10秒待たされてるのと一緒。&lt;/p&gt;

&lt;h3 id=&quot;rails-helloworld-app-&quot;&gt;Rails HelloWorld App の場合&lt;/h3&gt;

&lt;p&gt;Rails5をほぼ素の状態でHello Worldという文字列を出力するアプリをHerokuにデプロイして&lt;a href=&quot;https://developers.google.com/speed/pagespeed/insights/&quot;&gt;Google PageSpeed Insights&lt;/a&gt;で計測してみた。&lt;/p&gt;

&lt;p&gt;結果は80点以下… :weary:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/roppongirb/render-block-js.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Should Fix&lt;/code&gt;として報告されているのは、headタグ内にあるJS読み込みが Render Blocking してますよ、という内容のもの。Webの高速化はサーバーサイドだけで済むようなラクなもんじゃない。&lt;/p&gt;

&lt;h2 id=&quot;amp-zap&quot;&gt;AMP :zap:&lt;/h2&gt;
&lt;p&gt;AMPはWeb高速化のベストプラクティスを詰め込んだ仕様/制限のこと。詳しくは下記が参考になる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@cramforce/why-amp-is-fast-7d2ff1f48597#.tcozirlt5&quot;&gt;Why AMP is fast — Medium&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mozaic.fm/episodes/22/amp.html&quot;&gt;ep22 AMP | mozaic.fm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;またAMPに対応するとページが速くなる他にもおいしいことがあって、GoogleがAMPページをキャッシュしてコンテンツ配信を肩代わりしてくれるのだ。いうなればAMPのためのGoogle無料CDN。これでオーガニック検索のトラフィックはだいぶラクになるかも？&lt;/p&gt;

&lt;p&gt;僕も自分の&lt;a href=&quot;http://blog.toshima.ru/&quot;&gt;英語Tipsブログ&lt;/a&gt;をAMP化してみたが非常に高速にページが表示できている。(完全にAMP化はできていないのだけど) まだAMP試していない人は、AMPすげーはやいのでぜひその速さを体感してみてほしい。そしてWebの高速化にまっすぐ向き合ってもらいたいと思う。&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;その他の参考資料&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/mirakui/high-performance-rails-long-edition&quot;&gt;High Performance Rails (long edition) // Speaker Deck&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/joker1007/railspahuomansuji-ben-falseki&quot;&gt;Railsパフォーマンス基本のキ // Speaker Deck&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://parashuto.com/rriver/development/page-speed-optimization&quot;&gt;デザイナーやディレクターも知っておきたい、ページ表示速度の高速化の基本 – Rriver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;roppongirb-&quot;&gt;Roppongi.rb イベントについて&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/hashtag/roppongirb?f=tweets&amp;amp;vertical=default&quot;&gt;#roppongirb hashtag on Twitter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;イベント発表資料: &lt;a href=&quot;http://roppongirb.connpass.com/event/33502/presentation/&quot;&gt;Roppongi.rb 資料一覧 - connpass&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://morizyun.github.io/blog/roppongi-rb-ruby-rails/&quot;&gt;Roppongi.rb #1 発表の密度が濃くて楽しかったYO! - 酒と泪とRubyとRailsと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.techempower.com/benchmarks/&quot;&gt;Round 12 results - TechEmpower Framework Benchmarks&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;ただしRubyバージョン差異による非互換性を解消するための変更は必要だけどね。 &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="rails" /><category term="ruby" /><category term="presentation" /><category term="web" /><summary>自分がオーガナイザーを務めた Roppongi.rb #1で「Rails高速化戦略」という題で発表してきました。スライドは下記になります。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.toshimaru.net/images/posts/roppongirb/title.png" /></entry><entry><title>rails new するときによく使うオプション</title><link href="http://blog.toshimaru.net/rails-new-options/" rel="alternate" type="text/html" title="rails new するときによく使うオプション" /><published>2016-06-04T00:00:00+09:00</published><updated>2016-06-04T00:00:00+09:00</updated><id>http://blog.toshimaru.net/rails-new-options</id><content type="html" xml:base="http://blog.toshimaru.net/rails-new-options/">&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rails new&lt;/code&gt; するときによく使うオプション。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;オプション&lt;/th&gt;
      &lt;th&gt;意味&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;--database=mysql&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;データベースの指定。 mysql とか postgresql などを指定する&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--skip-turbolinks&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;turbolinks を無効化して&lt;code class=&quot;highlighter-rouge&quot;&gt;rails new&lt;/code&gt;する&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--skip-test-unit&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;testを作成しない。RSpecに変更したいときに使うと良い。Rails4 で有効なオプション。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--skip-test&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;同上。 &lt;strong&gt;Rails5 で有効なオプション&lt;/strong&gt;。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;turbolinksをOFFって、データベースをmysqlに変更して、testをRSpec使うためにskipする。これらをまとめると下記のようになる。&lt;/p&gt;

&lt;h2 id=&quot;rails4&quot;&gt;Rails4&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rails new --database=mysql --skip-turbolinks --skip-test-unit
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;rails5-&quot;&gt;Rails5 以降&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rails new --database=mysql --skip-turbolinks --skip-test
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section&quot;&gt;その他のオプション&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rails new -h
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;で見るべし。&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="rails" /><summary>rails new するときによく使うオプション。</summary></entry><entry><title>docker-compose で Rails 環境を構築する</title><link href="http://blog.toshimaru.net/docker-compose-rails/" rel="alternate" type="text/html" title="docker-compose で Rails 環境を構築する" /><published>2016-04-09T00:00:00+09:00</published><updated>2016-04-09T00:00:00+09:00</updated><id>http://blog.toshimaru.net/docker-compose-rails</id><content type="html" xml:base="http://blog.toshimaru.net/docker-compose-rails/">&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-machine&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt; docker-compose&lt;/code&gt; を使ってローカルにdocker Rails環境を構築してみます。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;前提&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;docker-machine&lt;/li&gt;
  &lt;li&gt;docker-compose&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;バージョンは下記の通り。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker-machine -v
docker-machine version 0.6.0, build e27fb87

$ docker-compose -v
docker-compose version 1.6.2, build unknown
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;docker-machine-&quot;&gt;docker-machine 準備&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-machine create&lt;/code&gt;でdefaultのmachineを作成します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker-machine create --driver virtualbox default
Running pre-create checks...
(...snip...)
(default) Creating VirtualBox VM...
(default) Creating SSH key...
(default) Starting the VM...
(default) Check network to re-create if needed...
(default) Found a new host-only adapter: &quot;vboxnet0&quot;
(default) Waiting for an IP...
Waiting for machine to be running, this may take a few minutes...
Detecting operating system of created instance...
Waiting for SSH to be available...
Detecting the provisioner...
Provisioning with boot2docker...
Copying certs to the local machine directory...
Copying certs to the remote machine...
Setting Docker configuration on the remote daemon...
Checking connection to Docker...
Docker is up and running!
To see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: docker-machine env default
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-machine ls&lt;/code&gt; で状態を確認。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker-machine ls
NAME      ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER    ERRORS
default   -        virtualbox   Running   tcp://192.168.99.100:2376           v1.10.3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;STATE: Runningになってますね。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;環境変数設定&lt;/h3&gt;

&lt;p&gt;docker-machine の環境変数をセットします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ eval &quot;$(docker-machine env default)&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;rails&quot;&gt;Rails設定&lt;/h2&gt;

&lt;h3 id=&quot;dockerfile&quot;&gt;Dockerfile&lt;/h3&gt;

&lt;p&gt;このように&lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;を作成します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat Dockerfile
FROM ruby:2.3.0
RUN apt-get update -qq &amp;amp;&amp;amp; apt-get install -y build-essential libpq-dev
RUN mkdir /myapp
WORKDIR /myapp
ADD Gemfile /myapp/Gemfile
ADD Gemfile.lock /myapp/Gemfile.lock
RUN bundle install
ADD . /myapp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;に書いてある内容はだいたいこんな感じ。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt;: Docker hub のrubyイメージ、2.3.0タグをベースイメージとする&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WORKDIR&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir /myapp&lt;/code&gt;してそこをワーキングディレクトリと宣言&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt;を追加&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WORKDIR&lt;/code&gt;にて&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;する&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;docker-composeyml&quot;&gt;docker-compose.yml&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt;を用意します。&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt;はこんな感じです。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;s&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2&#39;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;MYSQL_ALLOW_EMPTY_PASSWORD&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;yes&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle exec rails s -p 3000 -b &#39;0.0.0.0&#39;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.:/myapp&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3000:3000&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;db&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;web&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt; の２つのサービスを用意します。今回は&lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt;はmysqlでいきます。&lt;/p&gt;

&lt;h3 id=&quot;gemfile-gemfilelock&quot;&gt;Gemfile, Gemfile.lock&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;はこんな感じ。rails 4.2.6 でいきましょう。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;https://rubygems.org&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;rails&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;4.2.6&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt;は空っぽで :ok: .&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ touch Gemfile.lock
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;rails-new&quot;&gt;rails new&lt;/h3&gt;

&lt;p&gt;これで準備完了。次に&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose&lt;/code&gt;を通して&lt;code class=&quot;highlighter-rouge&quot;&gt;rails new&lt;/code&gt;します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker-compose run web rails new . --force --database=mysql --skip-bundle
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これでwebコンテナが起動して&lt;code class=&quot;highlighter-rouge&quot;&gt;rails new&lt;/code&gt;され、カレントディレクトリにその成果物が生成されています。&lt;/p&gt;

&lt;p&gt;Gemfileの&lt;code class=&quot;highlighter-rouge&quot;&gt;therubyracer&lt;/code&gt; gemのコメントを外して&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose build&lt;/code&gt;します。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;therubyracer&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;platforms: :ruby&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker-compose build
db uses an image, skipping
Building web
Step 1 : FROM ruby:2.3.0
 ---&amp;gt; 268e5f4c6264
Step 2 : RUN apt-get update -qq &amp;amp;&amp;amp; apt-get install -y build-essential libpq-dev
 ---&amp;gt; Using cache
 ---&amp;gt; b5f055055282
Step 3 : RUN mkdir /myapp
 ---&amp;gt; Using cache
 ---&amp;gt; ef58bac5859f
Step 4 : WORKDIR /myapp
 ---&amp;gt; Using cache
 ---&amp;gt; d712516a5383
Step 5 : ADD Gemfile /myapp/Gemfile
 ---&amp;gt; Using cache
 ---&amp;gt; 45897d961453
Step 6 : ADD Gemfile.lock /myapp/Gemfile.lock
 ---&amp;gt; Using cache
 ---&amp;gt; 1e9aadcd1985
Step 7 : RUN bundle install
 ---&amp;gt; Running in db6cade21717
Fetching gem metadata from https://rubygems.org/...........
Fetching version metadata from https://rubygems.org/...
Fetching dependency metadata from https://rubygems.org/..
Resolving dependencies...
Installing rake 11.1.2
...snip...
Removing intermediate container b18b021bc248
Step 8 : ADD . /myapp
 ---&amp;gt; e259ae327e06
Removing intermediate container 568e85cfeee6
Successfully built e259ae327e06
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-2&quot;&gt;データベース設定&lt;/h2&gt;

&lt;p&gt;デフォルトだとデータベースの向き先が&lt;code class=&quot;highlighter-rouge&quot;&gt;localhost&lt;/code&gt;になっていますので、これを&lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt;コンテナに向けてやる必要があります。&lt;/p&gt;

&lt;p&gt;下記の通り、&lt;code class=&quot;highlighter-rouge&quot;&gt;config/database.yml&lt;/code&gt;内のhostに&lt;code class=&quot;highlighter-rouge&quot;&gt;db&lt;/code&gt;を指定しましょう。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# config/database.yml
default: &amp;amp;default
  adapter: mysql2
  encoding: utf8
  pool: 5
  username: root
  password:
  host: db

development:
  &amp;lt;&amp;lt;: *default
  database: myapp_development
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;データベースの設定が完了したらデータベースを作成します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker-compose run web rake db:create
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;docker-compose-up&quot;&gt;docker-compose up&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose up&lt;/code&gt;してrails server立ち上げる。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker-compose up
Recreating rails1_db_1
Recreating rails1_web_1
Attaching to rails1_db_1, rails1_web_1
db_1  | 2016-04-09T16:48:34.775827Z 0 [Note] mysqld (mysqld 5.7.11) starting as process 1 ...
...snip...
db_1  | Version: &#39;5.7.11&#39;  socket: &#39;/var/run/mysqld/mysqld.sock&#39;  port: 3306  MySQL Community Server (GPL)
web_1 | [2016-04-09 16:48:38] INFO  WEBrick 1.3.1
web_1 | [2016-04-09 16:48:38] INFO  ruby 2.3.0 (2015-12-25) [x86_64-linux]
web_1 | [2016-04-09 16:48:38] INFO  WEBrick::HTTPServer#start: pid=1 port=3000
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これでrails serverが準備できました。&lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.99.100:3000&lt;/code&gt;でページが見れます。&lt;/p&gt;

&lt;p&gt;ちなみにdocker-machineのIPアドレスは下記のように取得可能です。これにて完了！！&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker-machine ip default
192.168.99.100
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-3&quot;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/compose/rails/&quot;&gt;Quickstart: Compose and Rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="docker" /><category term="docker-compose" /><category term="docker-machine" /><summary>docker-machine, docker-compose を使ってローカルにdocker Rails環境を構築してみます。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.toshimaru.net/images/posts/docker/compose.png" /></entry><entry><title>terraformでDigitalOceanに簡単ドロップレット作成</title><link href="http://blog.toshimaru.net/terraform/" rel="alternate" type="text/html" title="terraformでDigitalOceanに簡単ドロップレット作成" /><published>2016-04-05T00:00:00+09:00</published><updated>2016-04-05T00:00:00+09:00</updated><id>http://blog.toshimaru.net/terraform</id><content type="html" xml:base="http://blog.toshimaru.net/terraform/">&lt;p&gt;&lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt;を使って1円クラウド、&lt;a href=&quot;https://m.do.co/c/a79091850c6e&quot;&gt;DigitalOcean&lt;/a&gt;にドロップレットをさくっと立ててみます。Vagrantに似たツールではありますが、Vagrantよりシンプルでかつ軽量に動作します。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;環境&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ terraform version
Terraform v0.6.14
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上記のバージョンの terraform を使っていきます。&lt;/p&gt;

&lt;h2 id=&quot;tf&quot;&gt;tfファイル作成&lt;/h2&gt;

&lt;p&gt;terraformファイル、例えば&lt;code class=&quot;highlighter-rouge&quot;&gt;test.tf&lt;/code&gt;ファイルを下記のように作成します（&lt;code class=&quot;highlighter-rouge&quot;&gt;.tf&lt;/code&gt;という拡張子でファイル名はなんでもよいようです）。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Configure the DigitalOcean Provider
provider &quot;digitalocean&quot; {
  token = &quot;your_digitalocean_token&quot;
}

# Create a web server
resource &quot;digitalocean_droplet&quot; &quot;web&quot; {
  image = &quot;ubuntu-14-04-x64&quot;
  name = &quot;web-1&quot;
  region = &quot;sfo1&quot;
  size = &quot;512mb&quot;
  ssh_keys = [123456]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;token&lt;/code&gt;にはDigitalOceanのあなた自身のトークンをセットしてください。&lt;/p&gt;

&lt;p&gt;ちなみに上記にある &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh_keys&lt;/code&gt; の id は下記のようにAPI経由で取得できます（jqを使ってます）。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl &quot;https://api.digitalocean.com/v2/account/keys&quot; -H &quot;Authorization: Bearer your_token&quot; | jq &quot;.ssh_keys[0].id&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;terraform-&quot;&gt;terraform 実行プラン表示&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;terraform plan&lt;/code&gt;で実行プランを表示できます。これで何が作成されるかを確認しましょう。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ terraform plan
Refreshing Terraform state prior to plan...


The Terraform execution plan has been generated and is shown below.
Resources are shown in alphabetical order for quick scanning. Green resources
will be created (or destroyed and then created if an existing resource
exists), yellow resources are being changed in-place, and red resources
will be destroyed.

Note: You didn&#39;t specify an &quot;-out&quot; parameter to save this plan, so when
&quot;apply&quot; is called, Terraform can&#39;t guarantee this is what will execute.

+ digitalocean_droplet.web
    image:                &quot;&quot; =&amp;gt; &quot;ubuntu-14-04-x64&quot;
    ipv4_address:         &quot;&quot; =&amp;gt; &quot;&amp;lt;computed&amp;gt;&quot;
    ipv4_address_private: &quot;&quot; =&amp;gt; &quot;&amp;lt;computed&amp;gt;&quot;
    ipv6_address:         &quot;&quot; =&amp;gt; &quot;&amp;lt;computed&amp;gt;&quot;
    ipv6_address_private: &quot;&quot; =&amp;gt; &quot;&amp;lt;computed&amp;gt;&quot;
    locked:               &quot;&quot; =&amp;gt; &quot;&amp;lt;computed&amp;gt;&quot;
    name:                 &quot;&quot; =&amp;gt; &quot;web-1&quot;
    region:               &quot;&quot; =&amp;gt; &quot;sfo1&quot;
    size:                 &quot;&quot; =&amp;gt; &quot;512mb&quot;
    ssh_keys.#:           &quot;&quot; =&amp;gt; &quot;1&quot;
    ssh_keys.0:           &quot;&quot; =&amp;gt; &quot;123456&quot;
    status:               &quot;&quot; =&amp;gt; &quot;&amp;lt;computed&amp;gt;&quot;


Plan: 1 to add, 0 to change, 0 to destroy.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-1&quot;&gt;プラン実行&lt;/h2&gt;

&lt;p&gt;確認後は&lt;code class=&quot;highlighter-rouge&quot;&gt;terraform apply&lt;/code&gt;で実際に作成を行えます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ terraform apply
digitalocean_droplet.web: Creating...
image:                &quot;&quot; =&amp;gt; &quot;ubuntu-14-04-x64&quot;
ipv4_address:         &quot;&quot; =&amp;gt; &quot;&amp;lt;computed&amp;gt;&quot;
ipv4_address_private: &quot;&quot; =&amp;gt; &quot;&amp;lt;computed&amp;gt;&quot;
ipv6_address:         &quot;&quot; =&amp;gt; &quot;&amp;lt;computed&amp;gt;&quot;
ipv6_address_private: &quot;&quot; =&amp;gt; &quot;&amp;lt;computed&amp;gt;&quot;
locked:               &quot;&quot; =&amp;gt; &quot;&amp;lt;computed&amp;gt;&quot;
name:                 &quot;&quot; =&amp;gt; &quot;web-1&quot;
region:               &quot;&quot; =&amp;gt; &quot;sfo1&quot;
size:                 &quot;&quot; =&amp;gt; &quot;512mb&quot;
ssh_keys.#:           &quot;&quot; =&amp;gt; &quot;1&quot;
ssh_keys.0:           &quot;&quot; =&amp;gt; &quot;123456&quot;
status:               &quot;&quot; =&amp;gt; &quot;&amp;lt;computed&amp;gt;&quot;
digitalocean_droplet.web: Creation complete

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

The state of your infrastructure has been saved to the path
below. This state is required to modify and destroy your
infrastructure, so keep it safe. To inspect the complete state
use the `terraform show` command.

State path: terraform.tfstate
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-2&quot;&gt;作成物の情報表示&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;terraform show&lt;/code&gt; で作成物の情報を表示できます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ terraform show
digitalocean_droplet.web:
  id = 12808253
  image = ubuntu-14-04-x64
  ipv4_address = 1.2.3.4
  locked = false
  name = web-1
  region = sfo1
  size = 512mb
  ssh_keys.# = 1
  ssh_keys.0 = 123456
  status = active
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;確かにできあがってます。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;ドロップレット削除&lt;/h2&gt;

&lt;p&gt;ほっとくとどんどん課金されていきますので使い終わったら削除しましょう。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ terraform destroy
Do you really want to destroy?
  Terraform will delete all your managed infrastructure.
  There is no undo. Only &#39;yes&#39; will be accepted to confirm.

  Enter a value: yes

digitalocean_droplet.web: Refreshing state... (ID: 12808253)
digitalocean_droplet.web: Destroying...
digitalocean_droplet.web: Destruction complete

Apply complete! Resources: 0 added, 0 changed, 1 destroyed.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;この記事を気に入っていただけたなら下記のリファラルリンクよりDigital Oceanにご登録いただけますと筆者が喜びます(*´ω｀*)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://m.do.co/c/a79091850c6e&quot;&gt;&lt;img src=&quot;/images/digitalocean.png&quot; alt=&quot;digitalocean&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="digitalocean" /><category term="terraform" /><summary>Terraformを使って1円クラウド、DigitalOceanにドロップレットをさくっと立ててみます。Vagrantに似たツールではありますが、Vagrantよりシンプルでかつ軽量に動作します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.toshimaru.net/images/posts/terraform.png" /></entry><entry><title>Ruby on Rails を Google App Engine 上で動かしてみる</title><link href="http://blog.toshimaru.net/ruby-on-google-app-engine/" rel="alternate" type="text/html" title="Ruby on Rails を Google App Engine 上で動かしてみる" /><published>2016-03-26T00:00:00+09:00</published><updated>2016-03-26T00:00:00+09:00</updated><id>http://blog.toshimaru.net/ruby-on-google-app-engine</id><content type="html" xml:base="http://blog.toshimaru.net/ruby-on-google-app-engine/">&lt;p&gt;&lt;a href=&quot;http://www.publickey1.jp/blog/16/google_app_enginerubynodejsgcp_next_2016.html&quot;&gt;［速報］Google App EngineがRubyとNode.jsのサポートを発表。GCP Next 2016 － Publickey&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ということでRuby on RailsをGoogle App Engine 上で動かしてみました。手順は &lt;a href=&quot;https://cloud.google.com/ruby/getting-started/hello-world&quot;&gt;How to run Hello World - Ruby — Google Cloud Platform&lt;/a&gt; を参考に進めていきます。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;前提&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;gcloud コマンドが使えること - &lt;a href=&quot;https://cloud.google.com/sdk/&quot;&gt;Google Cloud SDK&lt;/a&gt;に含まれています&lt;/li&gt;
  &lt;li&gt;Google Cloud Platformにログイン済みでかつ今回のデプロイ先となるプロジェクトが作成済みであること&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;手順&lt;/h2&gt;

&lt;h3 id=&quot;section-2&quot;&gt;プロジェクトセットアップ&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/GoogleCloudPlatform/getting-started-ruby&quot;&gt;GoogleCloudPlatform/getting-started-ruby&lt;/a&gt; のHello World Appを今回は動かしますのでまずはプロジェクトをクローンします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/GoogleCloudPlatform/getting-started-ruby.git
$ cd 1-hello-world
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;まずは通常のRuby on Railsアプリと同じくbundle installしてRailsサーバーを立てましょう。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bundle install
$ rails server
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これで&lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:3000&lt;/code&gt;でデプロイされるHello World Appが見れました。&lt;/p&gt;

&lt;h3 id=&quot;gcloud-&quot;&gt;gcloud セットアップ&lt;/h3&gt;

&lt;p&gt;gcloud を使って行きますがいくつか事前の設定が必要あります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 初期化
$ gcloud init

# Googleログインする
$ gcloud auth login

# 今回作成したプロジェクトIDをセット
$ gcloud config set project your-project-id
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これでapp deploy コマンドが動作しました。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gcloud preview app deploy
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;デプロイされたあとは AppEngine Console のバージョンの一覧に出てきます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ruby-gae/deploy-version.png&quot; alt=&quot;deploy-version&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;デプロイ時のログ&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Beginning deployment...
If this is your first deployment, this may take a while...done.

Using Ruby 2.2.4 as requested in the .ruby-version file
Verifying that Managed VMs are enabled and ready.
Building and pushing image for module [default]
Started cloud build [789f0d61-dc0a-4994-8292-02a5ff9f65de].
To see logs in the Cloud Console: https://console.developers.google.com/logs?project=your-project-id&amp;amp;service=cloudbuild.googleapis.com&amp;amp;key1=789f0d61-dc0a-4994-8292-02a5ff9f65de&amp;amp;logName=projects/your-project-id/logs/cloudbuild
--------------------------------- REMOTE BUILD OUTPUT ----------------------------------
starting build &quot;789f0d61-dc0a-4994-8292-02a5ff9f65de&quot;

FETCHSOURCE
Fetching storage object: gs://staging.your-project-id.appspot.com/your-project-id.default.20160326t100408#1458954328349000
Copying gs://staging.your-project-id.appspot.com/your-project-id.default.20160326t100408#1458954328349000...
Downloading file:///tmp/source-archive.tgz:                      13.32 KiB/13.32 KiB
FETCHBUILDER
Using default tag: latest
latest: Pulling from cloud-builders/dockerizer
bf61d14f65db: Pulling fs layer
3ea15286bc1a: Pulling fs layer
515285067dbf: Pulling fs layer
5e89b839ecfa: Pulling fs layer
e63e5abf57a3: Pulling fs layer
ec858f8c1767: Pulling fs layer
51d0afdd2ff8: Pulling fs layer
415319aa0c90: Pulling fs layer
51d0afdd2ff8: Verifying Checksum
51d0afdd2ff8: Download complete
415319aa0c90: Verifying Checksum
415319aa0c90: Download complete
5e89b839ecfa: Verifying Checksum
5e89b839ecfa: Download complete
3ea15286bc1a: Verifying Checksum
3ea15286bc1a: Download complete
515285067dbf: Verifying Checksum
515285067dbf: Download complete
e63e5abf57a3: Verifying Checksum
e63e5abf57a3: Download complete
ec858f8c1767: Verifying Checksum
ec858f8c1767: Download complete
bf61d14f65db: Verifying Checksum
bf61d14f65db: Download complete
bf61d14f65db: Pull complete
3ea15286bc1a: Pull complete
515285067dbf: Pull complete
5e89b839ecfa: Pull complete
e63e5abf57a3: Pull complete
ec858f8c1767: Pull complete
51d0afdd2ff8: Pull complete
415319aa0c90: Pull complete
Digest: sha256:b80a8cc7ed504307717c7530e795b0c2dea1ff99957806e0785ae831309084ae
Status: Downloaded newer image for gcr.io/cloud-builders/dockerizer:latest
BUILD
Client:
 Version:      1.9.1
 API version:  1.21
 Go version:   go1.4.3
 Git commit:   a34a1d5
 Built:        Fri Nov 20 17:56:04 UTC 2015
 OS/Arch:      linux/amd64

Server:
 Version:      1.9.1
 API version:  1.21
 Go version:   go1.4.2
 Git commit:   a34a1d5
 Built:        Fri Nov 20 13:12:04 UTC 2015
 OS/Arch:      linux/amd64
Sending build context to Docker daemon 90.62 kB
Step 1 : FROM gcr.io/google_appengine/ruby
 ---&amp;gt; 3e6d0d6d0575
Step 2 : RUN cd /rbenv/plugins/ruby-build &amp;amp;&amp;amp;     git pull &amp;amp;&amp;amp;     rbenv install -s 2.2.4 &amp;amp;&amp;amp;     rbenv global 2.2.4 &amp;amp;&amp;amp;     gem install -q --no-rdoc --no-ri bundler --version 1.11.2 &amp;amp;&amp;amp;     gem install -q --no-rdoc --no-ri foreman --version 0.78.0
 ---&amp;gt; Running in 451faee44d37
Already up-to-date.
Successfully installed bundler-1.11.2
1 gem installed
Successfully installed foreman-0.78.0
1 gem installed
 ---&amp;gt; 5da2526068cb
Removing intermediate container 451faee44d37
Step 3 : ENV RBENV_VERSION 2.2.4
 ---&amp;gt; Running in 1e6f8d74782b
 ---&amp;gt; 416110028d7d
Removing intermediate container 1e6f8d74782b
Step 4 : COPY Gemfile Gemfile.lock /app/
 ---&amp;gt; 0ab134d54690
Removing intermediate container 7337fb40c45b
Step 5 : RUN bundle install &amp;amp;&amp;amp; rbenv rehash
 ---&amp;gt; Running in 0c258ea5a1be
Don&#39;t run Bundler as root. Bundler can ask for sudo if it is needed, and
installing your bundle as root will break this application for all non-root
users on this machine.
Fetching gem metadata from https://rubygems.org/...........
Fetching version metadata from https://rubygems.org/...
Fetching dependency metadata from https://rubygems.org/..
Using rake 10.4.2
Installing i18n 0.7.0
Installing json 1.8.3 with native extensions
Installing minitest 5.7.0
Installing thread_safe 0.3.5
Installing builder 3.2.2
Installing erubis 2.7.0
Installing mini_portile 0.6.2
Installing rack 1.6.4
Installing mime-types 2.6.1
Installing arel 6.0.0
Installing cliver 0.3.2
Installing diff-lcs 1.2.5
Installing multi_json 1.11.2
Installing websocket-extensions 0.1.2
Using bundler 1.11.2
Using thor 0.19.1
Installing rspec-support 3.3.0
Installing tzinfo 1.2.2
Installing nokogiri 1.6.6.2 with native extensions
Installing rack-test 0.6.3
Installing sprockets 3.2.0
Installing mail 2.6.3
Installing websocket-driver 0.6.3 with native extensions
Installing rspec-core 3.3.1
Installing rspec-expectations 3.3.0
Installing rspec-mocks 3.3.1
Installing activesupport 4.2.2
Installing tzinfo-data 1.2015.6
Installing loofah 2.0.2
Installing xpath 2.0.0
Installing rails-deprecated_sanitizer 1.0.3
Installing globalid 0.3.5
Installing activemodel 4.2.2
Installing rails-html-sanitizer 1.0.2
Installing capybara 2.4.4
Installing rails-dom-testing 1.0.6
Installing activejob 4.2.2
Installing activerecord 4.2.2
Installing poltergeist 1.8.1
Installing actionview 4.2.2
Installing actionpack 4.2.2
Installing actionmailer 4.2.2
Installing railties 4.2.2
Installing sprockets-rails 2.3.2
Installing rspec-rails 3.3.2
Installing rails 4.2.2
Bundle complete! 6 Gemfile dependencies, 47 gems now installed.
Use `bundle show [gemname]` to see where a bundled gem is installed.
 ---&amp;gt; 9fde5c5bec0c
Removing intermediate container 0c258ea5a1be
Step 6 : COPY . /app/
 ---&amp;gt; 05eb1e2b6b90
Removing intermediate container e885ebd8251c
Step 7 : ENTRYPOINT bundle exec rackup -p 8080 -E production config.ru
 ---&amp;gt; Running in 1b616e80361d
 ---&amp;gt; 0695731649da
Removing intermediate container 1b616e80361d
Successfully built 0695731649da
PUSH
The push refers to a repository [appengine.gcr.io/gcloud/your-project-id.default.20160326t100408] (len: 1)
Sending image list
Pushing repository appengine.gcr.io/gcloud/your-project-id.default.20160326t100408 (1 tags)
Image 3bc7cdb36864 already pushed, skipping
Image 4bfc20f0ed66 already pushed, skipping
Image ff52712bb308 already pushed, skipping
Image 5880acd9ad50 already pushed, skipping
Image 096d9403d234 already pushed, skipping
Image 956eb41cd003 already pushed, skipping
Image 01eaa1a367c4 already pushed, skipping
Image 943d779f0853 already pushed, skipping
Image 3cc9009b6572 already pushed, skipping
Image b19c39f03dbb already pushed, skipping
Image ca6428f24e68 already pushed, skipping
Image 7b90390ae965 already pushed, skipping
Image cb10a2abbe53 already pushed, skipping
Image 31bee42bdd8a already pushed, skipping
Image a04427afe410 already pushed, skipping
Image 8f70e181ae11 already pushed, skipping
Image 72b1839f75eb already pushed, skipping
Image 0ea63ea23bf2 already pushed, skipping
Image 86100fe6deed already pushed, skipping
Image 45ab69b78373 already pushed, skipping
Image 32066980c48e already pushed, skipping
Image fc85fe8bcbac already pushed, skipping
Image 76b185852e95 already pushed, skipping
Image eec69d4fcd9a already pushed, skipping
Image 17402d207077 already pushed, skipping
Image 27bea8c63202 already pushed, skipping
Image 3e6d0d6d0575 already pushed, skipping
5da2526068cb: Pushing
5da2526068cb: Image successfully pushed
416110028d7d: Pushing
416110028d7d: Image successfully pushed
0ab134d54690: Pushing
0ab134d54690: Image successfully pushed
9fde5c5bec0c: Pushing
9fde5c5bec0c: Image successfully pushed
05eb1e2b6b90: Pushing
05eb1e2b6b90: Image successfully pushed
0695731649da: Pushing
0695731649da: Image successfully pushed
Pushing tag for rev [0695731649da] on {https://appengine.gcr.io/v1/repositories/gcloud/your-project-id.default.20160326t100408/tags/latest}
DONE
----------------------------------------------------------------------------------------

Updating module [default]...done.
Deployed module [default] to [https://your-project-id.appspot.com]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;appyml&quot;&gt;app.yml&lt;/h2&gt;

&lt;p&gt;今回使われている&lt;code class=&quot;highlighter-rouge&quot;&gt;app.yml&lt;/code&gt;はこんな感じでした。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# [START runtime]&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;runtime&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ruby&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;entrypoint&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle exec rackup -p 8080 -E production config.ru&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# [END runtime]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# [START resources]&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;cpu&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.5&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;memory_gb&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1.3&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;disk_size_gb&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# [END resources]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# [START scaling]&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;automatic_scaling&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;min_num_instances&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;max_num_instances&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;cool_down_period_sec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;60&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;cpu_utilization&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;target_utilization&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.5&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# [END scaling]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;runtime&lt;/code&gt;の設定がrubyプロジェクトに共通の設定で&lt;code class=&quot;highlighter-rouge&quot;&gt;resources&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;scaling&lt;/code&gt;は環境に合わせて適宜チューニングしてください。デフォルトの状態はミニマルな設定になっているようです。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/GoogleCloudPlatform/ruby-docker&quot;&gt;GoogleCloudPlatform/ruby-docker: Docker images for Ruby&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/GoogleCloudPlatform/ruby-docker/blob/master/appengine/Dockerfile&quot;&gt;ruby-docker/Dockerfile at master · GoogleCloudPlatform/ruby-docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="google_app_engine" /><category term="rails" /><category term="docker" /><summary>［速報］Google App EngineがRubyとNode.jsのサポートを発表。GCP Next 2016 － Publickey</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.toshimaru.net/images/posts/ruby-gae/ruby.png" /></entry><entry><title>接続元のグローバルIP出すやつ作った</title><link href="http://blog.toshimaru.net/gae-ip-info/" rel="alternate" type="text/html" title="接続元のグローバルIP出すやつ作った" /><published>2016-02-10T00:00:00+09:00</published><updated>2016-02-10T00:00:00+09:00</updated><id>http://blog.toshimaru.net/gae-ip-info</id><content type="html" xml:base="http://blog.toshimaru.net/gae-ip-info/">&lt;p&gt;&lt;a href=&quot;http://www.ugtop.com/spill.shtml&quot;&gt;確認くん&lt;/a&gt;とかいちいち検索してページにいったりするのがダルかったので、自分のわかりやすいURLでGoogle App Engine上にPHPで接続元グローバルIP出すやつ作った。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ip.toshimaru.net/&quot;&gt;Your IP address info&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;裏機能&lt;/h2&gt;

&lt;p&gt;コマンドラインで簡単に抽出できるように&lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;で叩いたらIPだけ出力するような裏機能付けた。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl ip.toshimaru.net
xx.xx.xx.xx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;google-app-engine&quot;&gt;Google App Engine&lt;/h2&gt;

&lt;p&gt;Google App Engine、一昔前はとっつきにくかったけど今は管理画面も使いやすくなってドキュメントも丁寧になってきたしデプロイ周りのCLIツールも整ってきているので良い感じである。&lt;/p&gt;

&lt;p&gt;Herokuが有料になった今、個人サービスでなにかさっと作りたいときはGAEは良さそう。&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="google_app_engine" /><category term="php" /><summary>確認くんとかいちいち検索してページにいったりするのがダルかったので、自分のわかりやすいURLでGoogle App Engine上にPHPで接続元グローバルIP出すやつ作った。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.toshimaru.net/images/posts/ip.png" /></entry><entry><title>ひどいコードを書いてもよいとき</title><link href="http://blog.toshimaru.net/why-you-should-write-shitty-code/" rel="alternate" type="text/html" title="ひどいコードを書いてもよいとき" /><published>2016-02-08T00:00:00+09:00</published><updated>2016-02-08T00:00:00+09:00</updated><id>http://blog.toshimaru.net/why-you-should-write-shitty-code</id><content type="html" xml:base="http://blog.toshimaru.net/why-you-should-write-shitty-code/">&lt;p&gt;&lt;a href=&quot;http://hitode909.hatenablog.com/entry/2016/02/08/140232&quot;&gt;なぜひどいコードを書いてはいけないか - hitode909の日記&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ひどいコードを書いてもよいときとは:question:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ひどくないコードを書けるだけの技術力がない&lt;/li&gt;
  &lt;li&gt;プロジェクトの生産期間が短い&lt;/li&gt;
  &lt;li&gt;プロダクトの寿命が短い&lt;/li&gt;
  &lt;li&gt;将来アーキテクチャを作り直すことが決まっている&lt;/li&gt;
  &lt;li&gt;自分が近い将来退職する&lt;/li&gt;
  &lt;li&gt;技術的負債を残したい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;良いコード:innocent:と悪いコード:imp:の分別がつかないような&lt;strong&gt;技術力の低い&lt;/strong&gt;新卒くんとかは好むと好まざるとにかかわらずひどいコードを書いてしまうときもある。担当メンターはきちんと彼らが良いコードを書けるように導いていかなければならない。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;プロジェクトの生産期間が短かったり、プロダクトの寿命が極端に短い&lt;/strong&gt; とわかっているものであればひどいコードを書いてもよい。:imp: ひどいコードとわかっていても時間が足りなければ直せないし、たとえ直したとしてもその成果はプロダクトの寿命と共に終わる。ただし長期的にメンテンナンスをしていくのであればこの限りではない。&lt;/p&gt;

&lt;p&gt;言語選択とかフレームワーク選定とかデータベース設計とかアーキテクチャレベルで&lt;strong&gt;作り直すことを将来想定しているのであれば&lt;/strong&gt;、ひどいコードを書いてもよい。:imp: かの有名なFacebookだって最初はひどいコードから始まってるんだ&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。そのコードを未来の優秀なエンジニアたちが塗り替えていって綺麗にしていったんだ。そうしてFacebookは大きくなり大成功を収めた。ビジネス :moneybag: を作るのに綺麗なコードは要らない。&lt;/p&gt;

&lt;p&gt;あなたは近い将来&lt;strong&gt;退職&lt;/strong&gt;することを目論んでいて現在の職場に少ならからずのヘイトを溜めている。さぁ復讐のときだ。技術的負債を目いっぱい残してやろう。:imp:&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;過去に書いた関連エントリ&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/mentenability/&quot;&gt;メンテナンス性の高いコードを書く意義とは&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://gist.github.com/nikcub/3833406&quot;&gt;Facebook PHP Source Code from August 2007&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="tech" /><summary>なぜひどいコードを書いてはいけないか - hitode909の日記</summary></entry><entry><title>Jekyll 3にアップデートした</title><link href="http://blog.toshimaru.net/jekyll-3/" rel="alternate" type="text/html" title="Jekyll 3にアップデートした" /><published>2016-01-28T00:00:00+09:00</published><updated>2016-01-28T00:00:00+09:00</updated><id>http://blog.toshimaru.net/jekyll-3</id><content type="html" xml:base="http://blog.toshimaru.net/jekyll-3/">&lt;p&gt;本サイトは&lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;の上にスタティックサイトジェネレーターであるところの&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;を使ってサイト構築しているのだが、それを先日Jekyll 2からJekyll 3へと上げた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com/news/2015/10/26/jekyll-3-0-released/&quot;&gt;Jekyll 3.0 Released&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Jekyll 3の主な変更点は以下だ。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;インクリメンタルビルドのサポート&lt;/h2&gt;

&lt;p&gt;これにより10秒かかってたページ再生成の処理が3秒くらいで終わるようになった。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ jekyll serve
...
Server address: http://127.0.0.1:4000/
Server running... press ctrl-c to stop.
  Regenerating: 1 file(s) changed at 2016-01-28 23:26:28 ...done in 10.443565 seconds.
  Regenerating: 1 file(s) changed at 2016-01-28 23:26:39 ...done in 10.440658 seconds.

$ jekyll serve --incremental
...
Server address: http://127.0.0.1:4000/
Server running... press ctrl-c to stop.
  Regenerating: 1 file(s) changed at 2016-01-28 23:28:47 ...done in 3.404143 seconds.
  Regenerating: 1 file(s) changed at 2016-01-28 23:29:01 ...done in 3.478217 seconds.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;ruby-193&quot;&gt;Ruby 1.9.3のサポートドロップ&lt;/h2&gt;

&lt;p&gt;そろそろRuby 1.9.3以上ではなく、Ruby 2.0以上が当たり前な世界観になってきつつある。&lt;/p&gt;

&lt;h2 id=&quot;gem&quot;&gt;いくつかのgemファイルが分離された&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jekyll/jekyll-coffeescript&quot;&gt;jekyll-coffeescript&lt;/a&gt;や&lt;a href=&quot;https://github.com/jekyll/jekyll-paginate&quot;&gt;jekyll-paginate&lt;/a&gt;など、静的サイト作成において必須でない機能はgemとして分離され必要であればプラガブルに導入する形式になった。正しい進化。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;ファイル名によるタイトル付が可能に&lt;/h2&gt;

&lt;p&gt;日本語タイトル使っている僕にはあんまり関係なさそう。&lt;/p&gt;

&lt;h2 id=&quot;jekyll-3--pull-request&quot;&gt;Jekyll 3 対応 Pull Request&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/toshimaru/blog.toshimaru.net/pull/31&quot;&gt;Jekyll3 by toshimaru · Pull Request #31 · toshimaru/blog.toshimaru.net&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;jekyll-gem-&quot;&gt;jekyll gem 作ってる&lt;/h2&gt;

&lt;p&gt;余談だがサイト構築の上で必要なgemを２つほど作った。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/toshimaru/jekyll-tagging-related_posts&quot;&gt;jekyll-tagging-related_posts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/toshimaru/jekyll-toc&quot;&gt;jekyll-toc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;road-to-jekyll-31&quot;&gt;Road to Jekyll 3.1&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com/news/2016/01/24/jekyll-3-1-0-released/&quot;&gt;Jekyll 3.1.0 Released&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;もう出てるので近いうちに上げる。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;追記: 上げた。 &lt;a href=&quot;https://github.com/toshimaru/blog.toshimaru.net/pull/34&quot;&gt;Bundle Update on 2016-01-30 by deppbot · Pull Request #34 · toshimaru/blog.toshimaru.net&lt;/a&gt;&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="jekyll" /><summary>本サイトはGitHub Pagesの上にスタティックサイトジェネレーターであるところのJekyllを使ってサイト構築しているのだが、それを先日Jekyll 2からJekyll 3へと上げた。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.toshimaru.net/images/posts/jekyll/jekyll.png" /></entry><entry><title>認定スクラムマスター研修に行ってきました</title><link href="http://blog.toshimaru.net/scrum-training/" rel="alternate" type="text/html" title="認定スクラムマスター研修に行ってきました" /><published>2016-01-20T00:00:00+09:00</published><updated>2016-01-20T00:00:00+09:00</updated><id>http://blog.toshimaru.net/scrum-training</id><content type="html" xml:base="http://blog.toshimaru.net/scrum-training/">&lt;p&gt;昨年末にスクラムマスター研修を受けてきて、認定スクラムマスター (CSM)となりました。スクラムマスター研修で学んだこととして社内に共有した内容をこちらにも共有してみようと思います。&lt;/p&gt;

&lt;h2 id=&quot;scrum-vs-agile-&quot;&gt;Scrum vs Agile 〜歴史から学ぶ〜&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;1993年: スクラム誕生&lt;/li&gt;
  &lt;li&gt;2001年: アジャイルソフトウェア開発宣言
    &lt;ul&gt;
      &lt;li&gt;アジャイルマニフェスト: &lt;a href=&quot;http://agilemanifesto.org/iso/ja/manifesto.html&quot;&gt;アジャイルソフトウェア開発宣言&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;アジャイル原則:  &lt;a href=&quot;http://agilemanifesto.org/iso/ja/principles.html&quot;&gt;アジャイル宣言の背後にある原則&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;アジャイルは「より良い開発/方法を探している」という状態のことです。状態なので原理的には「アジャイル開発をしている」という表現は正しくありません。振り返ってみて「あのプロジェクトはアジャイルだった」と評価できるもの。極端に言うといわゆるウォーターフォール型の開発も１つのアジャイルと定義することもできます。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Don’t do agile, be agile&lt;/em&gt; （訳: アジャイル開発をするな、アジャイルであれ）&lt;/p&gt;

&lt;p&gt;スクラムのほうがアジャイルより歴史的には古く、アジャイルの定義が曖昧な一方、スクラムはきちんと確立された方法論で現在もアップデートされ続けているフレームワークです(年２回)。ただ出版社のマーケティング戦略的に「アジャイル」というバズワードを使わなきゃ本が売れないという理由もあってか、世の中には＜アジャイルという皮を被った何か＞が氾濫しています。「アジャイル」という魔法のコトバに惑わされてはいけないのです。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;スクラムとは何か？&lt;/h2&gt;

&lt;p&gt;スクラムとは &lt;strong&gt;＜現状を把握するためのフレームワーク＞&lt;/strong&gt;。どのプロジェクトにおいても現状を把握した結果、大体において問題はあることから &lt;strong&gt;＜問題を発見するフレームワーク＞&lt;/strong&gt; と言われることもあります。&lt;/p&gt;

&lt;p&gt;なのでポイント（超重要！）は、スクラムをやったからといって&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;生産性は向上しません&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;人が成長することはありません&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;プロダクトが改善することはありません&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あくまでもこれらは、現状を把握した結果として期待できるものであって、スクラムをやれば必ず得られる結果というわけではありません。スクラムもまた、銀の弾丸ではないのです。&lt;/p&gt;

&lt;p&gt;逆にチームの現状を把握できていないのであれば、それはスクラムとは呼べない。そして「スクラムは優秀な人じゃなければできない」というのも間違い。優秀じゃない人でも現状を把握してそこそこの成果を出せるようにするのがスクラムのフレームワークです。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;スクラムのルール&lt;/h2&gt;

&lt;p&gt;全部で19コあります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/scrum/scrum1.png&quot; alt=&quot;scrum&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;スクラムの三本柱&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;透明性&lt;/strong&gt; – Transparency&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;検証&lt;/strong&gt; – Inspect&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;適合&lt;/strong&gt; (検証に基づいた適合) – Adapt&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-3&quot;&gt;スクラムの３つの役割&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;プロダクトオーナー&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;チームのROIを最大化させる（ビジネスのROIではないということに注意）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;スクラムマスター&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;開発が Scrum と呼べる状態にする&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;スクラムじゃない方法を提案するのもまた、スクラムマスターの役割&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;チーム&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;7人±2人&lt;/strong&gt; が１つのスクラムチームを構成するのがのぞましい。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;スクラムの5つのセレモニー&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Sprint Planning – スプリント計画&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;短期計画&lt;/li&gt;
      &lt;li&gt;何を実現しようとしているのかを明確に&lt;/li&gt;
      &lt;li&gt;どの順番（優先順位）で開発を進めるのか&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Daily Scrum – デイリースクラム/朝会（朝じゃなくてもよい）&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;15分間&lt;/li&gt;
      &lt;li&gt;毎日の学習を共有&lt;/li&gt;
      &lt;li&gt;議論は行わない&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Product Backlog Refinement – プロダクトバックログ見直し&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;中長期計画（現在のスプリントは含まれないことに注意）&lt;/li&gt;
      &lt;li&gt;スプリントの5-10%使って見直しを行う&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sprint Review – スプリントレビュー&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;動くプロダクト・ドキュメントで成果を確認する&lt;/li&gt;
      &lt;li&gt;プロダクト触ってもっとプロダクトを良くする&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sprint Retrospective – スプリントレトロスペクティブ/振り返り&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;チームが生産性を高めるために取らなきゃいけないアクションを1つ以上決める&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/scrum/scrum2.jpeg&quot; alt=&quot;scrum sprint&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;アーチファクト&lt;/h3&gt;

&lt;p&gt;アーティファクト、成果物とでも訳しましょうか。下記４つ。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;スプリントバックログ&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;プロダクトバックログ&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Impediment List&lt;/strong&gt; - 障害リスト&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Acceptance Criteria&lt;/strong&gt; - 受け入れ条件&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-6&quot;&gt;その他&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Sprint&lt;/strong&gt; - スプリント&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sprint Stop&lt;/strong&gt; - スプリント停止&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DONE&lt;/strong&gt; - 製品が完了する&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Potentially shippable product increment&lt;/strong&gt; – 出荷可能な製品をリリースする&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-7&quot;&gt;スクラムが適さないシーン&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;プロダクトの生産期間が短い
    &lt;ul&gt;
      &lt;li&gt;例) 2ヶ月で終わってしまうプロジェクト&lt;/li&gt;
      &lt;li&gt;スクラムはチームビルディングで最低３ヶ月かかる。そしてその３ヶ月を反復してチームを改善させていく。つまり３ヶ月以内のプロジェクトでスクラムを行うのは難しい。（やれなくもないが）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;要件・技術が単純なプロダクト
    &lt;ul&gt;
      &lt;li&gt;スクラムは要件・技術的要素が複雑な場合に適したアプローチ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-8&quot;&gt;自律的なチームとは&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;チームの明確なゴールがある&lt;/li&gt;
  &lt;li&gt;チームの明確なバウンダリー（境界線）がある&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;「自律的なチームかどうかの判断基準は何？」への回答は「&lt;strong&gt;個人がチームのゴールを達成するために何をすべきか0.1秒以内に判別し行動できる&lt;/strong&gt;」といえます。&lt;/p&gt;

&lt;h2 id=&quot;section-9&quot;&gt;見積もり方法&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;相対見積もり&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;一番簡単なタスクのポイントが1だとしてそれに対する相対的な見積もり&lt;/li&gt;
      &lt;li&gt;プロダクトバックログアイテムはこちらの見積もり方法が適している&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;絶対見積もり&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;xx時間とかの見積もり&lt;/li&gt;
      &lt;li&gt;スプリントバックログアイテムにはこちらの方法が適している&lt;/li&gt;
      &lt;li&gt;1スプリントバックログアイテムが0.5時間〜1時間になるのが理想的な状態&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ここで重要なポイントとしては &lt;strong&gt;スクラムマスターは絶対に計画せずにチームが進むことを許容してはいけません&lt;/strong&gt; 。スクラムをやるなら &lt;strong&gt;徹底的に計画してください。妥協は許されません&lt;/strong&gt; ここがスクラムをやる上でのチームが持たなければならない＜覚悟＞となります。逆に言うとこの覚悟が持てないならスクラムをやるべきではありません。&lt;/p&gt;

&lt;h2 id=&quot;done&quot;&gt;DONE&lt;/h2&gt;

&lt;p&gt;DONEは Definition of done のことです。そして Definition of done は doneとundoneの２つが含まれます。&lt;/p&gt;

&lt;p&gt;説明します。例えば１つのタスクに関して、例えばログイン機能としましょう。ログイン機能のDONEとして何をイメージしますか？「フォームに正しい値を入力して正しくログインできること」「間違った値を入力してログインできないこと」「変な値でバリデーションエラーメッセージがでること」などが簡単に思い浮かぶと思います。&lt;/p&gt;

&lt;p&gt;ではそれが本当にログイン機能はDONEなのでしょうか。違います、DONEにはログイン機能の単体テストやその結合テスト、さらにはセキュリティテスト、負荷テスト、またはその機能のドキュメンテーションも全て含めてdoneです。そしてDONEにはそれで完了しているdoneとそれで完了しなかった、例えばこのケースで言うと「テストは後でかこう」「セキュリティ試験は全ての機能が完成してから実施」などのundoneも含まれています。&lt;/p&gt;

&lt;p&gt;このundoneを後回しになって積み上がった状態がプロジェクトの炎上状態であり、スクラムとして不健全な状態です。健全なスクラムは１スプリント毎にこのundoenを着実に消化していきます。&lt;/p&gt;

&lt;h2 id=&quot;section-10&quot;&gt;プロダクトバックログの書き方&lt;/h2&gt;

&lt;p&gt;研修ではユーザーストーリーとAcceptance Criteriaの２つを書いて１つのプロダクトバックログアイテムとしました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;ユーザーストーリー&lt;/strong&gt;: {who}として {what}がほしい なぜなら{why}だから&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Acceptance Criteria&lt;/strong&gt;: 受け入れ条件 ユーザーストーリーが達成できたといえる &lt;strong&gt;誰が見てもわかる明確な条件&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-11&quot;&gt;ベロシティ&lt;/h2&gt;

&lt;p&gt;これらのプロダクトバックログアイテムに対して先ほどの見積もりのポイントを付けていきます。そして&lt;strong&gt;1スプリント中にチームが消化できるポイント数のことをベロシティ&lt;/strong&gt;といいます。&lt;/p&gt;

&lt;p&gt;このベロシティは安定させるべきです。もし安定していないのならば、それはポイントの付け方が間違っているかチームに何か問題がある可能性が高いです。&lt;/p&gt;

&lt;h2 id=&quot;section-12&quot;&gt;スクラムが成功している状態とは？&lt;/h2&gt;

&lt;p&gt;スクラムチームとして3ヶ月で46%生産性が向上している状態がスクラムが成功している状態です。じゃあ46%向上している状態とはどう測ったらよいかというと、講師曰く先ほど言及したundoneが3ヶ月というスパンで1つでも消化できていれば46%生産性が上がったと言っていいとのことでした。しかしこれは非常に難しいことで、どんなに成功しているスクラムチームでも1年に1回でもそれが達成できていればうまくできているほうだとのことでした。&lt;/p&gt;

&lt;h2 id=&quot;section-13&quot;&gt;スクラムマスター役割・スキル&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;状況分析&lt;/strong&gt;: シチュエーショニング&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ティーチング&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ファシリテーティング&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;メンタリング&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;コーチング&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そしてスクラムマスターはこれらの行為をやるだけで満足してはいけません。やった上で &lt;strong&gt;結果が出ないと意味がありません。&lt;/strong&gt; つまりティーチングをやったからスクラムマスターの役割を果たしたとはいえず、ティーチングをやった結果、それを受けた者の行動が変わることも含めてスクラムマスターの役割ということです。&lt;/p&gt;

&lt;p&gt;「謙虚さ」と同時に「屈強さ」がスクラムマスターには必要です。&lt;/p&gt;

&lt;h2 id=&quot;section-14&quot;&gt;受講してみての感想&lt;/h2&gt;

&lt;p&gt;今回のスクラムマスター研修では「スクラムとは何か」を原理的な立場から学びました。&lt;/p&gt;

&lt;p&gt;受講してわかったことは世の開発現場には似非スクラムが溢れているなーってことでした。スプリント回しているからスクラムですとか、カンバンでタスク管理して朝会やってスクラムですとか、リソース足りないのでうちはチームとスクラムマスター兼任してますとか…。&lt;/p&gt;

&lt;p&gt;スクラムの基本原則から言うと、スクラムマスターなどの役割の兼任はNGですし、スクラムは具体的なタスク管理手法は規定していないのでカンバンでやろうとJIRAでやろうとGithub Issueでやろうとそれはスクラムと関係ありません。朝会以外にもスクラムの大事なセレモニーはあって必ずそれらはスキップしてはいけないものとなってますし、スプリント回すにしても、ちゃんとそのスプリントは計画とあっていたのかとか、ちゃんとスプリントの成果物として受け入れ条件をクリアする品質で成果が上がってるかとか、その間に差し込みタスクがないかとかいろいろやらなきゃいけないこと・考えることはあります。&lt;/p&gt;

&lt;p&gt;そして感じたこととしては、スタートアップのアーリーフェーズだとなかなか原理的な意味でのスクラムは難しいのではということでした。スクラムやりたくともリソースが全然足りないのでスクラムマスター、プロダクトオーナーはそもそも置けないとか、スクラムチームを兼任せざるを得ないとか。&lt;/p&gt;

&lt;p&gt;また人の出入り（特に新しいメンバーを迎えるパターン）も激しいと思うのでそうなるとスクラムチームは再度チームビルディングからやり直さなければなりません（このチームビルディングで1Sprintは消費すると言われています）。&lt;/p&gt;

&lt;p&gt;なのでこういった開発現場で出来ることとしてはスクラムのフレームワークの中で良いと思うもの、有効だと思うものを選択して＜スクラムエッセンスを取り入れた開発＞を実践することではないでしょうか。&lt;/p&gt;

&lt;p&gt;一方で上記に書いたように「スクラムじゃない別の方法を提案するのもスクラムマスターの役割」と書きました。なのでスクラムにこだわる必要は全然なくて、スクラムがチームにマッチしないと思うならスクラムマスターは別の手法を提案できなきゃダメです。例えばそれがウォーターフォールでもいいしDDDでもいいしリーンスタートアップだっていいのです。&lt;/p&gt;

&lt;p&gt;そういう意味でスクラムマスターは(おそらく皆が)思っている以上にその役割を全うすることが難しいものだと感じました。&lt;/p&gt;

&lt;h2 id=&quot;section-15&quot;&gt;参考になりそうな他の人の体験記&lt;/h2&gt;

&lt;p&gt;スクラムマスター研修に行かれた他の方の体験記を紹介します。&lt;/p&gt;

&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/ohbtp9vAjuJX6L&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt;
&lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;//www.slideshare.net/yangiYa/csm2014-1114&quot; title=&quot;認定スクラムマスター研修に行ってきました&quot; target=&quot;_blank&quot;&gt;認定スクラムマスター研修に行ってきました&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;//www.slideshare.net/yangiYa&quot; target=&quot;_blank&quot;&gt;Hajime Yanagawa&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://makopi23.blog.fc2.com/blog-entry-155.html&quot;&gt;makopi23のブログ 認定スクラムマスター研修（CSM）を振り返る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="scrum" /><category term="tech" /><summary>昨年末にスクラムマスター研修を受けてきて、認定スクラムマスター (CSM)となりました。スクラムマスター研修で学んだこととして社内に共有した内容をこちらにも共有してみようと思います。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.toshimaru.net/images/posts/scrum/scrum.jpg" /></entry></feed>
