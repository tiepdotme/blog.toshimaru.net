<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Hack Your Design!]]></title>
  <link href="http://blog.toshimaru.net/atom.xml" rel="self"/>
  <link href="http://blog.toshimaru.net/"/>
  <updated>2014-03-09T01:48:49+00:00</updated>
  <id>http://blog.toshimaru.net/</id>
  <author>
    <name><![CDATA[Toshimaru]]></name>
  </author>

  
  <entry>
    <title type="html"><![CDATA[バンクーバーの仕事を退職しました]]></title>
    <link href="http://blog.toshimaru.net/vancouver-job-after/"/>
    <updated>2014-03-07T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/vancouver-job-after</id>
    <content type="html"><![CDATA[<p>バンクーバーでWebデベロッパーの仕事を見つけ約半年ほど(5ヶ月くらい)働いてきましたが、この度その仕事を辞めることにいたしましたので報告します。</p>

<p>どのように海外で就活してジョブGETに至ったかやカナダの現地企業で働いてみて感じてことは以前のエントリにまとめてあります。興味がある方はそちらをどうぞ。</p>

<ul>
  <li><a href="http://blog.toshimaru.net/how-to-find-job-in-Vancouver/">僕が単身海外（バンクーバー）に来て仕事を見つけるまでにやったこと</a></li>
  <li><a href="http://blog.toshimaru.net/my-impression-after-working-2-months/">2ヶ月間WEBエンジニアとして海外で働いてみて感じたこと</a></li>
</ul>

<p>今回は海外の仕事の振り返りエントリとして、（日本語で書いていることだし）良い事も悪い事も含めざっくばらんに書いてみようと思います。</p>

<h2 id="section">やってたこと</h2>

<p>働いていた会社は<a href="http://www.sproutatwork.com/">Sprout Willness Solution</a>というところになります。</p>

<p>そこでWebアプリケーションを作っていました。どんなアプリケーションかは下記の動画を観てもらうと早いかもしれません。</p>

<iframe width="560" height="315" src="//www.youtube.com/embed/JI7xKhJvOXM?rel=0" frameborder="0" allowfullscreen=""></iframe>

<p>似たようなサービスが日本に無いのでなかなか説明するのが難しいのですが、一言で表現するなら「従業員の健康促進WEBアプリケーション」とでもいいましょうか。B2Bで企業に対し提供されるWEBアプリで、それを使い従業員はアクティビティをトラッキングしたり、目標をセットしたり、イベントを作成したりできるサービスになります。</p>

<p>入社当初は当アプリのi18nプロジェクトのコアエンジニアとしてイギリス人のもう一人のコア開発者と共に働きました。対応言語は英語とフランス語の２か国語（カナダの公用語は英語とフランス語）。このi18n対応は３ヶ月ほどで終わり、その後は新機能の開発、機能改修、バグフィックスなどをやってました。</p>

<h2 id="section-1">辞める理由</h2>

<p>ワーキングホリデーのビザが切れる直前のギリギリまで働き続けることも可能だったのですが、今回その前に退職という選択をしました。なぜ辞めるのか。大きく理由は３つです。</p>

<h3 id="section-2">コントリビュートできた</h3>

<p>第一に技術的な意味で自分ができる貢献は十分にできたかなと感じたからです。以下は会社から与えられた基本タスク以外にやったことです。</p>

<ul>
  <li>Gitコマンドの使い方 (rebase, cherry-pickなど)を同僚に教えた</li>
  <li>Github上でプルリクエストを出すかたちで新機能の開発を進めた（誰もプルリ機能を使ってなかったので広める意味でやってたけど、結局だれもプルリ方式の開発を真似してくれなかった…）</li>
  <li>煩雑なマニュアル・デプロイプロセスがあったのでシェルスクリプトを書いてデプロイの一部を自動化</li>
  <li>コードのリファクタリング</li>
  <li>不必要・ムダなファイルを削除</li>
</ul>

<p>これらは別段すごく難しいことでもないし、そこそこのエンジニアであれば行って当たり前のことだと思います。しかし誰もやろうとしなかったので僕がやりました。</p>

<p>これらの他にも実装方法、設計、開発方法とかに改善余地はあったけど、その辺を同僚・上司とディスカッションして決定まで持っていくだけの英語力が僕になく、この辺が自分の貢献できる限界かな、という感じでした。</p>

<h3 id="section-3">海外でも通用する</h3>

<p>第一の理由で書いたように、同僚に何かを教えてもらうよりも、自分がgitコマンドの使い方など同僚に何かを教えることが多かったです。言い換えると技術的な面で会社からは学ぶことはほとんどなかった、ということになります。他の同僚エンジニアと技術力を比べても自分のほうが高かった気がしてます。このことは僕に「海外でも自分の能力は通用する」という実感を与えました。これが第二の理由です。</p>

<p>漠然と「海外のプログラマはデキる！」というイメージを抱いていたわけですが、まぁもちろんそんなことはないですよね。どこの国でもそこそこ優秀な層は全体の数十％で、さらにそこから超が付く優秀になると数％なわけです。漠然と海外にある種の＜エンジニアの理想郷＞を描いていたわけですが、そんな世界はもちろんなかったわけです。</p>

<p>自分が超の付く優秀なエンジニアだとは思っていませんが、海外でも自分の力が通用すると知れたのは今後の自信にもつながりとても良かったと思ってます。</p>

<h3 id="section-4">英語の壁</h3>

<p>技術力「は」通用しました。しかし英語力はまだまだだなと感じさせられました。先日こんな記事を見つけました。</p>

<blockquote>
  <p>文系で日本人と関係ないことをしようとすると、問答無用で１）（<em>筆者注：英語スピーキングレベル上級</em>）を目指す必要があり、そうでないと、能力以前にチャンスをほとんど与えられません。 <em>(…中略…)</em> 理系のエンジニアであれば、２）（<em>筆者注：英語スピーキングレベル中級</em>）になれば、どんな場所でも昇進のチャンスはあるでしょう。ちょっとイライラするけど、スキルをも持っているなら我慢できるレベルです。</p>

  <p><a href="http://nururi.com/?eid=528">じゃあ、英語スピーキング</a></p>
</blockquote>

<p>自分はスキルで会社に採用された形になりますが、上エントリにおけるレベルの「中級レベル」にも満たないスピーキング能力です。（初級と中級の間くらいだと思う）　エンジニア間の会話では同じテクノロジーを共有して話すことになるので、英語が話せなくてもなんとかなりましたが、ビジネス層の人との会話となるとそうもいきません。「実装方法」「デッドラインに間に合いそうか」「なぜこのバグが発生したか」などのトピックを技術のわからない人にもわかるように英語で説明する必要があります。そのときにやっぱり英語能力の足りなさを感じるわけです。</p>

<p>そして周りはみんなカナディアンで英語ネイティブスピーカー。そんな中に身を置いていると、技術的な面では無問題ですが、英語の面で皆の足を引っ張っていることは明らかなわけです。</p>

<p>もちろん僕は帰国子女でもないし海外生活も一年足らずなので、そのレベルでネイティブ・スピーカーと対等に話そうなどとはどだい無理な話ですが、それでもビジネスシーンで自分の英語力が不足していことは痛感しました。ということで残りの滞在期間は英語の学習に充てることにしました。それが残りの期間を最も有効に活用できる道と考えました。</p>

<h2 id="section-5">良かったこと</h2>

<p>以下は仕事を振り返って良かったことです。</p>

<ul>
  <li>英語環境下で働けた</li>
  <li>Githubで開発できた</li>
  <li>コード、開発フローをちょっとだけ改善できた</li>
  <li>技術力が通用した</li>
  <li>英語能力がまだまだだと知れた</li>
  <li>ノー残業だったこと（MAX残業は一時間くらい）</li>
  <li>ノー残業環境を活かし、自分でCodeSchoolなどのオンラインコースをとって新しい技術を学べた</li>
</ul>

<h2 id="section-6">悪かったこと</h2>

<p>悪かったこと。（これはあくまでも自分の働いたスタートアップの環境であってカナダ企業全体に当てはまることでは全くないと思うので普遍化しないでくださいね。）</p>

<ul>
  <li>全体的に適当
    <ul>
      <li>デッドラインを守らない、無計画なスケジュールを立てる、仕様がざっくりしすぎている、など</li>
      <li>給料の支払いが遅れたりすることがあった。それに対する会社側の対応も不誠実なものだったのでイライラした</li>
    </ul>
  </li>
  <li>英語でコミュニケーションがうまくできなかった</li>
  <li>スタートアップの負の側面に立ち会う
    <ul>
      <li>開発者を統括するマネージャーが辞めた、続けざまに重要な役割を担っていたキー開発者が辞めた。そして僕への負担が２倍以上になったりした。スタートアップは成長スピードが早い一方、このように壊れるのも早い。スタートアップの負の側面を見た気がした。</li>
    </ul>
  </li>
</ul>

<h2 id="section-7">今後</h2>

<p>語学学校でもう少し英語の勉強をして夏頃に日本に帰ろうと思います。日本での仕事どうしようかなぁ…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013年に参加したAdventCalendar、そしてAdventCalendar参加の意義]]></title>
    <link href="http://blog.toshimaru.net/2013-advent-calendar/"/>
    <updated>2013-12-29T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/2013-advent-calendar</id>
    <content type="html"><![CDATA[<p>2013年のAdvent Calendarは下記の記事にて参加しました。</p>

<ul>
  <li><a href="http://blog.toshimaru.net/php-force-property/">PHPのプロパティをStrictに定義する</a> (<a href="http://www.adventar.org/calendars/101">PHP Advent Calendar 2013</a>)</li>
  <li><a href="http://blog.toshimaru.net/one-thing-you-should-know-about-asahikawa/">旭川にある有名な動物園についてあなたが知るべきたった１つのこと</a> (<a href="http://www.adventar.org/calendars/77">道民部 Advent Calendar 2013</a>)</li>
  <li><a href="http://blog.toshimaru.net/php-trait/">PHP5.4のtrait機能を理解する</a> (<a href="http://www.adventar.org/calendars/101">PHP Advent Calendar 2013</a>)</li>
  <li><a href="http://blog.toshimaru.net/canadian-beers/">カナディアンビールの紹介</a> (<a href="http://www.adventar.org/calendars/86">ビール Advent Calendar 2013</a>)</li>
  <li><a href="http://blog.toshimaru.net/css-animation/">CSS3アニメーションを使ってサイトをリッチに</a> (<a href="http://www.adventar.org/calendars/57">CSS Property Advent Calendar 2013</a>)</li>
  <li><a href="http://blog.toshimaru.net/chrome-dev-tool/">細かすぎて伝わりにくいChrome Developerツールを使いこなそう！</a> (<a href="http://www.adventar.org/calendars/62">Frontrend Advent Calendar 2013</a>)</li>
  <li><a href="http://blog.toshimaru.net/jquery-8-tips/">jQuery使いが知っておくべき8つのjQueryテクニック</a> (<a href="http://www.adventar.org/calendars/135">jQuery Advent Calendar 2013</a>)</li>
</ul>

<p>合計７本。思ったよりも多く書くことができました。</p>

<h2 id="advent-calendar">Advent Calendar参加意義</h2>

<p>Advent Calendarに参加する意義とは何でしょうか？　僕は下記のように考えています。</p>

<ul>
  <li>ブログを書くきっかけになる</li>
  <li>ブログを書くモチベーションになる</li>
  <li>普段より多くの人に読んでもらえる</li>
  <li>他の人のブログを知る・読むきっかけになる</li>
</ul>

<h2 id="section">ブログを書くきっかけになる</h2>

<p>自分の場合、「これブログに書こうかなー」とネタだけ書き留めておいてあるのですが、面倒で＜下書き＞状態のまま保存されている記事がいくつかあります。Advent Calendarはそれを掃き出すいいきっかけとなります。例えばPHPについてブログを書こうかなと思っていることがあるのであれば、思い切ってPHP Advent Calendarに参加して書くきっかけとしちゃいましょう。</p>

<p>Advent Calendarは12月という時期もあり2013年を総括する良いきっかけでもあります。エンジニアであれば2013年の間に学んだ新しい技術、面白い技術、紹介したい技術を2013年総括の意味も込めて書いてみましょう。ブログに残すことにより自分が2013年に何を学んだのかを振り返る良いきっかけにもなりますし、「書く」ことにより自分自身の知識の整理にもなり良い事尽くしです。</p>

<h2 id="section-1">ブログを書くモチベーションになる</h2>

<p>ブログを書くモチベーションになるのもAdvent Calendarの良いところです。１人で書いているとブログを書こうと思い立ってもどうしても「別に後でいいか」「今度時間あるときに更新しようか」と放置気味になってしまうのが怠惰な人間の性（さが）であります。</p>

<p>しかしAdvent Calendarの場合はみんなでやっているので、「みんなも更新してるし俺も頑張るか」って気になります。あと更新する日付も事前に決定されているので「○○日までには記事を書いてアップデートしなきゃ！」というある意味締め切り的な役割もあります。</p>

<p>逆にこれを利用して、書くネタはないけどとりあえず参加だけポチっておいて＜更新しなきゃいけない状況＞を作ることでブログ記事を書くことができるって作戦もありかと思います。</p>

<p>あと<a href="http://dic.nicovideo.jp/a/%E9%A0%93%E6%8C%AB%E3%81%97%E3%81%9F%E6%8A%80%E8%A1%93%E7%B3%BB%E3%82%A2%E3%83%89%E3%83%99%E3%83%B3%E3%83%88%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%BC%E3%81%AE%E4%B8%80%E8%A6%A7(2013%E5%B9%B4)">こんな</a>のもネタ記事として存在していますが、Advent Calendarを書かない人の抑止力として働いてて悪くないネタ記事だと思ってます。「俺が記事更新しなかったから＜頓挫＞とか言われた！」なんてなりたくないですもんね。</p>

<h2 id="section-2">普段より多くの人に読んでもらえる</h2>

<p>これも良いことです。Advent Calendarの記事にたどり着く流れとしては下記のような可能性があるかと思います。</p>

<ol>
  <li>普段からのブログの読者</li>
  <li>Advent Calendarのサイトからたどり着く</li>
  <li>バズったAdvent Calendarから同じAdvent Calendarの別の記事を読みに行く</li>
</ol>

<p>普段ブログでリーチできる読者というのは1のみかと思います。例えばRSSでブログを購読しているとかTwitterでフォローしていてそこから記事にたどり着くとか。1の読者は普段からそのブログを読んでいるので、Advent Calendarとして書こうが書かまいがあまり影響はないと言えます。</p>

<p>しかしAdvent Calendarに書くことにより、普段ブログに訪れないであろう2や3の人までリーチできるのは良いことです。つまり、Advent Calendarというメディアを利用するということです。最新技術にアンテナ張っているエンジニアであれば、自分の興味ある技術のAdvent Calendarは全部とは言わずとも、それなりにチェックしているかと思います。これらのエンジニアは大手のAdvent Calendarサイト（<a href="http://www.adventar.org/">Adventar</a>とか<a href="http://qiita.com/advent-calendar">Advent Calendar (qiita)</a>）であればチェックしているかと思うのでそこからのブログの流入が見込めます。</p>

<p>また3のようにバズった記事からの流入の可能性も見込めますね。例えば下記の記事は技術界隈にとどまらず、多くの人に読まれたようです。</p>

<p><a href="http://blog.jugyo.org/post/70240698465">◯ックパッドの面接に落ちたことを社員の高◯さんに言いふらされた話</a> from <a href="http://www.adventar.org/calendars/252">闇 Advent Calendar 2013</a></p>

<p>この記事を読んだ人の中には「闇Advent Calendarにはこの記事の他にどんな闇があるのだろう？」と興味を持ち他の記事も読みに行ったのではないでしょうか。このように普段読まれない読者からもブログを読んでもらえてAdvent Calendarは素晴らしいです。</p>

<h2 id="section-3">他の人のブログを知る・読むきっかけになる</h2>

<p>他の人のブログを知ったり、読んだりするきっかけにもなるのも良いです。上記に書いたような普段からのブログ読者、あるいはバズった記事でないとなかなか新たなブログを知ったりするのは難しいです。自分も今回参加したAdvent Calendarのその他の記事を読んだのをきっかけにTwitterをフォローしたり、そこから同ブログの別の記事をディグったりしました。</p>

<p>わりとブログ上でのエンジニア有名人はAdvent Calendarに参加しているケースも多いので、PHPのカレンダーであればPHP界隈のエンジニア、フロントエンドのカレンダーであればフロントエンド界隈のエンジニア、GoのカレンダーであればGo界隈のエンジニアにどんな人がいるのかを知ることができます。例えばGoなんかは最近ホットになっている言語でもあるのでAdvent Calendarに参加しているエンジニアの方々をフォローしていれば、Go言語の最新動向もフォローできると思います。</p>

<h2 id="advent-calendar-1">Advent Calendarを終えて</h2>

<p>このようにAdvent Calendarはエンジニアにとって良い事尽くしですので、来年のAdvent Calendarも参加したいなーと考えている所存です。これを読んでいるエンジニアの方でAdvent Calendarに参加したことないという方は来年のカレンダーにチャレンジしてみてはいかがでしょうか？</p>

<h3 id="section-4">反省</h3>

<p>前半の記事は参加表明した後に当日になる前に準備をすることができたのでちゃんと日本時間で更新することができましたが、後半の方は日本との時差もあり日本時間で1日遅れての更新となってしまった記事がありました。それが今回の反省点。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacでWi-Fiのシグナル強度を調べる]]></title>
    <link href="http://blog.toshimaru.net/mac-wifi-diagnostics/"/>
    <updated>2013-12-28T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/mac-wifi-diagnostics</id>
    <content type="html"><![CDATA[<p>カフェなんかでWi-Fi使っていると、Wi-FiがつながりにくくなってWi-Fiシグナル強度が弱いのかなーとか思って、シグナル強度調べるアプリを探していたところ、Mac標準搭載のアプリで発見。</p>

<p>アプリ名は「Wireless Diagnostics」。場所は自分の環境(Mountain Lion)で<code>/System/Library/CoreServices</code>にありました。</p>

<h2 id="section">手順</h2>

<ul>
  <li>Wireless Diagnostics を開く。（コマンド: <code>open /System/Library/CoreServices/Wireless\ Diagnostics.app</code>）</li>
  <li>Utilitiesを開く(<code>⌘2</code>)</li>
  <li><code>Wi-Fi Scan</code>のタブを選択して<code>Scan Now</code>をクリック。</li>
</ul>

<p><img src="/images/posts/wifi-scan.png" alt="mac wi-fi scan" /></p>

<p>本画像のRSSI(Received signal strength indication)がシグナルの強度となります。値が高い方が「シグナルが強い」という意味になります。</p>

<p>詳しい説明を引用しておきます。</p>

<blockquote>
  <p>シグナルの数値は、MacとWi-Fiアクセスポイントまたはルータ間のシグナルの強度を示します。数値が大きいほどシグナルは良好です&gt; 。数値はマイナス表示なので、「-60」の方が「-80」よりも良好ということになります。</p>

  <p>ノイズの数値は、シグナルの障害となるワイヤレスノイズの大きさを示しています。この場合、数値は低いほうが良好です。ノイズも&gt; マイナス表示なので、ノイズレベル「-94」の方が「-90」よりもノイズが少なくて良好なネットワーク状態である、ということを示し&gt; ています。</p>

  <p>シグナルとノイズの数値を比較し、シグナル対ノイズの比率（SNR）を導き出しましょう。信号レベルが「-60」でノイズレベルが「-91」の場合、数値の差は「31」になります。SNRが高ければ高いほど、Wi-Fiのパフォーマンスが良好であることを示します。SNRが25以上であれば、Wi-Fiのパフォーマンスは良好といえるでしょう。</p>

  <p>(<a href="http://www.lifehacker.jp/2012/08/120807os_x_wifi.html">Wi-Fiの電波が弱い？ Macには診断ツールを標準搭載しております</a>)</p>
</blockquote>

<p>Wi-Fiのパフォーマンスを調整したいときに是非つかいたいツールですね。</p>

<h3 id="section-1">参考</h3>

<ul>
  <li><a href="http://osxdaily.com/2012/07/31/wi-fi-scanner-mac-os-x-mountain-lion/">Wi-Fi Scanner Tool is Native in Mac OS X, Here’s How to Use it</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery使いが知っておくべき8つのjQueryテクニック]]></title>
    <link href="http://blog.toshimaru.net/jquery-8-tips/"/>
    <updated>2013-12-23T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/jquery-8-tips</id>
    <content type="html"><![CDATA[<p><a href="http://www.adventar.org/calendars/135">jQuery Advent Calendar 2013</a>の23日目の記事となります。今回はjQuery使いとして覚えておきたいテクニックを個人的に8つピックアップしてみました。</p>

<p>日本との時差の関係で更新が24日になっているでしょうが気にせずいきましょう。</p>

<h2 id="jquery-2x-vs-1x">1. jQuery 2.x vs 1.x</h2>

<p>１つ目はテクニックというよりTipsです。jQueryには最新版の2.x系と1.x系があります。さてどのようにバージョンを選べばいいでしょう？</p>

<p>2.x系からの大きな変更点としては<strong>IE6/7/8のサポート廃止</strong>です。大して1.x系はそれらのブラウザをサポートしています。</p>

<p>よってまとめるとIE6/7/8をサポートしているのであれば1.x系を使用、サポートしないのであれば2.x系を使用で良いです。2.x系のほうがサイズも小さく、速度も早いので旧ブラウザを切れるのであれば2.x系を推奨です。</p>

<h2 id="on">2.　イベントハンドリングには<code>on()</code>を使うべし</h2>

<p>もはや常識ですかね。jQuery1.7以前だと<code>bind()</code>,<code>live()</code>,<code>delegate()</code>やらいろいろあったのが1.7で<code>on</code>でまとめられました。</p>

<p>ではここで質問。<code>click()</code>などではなく、<code>on()</code>を使うことで何が嬉しいのでしょうか？　１つ目は複数のイベントを登録できるということです。下記では<code>click</code>と<code>mouseenter</code>の２つのイベントを１つの処理にアタッチしてます。</p>

<iframe width="100%" height="100" src="http://jsfiddle.net/toshimaru/YDur2/2/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>２つ目、オブジェクトを引数に取ることができ、複数イベントをアタッチできます。</p>

<iframe width="100%" height="130" src="http://jsfiddle.net/toshimaru/cANuP/1/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>３つ目、第二引数にアタッチ先のセレクターを指定することができます。これでなにが嬉しいかというとAJAXなどで遅延して取得してくるような要素に対しても事前にイベントを設定することができます。</p>

<iframe width="100%" height="100" src="http://jsfiddle.net/toshimaru/hSZLY/1/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>いわずもがなですが<code>off()</code>でイベントをデタッチできることも<code>on()</code>の良い所です。</p>

<h2 id="ajaxdonefail">3. AJAXには<code>done()</code>、<code>fail()</code>を使うべし</h2>

<p><a href="http://blog.toshimaru.net/jquery-ajaxdeferredajax/">去年のjQuery Advent Calendar</a>で書いた通りです。</p>

<pre><code>$.ajax({
    url: "ajax.html",
    success: function(data) {
       alert('success!!');
    },
    error: function(data) {
       alert('error!!!');
    }
});
</code></pre>

<p>上記の書き方よりも、</p>

<pre><code>$.ajax({
    url: "ajax.html",
}).done(function(data){
    alert('success!!');
}).fail(function(data){
    alert('error!!!');
});
</code></pre>

<p>こっちのほうがPromiseなモダン形式です。</p>

<h2 id="ajax">4. <code>ajax()</code>だけじゃなくショートカットメソッドも活用すべし</h2>

<p><code>ajax()</code>がオプションで色々出来過ぎちゃってついつい<code>ajax()</code>を使いがちですが、jQueryには<a href="http://api.jquery.com/category/ajax/shorthand-methods/">AJAXショートカットメソッド</a>があるんです！　例えばデータをPOSTするAJAX。下記に<code>ajax()</code>と<code>post()</code>の二通り書き方を載せましたが、<code>post()</code>のほうがシンプルでよさ気ですね。</p>

<iframe width="100%" height="300" src="http://jsfiddle.net/toshimaru/BkNfr/2/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h2 id="find">5. <code>find()</code>を使って絞り込むべし</h2>

<p>これもわりと有名ですかね。下記のセレクタは、</p>

<pre><code>$('.foo #bar')
</code></pre>

<p><code>find()</code>を使ったほうが良いとされています。</p>

<pre><code>$('.foo').find('#bar')
</code></pre>

<h2 id="section">6. カスタムイベントを定義する</h2>

<p>下記のコードでは<code>show.price</code>というカスタムイベントを定義しています。クリック時に<code>show.price</code>イベントを<code>trigger()</code>しています。</p>

<iframe width="100%" height="200" src="http://jsfiddle.net/toshimaru/JHYhR/1/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h2 id="dom">7. 属性を指定してDOMエレメントを生成できる</h2>

<p>こんな感じでAタグが生成できます。</p>

<pre><code>$('&lt;a&gt;', {href: 'http://google.com/', title: 'google'}).text('google')
[&lt;a href=​"http:​/​/​google.com/​" title=​"google"&gt;​google​&lt;/a&gt;​ ]
</code></pre>

<p>$.mapと組み合わせるとなかなかよいかもしれません。</p>

<pre><code>var links = $.map(['google.com', 'yahoo.com'], function(link) {
    var list = $('&lt;li&gt;');
    $('&lt;a&gt;&lt;/a&gt;', {href: link}).text('LINK').appendTo(list);
    return list;
});

$('&lt;ul&gt;').html(links)
=&gt; [&lt;ul&gt;​
        &lt;li&gt;​
        &lt;a href=​"google.com"&gt;​LINK​&lt;/a&gt;​
        &lt;/li&gt;​
        &lt;li&gt;​
        &lt;a href=​"yahoo.com"&gt;​LINK​&lt;/a&gt;​
        &lt;/li&gt;​
    &lt;/ul&gt;​ ]
</code></pre>

<h2 id="formserialize">8. form送信時は<code>serialize()</code>を使って値をまとめて取得すべし</h2>

<p><code>serialize()</code>を使うことでform内のinputの値をまとめて取得できます。</p>

<iframe width="100%" height="130" src="http://jsfiddle.net/toshimaru/3GG3c/3/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h3 id="section-1">参考</h3>

<ul>
  <li><a href="http://blog.jquery.com/2013/04/18/jquery-2-0-released/">jQuery 2.0 Released</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[細かすぎて伝わりにくいChrome Developerツールを使いこなそう！]]></title>
    <link href="http://blog.toshimaru.net/chrome-dev-tool/"/>
    <updated>2013-12-20T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/chrome-dev-tool</id>
    <content type="html"><![CDATA[<p><a href="http://www.adventar.org/calendars/62">Frontrend Advent Calendar 2013</a>、20日目の記事でございます。フロントエンド関連の記事として細かすぎて伝わりにくいであろうChrome Developerツールの使い方を紹介してみたいと思います。</p>

<p>（※写真は公式ページから引用）</p>

<h2 id="consolelogconsole">console.log以外にも便利なconsoleメソッドがある</h2>

<p><code>console.log()</code>とかは常識でしょうが、それ以外にも実はconsole系メソッドが多くあります。下記のような感じ。</p>

<ul>
  <li><code>console.error()</code>: コンソールにエラー出力</li>
  <li><code>console.warn()</code>: コンソールに警告出力</li>
  <li><code>console.assert()</code>: アサーション。第一引数がfalseだった場合に第二引数の文字列を出力。</li>
  <li><code>console.time()</code> &amp; <code>console.timeEnd()</code>: タイマー機能。前者でタイマースタート、後者でタイマーストップ。引数の文字列でタイマーIDを識別している。</li>
</ul>

<p>例えば下記のコード例では<code>console.time</code>を使って<code>getElementById</code>とjQueryのセレクターのパフォーマンスの違いを計測しています。結果はChromeConsoleを開いてResultを押してどうぞご自身の目で確認してみてください。</p>

<iframe width="100%" height="300" src="http://jsfiddle.net/toshimaru/tr8Vg/5/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>ちなみに私の環境上での結果。</p>

<p><img src="/images/posts/chromedev/result.png" alt="assert" /></p>

<h3 id="consoleassert">console.assert</h3>

<p>簡易的な<code>true</code>/<code>false</code>テストであれば<code>console.assert()</code>が使えます。例えばこんなコード。</p>

<pre><code>function returnTrue() { return false; }
console.assert(returnTrue(), 'Trueをreturnすべきだよ！')
</code></pre>

<p>こんな感じで表示されます。</p>

<p><img src="/images/posts/chromedev/assert.png" alt="assert" /></p>

<h2 id="csschromecss">CSSマッピングでChromeからCSS変更を直接反映！</h2>

<p>CSSマッピングの機能を使うことでChrome上のCSS変更を直接反映することができます。簡単な手順はこうです。</p>

<ul>
  <li>ChromeDevツールの歯車アイコンで開くメニューからWorkspaceを追加</li>
  <li>マッピングしたいファイルを選択し、右クリックして <code>Map to File System Resource...</code>をクリックする。</li>
</ul>

<p><img src="/images/posts/chromedev/css-map.png" alt="css mapping" /></p>

<p>(Image from <a href="http://liginc.co.jp/web/tool/browser/38012">Web屋ならチェックしておきたい！作業効率が激変するChrome DevToolsの便利な使い方まとめ</a>)</p>

<p>これで準備OK！ Chrome上で直接ヴィジュアルを確認しながらいい具合に変更を加えてれば、ローカル上のファイルも変更されます。</p>

<h2 id="sass">ソースマッピングにSASSを使う！</h2>

<p>CSSよりもやっぱり時代はLESS,SASSなどのCSSプリプロセッサーですよねー。ということで実はCSSマッピングにSASSも使えるんです。ただし下記の点に注意してください。</p>

<ul>
  <li><strong>Sass 3.3以上</strong>が必要</li>
  <li><strong>Chrome Canary</strong>を使う</li>
  <li><strong>chrome://flags</strong> にアクセスしてデベロッパーツールを有効にする</li>
</ul>

<p>↓Enable Developer Tools experimentsをONにする↓</p>

<p><img src="/images/posts/chromedev/dev-flag.png" alt="css mapping" /></p>

<p>詳しい手順は<a href="http://dev.classmethod.jp/etc/scss-source-maps-debug/">こちら（Chrome CanaryでSCSS(Sass)のデバックを試してみました。）</a>で確認してみてください。良きCSSライフを！</p>

<h2 id="androidchrome">AndroidをChromeでリモートデバック可能</h2>

<p>下記動画でPaul Irish氏がリモートデバッギングを簡単に解説してくれてます。この動画でどんなことができるか簡単に把握することができます。</p>

<iframe width="560" height="315" src="//www.youtube.com/embed/Q7rEFEMpwe4" frameborder="0" allowfullscreen=""></iframe>

<p>実機をChromeDevツールでデバッグできるのはとても喜ばしいことです。注意点は下記。</p>

<ul>
  <li><a href="https://play.google.com/store/apps/details?id=com.chrome.beta">Chrome Beta</a>がAndroidに必要</li>
  <li>USBでAndroidと接続が必要</li>
  <li>アンドロイド上でDeveloperオプションを有効にする必要があります。ONにするためには設定からBuild Numberをゴニョゴニョする必要があります</li>
</ul>

<p>詳しい解説は<a href="https://developers.google.com/chrome-developer-tools/docs/remote-debugging">こちら（Remote Debugging Chrome on Android）</a>を参照。</p>

<h2 id="fps">FPSを確認してヌルヌル動作を目指そう！</h2>

<p>たとえば下記のかなりリッチなパララックスウェブサイト。ちょっと見てみてください。</p>

<p><a href="http://letsfreecongress.org/">Money wins Elections</a></p>

<p>パララックス効果はサイトをリッチに見せることができる最近良く使われるテクニックではありますが、一方ローエンドPCでの動作も気にしたいところです。上サイトをTimelineからレコーディングしてみます。</p>

<p><img src="/images/posts/chromedev/chrome-timeline.png" alt="timeline" /></p>

<p>上のグレイ線が30FPSのライン、下の線が60FPSのラインです。途中のぶわーって広がるエフェクトのところで30FPSまで落ちているのが確認できます。体感的にも少しガクついている感じです。ローエンドPCだともっとガクつくことでしょう。</p>

<p>（※本機能の使い方もPaul Irish氏が<a href="http://www.youtube.com/watch?v=bqfoYaKCYUI">Fluent 2013</a>の講演で紹介しています。）</p>

<h2 id="section">おわりに</h2>

<p>ここで紹介した以外にもまだまだ便利な使い方がChromeDeveloperツールにはあります。自分もまだ全然把握できていません。もし「この機能が便利！」ってのがありましたら是非とも教えてくださいまし〜。</p>

<h3 id="section-1">参考</h3>
<ul>
  <li><a href="http://www.igvita.com/slides/2012/devtools-tips-and-tricks/">Wait, DevTools could do THAT?</a></li>
  <li><a href="http://blog.asial.co.jp/1036">【Javascript】consoleオブジェクトが持つlog以外の便利メソッド18（前編）</a></li>
  <li><a href="https://developers.google.com/chrome-developer-tools/docs/console">Using the Console</a></li>
  <li><a href="http://liginc.co.jp/web/tool/browser/38012">Web屋ならチェックしておきたい！作業効率が激変するChrome DevToolsの便利な使い方まとめ</a></li>
  <li><a href="https://developers.google.com/chrome-developer-tools/docs/css-preprocessors#toc-requirements">Working with CSS Preprocessors</a></li>
  <li><a href="http://dev.classmethod.jp/etc/scss-source-maps-debug/">【Source Maps】Chrome CanaryでSCSS(Sass)のデバックを試してみました。</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS3アニメーションを使ってサイトをリッチに]]></title>
    <link href="http://blog.toshimaru.net/css-animation/"/>
    <updated>2013-12-11T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/css-animation</id>
    <content type="html"><![CDATA[<style type="text/css">
@-webkit-keyframes anim {
    0%   { opacity: 0; }
    100% { opacity: 1; }
}
@keyframes anim　{
    0%   { opacity: 0; }
    100% { opacity: 1; }
}
.post-image  {
  -webkit-animation: anim 2s infinite;
  animation: anim 2s infinite;
}
</style>

<p><a href="http://www.adventar.org/calendars/57">CSS Property Advent Calendar 2013</a>の11日目の記事としてCSSアニメーションのプロパティを紹介をします。</p>

<h2 id="css">なぜCSSアニメーションなのか？</h2>

<p>さて本ブログでもタイトルやアイキャッチ画像のイメージの表示にちょっとしたCSS3アニメーションを採用しています。ほんのちょっとのCSSの記述なんですがサイトがイイ感じにリッチに見えてとても気に入ってます。</p>

<p>jQueryなんかでも<a href="http://api.jquery.com/animate/">.animate()</a>を使えばアニメーションができますね。ではなぜCSS3アニメーションなのか？　そこからエントリを始めてみたいと思います。</p>

<h3 id="css-vs-jquery">パフォーマンス的観点 CSS vs jQuery</h3>

<p>DEV.OPERAにて<a href="http://dev.opera.com/articles/view/css3-vs-jquery-animations/">CSS3 vs jQueryアニメーションの比較</a>が行われています。ここではjQueryとCSS3によるアニメーションどちらが優れているかがレポートされており、最終的な勝者はCSS3だとして記事を結んでいます。本比較において使われている<a href="http://devfiles.myopera.com/articles/10262/CSS3-300-boxes.html">CSS3のアニメーションサンプル</a>と<a href="http://devfiles.myopera.com/articles/10262/jQuery-300-boxes.html">jQueryのアニメーションサンプル</a>を自分のChrome(Canary)上でも比較してみました。</p>

<p>肉眼でもCSSアニメーションのほうが綺麗に見える気がします。DevTools上でも実際、Rendering、Paintイベントをフィルターしてみたところ、実際jQueryのほうがイベントの粒度が荒いことが見て取れます。</p>

<h4 id="css-1">CSSによるアニメーション</h4>
<p><img src="/images/posts/css-animate/1.png" alt="比較１" /></p>

<p><img src="/images/posts/css-animate/A.png" alt="比較A" /></p>

<p>イベントが滑らかに流れています。メモリ効率も良い感じです。</p>

<h4 id="jquery">jQueryによるアニメーション</h4>
<p><img src="/images/posts/css-animate/2.png" alt="比較２" /></p>

<p><img src="/images/posts/css-animate/B.png" alt="比較B" /></p>

<p>イベントの流れの傾斜がCSSより緩やかで、たまに上画像のようにもたつくことがある。メモリ効率も山状に上がってよろしくないです。</p>

<p>パフォーマンス的に考えてCSSアニメーションはjQueryよりも優れています。</p>

<h3 id="section">ブラウザ対応は？</h3>

<p>CSS3プロパティだとブラウザ対応が心配なところ。<a href="http://caniuse.com/#search=keyframes">サポート状況はこんな感じ</a>です。</p>

<p><img src="/images/posts/css-animate/browser.png" alt="対応状況" /></p>

<p>IEは10以降、それ以外のメインブラウザの最新版は対応済みですね。ベンダープレフィックスも<code>-webkit-</code>さえつければ大丈夫そうです。IE9以前を気にするかもしれませんが、<a href="http://www.adobe.com/jp/devnet/dreamweaver/articles/html5pack_css3_part6.html">グレースフル・デグラデーション</a>の考え方で＜装飾＞という意味においてはCSSアニメーションプロパティはどんどん使っていい機能かと思います。</p>

<h2 id="css-2">CSSアニメーションの書き方</h2>

<p>ではCSSアニメーションはどう書くか？　キーワードは<code>@keyframes</code>と<code>animation</code>の２つです。</p>

<pre><code>@keyframes &lt;アニメーションの名前&gt; {
    0% { /* 定義 */ }
    50% { /* 定義 */ }
    100% { /* 定義 */ }
}
</code></pre>

<p>こんな感じで0%から100%にかけて特定のタイミングでのアニメーションスタイル定義を書いていきます。次にそのアニメーション名を使った<code>animation</code>をクラス内に加えます。</p>

<pre><code>.&lt;class名&gt; {
    animation: &lt;アニメーションの名前&gt; &lt;秒数&gt;s ;
}
</code></pre>

<p>あとはこのクラス名をDOM内のアニメーションしたい要素に加えればOKです。</p>

<p>では具体例。実際に本記事タイトル下でフェードインさせている画像のCSSを見てみましょう。</p>

<pre><code>@-webkit-keyframes anim {
    0%   { opacity: 0; }
    100% { opacity: 1; }
}
@keyframes anim　{
    0%   { opacity: 0; }
    100% { opacity: 1; }
}
.post-image  {
  -webkit-animation: anim 2s infinite;
  animation: anim 2s infinite;
}
</code></pre>

<p>透過度0から透明度1へのアニメーション（<code>anim</code>）を2秒（<code>2s</code>）毎にループ（<code>infinite</code>）させてます。このアニメーションは<code>post-image</code>クラスに適応されます。実際に使用の際は<code>-webkit-</code>プレフィックス付きの定義も必要なことに注意してください。</p>

<h2 id="section-1">どこからアニメーションの着想を得るか</h2>

<p>といっても「アニメーションのCSSスタイル定義するの面倒くさい」とか「自分のやりたい動きをどう書けばいいかわからない」という人も多いかと思います。そんな人は<a href="https://daneden.me/animate/">Animate.css</a>のページを見てみるとよいかと思います。</p>

<p>これらのアニメーションは全てCSSにて動いているのですが、使い回しの効きそうなCSSで表現できる典型的なアニメーションは大体網羅されていると思うので、ここからアニメーションスタイルをパクってくると良いかと思います（CSSのサイズを気にしないという方は<code>animate.css</code>をそのままサイトに持ってきてもいいですね）。</p>

<p>CSSコードは下記のコードから引っ張ってきてください。</p>

<p><a href="https://github.com/daneden/animate.css/blob/master/animate.css">animate.css/animate.css at master</a></p>

<h3 id="section-2">最後に</h3>

<p>どうでしたか？　あなたもCSSアニメーションをサイトのちょっとしたところに取り入れてみてはいかがでしょう？</p>

<p>ただ１つ注意したいのが、基本的に人の目は動いているものに行きやすいです。アニメーションの使いすぎ、または派手すぎるアニメーションの動きはユーザビリティを著しく下げるので、「使いすぎ注意」ということを忘れずに。</p>

<h3 id="section-3">参考</h3>
<ul>
  <li><a href="https://developer.mozilla.org/ja/docs/Web/CSS/@keyframes">@keyframes - CSS / MDN</a></li>
  <li><a href="https://github.com/daneden/animate.css">daneden/animate.css - GitHub</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[カナディアンビールの紹介]]></title>
    <link href="http://blog.toshimaru.net/canadian-beers/"/>
    <updated>2013-12-09T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/canadian-beers</id>
    <content type="html"><![CDATA[<p><a href="http://www.adventar.org/calendars/86">ビール Advent Calendar 2013</a>の９日目の記事になります。</p>

<p>せっかく今現在カナダに滞在しているのでカナダで購入できるビールをいくつか紹介してみます。カナダ、と言いましたが正確にはカナダのブリティッシュコロンビア州、バンクーバで買えるビールとなります。</p>

<h2 id="section">カナダのビールについて</h2>

<p>カナダのリキュールストアなんかに行ってとても驚くのが、いわゆる「地ビール」が多いことです。日本だと地ビールって道の駅のような地域と密着しているような店でしか買えないイメージなんですが、カナダだとリキュールストアに行けば大体多くの種類の地ビールを見かけます。</p>

<p>例えば<a href="http://www.canadianbrewingawards.com/winners/years/2013/">2013年のカナディアンビールアワードの一覧</a>をざっと見ただけで、いろんな州からのいろんなビールがエントリーされていることが見て取れます。</p>

<p>いろいろなタイプのビールがあることも驚きです。日本産の名の通っているビールは微妙な違いこそあれ、大体味に大差はないかと思います。上リストにもあるようにカナダのビールは○○スタイルビール、○○エールやフレーバーのあるビールなど、様々な種類のビールが置いてあり、嗜好に応じてそれらの中から好きなビールをチョイスすることができます。</p>

<p>中でも僕が好きなのはアルコール度数高め、ホップの苦味が聞いているIPA、<a href="http://ja.wikipedia.org/wiki/%E3%82%A4%E3%83%B3%E3%83%87%E3%82%A3%E3%82%A2%E3%83%BB%E3%83%9A%E3%83%BC%E3%83%AB%E3%82%A8%E3%83%BC%E3%83%AB">インディアンペール・エール</a>です。なので今日はIPAのいくつかを紹介します。</p>

<h2 id="granville-island-ipa">Granville Island IPA</h2>

<p><img src="/images/posts/beer/1.jpg" alt="beer 1" /></p>

<p>こちらはバンクーバー、グランビルアイランドからのIPA。アルコール度数は6％。IPAの中でもそこまでクセが強くなく比較的飲みくちのスッキリしたIPAです。</p>

<h2 id="phillips-ipa">Phillips IPA</h2>

<p><img src="/images/posts/beer/2.jpg" alt="beer 2" /></p>

<p>続いてはビクトリアのお隣、ビクトリアからのIPA。アルコール度数は6.5％。先ほどのグランビルアイランドのビールとアルコール度数こそ大して変わりませんが、こちらはわりとクセが強め。ホップの苦味がはっきり感じられるIPAです。僕はこれくらいの方が好きですね。</p>

<h2 id="parallel-49-brewing-ipa">Parallel 49 Brewing IPA</h2>

<p><img src="/images/posts/beer/3.jpg" alt="beer 3" /></p>

<p>最後にParallel 49醸造所からのIPA。こちらのアルコール度数は7.2％と今回紹介する中では最もアルコール度数の高いビールです。魔導師がホップを前に呪文を唱えているかのようなラベルがとても素敵です（カナダビールはラベルデザインも個性的で面白い！）。</p>

<p>強めなので１本ビールを飲んだだけでもけっこういい感じに酔えます。（アルコール苦手な人は注意！）　アルコール強者であれば２番めのPhillipsからDouble IPAという名の8.5％のビールもあるのでバンクーバにお越しの際は試してみるかとよいと思います。</p>

<h2 id="section-1">最後に</h2>

<p>以上、カナダからIPAの紹介でしたー。他にもいろんな興味のあるビールがあるので滞在中にいろいろ試してみたいと思います！</p>

<p>余談になりますが、ルートビア(Root Beer)というビールと名のつくノンアルコールビールがあるのですが、名前に騙されて買ったのだけどもゲロマズだったので注意！（沖縄でも買えるみたいです）　名前に騙されるな！</p>

<p>あと、日本で美味しいIPA飲めるところあったら教えてください。</p>

<h3 id="section-2">追記</h3>
<p>本アドベントカレンダー二日目でhokacchaさんが「インドの青鬼」という日本で買えるIPAを<a href="http://www.flickr.com/photos/hokaccha/11169857043/">紹介</a>していました。今度日本帰ったら飲んでみたいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP5.4のtrait機能を理解する]]></title>
    <link href="http://blog.toshimaru.net/php-trait/"/>
    <updated>2013-12-08T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/php-trait</id>
    <content type="html"><![CDATA[<p>この記事は<a href="http://www.adventar.org/calendars/101">PHP Advent Calendar 2013</a>の8日目の記事です。本エントリではphp5.4の注目機能の１つである<a href="http://php.net/manual/ja/language.oop5.traits.php">trait</a>をどう扱うべきかを書いてみようと思います。</p>

<h2 id="trait">Traitとは</h2>

<p>Traitとは継承関係と関係なく実装を再利用できる仕組みのことです<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup>。言い換えるならば、「多重継承」であったり「Mix-in」を可能にする仕組みと言えるでしょう。Rubyistの間ではMix-inの概念は当たり前のことでしょうが、PHP界隈ではTraitは新しい機能ということもあり浸透していない概念かと思います（Ruby以外にもTraitと似た機構はあるみたいですね<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup>）。</p>

<p>本エントリではPHPerの間では未だ聞き慣れないであろうTraitの概念を実コードとともに紹介してみようと思います。</p>

<h2 id="trait-1">Traitの特徴</h2>

<p>Traitの簡単な特徴は以下の通りです。</p>

<ul>
  <li>PHP5.4以降必須</li>
  <li>Trait自身のインスタンスを作成することはできない</li>
  <li>振る舞いを継承関係のような上下方向ではなく水平方向に定義可能</li>
</ul>

<h2 id="trait-2">Traitを使うと嬉しくなる状況</h2>

<p>ではTraitを使うべき状況、使うと嬉しい状況とはどんな状況でしょうか？　まずは下記を満たす実装を普通にPHPで書いてみます。</p>

<ul>
  <li>人間(<code>Human</code>): 「話す」「逃げる」などの基本行動が可能</li>
  <li>戦士(<code>Warrior</code>): 基本行動に加え「物理攻撃」が可能</li>
  <li>魔法使い(<code>Wizard</code>): 基本行動に加え「魔法攻撃」が可能</li>
</ul>

<p>結果、このようになりました。</p>

<script src="https://gist.github.com/toshimaru/00cc0dc16120976c7fcb.js"></script>

<p>基本行動可能な<code>Human</code>クラスがあってそれを継承した<code>Warrior</code>,<code>Wizard</code>がいて…。普通のコードかと思います。</p>

<h3 id="section">追加要件：「魔法戦士を追加したい！」</h3>

<p>こんな要望がきました。「魔法戦士も追加したいんだよねー！」　さて上記のような実装に魔法戦士を加えるとしたらどうなるでしょうか？</p>

<p>魔法も攻撃もできなきゃいけないから、まず<code>Warrior</code>を継承してその次に<code>Wizard</code>も継承して…と、ここで多重継承の問題が出てきますね。愚直に<code>Human</code>を継承した魔法戦士を作ってもいいのですが、同じコードを二度は書きたくないですよね。DRYに行きたいですよね、ね？</p>

<h3 id="trait-3">Traitを使ってみる</h3>

<p>そこでTraitの出番です。<code>trait</code>であれば振る舞いを水平方向に構成できちゃうんです。え？よくわからない？　コードを見てください。</p>

<script src="https://gist.github.com/toshimaru/ad5430fca181db62cd7a.js"></script>

<p>まずは<code>Attackable</code>、<code>Spellable</code>というトレイト、つまり「物理攻撃が可能である」「魔法攻撃が可能である」という特性を定義します。ここまでくればもう簡単。あとはそれを<code>WarriorWizard</code>クラス内で<code>use</code>してやるだけです。これで<code>WarriorWizard</code>は魔法も物理攻撃も可能になります。</p>

<p>ね？簡単でしょ？</p>

<h2 id="traittrait">今後のTrait事情―まだ来ないであろうTraitの波　</h2>

<p>今回紹介したTraitはフレームワークの設計を根本から変えうる素晴らしい機能なのですが、<a href="http://w3techs.com/technologies/details/pl-php/5/all">PHP5.4の使用率がまだ10%</a>なこと、まだまだTraitを使ったコード使用例が少ないこと、これらを考えるとTraitがPHPerに広く普及するにはあと2,3年はかかるのかな、と考えています。</p>

<p>CakePHP3では、PHP5.4が必須となり、<a href="http://www.engineyard.co.jp/blog/2013/cakephp3-preprepreview/">trait機能がうまく活用された設計</a>となっています。このフレームワークレベルでのTrait有効活用を機に、Traitを利用したナイスなコード、ひいてはPHP5.4の使用が今後増えていけばいいなと思っています。</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><a href="http://www.slideshare.net/tlync/trait">Trait とは? その使い道を考えてみる</a> <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>RubyだとMix-in、Scalaだとtrait、Perl6だとrole　にあたります。 <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bcコマンドで16進数変換]]></title>
    <link href="http://blog.toshimaru.net/bc-decimal-hex/"/>
    <updated>2013-12-05T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/bc-decimal-hex</id>
    <content type="html"><![CDATA[<p>パッと計算したいときにはよくコマンドラインを立ち上げて<code>bc</code>コマンドを使います。基本10進数を扱うのがメインなんですが、たまーに16進数とかも扱いたいときがあります。その方法をご紹介。</p>

<h2 id="section">基本</h2>

<p>基本は下記の２つの値を設定して10進数以外を扱うことができます。（初期値は10で設定されてます）</p>

<ul>
  <li><code>obase</code>: 出力したい進数を設定</li>
  <li><code>ibase</code>: 入力となる進数を設定</li>
</ul>

<h2 id="section-1">10進数→16進数</h2>

<p><code>obase</code>を設定すればOK.</p>

<pre><code>obase=16
255
FF
</code></pre>

<p>255 -&gt; FF です。</p>

<h2 id="section-2">16進数→10進数</h2>

<p>逆もいってみます。<code>ibase</code>を設定します。</p>

<pre><code>ibase=16
AA
170
</code></pre>

<p>AA -&gt; 170 です。</p>

<h2 id="section-3">2進数、8進数</h2>

<p>もちろん他にも2進数やら8進数やら設定次第でOKです。</p>

<pre><code>obase=2
255
11111111
</code></pre>

<p>255 -&gt; 11111111 です。</p>

<h3 id="section-4">参考</h3>

<ul>
  <li><a href="http://linux.just4fun.biz/%E9%80%86%E5%BC%95%E3%81%8DUNIX%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89/bc%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A716%E9%80%B2%E6%95%B0%E3%80%8110%E9%80%B2%E6%95%B0%E3%80%818%E9%80%B2%E6%95%B0%E3%80%812%E9%80%B2%E6%95%B0%E3%81%AE%E5%A4%89%E6%8F%9B%E3%83%BB%E8%A8%88%E7%AE%97%E3%82%92%E8%A1%8C%E3%81%86.html">bcコマンドで16進数、10進数、8進数、2進数の変換・計算を行う方法</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[旭川にある有名な動物園についてあなたが知るべきたった１つのこと]]></title>
    <link href="http://blog.toshimaru.net/one-thing-you-should-know-about-asahikawa/"/>
    <updated>2013-12-04T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/one-thing-you-should-know-about-asahikawa</id>
    <content type="html"><![CDATA[<font size="6">旭「川」動物園ではなく旭「山」動物園なのだ！</font>

<p></p>

<p>これ、北海道出身じゃない人の１０人中、８〜９人くらいは間違えてた。（ソースは俺）　こんな感じの会話をいつもする。</p>

<p>友「どこ出身？」<br />
僕「北海道だよー」<br />
友「へー、北海道のどこ？」<br />
僕「旭川だよー」<br />
友「あー、有名な動物園のあるとこ？」<br />
僕「そうそう！」<br />
友「旭「川」動物園だよね！」<br />
僕「旭「山」動物園ですっ！」</p>

<p>旭川の<strong>旭山</strong>にあるから旭山動物園なのです。でも旭<strong>川</strong>動物園と勘違いしている人が僕が思ったよりも多くいるみたいです…。最近はもう訂正するのもアレなので「旭<strong>川</strong>動物園」でもいいかなって思ってきました。</p>

<p>でもやっぱり旭川出身の道産子としては名前を間違えてほしくないのがホンネだったりするのですよ(´・ω・｀)</p>

<hr />

<p>以上、<a href="http://www.adventar.org/calendars/77">道民部 Advent Calendar 2013</a>、４日目の記事でした。</p>

<p>※写真は<a href="http://asahiyama.boo.jp/index.html">旭山動物園の動物写真集</a>からお借りしました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitのログから特定の文字列を含むコミットを採掘する]]></title>
    <link href="http://blog.toshimaru.net/git-log-p-s/"/>
    <updated>2013-12-02T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/git-log-p-s</id>
    <content type="html"><![CDATA[<p>「このコード書いたのは誰だ？」ってのは<code>git blame</code>からの<code>git show</code>でOKですが、多くのコミットを重ねている場合、<code>git blame</code>では「元々誰がどういう意図でこのコードを足したのか？」ってとこまでは負えなかったりします。そんなときはこんなgitコマンドを使えばOK.</p>

<pre><code>$ git log -p -S 'function shitty_function'
</code></pre>

<p>これで<code>shitty_function</code>というfunctionに関する最初から今にいたるまでのコミットをログから発掘できます。</p>

<h2 id="section">参考</h2>

<ul>
  <li><a href="http://blog.eiel.info/blog/2013/06/04/git-log-s/">このコード書いた誰だよ! そんな時の Git Log -S でもしてみよう</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPのプロパティをStrictに定義する]]></title>
    <link href="http://blog.toshimaru.net/php-force-property/"/>
    <updated>2013-12-01T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/php-force-property</id>
    <content type="html"><![CDATA[<p>本記事は<a href="http://www.adventar.org/calendars/101">PHP Advent Calendar 2013</a>一日目の記事として書きます。　現在僕しかカレンダーに参加していないようなのでお暇な方は是非参加してみてくださいね！</p>

<hr />

<p>PHPといえばそのユルさ・ルーズさが嫌われる１つの原因ですよね（と同時に好かれる理由でもある）。例えば<a href="http://www.php.net/manual/ja/language.oop5.properties.php">プロパティ</a>に関してこんなユルさがあります。</p>

<script src="https://gist.github.com/toshimaru/6dc602b5ce5db54f8db0.js"></script>

<p>まずは1を見てください。<code>public</code>なプロパティには普通にアクセスできて、<code>private</code>なプロパティにはアクセスできない。普通ですね。</p>

<p>次に2です。未定義の<code>hoge</code>プロパティにアクセスしてみます。<code>Undefined property</code>で怒られます。ここもOK.</p>

<p>次に3。未定義の<code>hoge</code>プロパティを外部からセットしてみます。エラーは起こりません。この辺から少しおかしい。その後、もう一度2でやったことをやってみます。今度はうまくいきます（なんと！）。</p>

<p>「え、じゃあプロパティ外部から自由に定義し放題じゃないですか」と思ったあなた、その通り、PHPでは自由にプロパティを外部から弄くり回せちゃうわけです。4でやっているように。</p>

<h2 id="strict">解決策 (Strictなプロパティ)</h2>

<p>実際のところもうちょっと厳密にプロパティを制御したいですよね。外部からプロパティを自由に操作してほしくはない。プロパティを強制することはできないだろうか、ということで出来上がったのがこちら。</p>

<script src="https://gist.github.com/toshimaru/4721470.js"></script>

<p>まず注目してもらいたいのは、<code>val</code>という変数を<code>private</code>として宣言しているところです。これにより<code>val</code>変数はクラスに隠蔽されています。</p>

<p>ではどう<code>val</code>変数にアクセスするのか？　通常であれば<code>getVal()</code>,<code>setVal()</code>なんていうアクセッサーを用意しちゃうところですが、ここでは<code>__get</code>, <code>__set</code>の<a href="http://php.net/manual/ja/language.oop5.magic.php">マジックメソッド</a>を利用することで普遍的に実装しています。</p>

<p>これにより最初に紹介した例の3,4のような自由にプロパティを外部から定義できちゃうようなことは防げます。小さい実装のわりにはこれで得られるメリットが大きく、我ながら素敵な実装と思うんですが、どうでしょう？</p>

<hr />

<p>次回のPHP Advent CalendarはPHP5.4について書きたいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github+hubコマンドで快適なGithubライフを営む]]></title>
    <link href="http://blog.toshimaru.net/github-and-hub/"/>
    <updated>2013-11-28T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/github-and-hub</id>
    <content type="html"><![CDATA[<p><code>github</code>で開発を進めている場合、<a href="https://github.com/github/hub">hubコマンド</a>の利用が素敵な感じです。</p>

<h2 id="section">インストール</h2>

<p>Macを使っていると<code>brew</code>使って<code>hub</code>コマンドが一発で入ります。</p>

<pre><code>$ brew install hub
</code></pre>

<h2 id="github">gitのエイリアスをhubコマンドで拡張</h2>

<p>ただこのままだとhubコマンドはgitコマンドと分離しており少し不便なので、gitコマンドをhubコマンドで置き換えてやりましょう。もちろん既存のgitコマンドに悪影響を与えるようなことはありません。やり方は下記の１行を<code>.zshrc</code>なり<code>.bashrc</code>に追記すればOK.</p>

<pre><code>eval "$(hub alias -s)"
</code></pre>

<h2 id="githubclone">githubからのcloneが楽に</h2>

<p>hubコマンドの導入によりGithubからのcloneが楽になります。下記のように<code>{user}/{repo}</code>でcloneできます。</p>

<pre><code>$ git clone toshimaru/dotfiles
</code></pre>

<h2 id="github-1">githubページを開く</h2>

<p>自分の場合、GithubにpushしたあとにGithubのGUI上でDiffであったり諸々の状態を確認したいことがよくあります。<code>hub</code>コマンドであれば一発でいけます。</p>

<pre><code>$ git browse
</code></pre>

<p>規定のブラウザで当該Githubページが開きます。</p>

<h2 id="section-1">その他</h2>

<p>他にもpull-requestをコマンドから簡単に送れるようになったり嬉しいことがたくさんあります。詳しくは<a href="http://hub.github.com/">公式hubページ</a>を見てください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【翻訳】クソ酷いウェブサイト]]></title>
    <link href="http://blog.toshimaru.net/motherfucking-website/"/>
    <updated>2013-11-24T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/motherfucking-website</id>
    <content type="html"><![CDATA[<p>最近のエントリでクソクソ言ってたらHackers Newsから<a href="http://motherfuckingwebsite.com/">Motherfucking Website</a>というクソ記事が流れてきたので翻訳してみた。</p>

<p><a href="http://toshimaru.net/motherfuckingwebsite/">クソ酷いウェブサイト</a></p>

<iframe src="http://toshimaru.net/motherfuckingwebsite/"></iframe>

<h2 id="section">あわせて読みたい</h2>

<p><a href="http://justinjackson.ca/words_japan.html">これはウェブページです｡</a></p>

<h2 id="section-1">翻訳後記</h2>

<p>余談になるが、今回の記事は mother fucker, fucking, son-of-bitch などかなりのswear wordsを含むのでその勢いを消さずに翻訳することに努めた。日本語だとあんまりこのような罵倒語にはバリエーションがないのでなかなか難しかったが、原文の勢いはそれなりに保てたように思う。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Analyticsにみるブログ記事のバズり方の流れ]]></title>
    <link href="http://blog.toshimaru.net/buzz-flow/"/>
    <updated>2013-11-23T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/buzz-flow</id>
    <content type="html"><![CDATA[<p><a href="/cool-ui/">先日のブログ記事</a>がバズりました。現時点でおおよそtweet数1200、いいね数1000、はてブ数900となっています。はてブ数500以上もらったのは始めての経験でGoogle Analyticsを興味深く眺めてたんですが、面白い傾向が見えたので個人的メモの意味もこめて書いてみます。</p>

<h2 id="section">バズによるページビュー変化</h2>

<p>まずは今月のページビューのチャート。</p>

<p><img src="/images/posts/buzz/chart.png" alt="pageview chart" /></p>

<p>今までのビュー数がアホみたいにみえますね（笑）。恐るべしバズ効果。</p>

<h2 id="section-1">流入元</h2>

<p>これだけ各種SNSでシェアされたので、次はどこからの流入が最も多かったのかが気になりました。</p>

<p><img src="/images/posts/buzz/sources.png" alt="流入元" /></p>

<p>なんと一番はTwitterでもFacebookでもはてなでもなくGunosyでした！　いかにみんながGunosyで情報を消化しているかがわかりますね。</p>

<h2 id="gunosytwitterfacebook">Gunosy砲、Twitter砲、Facebook砲、はてブ砲それぞれの波及順序</h2>

<p>今回Gunosy砲、Twitter砲、Facebook砲、はてブ砲全てを食らったわけですがどういう順番で砲撃されるかを見てみました。</p>

<p><img src="/images/posts/buzz/compare2.png" alt="比較２" /></p>

<ul>
  <li>青：全体</li>
  <li>オレンジ：Gunosy</li>
  <li>緑：はてな</li>
  <li>紫：Twitter</li>
  <li>黄：Facebook</li>
</ul>

<p><img src="/images/posts/buzz/compare.png" alt="比較１" /></p>

<p>なんとなく感じてた自分の感覚値と一緒の感じでした。順番としてはこんな感じです。</p>

<ol>
  <li>Twitter/Facebookでシェアされ始める。と同時にはてなブックマークされ始める。</li>
  <li>はてな新着エントリ入り→ホットエントリ入り→はてなからのアクセス数が一気に増える</li>
  <li>Twitterのシェアがどんどん拡大、アクセス数も増える</li>
  <li>Twitter/はてなの流入が落ち着き始める頃に記事がGunosyに取り上げられる→Gunosyから大量アクセス</li>
  <li>1-4の間、Facebookからはじわじわとアクセス数が上がっている</li>
</ol>

<p>Gunosyに取り上げられた日の翌日にはアクセス数が落ち着き始める感じでしょうか。</p>

<h2 id="section-2">軽く分析</h2>

<p>FBいいね数、Tweet数はだいたい同じにもかかわらずFacebookからの流入のほうがTwitterよりも少ないのは面白かった。つまりFacebookのほうが共有されたとしても波及効果はTwitterよりも低いということになりますね。</p>

<p>長い記事だったせいか読者傾向に大きな違いは見られなかったです。みんな５分くらいは滞在して読んでくれたみたいです。</p>

<p>あとGunosyからのアクセス数が一番多かったのは驚きでした。自分もニュースソースのほとんどはGunosyから見るようにしているのですが、みなさんもそうなんですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「UIの進化を止めるうんこユーザーに我々はどう立ち向かうべきか」後記]]></title>
    <link href="http://blog.toshimaru.net/cool-ui-after/"/>
    <updated>2013-11-22T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/cool-ui-after</id>
    <content type="html"><![CDATA[<p><a href="/cool-ui/">UIの進化を止めるうんこユーザーに我々はどう立ち向かうべきか</a>が予想以上にたくさんの人に読んでもらった。もともと件の記事の対象読者は開発者・デザイナーなどの「中の人」を想定しており、エントリタイトルの「我々」というのももちろん、僕のようなWEB開発者を含む「中の人」のことを指してる。それが一般ユーザー（件のエントリで言うところの「クソユーザー」を含む）まで広がり読んでいただいたようで、大変ありがたい。感謝！</p>

<p>お陰で記事に関して読んだ人から様々な反応をいただくことができた。せっかくなので後記として残しておく。（文章は砕け気味な）</p>

<h2 id="ui">誰のためのUIか？</h2>

<p>答えはもちろんユーザー。「クソユーザー」とか言ってゴメン。あれは意図的に悪意を持たせたんだ。だからタイトルは「クソ」ユーザーじゃなくてあえて「うんこ」ユーザーと表現を緩めてみたんだ。緩めたといってもケツを緩めたとかそういうわ(以下略</p>

<p>では次に誰のための「UIの進化」か？　もちろんユーザー。破壊的な変更であれ少しの変更であれ、最終帰着点に「より良いユーザー体験（UX）を提供する」ことがなきゃダメだと思う。</p>

<p>そうでなければその変更は運営の「エゴ」であり、（また汚い言葉で気が引けるが）「オナニー」だ。アートであればオナニー上等、それで良い。しかしニコ動の場合そうはいかない。BtoCビジネスで、ユーザーのお金でサービスが成り立っている以上、最後に見るべき・聞くべきはユーザーの声だ。（そしてユーザーが離れてしまった場合、結局困るのはドワンゴだしね）</p>

<p>あの記事では開発者やデザイナーの「オナニー」を推奨する意図はないことをここで強調しておく。</p>

<h2 id="section">ニコニコ動画に対する僕の態度</h2>

<p>「ユーザーDisに見せかけたニコニコDis」とか言われたんだけど、あの記事での僕のスタンスとしてはニコニコ動画は「応援している」である。</p>

<p>よく読めばわかると思うが、あの記事ではニコ動のDisもしてるし同時に支持もしている。現状のUIを「ファット」と表現し変更する必要があることを示した反面、「ニコ動は「本当にクール」なUIを今後も自信を持って提供していくべき」と結んで変更を促している。</p>

<p>僕はどちらかというと変更に許容的なアーリーアダプターの部類で、新しいものは良くなるのであればどんどん入れて欲しい、というタイプだ。だからニコ動の現状のUIを「クソ」だと思ってるからこそ（実際はそこまでヒドイとは思ってないが）、良いUI変更は期待しているしどんどん行っていって欲しい。（僕はニコ動はβ時代からの会員だし、今でも頻繁に見ているよ！）</p>

<h2 id="section-1">まさらっきさんについて</h2>

<p>同じエンジニアとして発言をパプリックに表明したい気持ちもわかるし、「最高にクール」なUIを拒否されたことに対して激おこになる気持ちもわかる。けど「殺す」とかは表現として適切ではないと思う。自分も実経験として不用意なネットの発言で会社に迷惑かけたという苦い思ひ出がある。所属会社を公開しているのであればなおさら発言には自覚的になるべきでは。</p>

<p>という大体皆さんと一緒な一般論。</p>

<h2 id="section-2">今回のニコニコ静画の変更について</h2>

<p>「ニコニコ動画のUIの話してるけど今回は静画のUIの話だよ？」ということについて。</p>

<p>僕はニコニコ静画は全然使わないので、今回の運営が行った変更については全く知らない。僕が知っているのは<a href="http://togetter.com/li/590729">@masarakkiさんのTwitter上でのやり取り</a>だけで、実際にニコニコ運営陣がニコニコ静画の何をどう変更したかまでは知らない。知っているのは「ユーザーの不満の声によってどうやらUIをロールバックさせたらしい」ということのみ。よって静画のUI変更については僕は何も言えないし、何も言う権利はない。</p>

<h2 id="ui-1">結局お前の言う「クール」なUIってなんなのよ？</h2>

<p>僕はUIの専門家でもなければデザイナーでもないので、この「クール」なUIは何か、ということは明言は避けた。そして予想通りそこをツッコまれた。</p>

<p>この辺の話は僕が書くべきではないと思うし、書いても素人目線の「クソ」つまらないエントリになることは見え見えだった。だから書かなかった。でもせっかくなのでこれを機に「僕が思うクールな最強(笑)のUI」を別エントリとしてまとめてみようかと考えている。まだ自分の中でうまく言語化できない部分が多いのでいつになるかはわからない。なのでこれ以上はここでは言えない。</p>

<p>あと逆に聞きたいのだけど、UI/UXの専門家さんが思う「クール」なUIってなんなんだろう？　「クール」っていう言葉が気に入らないなら単純に「良い」と思うUIでいい。そのへんをどう定義するか、そもそも定義可能なのか？　すごく興味があるし知りたい。</p>

<h2 id="windows-ui">Windows UI</h2>

<p>「クソUIってWindowsのUIのこと？」ってコメントをいくつか見た。</p>

<p>Windows 8のMetroUI化とMS Officeのリボン化の２つは格好のUI「劇的変化」の例だったんだけど、記事をあれ以上冗長にしたくなかったからそのへんの話は省いた。個人的にはMetroUIはアリ、リボンはナシって感じ。それ以上は言及しない。</p>

<h2 id="section-3">日本語はクールじゃない？</h2>

<p>「ジャパニーズ・デザイン」として日本語にも言及した。「日本語クールじゃないと思ってんの？」って思われたようだが、そんなことはない。日本語は＜言語＞として表現に富む美しい言語だと思うし、＜文字＞としても書道という素晴らしい芸術があるように美しい文字表現が可能だ。</p>

<p>ただWEBデザインに限定してみるとどうだろう？　英語圏のようにWEBフォントの採用は日本語ではなかなかしにくい。今流行りのフラットデザインと日本語を合わせたときもややボテッとした印象になってしまいクールじゃない。さっき美しいと言った書道のような文字も画像じゃないと十分に表現することは難しいだろう。</p>

<p>このようにWEBでの利用シーンを考えると表現の幅が「クール」じゃない方向に限られるかなとは思ってる。</p>

<h2 id="section-4">終わりに</h2>

<p>余談になるが本ブログタイトルの「Hack Your Design!」というタイトルは、今ある既成のデザイン、もっといえば僕たちがもっている既成の価値観・パラダイムを組み替えて（ハックして）いこーぜ！という想いの元付けたタイトルである。エクスクラメーションマーク（！）は「破壊的変更」の意味だ（Ruby書く人ならわかるよね？）。</p>

<p>あの記事を書いた後、開発者、デザイナー、UX専門家、ニコ動を使うユーザー、ニコ動を使わないユーザー、いろいろな人から反応をもらえた。これをきっかけに皆の持ってるUIの価値観を少しでも「Hack」することができたのならば、それは幸いだ。</p>

<h3 id="section-5">更新情報</h3>

<ul>
  <li>「まさらっきさんについて」「日本語はクールじゃない？」を追加（2013/11/23 14:15）</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Canvas+Chart.jsでグラフを描画する]]></title>
    <link href="http://blog.toshimaru.net/chart-js/"/>
    <updated>2013-11-21T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/chart-js</id>
    <content type="html"><![CDATA[<p><a href="/cool-ui/">昨日のエントリ</a>で実験的に記事内のグラフを画像ではなくJSでCanvas要素を使って描画してみました。そのときに使用した<a href="http://www.chartjs.org/">Chart.js</a>がなかなかいい感じだったので紹介。</p>

<h2 id="section">導入</h2>

<p>まずは<code>Chart.js</code>をincludeしてください。</p>

<pre><code>&lt;script src="Chart.js"&gt;&lt;/script&gt;
</code></pre>

<h2 id="section-1">線グラフ</h2>

<p>まずは線グラフ。</p>

<canvas id="line" width="300"></canvas>

<script src="https://gist.github.com/toshimaru/e9d483cdb65c54d87e8d.js"></script>

<h2 id="section-2">棒グラフ</h2>

<p>次は棒。</p>

<canvas id="bar" width="300"></canvas>

<script src="https://gist.github.com/toshimaru/14e8e9ab91d48b71673c.js"></script>

<h2 id="section-3">レーダーチャート</h2>

<p>次はレーダーチャート。幅の制限により少し小さくなってしまいました。</p>

<canvas id="radar" width="300"></canvas>

<script src="https://gist.github.com/toshimaru/136570ccc4f90049096a.js"></script>

<h2 id="section-4">円グラフ</h2>

<p>最期に円グラフ。</p>

<canvas id="pie" width="300"></canvas>

<script src="https://gist.github.com/toshimaru/2fb67c25d80683e4f1e2.js"></script>

<script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/Chart.js/0.2.0/Chart.min.js"></script>

<script type="text/javascript">
(function(){
  // line
  var ctx = document.getElementById("line").getContext("2d");
  var data = {
    labels : ["1月", "2月", "3月", "4月", "5月"],
    datasets : [
      {
        fillColor : "rgba(220,220,220,0.5)",
        strokeColor : "rgba(220,220,220,1)",
        data : [65,59,90,81,56]
      },
      {
        fillColor : "rgba(151,187,205,0.5)",
        strokeColor : "rgba(151,187,205,1)",
        data : [28,48,40,19,100]
      }
    ]
  }
  new Chart(ctx).Line(data);

  // bar
  var ctx = document.getElementById("bar").getContext("2d");
  new Chart(ctx).Bar(data);

  var ctx = document.getElementById("radar").getContext("2d");
  new Chart(ctx).Radar(data);

  var ctx = document.getElementById("pie").getContext("2d");
  var data = [
    {
      value: 30,
      color:"#F38630"
    },
    {
      value : 50,
      color : "#E0E4CC"
    },
    {
      value : 100,
      color : "#69D2E7"
    }
  ]
  new Chart(ctx).Pie(data);
})();
</script>

<h2 id="section-5">その他</h2>
<p>もっと細かいチャートの設定がしたければ<code>data</code>のあとにオプション引数を取ることもできます。その他のグラフ、細かいオプションに関しては<a href="http://www.chartjs.org/docs/">公式ドキュメント</a>を参考にしてください。</p>

<p>あと細かいところですがチャートを描画するときにアニメーションで描画されてます。気付かなかったかもなので一応。</p>

<h2 id="section-6">課題</h2>

<p>見てわかるようにレスポンシブデザインに対応しておりません。なのでとりあえずのところ現在はwidthを300に固定することにしています（なのでグラフが小さくなっております）。これに関しては<a href="https://github.com/nnnick/Chart.js/issues/56">Github Issues</a>で現在も議論されておりますがスマートな解決法は無いので、公式のレスポンシブデザイン対応が期待されます。</p>

<h3 id="section-7">参考</h3>

<p><a href="http://startapp.jp/2013/07/21/how-to-create-flat-chart.html">絶対まねしたい！Chart.jsを使ってフラットデザインぽいグラフを作る方法</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIの進化を止めるうんこユーザーに我々はどう立ち向かうべきか]]></title>
    <link href="http://blog.toshimaru.net/cool-ui/"/>
    <updated>2013-11-20T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/cool-ui</id>
    <content type="html"><![CDATA[<script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/Chart.js/0.2.0/Chart.min.js"></script>

<p><a href="http://togetter.com/li/590729">「基本的に運営側がすることが正しいんですよ Webの世界ってそういう論理で動いてるんですよ」理論</a></p>

<p>実はここで言われている<a href="https://twitter.com/masarakki">@masarakki</a>さんの意見はすごくわかる。「最高にクール」なUIがクソユーザー（便宜上、UIの良さがわからないユーザーを本エントリではそう呼ぶ）によって阻止されるのは中の人としては決して喜ばしいことではない。</p>

<h2 id="ui">ユーザーは「最高にクールなUI」がわかるか？</h2>

<p>まずこの問いから始めたい。一般ユーザーは「最高にクール」なUIがわかるか？</p>

<p>答えはNOだ。彼らは「使いやすい」UIはわかっても「クール」なUIはわからない。そして「使いやすい」というのは結局各人の主観に依るものなので、この「使いやすい」UIというのは参考にはできても信用はできないものである。</p>

<p>この話を読んで真っ先に思い出した１つの話がある。</p>

<blockquote class="twitter-tweet"><p>フラットデザインや新機種が評判どうか、というのはAppleにとっては意味が無い。Appleは消費者や開発者の意見を聞かない。なぜなら消費者というのは自分たちが何を欲しがっているのか理解していないため、聞いても意味が無いから（だからAppleではユーザビリティテストをしない）。</p>&mdash; Hak Matsuda (@hak) <a href="https://twitter.com/hak/statuses/383983878186094592">September 28, 2013</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>iOS7が紹介されてすぐはiPhone開発者・デザイナーから不満の声をよく聞いた。しかしiOS7がリリースされ実際にアップデートしたユーザーの話を聞いてみると、思ったよりも不満の声は聞かない。むしろ「使い始めてみるとiOS6のデザインが古臭く見える」くらいらしいのだ<sup id="fnref:ios7"><a href="#fn:ios7" class="footnote">1</a></sup>。結局、iOS7の不満の声はユーザーのiOS7への「慣れ」によって解決されてしまう問題だったのだ。</p>

<p>同時に上の話は当然のようにも思う。なぜならAppleはiPhoneで「未来」のUIを提供しているからだ。そのUIは未だユーザー達が体験したことのないUIであり、ユーザーの想像力の及ばないUIだ。Appleにとってユーザーは「何を欲しがっているのか理解していない」クソなのである。なのでAppleがユーザーの声を聞く意味は無い。</p>

<p>そういう意味において「基本的に運営側がすることが正しいんですよ」理論はあながち間違っていない。</p>

<h2 id="ui-1">「UIを破壊していく」という行為</h2>

<p>ユーザーの声を第一価値基準に置いてしまうとUIの破壊的変更は行えない。なぜなら旧UIと新UIの２つがあったときにクソユーザーが肯定するのは当然「慣れ」ている旧UIだからだ。この事例の典型的な例が<a href="http://www.itmedia.co.jp/news/articles/1304/02/news033.html">CookpadのiPhone UIリニューアル</a>である。</p>

<p>「開発チームにはユーザーエクスペリエンス（UX）の専門家を入れ、ユーザーインタビューを重ねるなど、ユーザー目線に立った設計を重視。」とあるのでUX的観点でアプリは確実に良くなっているはずである。ただクックパッドチームにとって想定外だったのは「慣れ」を第一価値基準に置くクックパッドユーザー、クソBBAたちの存在である。結果的に彼女らからとんでもないレビュー１スター攻撃をくらってしまった。</p>

<p>しかしこのようなクソユーザーの声ばかりに耳を傾けていてはいけない。さもなければUIの進化は止まる。UIの進化のためにはあるタイミングにおけるUIの破壊行為が不可欠だ。UI破壊のアプローチとして以下の２つが取りうる。</p>

<ol>
  <li>漸進的変化: 徐々にUIに変化を加えていくアプローチ</li>
  <li>劇的変化: UIをフルスクラッチで再構築するアプローチ</li>
</ol>

<h3 id="section">漸進的変化</h3>

<p>前者の場合のメリットとしてはユーザーの不満の声を極力少なくすることができる。ユーザーに気づかせない、あるいは「あれ、いつの間にかここ変わってる？」と思われるくらいの変更に留めておく。この変更の例としてはGoogleの検索結果画面が挙げられる。</p>

<p>Googleの検索結果は微細なデザインが変わっているとはいえ、本質的なデザインは何一つ変わっていない。ここに2001年のGoogleの検索結果画面がある。</p>

<p><img src="/images/posts/ui/google.png" alt="google" /></p>

<p>Googleのロゴが左上にあって、その右に検索フォームと検索ボタンがあり、その下に検索結果がある。本質的なUIとしては何も変わっていないのがわかるはずだ。</p>

<p>この変化の仕方のデメリットとしては大々的なUI破壊ができないということだ。具体的には現在のUIをフルフラットUIで作りなおそう、といったことはできない。</p>

<h3 id="section-1">劇的変化</h3>

<p>後者はAppleがiOS6をiOS7にアップデートしたときのような劇的な変化、Apple的アプローチだ。メリットとしてはUIをコンセプトレベルで作り変えることができる。フルフラットUIに変更しようとか、3カラムだったデザインを1カラムのレスポンシブデザインに作り変えようとか。</p>

<p>デメリットとしては上記に書いたように旧UIに「慣れ」たユーザーからの不満の声が上がることだ。新UIに全く満足できないユーザーが出てきた場合の最悪のシナリオとして、既存ユーザーのサービス離れも起こりえる。</p>

<p>逆に言うとサービス提供者としてはその最悪のシナリオも想定しておく必要があるだろう。UIをロールバックさせるのか、クソユーザーの不満の声を聞きつつ新UIをアップデートしていくのか、不満の声を無視してサービスの提供を続けていくのか。</p>

<h2 id="ui-2">何が「クール」なUIなのか</h2>

<p>ところで「クール」なUIというのはどういったUIなんだろうか。たとえ運営が「最高にクール」なUIだと信じこんでいたとしても本質的に「クール」でなければユーザーは離れていくだけだろう。クールなUI、私は「慣れとともにUX満足度が向上する」UIだと思っている<sup id="fnref:ui"><a href="#fn:ui" class="footnote">2</a></sup>。グラフに表すとこのようになる。</p>

<canvas id="myChart1" width="300" height="200"></canvas>

<script type="text/javascript">
(function(){
var ctx = document.getElementById("myChart1").getContext("2d");
var data = {
  labels : ["時間の経過", ""],
  datasets : [
    {
      fillColor : "rgba(106,178,202,0.5)",
      strokeColor : "rgba(150,150,150,1)",
      pointColor : "rgba(150,150,150,1)",
      pointStrokeColor : "#fff",
      data : [20,100]
    }
  ]
};
var options = {
  scaleOverride : true,
  scaleSteps : 10,
  scaleStepWidth : 10,
  scaleStartValue : 0
};
new Chart(ctx).Line(data,options);
})();
</script>

<p>横軸は時間の経過、縦軸はUXの満足度を表している。時間の経過とともにUIに「慣れ」ることで、UXも向上していく。良いUIを提供できればこのような満足度の曲線を描くことだろう。</p>

<p>一方悪いUIを提供した場合の曲線はどうなるか。</p>

<canvas id="myChart2" width="300" height="200"></canvas>

<script type="text/javascript">
(function(){
var ctx = document.getElementById("myChart2").getContext("2d");
var data = {
  labels : ["時間の経過", ""],
  datasets : [
    {
      fillColor : "rgba(106,178,202,0.5)",
      strokeColor : "rgba(150,150,150,1)",
      pointColor : "rgba(150,150,150,1)",
      pointStrokeColor : "#fff",
      data : [20,40]
    }
  ]
};
var options = {
  scaleOverride : true,
  scaleSteps : 10,
  scaleStepWidth : 10,
  scaleStartValue : 0
};
new Chart(ctx).Line(data,options);
})();
</script>

<p>たとえ時間の経過とともにユーザーがUIに「慣れ」たとしてもUXはほとんど向上しない。このダメなUIの例としては楽天の各種サービスが挙げられる。楽天のUIのクソさは単純に慣れとかそれ以前の問題だ。いくら使い込もうともUXは上がらない。せいぜい操作を繰り返す内にナビゲーション・リンクの位置を覚えて操作が前より早くなる程度だ。</p>

<p>破壊的なUI変更を行う場合、サービス運営者は基本的に上曲線のようなユーザーの「慣れ」とともにUXが向上するようなUIを目指すべきである<sup id="fnref:nice-ui"><a href="#fn:nice-ui" class="footnote">3</a></sup>。</p>

<h2 id="section-2">「ジャパニーズ・デザイン」の限界</h2>

<p>日本のサービスではヒットしていても欧米と比較してUIがイケていないケースをよく見る。これは日本のデザイン業界が抱える根源的な問題を浮き上がらせている。</p>

<ul>
  <li><a href="http://thebridge.jp/2013/11/why-japanese-web-design-is-so-different">日本のウェブデザインはなぜこんなにも世界と違うのか？</a> (<a href="http://randomwire.com/why-japanese-web-design-is-so-different/">原文</a>)</li>
</ul>

<p>上記事では文化的、歴史的観点から日本のデザインがダサくならざるを得ない状況を述べている。日本人は絵だけでは満足できず文字が必要なこと。日本語という言語特性によりタイポグラフィの表現が乏しいこと（WEBフォントが扱えない）。日本語という文字自体がクールじゃないこと。などなど。</p>

<p><img src="/images/posts/ui/japanese.png" alt="japanese is uncool" /></p>

<p>（via. <a href="http://www.slideshare.net/yuudaitachibana/creators-meetup-8">流行に乗っていいの？フラットデザインの落とし穴</a>）</p>

<p>このような記事を読むと日本という国の文化・社会そのものがUIをクールじゃない方向へと規定しているのではないかとも思う。</p>

<h2 id="section-3">ニコ動はどうすべきか？</h2>

<p>話が飛んだが本来のニコ動の話に戻ってニコ動はどうすべきなのかを私なりに考えてみる。私ならまずはファットなUIをスリムにするところから考え始めるだろう。つまり何の要素を加えるか、または何を変更するかといった足し算ではなく、何の要素を削るかの引き算の発想で始めるのである。</p>

<p>ニコニコ動画に限っていうと、ニコニコ動画のコアな機能は「動画＆コメントを観る」ことと「動画にコメントをする」ことの２つだけだと私は考える。それ以外の機能に関するUIは削るor目立たなくさせて良いだろう。お手本としてはFuluやNetflixが良いだろう。基本は動画視聴サービス。動画を視聴させることに徹底的にUIをフォーカスさせる。ニコニコ動画は動画視聴＋コメント閲覧にフォーカスしたUI作りを考えてスリム化していけばよい。</p>

<p>と、ここまで来た時点でユーザーの不満が噴出することは見え見えである。というのもニコニコ動画というサービス自体がファットな機能に支えられており、ユーザーのニコニコ動画の使い方・楽しみ方も多種多様化してしまっているからだ。コア機能以外を引き算した時点で、その機能を愛用していたユーザーは激おこぷんぷん丸である。</p>

<p>ここでUI変更のディレンマが発生する。「ファットなUIをスリムにしたい」という気持ちと「できるだけ多くのユーザーの声に応えたい」気持ちの間で揺れてしまう。ただ上述したようにクソユーザーにはクールなUIはわからないのだ。そしてもう１つ重要なこととして、<a href="http://fladdict.net/blog/2013/08/client-user-request.html">顧客やユーザーの要望に全て対応すると、アプリは99%破綻する</a>ことも忘れてはならない。</p>

<p>つまり何を言いたいかというと、結局ニコ動はどんなUI変更やっても不満は少なからず絶対来るのだからそんなのいちいち気にするな、ということである。本当に「最高にクール」なUIであれば、慣れとともにユーザー・エクスペリエンスは向上するんだよ。お前らが考えた「最高にクール」なUIだろうが。というかユーザーの声くらいでロールバックしてしまうような変更なら最初からするな、ということである。</p>

<h2 id="section-4">まとめ</h2>

<p>かなり内容が発散してしまったが、無理やりまとめるとこんな感じだ。</p>

<ul>
  <li>UIに対するユーザーの声は「参考」であって「正解」ではない</li>
  <li>UIの進化のためにはユーザーの声を顧みない破壊的変更が必要である</li>
  <li>「本当にクール」なUIならばUXは「慣れ」とともに向上するはずである</li>
  <li>ニコ動は「本当にクール」なUIを今後も自信を持って提供していくべき</li>
</ul>

<h3 id="section-5">追記</h3>

<ul>
  <li>この記事の反応を受けて<a href="/cool-ui-after/">後記</a>を書きました。（2013/11/22　18:05）</li>
</ul>

<div class="footnotes">
  <ol>
    <li id="fn:ios7">
      <p><a href="http://rebuild.fm/21/">Rebuild: 21: On the Launch of iPhone 5s and iOS 7 (Naoya Ito.)</a>　私はちなみに現時点でiOS6を使用。あと私はAppleは好きですがApple信者ではありません。 <a href="#fnref:ios7" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:ui">
      <p>UIとUXははっきり区別すべきものである。詳しくはこちらを参照されたし。<a href="http://blog.btrax.com/jp/2012/09/10/what_is_ux/">「ユーザーエクスペリエンスとは何か？」【インタビュー】ホワイトハウスも注目のUXデザイナーJanice Fraser氏（前編）</a> <a href="#fnref:ui" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:nice-ui">
      <p>では何が「慣れとともにUX満足度が向上する」UIなのかという話になるが、私はUI/UXの専門家ではないのでそこは専門家に譲るとする。 <a href="#fnref:nice-ui" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rakeタスクにエイリアスを付ける]]></title>
    <link href="http://blog.toshimaru.net/rake-alias/"/>
    <updated>2013-11-17T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/rake-alias</id>
    <content type="html"><![CDATA[<p>RubyのRakeタスクにエイリアス付けたいときってありません？</p>

<p>僕はあります。<code>rake create</code>なんていうタスクがあったとしたら、何らかの手癖のせいで<code>rake new</code>とか打っちゃうことがあるんですよ。</p>

<p>そういうときは<code>alias_task</code>なんていう関数を作ってやって、タスク名に別のエイリアス名を割り当ててやればOK。具体的にはこんな感じです。</p>

<pre><code>def alias_task(tasks)
    tasks.each do |new_name, old_name|
        task new_name, [*Rake.application[old_name].arg_names] =&gt; [old_name]
    end
end

alias_task [
    [:new, :create],
    [:dc,  :db_create]
]
</code></pre>

<p>ここでは</p>

<ul>
  <li><code>create</code>タスクに<code>new</code>というエイリアス名を</li>
  <li><code>db_create</code>タスクに<code>dc</code>というエイリアス名を</li>
</ul>

<p>割り当てています。</p>

<h3 id="section">参考</h3>
<ul>
  <li><a href="http://stackoverflow.com/questions/7656541/the-alias-of-task-name-in-rake">The alias of task name in rake</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jekyllでgit pushをフックしてGithubPageへ自動デプロイするようにした]]></title>
    <link href="http://blog.toshimaru.net/autodeploy-jekyll/"/>
    <updated>2013-11-15T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/autodeploy-jekyll</id>
    <content type="html"><![CDATA[<p>本ブログはJekyllを使って構築しているのですが<code>git push</code>したときにTravis-CIと連携してTravis上でビルドしてGithub Pageへとデプロイするように変更してみました。作業にあたっては下記ブログを参考にさせていただきました。</p>

<p><a href="http://pchw.github.io/blog/2013/06/27/octopress-travis/">OctopressとTravis CIを連携させてBlog生成を自動にする</a></p>

<p>上手順において２点、注意点があります。</p>

<ul>
  <li><code>brew install travis</code>でtravisコマンドはインストールできなくなっているっぽいので<code>gem install travis</code>で対応すること。</li>
  <li>上記では公開鍵暗号方式を使っているが、<a href="https://help.github.com/articles/creating-an-access-token-for-command-line-use">OAuth access tokens</a>を使ったほうが手間がかからなくて楽です。</li>
</ul>

<p>ということで公開鍵暗号方式ではなくOAuth Tokenを使うようにします。その場合は下記が参考になります。</p>

<p><a href="http://tricknotes.hateblo.jp/entry/2013/06/17/020229">Middleman で作った web サイトを Travis + GitHub pages でお手軽に運用する</a></p>

<p>デプロイまでの流れとしてはこんな感じです。</p>

<ol>
  <li>githubにエントリをpushする</li>
  <li>pushをフックしてTravisCI起動（事前にService HooksでTravisと連携するように設定してある）</li>
  <li>Travis上でスタティックサイトをビルド</li>
  <li>TravisからgithubへとToken通してpushする</li>
</ol>

<p>結果的に作成した<code>.travis.yml</code>,<code>Rakefile</code>はこんな感じです。</p>

<ul>
  <li><a href="https://github.com/toshimaru/blog.toshimaru.net/blob/master/.travis.yml">.travis.yml</a></li>
  <li><a href="https://github.com/toshimaru/blog.toshimaru.net/blob/master/Rakefile">Rakefile</a></li>
</ul>

<p>このように設定しておけばGithub上だったり<a href="http://prose.io/">prose.io</a>みたいなサービス使ってWEB上でも記事を投稿できてグッドですね。（実際はローカル上のエディタでの編集が慣れているのでWEB編集画面は使わないけど…）</p>
]]></content>
  </entry>
  
</feed>
