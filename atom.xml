<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="https://blog.toshimaru.net/atom.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2018-12-02T14:32:36+09:00</updated><id>https://blog.toshimaru.net/atom.xml</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">reviewdogを使ってCI上でRuboCop自動レビューを動かす</title><link href="https://blog.toshimaru.net/reviewdog-rubocop/" rel="alternate" type="text/html" title="reviewdogを使ってCI上でRuboCop自動レビューを動かす" /><published>2018-11-19T00:00:00+09:00</published><updated>2018-11-19T00:00:00+09:00</updated><id>https://blog.toshimaru.net/reviewdog-rubocop</id><content type="html" xml:base="https://blog.toshimaru.net/reviewdog-rubocop/">&lt;p&gt;&lt;a href=&quot;https://github.com/rubocop-hq/rubocop&quot;&gt;rubocop&lt;/a&gt;の自動レビューを&lt;a href=&quot;https://github.com/haya14busa/reviewdog&quot;&gt;reviewdog&lt;/a&gt;を使ってやってみたのでその知見です。&lt;/p&gt;

&lt;h2 id=&quot;auto-rubocop-on-circleci-powered-by-reviewdog&quot;&gt;Auto-RuboCop on CircleCI powered by reviewdog&lt;/h2&gt;

&lt;p&gt;僕の作っているプロジェクトでrubocop自動レビューをCircleCI上で設定してみました。そのプルリクエストを見てもらうのが一番早いと思いますので、下記リンクより差分を確認してください。&lt;/p&gt;

&lt;p&gt;https://github.com/toshimaru/RailsTwitterClone/pull/254&lt;/p&gt;

&lt;h3 id=&quot;1-configymlの設定&quot;&gt;1. &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yml&lt;/code&gt;の設定&lt;/h3&gt;

&lt;p&gt;基本的には&lt;a href=&quot;https://github.com/haya14busa/reviewdog#circle-ci&quot;&gt;公式READMEのCircleCIセットアップ手順&lt;/a&gt;通りですが、まずは下記のようにreviewdogのバイナリを&lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;経由で落とします。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 環境変数でダウンロードするreviewdogのバージョンを指定&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;REVIEWDOG_VERSION&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0.9.11&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# reviewdogをcurlでダウンロード&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install reviewdog&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;curl -fSL https://github.com/haya14busa/reviewdog/releases/download/$REVIEWDOG_VERSION/reviewdog_linux_amd64 -o reviewdog &amp;amp;&amp;amp; chmod +x ./reviewdog&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2コメントできるtokenを取得--設定&quot;&gt;2.コメントできるTokenを取得 &amp;amp; 設定&lt;/h3&gt;

&lt;p&gt;reviewdogにコメントさせるためにはコメントできる権限を持ったGitHub Tokenが必要になります。下記手順でGitHub Tokenを取得してください。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/settings/tokens&quot;&gt;アクセストークンの取得ページ&lt;/a&gt;にいく&lt;/li&gt;
  &lt;li&gt;下記の権限を設定してTokenを発行
    &lt;ul&gt;
      &lt;li&gt;Privateレポジトリの設定: &lt;code class=&quot;highlighter-rouge&quot;&gt;repo&lt;/code&gt;をチェック&lt;/li&gt;
      &lt;li&gt;Publicレポジトリの設定: &lt;code class=&quot;highlighter-rouge&quot;&gt;public_repo&lt;/code&gt;をチェック&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これでTokenが発行できましたので、次にそのTokenの設定です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CircleCIの環境変数の設定画面を開く&lt;/li&gt;
  &lt;li&gt;下記の環境変数を設定
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;REVIEWDOG_GITHUB_API_TOKEN&lt;/code&gt;の値に前手順で取得したTokenを設定&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これにてreviewdogにコメントできる権限が付与されました。&lt;/p&gt;

&lt;h3 id=&quot;3-rubucopの結果をreviewdogで通知&quot;&gt;3. rubucopの結果をreviewdogで通知&lt;/h3&gt;

&lt;p&gt;あとはいつも通りのrubocopのコマンドをパイプしてreviewdogに渡してあげればOK。その際のオプションは &lt;code class=&quot;highlighter-rouge&quot;&gt;-f=rubocop&lt;/code&gt;（rubocopフォーマット指定）, &lt;code class=&quot;highlighter-rouge&quot;&gt;-reporter=github-pr-review&lt;/code&gt;（GitHub PRレビューコメント形式の指定） の２つを指定します。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle exec rubocop | ./reviewdog -f=rubocop -reporter=github-pr-review&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;完成yamlイメージ&quot;&gt;完成yamlイメージ&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.circleci/config.yml&lt;/code&gt;の完成イメージは下記です（完全なyamlファイル&lt;a href=&quot;https://github.com/toshimaru/RailsTwitterClone/pull/254/files&quot;&gt;当該Pull Request&lt;/a&gt;より確認してください）。なおCircleCIはversion2.1を使用していることに注意してください（現時点の最新バージョン）。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2.1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;executors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;working_directory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;~/app&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;docker&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;circleci/ruby:2.5-node-browsers&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;RAILS_ENV&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;REVIEWDOG_VERSION&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.9.11&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;rubocop&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;executor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;checkout&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle_install&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install reviewdog&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;curl -fSL https://github.com/haya14busa/reviewdog/releases/download/$REVIEWDOG_VERSION/reviewdog_linux_amd64 -o reviewdog &amp;amp;&amp;amp; chmod +x ./reviewdog&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;なぜreviewdogなのか&quot;&gt;なぜreviewdogなのか&lt;/h2&gt;

&lt;p&gt;ruboop自動レビューのためのツールとして、既にあるツールに&lt;a href=&quot;https://github.com/packsaddle/ruby-saddler&quot;&gt;Saddler&lt;/a&gt;や&lt;a href=&quot;https://github.com/prontolabs/pronto&quot;&gt;pronto&lt;/a&gt;などがありますが、なぜそれらを使わずにreviewdogを採用したのかというと下記の理由からです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Goのシングルバイナリポン置き(curlワンコマンド)でSetupがめちゃくちゃ楽&lt;/li&gt;
  &lt;li&gt;Language Agnostic(Ruby以外もGo, PHP, Pythonなど他言語で使える)&lt;/li&gt;
  &lt;li&gt;Go実装でパフォーマンスが良い&lt;/li&gt;
  &lt;li&gt;Activeにメンテされている&lt;/li&gt;
  &lt;li&gt;READMEドキュメントが充実している&lt;/li&gt;
  &lt;li&gt;日本人が作っている!!（おまけ理由&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;最後に&quot;&gt;最後に&lt;/h2&gt;

&lt;p&gt;本記事ではRubyプロジェクトのrubocop checkをreviewdogを使ってCircleCI上で動かす例を紹介しました。&lt;/p&gt;

&lt;p&gt;公式READMEにはTravisCI上での動かし方であったり、GitHubの新機能・GitHub Checks形式での動かし方も記載されておりますので、興味があるかたは公式READMEをご参照ください。&lt;/p&gt;

&lt;h2 id=&quot;参考資料&quot;&gt;参考資料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/haya14busa/reviewdog&quot;&gt;haya14busa/reviewdog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://haya14busa.com/reviewdog/&quot;&gt;reviewdog を飼ってコードレビューや開発を改善しませんか - haya14busa&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/azu/items/c563da0b5455a1b1dca2&quot;&gt;reviewdogを使ってtextlintの結果をPull Requestに書き込む方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="rubocop" /><category term="github" /><category term="circleci" /><summary type="html">rubocopの自動レビューをreviewdogを使ってやってみたのでその知見です。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/rubocop_x_reviewdog.jpg" /></entry><entry><title type="html">『Team Geek』読んだ ~HRTの精神を知り会社でサバイブしていく方法~</title><link href="https://blog.toshimaru.net/team-geek/" rel="alternate" type="text/html" title="『Team Geek』読んだ ~HRTの精神を知り会社でサバイブしていく方法~" /><published>2018-10-26T00:00:00+09:00</published><updated>2018-10-26T00:00:00+09:00</updated><id>https://blog.toshimaru.net/team-geek</id><content type="html" xml:base="https://blog.toshimaru.net/team-geek/">&lt;p&gt;かの有名なHRTの精神の原典になっている本ということで読んでみた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/Team-Geek-%E2%80%95Google%E3%81%AE%E3%82%AE%E3%83%BC%E3%82%AF%E3%81%9F%E3%81%A1%E3%81%AF%E3%81%84%E3%81%8B%E3%81%AB%E3%81%97%E3%81%A6%E3%83%81%E3%83%BC%E3%83%A0%E3%82%92%E4%BD%9C%E3%82%8B%E3%81%AE%E3%81%8B-Brian-Fitzpatrick/dp/4873116309/ref=as_li_ss_il?ie=UTF8&amp;amp;qid=1540485309&amp;amp;sr=8-1&amp;amp;keywords=team+geek&amp;amp;linkCode=li3&amp;amp;tag=toshimaru-22&amp;amp;linkId=40736310d52f5cf2ad4d58ee4b35f4e3&amp;amp;language=ja_JP&quot; target=&quot;_blank&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=4873116309&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=JP&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=toshimaru-22&amp;amp;language=ja_JP&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;https://ir-jp.amazon-adsystem.com/e/ir?t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;l=li3&amp;amp;o=9&amp;amp;a=4873116309&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;内容紹介&quot;&gt;内容紹介&lt;/h2&gt;

&lt;p&gt;読む前の印象としてはHRT精神ということでどんなエモい内容が書かれているんだろう…と期待していたのだがとんでもない、めちゃくちゃ実践的で（誤解を恐れずに言うと）狡猾な内容が書かれていた。&lt;/p&gt;

&lt;p&gt;本書では「人間は複雑でありバグの塊」という身も蓋もない前提事項を明確にした上で、「ではそんなバグバグでダメな人間とどう向き合っていけばよいか」を具体的に記載している。&lt;/p&gt;

&lt;p&gt;また本書の面白い点は会社内でうまく立ち回るためときに社内政治・ソーシャルエンジニアリングを行う必要があると説かれている点だ。こういった活動はおよそソフトウェアエンジニアとは程遠いスキルのように思われるが、本書ではしっかりと言及され社内でどううまく立ち回っていけばよいかが説明されている。&lt;/p&gt;

&lt;h2 id=&quot;hrt&quot;&gt;HRT&lt;/h2&gt;

&lt;p&gt;HRTとは謙虚（&lt;strong&gt;Humility&lt;/strong&gt;）、尊敬（&lt;strong&gt;Respect&lt;/strong&gt;）、信頼（&lt;strong&gt;Trust&lt;/strong&gt;）のそれぞれの頭文字三文字をとった言葉だ。読み方は「ハート(heart)」というらしい。それぞれの用語を解説する。&lt;/p&gt;

&lt;h3 id=&quot;謙虚humility&quot;&gt;謙虚（Humility）&lt;/h3&gt;

&lt;p&gt;世界の中心は君ではない。君は全知全能ではないし、絶対に正しいわけでもない。常に自分を改善しよう。&lt;/p&gt;

&lt;h3 id=&quot;尊敬respect&quot;&gt;尊敬（Respect）&lt;/h3&gt;

&lt;p&gt;一緒に働く人のことを心から思いやろう。相手を一人の人間として扱い、その能力や功績を高く評価しよう。&lt;/p&gt;

&lt;h3 id=&quot;信頼trust&quot;&gt;信頼（Trust）&lt;/h3&gt;

&lt;p&gt;自分以外の人は有能であり、正しいことをすると信じよう。そうすれば仕事を任せることができる（ただし無能な人には任せるのは難しい）。&lt;/p&gt;

&lt;h3 id=&quot;あらゆる人間関係の衝突はhrtの欠如によるもの&quot;&gt;あらゆる人間関係の衝突はHRTの欠如によるもの&lt;/h3&gt;

&lt;p&gt;そして本書では下記のように言い切っている。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;あらゆる人間関係の衝突は、謙虚・尊敬・信頼の欠如によるものだ&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;つまり人間関係が悪化している場合、それはあなたもしくは誰かが「謙虚ではない・尊敬の念を持っていない・信頼していない」ことから生じていると考えてよい。&lt;/p&gt;

&lt;h2 id=&quot;コードレビューとhrt&quot;&gt;コードレビューとHRT&lt;/h2&gt;

&lt;p&gt;私見だが特にエンジニアのコードレビューの場面においてこのHRTの精神は大事にすべきだと考えている。&lt;/p&gt;

&lt;p&gt;GitHubなどのコードレビューツールの台頭によりコードレビューが圧倒的にしやすくなった反面、文章によるコードレビューは容易に人の心を傷つける。具体的にはコードに対する批判を人に対する批判（人格否定）だと受け取ったり、文章だと感情が伝わりづらく何気ないレビューコメントが「怒ってそう」「高圧的で怖い」などと受け取られたり…。&lt;/p&gt;

&lt;p&gt;コードレビュー時には上述したようなすれ違いが起きないように、なるべく気をつけてHRTな振る舞いをするようにしたい。僕がレビューのときに気をつけていることとしては下記のことだ。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;絵文字を使う😃
    &lt;ul&gt;
      &lt;li&gt;絵文字を駆使して感情を伝える。フレンドリーさを演出する&lt;/li&gt;
      &lt;li&gt;その結果感情の誤読は減り、コミュニケーションはより活発になる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;断定口調は使わない
    &lt;ul&gt;
      &lt;li&gt;「〜のほうが良い」「〜はダメ」という断定は自分が間違っている可能性を否定しているので &lt;strong&gt;謙虚さ&lt;/strong&gt; に欠ける&lt;/li&gt;
      &lt;li&gt;「〜のほうが良いと思っているのですがどうでしょうか」などと相手の反論の余地を残してやるべき&lt;/li&gt;
      &lt;li&gt;なにか断定したいのであれば少なくともレビュイーが納得できるに足る理由を上げるべき&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;命令ではなく提案
    &lt;ul&gt;
      &lt;li&gt;「〜に変更してください」という命令は相手のコードを &lt;strong&gt;尊敬&lt;/strong&gt; していないし &lt;strong&gt;信頼&lt;/strong&gt; していないように聞こえる&lt;/li&gt;
      &lt;li&gt;命令でなく「〜と書いてみるのはいかがでしょう？」という提案に形式を変えてみるとよい&lt;/li&gt;
      &lt;li&gt;断定同様にきちんと理由も述べる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;強い言葉を使わない（弱くみえるぞ？）
    &lt;ul&gt;
      &lt;li&gt;「クソコード」などの強い言葉は使わない。相手への &lt;strong&gt;尊敬&lt;/strong&gt; が全くないのでNG&lt;/li&gt;
      &lt;li&gt;強い言葉を使いたくなるような場面だとコードレビューでのすれ違いが起きる可能性が高いので口頭でカバーするのが吉&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;有害な人間と付き合う&quot;&gt;有害な人間と付き合う&lt;/h2&gt;

&lt;p&gt;第四章のトピックは &lt;strong&gt;有害な人に対処する&lt;/strong&gt; だ。本章では「チームの文化を破壊するアウトサイダーから身を守る方法」について説明される。&lt;/p&gt;

&lt;h3 id=&quot;有害な人への対策&quot;&gt;有害な人への対策&lt;/h3&gt;

&lt;p&gt;下記のような手段でチームの文化を強固にしておけば、有害な人の有害な振る舞いを受け入れにくくなる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;ミッション・ステートメント&lt;/strong&gt; 作成
    &lt;ul&gt;
      &lt;li&gt;チームの目標を明確にする&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;メールで議論するときの &lt;strong&gt;マナー&lt;/strong&gt; を決める
    &lt;ul&gt;
      &lt;li&gt;OSSでいうCode of Conduct的なもの&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;すべての &lt;strong&gt;履歴を文書化&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;新参者が履歴を追えるように&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;バグ修正・テスト・リリースについて &lt;strong&gt;明確なポリシー・手続き&lt;/strong&gt; を策定&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;合意ベースの決定&lt;/strong&gt; を信頼する
    &lt;ul&gt;
      &lt;li&gt;あわせて合意できなかったときの衝突解消のプロセスも定義する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;有害な人のパターン&quot;&gt;有害な人のパターン&lt;/h3&gt;

&lt;p&gt;有害な人のパターンとしては下記のパターンが存在する。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;他人の時間を尊重しない人
    &lt;ul&gt;
      &lt;li&gt;プロジェクトの文書、READMEを読めばわかることを何度も質問して邪魔する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;エゴが強い人
    &lt;ul&gt;
      &lt;li&gt;合意を受け入れられない人・異なる視点の意見に耳を傾けない人・妥協できない人&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;何かを要求する人
    &lt;ul&gt;
      &lt;li&gt;ソフトウェアに対して不満はいうが、貢献する気のない人の可能性がある&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;未熟なコミュニケーションをする人
    &lt;ul&gt;
      &lt;li&gt;草を生やしまくったり(&lt;code class=&quot;highlighter-rouge&quot;&gt;w&lt;/code&gt;を多用すること)、大文字や記号を多用する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;パラノイアな人
    &lt;ul&gt;
      &lt;li&gt;被害妄想を持ち、陰謀論を唱えるような人&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;完璧主義な人
    &lt;ul&gt;
      &lt;li&gt;ソフトウェアの設計に時間をかけすぎる人&lt;/li&gt;
      &lt;li&gt;チームの進捗を停滞させてしまう&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;有害な人を追い出す&quot;&gt;有害な人を追い出す&lt;/h3&gt;

&lt;p&gt;本書では最終的に有害な人は追い出してよいと述べている。もちろん最初からではなくきちんとコミュニケーションをとった上でそれでも問題が解消されないようであれば、最後の手段としての＜追い出し＞だ。&lt;/p&gt;

&lt;h2 id=&quot;社内政治ソーシャルエンジニアリング&quot;&gt;社内政治、ソーシャルエンジニアリング&lt;/h2&gt;

&lt;p&gt;5章は組織的操作の技法がトピックであり、「仕事を効率的に進めるための小手先のテクニックが必要」だと述べられている。小手先のテクニックとはつまり &lt;strong&gt;社内政治、ソーシャルエンジニアリング&lt;/strong&gt; のことである。&lt;/p&gt;

&lt;p&gt;社内政治という言葉はエンジニアの対極にある慣習のように思えるし、あなたがエンジニアであれば「社内政治なんてとんでもない！」と思うかもしれない。しかしときにそういう手段も必要だとハッキリ説いているのが本書の面白いところと言える。&lt;/p&gt;

&lt;h3 id=&quot;自分の価値を高める&quot;&gt;自分の価値を高める&lt;/h3&gt;

&lt;p&gt;自分の価値を高める振る舞いとして下記のような振る舞いが紹介されている。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;自分の責任範囲を広げる
    &lt;ul&gt;
      &lt;li&gt;マネージャーの作業負担軽減になる&lt;/li&gt;
      &lt;li&gt;自分自身の能力を示すことができる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;リスクをとる
    &lt;ul&gt;
      &lt;li&gt;すばやく失敗してすばやく学習する&lt;/li&gt;
      &lt;li&gt;失敗したら何が起きたかを文書化して再発防止策に努める&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;大人らしく振る舞う
    &lt;ul&gt;
      &lt;li&gt;マネージャーから子供扱いを受けないために&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;質問する
    &lt;ul&gt;
      &lt;li&gt;納得できないことがあれば根拠について質問したり議論する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;マネージャーはエスパーではない
    &lt;ul&gt;
      &lt;li&gt;自分が何をしているかをマネージャーに報告する&lt;/li&gt;
      &lt;li&gt;マイクロマネジメントの回避策にもなる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;自分が居心地のいい場所を作る&quot;&gt;自分が居心地のいい場所を作る&lt;/h3&gt;

&lt;p&gt;平たくいうと「&lt;strong&gt;組織がクソなこともある。組織に期待せず自分でよい組織を作るという意識を持て&lt;/strong&gt;」ということが書いてある。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;会社にはルールがある。曲げてもいいものもあれば、ぶち壊していいものある。組織のなかで振る舞うべきことばかりに集中していると、不満や失望を感じるだけだ。組織はそういうものだと認めよう。組織を動かして自分の仕事に利用できる仕組みを見つけよう。自分が居心地のいい場所を作り出すのである。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;自分を売り込む&quot;&gt;自分を売り込む&lt;/h3&gt;

&lt;p&gt;自分を売り込むという行為もまたエンジニアらしからぬ行為のようにも思えるが時には必要だ。つまりうまくやっていることを上司やチームの外部にいる人たちに知らせるということだ。&lt;/p&gt;

&lt;p&gt;それを演出するために＜できるだけ約束を小さくして、届けるものは大きくする＞という手法が紹介されている。大きな約束をしてしまうとその締切を守れなかったときや、機能を落としたときの信用損失が大きくなってしまうからだ。&lt;/p&gt;

&lt;p&gt;またエンジニアはプロダクトのローンチにエネルギーを注ぐべきだとも説かれている。なぜならプロダクトローンチというイベントが何かを成し遂げたことを伝える一番わかりやすいイベントだからだ。リファクタリングをもっとやりたいと考えるかもしれないがそれだけではダメで、そこに半分以上時間を割いたりしたら何も評価されないし最悪プロジェクト中止さえありえる。&lt;/p&gt;

&lt;h3 id=&quot;逃げるという選択肢&quot;&gt;逃げるという選択肢&lt;/h3&gt;

&lt;p&gt;「すべてやっているけど改善されないしうまくいかない」そんな状況に陥ったとしたらさっさと逃げてしまうことが得策だと言う。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;システムを変更できなければいくらエネルギーを注いでもムダだ。そこから逃げ出すことにエネルギーを注ごう&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ある程度やって無理なものは無理、ダメなものはダメ、さっさと逃げる！と割り切っている点も本書の潔くて良い点である。&lt;/p&gt;

&lt;h2 id=&quot;チームはパンのようなもの&quot;&gt;チームはパンのようなもの&lt;/h2&gt;

&lt;p&gt;本書ではチームはパンのものという比喩が使われる。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;チームの文化はサワードウパンのようなものだ。スターター（創業者）がパン生地（新来者）に菌（文化）を植え付ける。イースト菌と乳酸菌（チームメンバー）が発酵（成長）すると、おいしいパン（チーム）のできあがりだ。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;強い文化を持つチームを作る必要がある。さもないと新来者が持ち込む文化に負けてしまう。チームが文化を大切にできなければ、チームのアイデンティティや仕事の誇りを失ってしまう。&lt;/p&gt;

&lt;p&gt;この話は日本風の喩えでいうと＜腐ったみかん＞の話に通ずるものがある。一つ腐ったみかんがあると他のみかんも腐ってしまうという事象である。そうならないために腐ったみかんを紛れ込ませない、あるいは多少腐ってしてもそれが伝播しないような強いみかん（チーム）である必要がある。&lt;/p&gt;

&lt;p&gt;強い文化を作るには時間・労力がかかる。会社においては応募者がカルチャーフィットするかを面接のプロセスにおいてチームのメンバーが評価・判断し決める。採用を妥協してはいけない。&lt;/p&gt;

&lt;h2 id=&quot;マネジメントについて&quot;&gt;マネジメントについて&lt;/h2&gt;

&lt;p&gt;本書はマネージャーのためのマネジメント本ではなく、なんとなくリーダーになってしまったエンジニアのための本だと位置付けられている。&lt;/p&gt;

&lt;h3 id=&quot;マネージャーになるべき&quot;&gt;マネージャーになるべき！？&lt;/h3&gt;

&lt;p&gt;もう一つ本書のユニークな点として、「マネージャーになるべきだ」と主張しているのは興味深い。&lt;/p&gt;

&lt;p&gt;一般的に言ってエンジニアはマネージャーになりたがらない。一番の理由はコードを書く時間が少なくなるからである。そして無能なマネージャーの下に就いたことのあるエンジニアもまたマネージャーになることを拒む。しかし本書では下記のように説く。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;マネージャーになるべき大きな理由がある。まずは自分自身をスケールできるからだ。コードを書くのが得意だとしても、一人で書けるコード量には限界がある。自分がリーダーになって、優秀なエンジニアのチームにコードを書いてもらえば、どれだけのコード量になるかを想像してみてほしい！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;サーバントリーダーの役割&quot;&gt;サーバントリーダーの役割&lt;/h3&gt;

&lt;p&gt;マネージャーになるのであれば &lt;strong&gt;サーバントリーダーになるべき&lt;/strong&gt; だという。つまり執事や召使いのようにチームに奉仕するのだ。サーバントリーダーのやるべきことの例は下記だ。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HRTの雰囲気を作り出す&lt;/li&gt;
  &lt;li&gt;エンジニアでは対処できない社内の障害物を除去&lt;/li&gt;
  &lt;li&gt;チームの合意形成を支援&lt;/li&gt;
  &lt;li&gt;問題解決を支援する
    &lt;ul&gt;
      &lt;li&gt;アドバイスを求めてきたらリーダー自身が問題解決してはダメ、あくまでもサポートのみ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;マイクロマネジメントをしない&lt;/li&gt;
  &lt;li&gt;夜遅くなったときに差し入れ&lt;/li&gt;
  &lt;li&gt;チームが順調に進めるように穴を埋める&lt;/li&gt;
  &lt;li&gt;技術的な側面とチームの人間関係を管理する（後者が難しい！）
    &lt;ul&gt;
      &lt;li&gt;技術畑出身のリーダーは後者を無視しがちだがそれはNG、きちんとチームの人間的側面に目を向ける&lt;/li&gt;
      &lt;li&gt;みんなのお友達になるのもNG、あくまでも仕事の関係を保つ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ときには自らの手を汚す&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;リーダーはパーフェクトではない&quot;&gt;リーダーはパーフェクトではない&lt;/h3&gt;

&lt;p&gt;リーダーはパーフェクトでなければならないという強迫観念があるかもしれないがそれを本書は否定する。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;リーダーはなんでも正しくやって、すべてを把握して、あらゆる質問に答える責任があると思っている。すべてを正しくやる必要はないし、あらゆる質問に答える必要もないし、そんなことをしていたら逆にチームの信頼を失ってしまう。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;質問を歓迎してチームからのフィードバックと批判をオープンに受け止めよう。そして何かを失敗したときは心から謝罪しよう。&lt;/p&gt;

&lt;p&gt;またリーダーが適切な答えを知っている必要はない。適切な答えを持っている人を知っていて、その人を紹介できさえすればよいのだ。多くの場合、適切な答えを知るより、適切な人を知るほうが価値がある。&lt;/p&gt;

&lt;p&gt;参考資料 (Podcast): &lt;a href=&quot;https://anchor.fm/em-fm/episodes/ep2--Engineering-Manager-e2bq4j&quot;&gt;Engineering Managerをスーパーマンだと思わないで by EM . FM #EMFM • A podcast on Anchor&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;ネガティブフィードバックを正しく伝える&quot;&gt;（ネガティブ）フィードバックを正しく伝える&lt;/h3&gt;

&lt;p&gt;正直になるのもリーダーをやる上で重要だ。&lt;/p&gt;

&lt;p&gt;1on1などの場面において共有できないことをメンバーから質問されたら「知っているけど伝えられない」と答えれば良い。自分がわからないことを聞かれたら素直に「わからない」といえばいい。&lt;/p&gt;

&lt;p&gt;ネガティブ・フィードバックを伝えるのは難しい。フィードバックや批判を伝えるときはメッセージが正しく相手に伝わっているかが重要だ。しかし直截的な伝え方だと相手に受け入れてもらえない場合があるので、きちんと適切な言い方を考えてから伝えよう。&lt;/p&gt;

&lt;p&gt;一方でチームメンバーの欠点ばかりを気にしていいところを十分にフィードバックできていないケースも気をつけよう。素晴らしいところは積極的に知らせてあげるべきだ。&lt;/p&gt;

&lt;h3 id=&quot;リーダーの行動指針&quot;&gt;リーダーの行動指針&lt;/h3&gt;

&lt;p&gt;その他にもリーダーが取るべき行動指針として下記のものが紹介されている。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;チームの幸せを追い求める&lt;/li&gt;
  &lt;li&gt;委譲せよ、ただし手は汚せ
    &lt;ul&gt;
      &lt;li&gt;たとえ自分がやったほうが早くてもチームメンバーに任せる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;自分自身を置き換えるくらいの優秀な人を採用する
    &lt;ul&gt;
      &lt;li&gt;チームメンバーに代わりをしてほしいのであれば自分より優秀な人を採用する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;事を荒立てるときを知る
    &lt;ul&gt;
      &lt;li&gt;状況は自然とは良くはならない、きちんと指摘する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;カオス（不確実性）からチームを守る
    &lt;ul&gt;
      &lt;li&gt;リーダーになるとメンバーの頃には見えなかったカオスが見える。メンバーをそのカオスから守ろう&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;チームを空中援護する
    &lt;ul&gt;
      &lt;li&gt;会社の上空（上層部）で何が起きているかをチームに知らせる&lt;/li&gt;
      &lt;li&gt;できるだけ多くの情報をチームに共有すべきだが、チームに無関係の組織の話はする必要がない&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;どのエンジニアが何を必要としているかを把握してそれを与える
    &lt;ul&gt;
      &lt;li&gt;エンジニアが何を欲しているかは一人ひとり異なる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;HRTの精神を知るために読み始めた本書であったが、「有害な人に対処する方法」「社内でうまく立ち回る方法」など会社で真面目に＜サバイブ＞していくための実践的な内容が書かれていた。HRTだけでなくそういったスキルもときに必要であり重要であるということを認識するのに、本書はエンジニアにオススメの一冊に仕上がっている。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=4873116309&amp;amp;linkId=0aff3222ba2c6d1926da0019e2d110b9&quot;&gt;&lt;/iframe&gt;</content><author><name>Toshimaru</name></author><category term="読書" /><category term="management" /><summary type="html">かの有名なHRTの精神の原典になっている本ということで読んでみた。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/teamgeek.jpg" /></entry><entry><title type="html">[MySQL]日付が歯抜けのデータを結合して日付毎に整理されたテーブルを作る</title><link href="https://blog.toshimaru.net/join-with-date-virtual-table/" rel="alternate" type="text/html" title="[MySQL]日付が歯抜けのデータを結合して日付毎に整理されたテーブルを作る" /><published>2018-10-07T00:00:00+09:00</published><updated>2018-10-07T00:00:00+09:00</updated><id>https://blog.toshimaru.net/join-with-date-virtual-table</id><content type="html" xml:base="https://blog.toshimaru.net/join-with-date-virtual-table/">&lt;h2 id=&quot;やりたいこと&quot;&gt;やりたいこと&lt;/h2&gt;

&lt;p&gt;下記の日付が歯抜けになっている2つのテーブル（テーブル1, テーブル2）のデータを日付毎に整理してテーブル3のようなデータを生成したい。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;テーブル1&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;日付&lt;/th&gt;
      &lt;th&gt;商品販売数&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-02&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-04&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-05&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-07&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-08&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-10&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;テーブル2&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;日付&lt;/th&gt;
      &lt;th&gt;商品入荷数&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-03&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-05&lt;/td&gt;
      &lt;td&gt;30&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-10&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;テーブル3&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;日付&lt;/th&gt;
      &lt;th&gt;商品入荷数&lt;/th&gt;
      &lt;th&gt;商品販売数&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-01&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-02&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-03&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-04&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-05&lt;/td&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-06&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-07&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-08&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-09&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-10&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;前提環境&quot;&gt;前提環境&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;MySQL 5.7&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;方法&quot;&gt;方法&lt;/h2&gt;

&lt;p&gt;以前紹介した連番の仮想表を作るテクニックを駆使すればやりたいことが実現可能です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/mysql-virtual-table/&quot;&gt;MySQLで連番の仮想表を作る&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;日付だけのテーブルを作る&quot;&gt;日付だけのテーブルを作る&lt;/h3&gt;

&lt;p&gt;対象期間、つまり2018年1月1日〜2018年1月10日までのデータを生成します。&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2018-01-01'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTERVAL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seq_no&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DAY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq_no&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seq_no&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;UNION&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq_no&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq_no&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seq_no&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;information_schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;COLUMNS&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;date&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-01&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-02&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-03&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-04&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-05&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-06&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-07&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-08&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-09&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-10&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;日付テーブルにデータをjoinする&quot;&gt;日付テーブルにデータをJOINする&lt;/h3&gt;

&lt;p&gt;上記の日付テーブルに実データをJOINしてやればうまくデータが生成できます。&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;date_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'日付'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IFNULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;商品入荷数&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'入荷数'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IFNULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;商品販売数&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'販売数'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2018-01-01'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTERVAL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seq_no&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DAY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq_no&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seq_no&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;UNION&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq_no&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq_no&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seq_no&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;information_schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;COLUMNS&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date_table&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;日付&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;日付&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これで無事、得たかったデータを得ることができました。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;日付&lt;/th&gt;
      &lt;th&gt;入荷数&lt;/th&gt;
      &lt;th&gt;販売数&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-01&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-02&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-03&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-04&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-05&lt;/td&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-06&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-07&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-08&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-09&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-01-10&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;利用シーン&quot;&gt;利用シーン&lt;/h2&gt;

&lt;p&gt;日付毎にデータをグラフにプロットして可視化したいときにこのテクニックを使うと便利。&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="mysql" /><summary type="html">やりたいこと</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/sql1.png" /></entry><entry><title type="html">MySQLで連番の仮想表を作る</title><link href="https://blog.toshimaru.net/mysql-virtual-table/" rel="alternate" type="text/html" title="MySQLで連番の仮想表を作る" /><published>2018-09-25T00:00:00+09:00</published><updated>2018-09-25T00:00:00+09:00</updated><id>https://blog.toshimaru.net/mysql-virtual-table</id><content type="html" xml:base="https://blog.toshimaru.net/mysql-virtual-table/">&lt;h2 id=&quot;やりたいこと&quot;&gt;やりたいこと&lt;/h2&gt;

&lt;p&gt;MySQLで実テーブルを参照せずに連番のデータを生成したい。&lt;/p&gt;

&lt;h2 id=&quot;前提環境&quot;&gt;前提環境&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;MySQL 5.7&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;方法&quot;&gt;方法&lt;/h2&gt;

&lt;p&gt;下記のようなSQLでやりたいことが実現できます。&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq_no&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seq_no&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;UNION&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq_no&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq_no&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seq_no&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;information_schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;COLUMNS&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ポイントとしては下記の通り。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;全体の構成としては、2つの&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT&lt;/code&gt;文を&lt;code class=&quot;highlighter-rouge&quot;&gt;UNION&lt;/code&gt;を使って結合しているというもの&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@seq_no&lt;/code&gt;という変数を用意&lt;/li&gt;
  &lt;li&gt;１つ目の&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT&lt;/code&gt;文で変数を初期化する&lt;/li&gt;
  &lt;li&gt;２つ目の&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT&lt;/code&gt;文で初期化した変数のインクリメントの処理を行う
    &lt;ul&gt;
      &lt;li&gt;その際にデータ件数を確保するために、MySQLで最初に用意されている&lt;code class=&quot;highlighter-rouge&quot;&gt;information_schema.COLUMNS&lt;/code&gt;を参照する（中身のデータは実際には使わない）&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LIMIT&lt;/code&gt;で取得したいデータ件数を指定する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このSQLで得られる結果は下記の通り。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;seq_no&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;これで1から10までの連番のデータをSQLだけで得ることができました。&lt;/p&gt;

&lt;h2 id=&quot;応用編&quot;&gt;応用編&lt;/h2&gt;

&lt;p&gt;上記で紹介したテクニックを使えばいろいろなことがSQLで実現できます。&lt;/p&gt;

&lt;h3 id=&quot;0からデクリメント&quot;&gt;0からデクリメント&lt;/h3&gt;

&lt;p&gt;まずはインクリメントの逆、デクリメント。&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq_no&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seq_no&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;UNION&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq_no&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq_no&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seq_no&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;information_schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;COLUMNS&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;結果&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;seq_no&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;値を倍加させる&quot;&gt;値を倍加させる&lt;/h3&gt;

&lt;p&gt;値を倍々にしていってみます。&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq_no&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seq_no&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;UNION&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq_no&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq_no&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seq_no&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;information_schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;COLLATIONS&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;information_schema.COLUMNS&lt;/code&gt; を使うと&lt;code class=&quot;highlighter-rouge&quot;&gt;seq_no&lt;/code&gt;値が大きくなりすぎてしまい&lt;code class=&quot;highlighter-rouge&quot;&gt;DOUBLE value is out of range&lt;/code&gt;というエラーが発生するので&lt;code class=&quot;highlighter-rouge&quot;&gt;information_schema.COLLATIONS&lt;/code&gt;を使用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;結果&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;seq_no&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;16&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;32&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;128&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;256&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;512&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;直近30日間の日付をリストアップ&quot;&gt;直近30日間の日付をリストアップ&lt;/h3&gt;

&lt;p&gt;直近30日間の日付をリストアップしてみる。&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CURDATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTERVAL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seq_no&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DAY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq_no&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seq_no&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;UNION&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq_no&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq_no&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seq_no&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;information_schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;COLUMNS&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;結果&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;date&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-09-24&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-09-23&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-09-22&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-09-21&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;（…省略…）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-08-27&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;執筆時点の今日の日付は&lt;code class=&quot;highlighter-rouge&quot;&gt;2018-09-25&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CURDATE()&lt;/code&gt;から&lt;code class=&quot;highlighter-rouge&quot;&gt;seq_no&lt;/code&gt;日分を引き算して日付を出力&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;注意点&quot;&gt;注意点&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;information_schema.COLUMNS&lt;/code&gt;を使った場合、&lt;code class=&quot;highlighter-rouge&quot;&gt;LIMIT&lt;/code&gt;で指定できる値は&lt;code class=&quot;highlighter-rouge&quot;&gt;information_schema.COLUMNS&lt;/code&gt;のMAX値までという成約がある&lt;/li&gt;
  &lt;li&gt;MySQL7から導入された&lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/with.html&quot;&gt;WITH syntax&lt;/a&gt;でCTEすればもっとシンプルにクエリが書けそう&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="mysql" /><summary type="html">やりたいこと</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/virtual-table-og.jpg" /></entry><entry><title type="html">初めてのモブプログラミング体験</title><link href="https://blog.toshimaru.net/first-mob-programming/" rel="alternate" type="text/html" title="初めてのモブプログラミング体験" /><published>2018-09-03T00:00:00+09:00</published><updated>2018-09-03T00:00:00+09:00</updated><id>https://blog.toshimaru.net/first-mob-programming</id><content type="html" xml:base="https://blog.toshimaru.net/first-mob-programming/">&lt;p&gt;モブプログラミングを初めてやってみたのでその感想。&lt;/p&gt;

&lt;h2 id=&quot;進め方&quot;&gt;進め方&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Driver一人 + Navigator数人
    &lt;ul&gt;
      &lt;li&gt;Driver: コードを書く人&lt;/li&gt;
      &lt;li&gt;Navigator: コードの方針を示す人、相談のる人、横から口出しする人&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;画面共有方法
    &lt;ol&gt;
      &lt;li&gt;プロジェクターに投影する&lt;/li&gt;
      &lt;li&gt;Slack使って画面共有する&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;マシンは個々人の所有マシン回す形とした&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;感想&quot;&gt;感想&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Slackでモブプロ専用チャンネル作ってそこで画面共有しながら進めるのが良かった
    &lt;ul&gt;
      &lt;li&gt;リモートの場合、でかいディスプレイが準備できない場合は、このやり方が良さそう&lt;/li&gt;
      &lt;li&gt;画面共有されている側もペン使って相手画面に干渉できるのがよかった
        &lt;ul&gt;
          &lt;li&gt;「ここのコードがおかしい」ってときの &lt;strong&gt;ここ&lt;/strong&gt; が図示できる&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ああでもないこうでもないと言いながらやるワイワイ感はなんだかんだ楽しさがある
    &lt;ul&gt;
      &lt;li&gt;一人で開発していると得られない &lt;strong&gt;みんなでやっている感&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;少なくとも孤独感とは対極にある開発手法&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;時間にして2時間くらいで休憩を挟んだほうが良さそう
    &lt;ul&gt;
      &lt;li&gt;交代要員で区切るなら「n人Driverが回ったら交代」みたいにするのも良さそう&lt;/li&gt;
      &lt;li&gt;参加者は集中力を使うのでやりすぎ注意
        &lt;ul&gt;
          &lt;li&gt;ペアプロより人が多い分、そこまで疲れないと思いきや衆人環視の中作業を進めるのでなんだかんだ疲れる&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;レビューが不要という開放感
    &lt;ul&gt;
      &lt;li&gt;ジュニアレベルの上げるPRはなんだかんだPR完成→レビュー→レビュー修正という打ち返しが複数回発生する
        &lt;ul&gt;
          &lt;li&gt;レビュワーもレビュイーも疲弊してしまう&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;その場で指摘して直せる&lt;/li&gt;
      &lt;li&gt;実装方針のコンセンサスをとってからコードを書き始めるのであとから大幅な方針転換は発生しない&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Driverはきちんと自分が何を考え、何をしようとしているかをNavigatorに示すこと大事
    &lt;ul&gt;
      &lt;li&gt;無言の時間をなるべく少なくする&lt;/li&gt;
      &lt;li&gt;NavigatorはDriverが間違った方向に行かないようにガイドする&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;技術検証・フィジビリ調査もみんなでやると情報共有になるし文殊の知恵理論で新たな実装アイディアも出てくるのが良い
    &lt;ul&gt;
      &lt;li&gt;Driverが実装、Navigatorがドキュメント読んで使い方をガイドって進め方もなかなか良かった&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;個々のマシンを回す形式はお互いの環境の違いを意識する必要がなくて楽だけど、この形式だとDriverスイッチコストが高すぎて気軽にDriver交代ができないので一長一短はありそう&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考書籍&quot;&gt;参考書籍&lt;/h2&gt;

&lt;p&gt;現時点でペアプロ・モブプロについて一番よくまとまった本・特集だと思うので興味がある人は読んでみると良い。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/WEB-DB-PRESS-Vol-102-PRESS%E7%B7%A8%E9%9B%86%E9%83%A8/dp/4774194336/ref=as_li_ss_il?s=books&amp;amp;ie=UTF8&amp;amp;qid=1535914182&amp;amp;sr=1-1&amp;amp;keywords=web+db+%E3%83%A2%E3%83%96%E3%83%97%E3%83%AD&amp;amp;linkCode=li3&amp;amp;tag=toshimaru-22&amp;amp;linkId=247314e74b8dcb05c86ed16fc943a08a&amp;amp;language=ja_JP&quot; target=&quot;_blank&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=4774194336&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=JP&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=toshimaru-22&amp;amp;language=ja_JP&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;https://ir-jp.amazon-adsystem.com/e/ir?t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;l=li3&amp;amp;o=9&amp;amp;a=4774194336&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="programming" /><summary type="html">モブプログラミングを初めてやってみたのでその感想。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/mobprogramming.jpg" /></entry><entry><title type="html">『その「エンジニア採用」が不幸を生む』を読んだ ~優秀エンジニアをどう採用するか~</title><link href="https://blog.toshimaru.net/engineer-hiring/" rel="alternate" type="text/html" title="『その「エンジニア採用」が不幸を生む』を読んだ ~優秀エンジニアをどう採用するか~" /><published>2018-08-16T00:00:00+09:00</published><updated>2018-08-16T00:00:00+09:00</updated><id>https://blog.toshimaru.net/engineer-hiring</id><content type="html" xml:base="https://blog.toshimaru.net/engineer-hiring/">&lt;p&gt;エンジニア採用について最近いろいろ考える機会が増えたので読んでみた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/4774186015/ref=as_li_ss_il?ie=UTF8&amp;amp;linkCode=li3&amp;amp;tag=toshimaru-22&amp;amp;linkId=2a0d1c72cd87e32ad0e5401b65cb39ac&amp;amp;language=ja_JP&quot; target=&quot;_blank&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=4774186015&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=JP&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=toshimaru-22&amp;amp;language=ja_JP&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;https://ir-jp.amazon-adsystem.com/e/ir?t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;l=li3&amp;amp;o=9&amp;amp;a=4774186015&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;本書の概要&quot;&gt;本書の概要&lt;/h2&gt;

&lt;p&gt;本書ではIT分野で人材採用のコンサルタントとして活動している著者が、「エンジニアと企業のミスマッチ」はどうして起こるのか、それをどう解決していったらよいのかを紹介している。&lt;/p&gt;

&lt;p&gt;本書前半部分ではイケてない会社やエンジニアの採用失敗例および就職失敗例が紹介されており、後半部分では企業サイドがどうエンジニアを惹きつけ採用に結びつけたらよいかの話が書かれている。&lt;/p&gt;

&lt;h2 id=&quot;エンジニアと企業のミスマッチ&quot;&gt;エンジニアと企業のミスマッチ&lt;/h2&gt;

&lt;p&gt;本書では下記のようにエンジニアが特性に応じて２タイプ・４分類に分けられている。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/engineer/types.png&quot; alt=&quot;２タイプ・４分類&quot; /&gt;&lt;/p&gt;

&lt;p&gt;どんなに採用対象となるエンジニアが優秀であろうと、会社にフィットしないこともあるので気をつけなければならないと著者は警鐘を鳴らす。&lt;/p&gt;

&lt;p&gt;これは確かにそうで、例えばどんなに優秀なSI系システム開発エンジニアであろうとも、SIとは全く毛色が異なるWeb系企業に就職したとして即戦力ですぐ活躍するイメージは湧かない。逆に、小さな企業でずっとゆるふわに開発をやってきたWeb系エンジニアがSI業界に飛び込んだとして、すぐに活躍できるイメージも湧かない。&lt;/p&gt;

&lt;p&gt;また会社のアーリーフェーズにおいて人も少なく新規開発が多い場面においては、エンジニアはフルスタック的な能力が求められることが多いだろう。その状況において、大きいシステムの一部機能の保守・運用のみをメインでやってきたエンジニアは（どんなにその運用・保守能力が高くとも）活躍できないだろう。&lt;/p&gt;

&lt;p&gt;企業は「今採用したいエンジニアのタイプはどんなタイプか？」という前提を明確にした上で、エンジニアの特性を見極めて採用を行う必要があるだろう。&lt;/p&gt;

&lt;h2 id=&quot;良いエンジニアは市場に出ない&quot;&gt;良いエンジニアは市場に出ない&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;本当にすごいエンジニアほど、労働市場に出ることはなく、知人を介した紹介や、WebやSNSを介した直接応募で転職が決まっている&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;これもよく言われることだが、優秀なエンジニアであればあるほど転職市場には出てこない。なぜなら優秀なエンジニアは引く手あまたで、信頼のおける知人の紹介であったり勉強会などで出会った人づてで就職を決めてしまうことが多いからだ。&lt;/p&gt;

&lt;p&gt;これは企業側にとっても採用を難しくさせる要因になっていると思う。なぜならいざ転職市場から優秀なエンジニアを見つけようと思っても、優秀なエンジニアがそもそも転職市場には居ないので転職市場を掘っても掘ってもなかなかお目当てのエンジニアには出会えないからだ。&lt;/p&gt;

&lt;p&gt;逆に言うと企業側が優秀な人の採用に一人成功すればその人づてに紹介の輪が広がるケースもあるので、最初の優秀な一人の採用は極めて重要と言える。&lt;/p&gt;

&lt;h3 id=&quot;リファラル採用が一番多い&quot;&gt;リファラル採用が一番多い&lt;/h3&gt;

&lt;p&gt;本書でも転職者のルートで一番多いのは知人を介した紹介であり、エンジニアの転職も同じエンジニアからの紹介ルートが一番多いと書かれている。エンジニアを介したルートがなぜエンジニアにとって合理的なのかの理由は下記のように書かれている。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;エンジニア同士、技術トークを共有することができ、エンジニアの思考や行動のどこにつまずきやすいのかを理解している&lt;/li&gt;
  &lt;li&gt;（エンジニアに限らないことだが）求人企業サイドの情報より利害関係がない人間関係から収集した情報のほうが信じやすい = オーバーハードコミュニケーション&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;転職ルートの多様化&quot;&gt;転職ルートの多様化&lt;/h2&gt;

&lt;p&gt;僕がカナダ・バンクーバーから帰国後、エンジニアとして就職活動をしていて一番驚いたこととしては、新卒就活生時代にさんざん経験したようなお堅い面接からスタートするのではなく、カジュアルな面談からスタートできるという点だ。&lt;/p&gt;

&lt;p&gt;今でこそ当たり前になっているカジュアル面談だが、当時はカジュアルな面談から気軽にスタートできるマッチングサービスがそこまで多くはなく、当時使っていたWantedlyは非常に重宝した思い出がある。&lt;/p&gt;

&lt;p&gt;※なお当時の僕の就活の様子は当ブログにまとまっているので興味がある方はどうぞ: &lt;a href=&quot;https://blog.toshimaru.net/job-hunting-0/&quot;&gt;就活日記(0) エントリー&lt;/a&gt;（&lt;a href=&quot;https://blog.toshimaru.net/tag/就活/&quot;&gt;就活日記シリーズ一覧&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;また最近では、ドラフト型、スカウト型の求人サービスも多く登場している。例えば下記のようなものだ。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://job-draft.jp&quot;&gt;転職ドラフト&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jobs.forkwell.com/about/scout&quot;&gt;Forkwell Scout&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://scouty.co.jp/&quot;&gt;Scouty&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;年収の透明化&quot;&gt;年収の透明化&lt;/h3&gt;

&lt;p&gt;中でも転職ドラフトは個人的にかなりのブレークスルーであったと感じる。企業に年収をセットで提示させることで、今まで暗黙的にタブーとされてきた年収をつまびらかにしたからだ。これはエンジニアにとってもたいへん有益で、なぜなら自身の市場価値を＜年収＞という圧倒的にわかりやすく明確な数値で知ることができるからである。&lt;/p&gt;

&lt;p&gt;僕も転職ドラフトが話題になった当時、市場価値を測るという目的で試しにドラフト対象者として登録してみたのだが、やはり現年収を大きく上回る年収が提示されたときのインパクトは大きかった。それが数十万くらい高いくらいの話であれば「まぁ現職に不満はないしこんなもんかー」程度で済むのだが、数百万単位で現年収を上回る提示をされたときはたとえ現職に全く不満はないとしても心が揺らぐというものである。&lt;/p&gt;

&lt;p&gt;もちろん転職を決めるファクターとして年収が全てではないのでそれで転職を決めましたという話ではないし、転職を年収のみで決めるべきだとも思っていないのだが、転職ドラフトによってエンジニア自身の中で「自分の市場価値は年収ベースでこれくらい」という相場観を持てる意義は大きい。&lt;/p&gt;

&lt;p&gt;企業サイドからすると、優秀なエンジニアであればあるほど高い年収の相場観を持っているはずなので、本当に優秀なエンジニアを採用したいと思うのであれば、最低でもその相場のレベル以上の年収を設定することが必要になってくると思う。&lt;/p&gt;

&lt;h3 id=&quot;採用担当者のリテラシー&quot;&gt;採用担当者のリテラシー&lt;/h3&gt;

&lt;p&gt;転職ドラフトは一例だが、エンジニアの転職チャネル・転職サービスは多様化している。採用担当者はエンジニア採用チャネルに対する感度の高さやそれを使いこなすためのリテラシーが求められてくる。本書でも下記のように述べられている。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;どのようなエンジニアがどこにいるのか、全体像を捉えるのは困難だからです。&lt;/p&gt;

  &lt;p&gt;全体像が捉えづらい中で、あなたの会社に必要なエンジニアがどこにいるのか仮設を立て、検証し、採用活動をおこなって試行錯誤しながら、採用に必要なノウハウを蓄積していくことが、エンジニア採用を成功させるためには重要です。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;このへんのPDCAサイクルが回せる採用担当者もまた、エンジニアと同様に企業には必要となるだろう。&lt;/p&gt;

&lt;h2 id=&quot;企業の情報発信&quot;&gt;企業の情報発信&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;企業ブランドや情報発信力は重要です。コストをかけてでも良くしていかなければ、事業はもちろん、採用もうまくいかない現実があることを再認識しましょう。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;近年は&lt;a href=&quot;http://business.hatenastaff.com/blogmedia&quot;&gt;はてなブログMedia&lt;/a&gt;などを利用したオウンドメディアによる企業の情報発信も当たり前となってきた。例えば下記のようなオウンドメディアである。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mercan.mercari.com&quot;&gt;メルカン&lt;/a&gt; by メルカリ&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://employment.en-japan.com/engineerhub/&quot;&gt;エンジニアHub&lt;/a&gt; by エンジャパン&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://r.gnavi.co.jp/g-interview/&quot;&gt;みんなのごはん&lt;/a&gt; by ぐるなび&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;テック系企業だとエンジニア向けにテックブログを持つのも当たり前の時代となった。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://tech.mercari.com&quot;&gt;Mercari Engineering Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://techlife.cookpad.com&quot;&gt;クックパッド開発者ブログ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tech.pepabo.com&quot;&gt;ペパボテックブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;企業にとってみれば、エンジニアに企業について知ってもらい、興味を持ってもらわなければカジュアル面談にすらたどり着けない。まずはオウンドメディアによる情報発信あるいはテックブログによる技術的な情報発信を積極的に行って企業について認知してもらい興味を持ってもらう努力が必要になる。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-cards=&quot;hidden&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;SmartHR 社が面接で使っている資料を Speaker Deck で公開しました！昇給実績や、いま入社した場合にもらえるストックオプションのシミュレーション結果もアリます。ほぼ全職種募集してるので、お気軽にご応募ください！&lt;a href=&quot;https://t.co/d1hl3rXeC6&quot;&gt;https://t.co/d1hl3rXeC6&lt;/a&gt; &lt;a href=&quot;https://t.co/ey6dBB7B8z&quot;&gt;pic.twitter.com/ey6dBB7B8z&lt;/a&gt;&lt;/p&gt;&amp;mdash; 宮田 昇始 (@miyasho88) &lt;a href=&quot;https://twitter.com/miyasho88/status/1027086009178017792?ref_src=twsrc%5Etfw&quot;&gt;August 8, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;↑SmartHR社は会社紹介資料をそのままWebに公開している。会社ヴィジョンやユニークな制度が資料内でわかりやすく紹介されておりお手本としたい会社紹介資料だ。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;企業の差別化ポイント&quot;&gt;企業の差別化ポイント&lt;/h2&gt;

&lt;p&gt;IT企業が数多く存在する中、良いエンジニアに働いてもらうには他社と決定的な差別化を測る必要がある。エンジニア採用における企業の差別化ポイントとしては本書では下記が紹介されている。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;報酬&lt;/li&gt;
  &lt;li&gt;就業条件&lt;/li&gt;
  &lt;li&gt;評価と処遇&lt;/li&gt;
  &lt;li&gt;企業内教育の制度&lt;/li&gt;
  &lt;li&gt;キャリアパス&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;報酬&quot;&gt;報酬&lt;/h3&gt;

&lt;p&gt;一番わかり易いのは報酬での差別化だ。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;エンジニアが転職する第一の要因は「報酬の低さ」であるといわれています。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;本書ではエンジニア報酬が低くなる要因を、年功序列による賃金テーブルが運用されているからだとしている。古き良き日本企業であれば年功序列による賃金テーブルを運用をしたくなる気持ちもわかるのだが、エンジニアにおいてはそれは絶対NGといえる。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;エンジニアにとっての成長は人によって千差万別で、学生時代から技術を身につけたエンジニアならば入社時点で先輩社員より開発力が高い、いやはるかに高い人もいます。年齢≠技術であり、技術力と実績が賃金と比例する大前提と社内規定が矛盾し、能力と実績を反映した報酬を出せない企業が非常に多いからです。&lt;/p&gt;

  &lt;p&gt;これら既存の日本企業の運営ルールを打ち破ることができれば、良いエンジニアに働いてもらえる環境の整備に向けて大きく前進することになります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;転職すると年収が上がるバグ&quot;&gt;転職すると年収が上がるバグ&lt;/h4&gt;

&lt;p&gt;思い切った賃金テーブルの改定が行えない企業が世の中には多いようで、&lt;a href=&quot;http://b.hatena.ne.jp/entry/356805083/comment/mizchi&quot;&gt;転職すると年収が上がるというバグ&lt;/a&gt;が報告されている。&lt;/p&gt;

&lt;p&gt;エンジニアを採用したい企業側にとってはそのバグを突くことが採用チャンスと言えるだろう。幸い、上述したような転職ドラフトのようなサービスが世の中には存在しているので、各社どんどん年収バグを突いていっていただきたい&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;また転職ドラフトなどでガンガン高い入札をしている企業であれば、それだけで「エンジニアを高く評価する企業」というイメージにもなるので、一つの企業ブランディング活動にもなりそうだ。&lt;/p&gt;

&lt;p&gt;※ 余談にはなるが、転職ドラフトのように企業名が出る形で高い年収を提示する際には、社内実態との乖離には気をつけなければならない。さもないと社内で変な軋轢を生むこととなる。&lt;/p&gt;

&lt;p&gt;逆に社内で手放したくないエンジニアがいるという企業は、年収バグ起因で他の企業に転職されちゃう前にきちんと実力・成果に応じた報酬設定を行うべきた。&lt;/p&gt;

&lt;h3 id=&quot;就業条件&quot;&gt;就業条件&lt;/h3&gt;

&lt;p&gt;福利厚生を含む就業条件をユニークにするというのも最近多く聞く。例えば下記のような例である。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;リモートワーク&lt;/li&gt;
  &lt;li&gt;フレックスタイム制&lt;/li&gt;
  &lt;li&gt;副業推奨&lt;/li&gt;
  &lt;li&gt;英語などの学習支援&lt;/li&gt;
  &lt;li&gt;勉強会や海外カンファレンス参加のサポート&lt;/li&gt;
  &lt;li&gt;子育て支援制度&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;など細かい制度を上げるとキリがないが、エンジニアを惹きつける就業条件を設定する企業も多くなっている。&lt;/p&gt;

&lt;p&gt;エンジニア仕事は比較的場所・時間を選ばず働くことができるので、例えばリモートワーク・フレックスタイム制を好むエンジニアは多くいる。またエンジニアは普段から英語ドキュメントを読んだり、OSS活動の中でGitHubで英語でコミュニケーションをとったり、海外のテックカンファレンスに行ったり、英語を使用することも多いので英語の学習支援があると嬉しいという声も聞く。&lt;/p&gt;

&lt;p&gt;最近僕が見た中で充実した福利厚生・就業条件がある企業を下記に列挙する。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://about.yahoo.co.jp/hr/workplace/familycare.html&quot;&gt;ヤフー&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.smartnews.com/blog/2018/08/company-benefits/&quot;&gt;スマートニュース&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cybozu.co.jp/company/work-style/&quot;&gt;サイボウズ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://careers.mercari.com/merci-box/&quot;&gt;メルカリ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cyberagent.co.jp/way/info/contents_type=1119&quot;&gt;サイバーエージェント&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;評価と処遇&quot;&gt;評価と処遇&lt;/h3&gt;

&lt;p&gt;本書でも述べられている通り、エンジニアの評価システムほど難しいものはない。公平な評価システムを作る上で下記が重要だと述べられている。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;評価システムをルール通り運用する&lt;/li&gt;
  &lt;li&gt;システム開発経験のあるマネージャーもしくはエンジニアが一次評価を実施する&lt;/li&gt;
  &lt;li&gt;対象のエンジニアの技術領域と評価者の技術領域をそろえる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;エンジニアの評価制度に関しては、下記のVOYAGE GROUPのエンジニアの技術力評価の歴史の資料が参考になるだろう。&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;a3d2a247abca426cabeb4522d3bf57a5&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;また処遇に関しては実力・実績ベースで決めるべきであり、本書では下記のアンチパターンが紹介されている。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;創業期のメンバーと仲良しになってしまい、キャリア採用で優秀なエンジニアが入社して実績を出しても昇格できない&lt;/li&gt;
  &lt;li&gt;経営陣と優秀なエンジニアの間に創業時からいる低スキルのエンジニアが上長として入り込み、優秀なエンジニアの成果を自分のものにして、優秀なエンジニアのモチベーションを消滅させる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「創業メンバーだから」「創業メンバーと仲良しだから」という理由で登用させるのは危険信号なので、見直すべき人事といえる。&lt;/p&gt;

&lt;h3 id=&quot;企業内教育の制度&quot;&gt;企業内教育の制度&lt;/h3&gt;

&lt;p&gt;企業としてエンジニアの育成に投資することや成長環境を整備することも重要だと述べられている。&lt;/p&gt;

&lt;p&gt;この例としては、CTOやエース級エンジニアからの技術研修であったり、彼らとのペアプログラミング・レビューであったりすると思う。最近だとそういったことが実施できるエンジニアを外部から技術顧問として招く例も聞く。&lt;/p&gt;

&lt;p&gt;そのような成長環境をエンジニアに定常的にしっかり用意することができれば、エンジニアの離職率の低下につなげることができるだろう。&lt;/p&gt;

&lt;p&gt;技術研修の例として、技術研究を行っている企業がブログにてその内容を紹介している。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://techlife.cookpad.com/entry/2018/05/09/080000&quot;&gt;総合職・デザイナー向け技術基礎研修 2018 - クックパッド開発者ブログ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.m3tech.blog/entry/2018/08/13/090000&quot;&gt;エンジニア新人研修、始めました。 - エムスリーテックブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;またGitHubに研修資料をアップして、研修の充実度をアピールするのも有効な手段である。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;mixi &lt;a href=&quot;https://github.com/mixi-inc/GitTraining/wiki&quot;&gt;git&lt;/a&gt;, &lt;a href=&quot;https://github.com/mixi-inc/AndroidTraining&quot;&gt;Android&lt;/a&gt;, &lt;a href=&quot;https://github.com/mixi-inc/iOSTraining&quot;&gt;iOS&lt;/a&gt;, &lt;a href=&quot;https://github.com/mixi-inc/JavaScriptTraining&quot;&gt;JavaScript&lt;/a&gt;, &lt;a href=&quot;https://github.com/mixi-inc/RubyTraining&quot;&gt;Ruby&lt;/a&gt;, &lt;a href=&quot;https://github.com/mixi-inc/PerlTraining&quot;&gt;Perl&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hatena/Hatena-Textbook&quot;&gt;はてなの教科書&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;ドワンゴ &lt;a href=&quot;https://dwango.github.io/scala_text/&quot;&gt;Scala&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/everyleaf/el-training&quot;&gt;株式会社万葉の新入社員教育用カリキュラム&lt;/a&gt;(Ruby on Rails)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ペアプロの事例に関しては下記のt-wadaさんの資料が参考になるだろう。&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;483d185def8b4038b0d981e51ed3ebbb&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;キャリアパス&quot;&gt;キャリアパス&lt;/h3&gt;

&lt;p&gt;エンジニアがキャリアパスを描きやすい環境を作るのも企業にとって重要だ。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;開発を通じてエンジニアが成長でき、成長後も働けるキャリアパスを構築できる事業運営が重要になってきます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;最先端の技術・開発手法による開発プロジェクトを社内で１つは確保する&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;枯れた技術・古い技術だけではエンジニアが離れてしまうこともあるので、最先端の技術・開発手法による開発プロジェクトを社内に１つは用意することでエンジニアをつなぎとめる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;マネージャーのキャリアパスを用意&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;35歳エンジニア定年説という言葉が流布されているように、エンジニアとしての成長が頭打ちになるタイミングがいつかは来る。それに備えてエンジニアがマネージャとしてキャリアを進めていけるようなキャリアパスも用意する&lt;/li&gt;
      &lt;li&gt;年老いてもいかに技術者としてのマインドを持ち続けるかに関しては、過去にこのような記事を書いたことがある: &lt;a href=&quot;https://blog.toshimaru.net/like-a-sponge-as-an-engineer/&quot;&gt;技術者としてスポンジであり続けること　あるいは老害回避戦略の話&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;社内のキャリアパスを公開&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;社内エンジニアの中にはスペシャリストとしてエンジニアリングを突き詰める人であったり、マネージャーにジョブチェンジしてマネージャーとしてキャリアを歩んでいく人もいるだろう。そういったキャリアパスの事例を社内に蓄積していき、1on1などの面談の場面で具体的なキャリアパスを社内事例とともに紹介して、エンジニア自身がキャリアパスをイメージしやすい環境を作れると良いだろう&lt;/li&gt;
      &lt;li&gt;1on1についてどのような話をしたら良いかに関してはこちらの記事を参考にされたし: &lt;a href=&quot;https://blog.toshimaru.net/1-on-1-book-memo/&quot;&gt;ヤフーの1on1とシリコンバレー式1on1の本を読んだ ~1on1の目的、進め方、何を話すべきか~&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;迷ったら採用しないという原則&quot;&gt;迷ったら採用しないという原則&lt;/h2&gt;

&lt;p&gt;最後に本書には触れられていない内容だが、個人的に採用する側として気をつけたらよいと思うことがある。それは「迷ったら採用しない」ということだ。&lt;/p&gt;

&lt;p&gt;日本は解雇規制が厳しいので米国のように簡単にクビにはできない。つまり間違った人材（全くカルチャーフィットしない人材、人間性に難ありな人材、技術力が著しく悪い人材）を間違って採用してしまったとしても、なかなか簡単には解雇できないということだ。従って採用は失敗しないように気をつけなければならないと思うし、&lt;strong&gt;迷ったら採らないというのが原則&lt;/strong&gt;だと僕は考えている。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;企業は偽陽性（False Positive）を避けようとしているからだと思います。要するに間違って企業に合わない人（人間として、人材として）を採用するのが最悪だと思われています。良い人材を見過ごすよりも合わない人材を採用する方がコストが高いからです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@oldergod/square-%E3%81%AE%E6%8E%A1%E7%94%A8%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6-8d95b8346917&quot;&gt;Square の採用プロセスについて – Benoît Quenaudon – Medium&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;米国の採用ですらそのような状況なのだから&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;、日本の採用はFalse Positiveな採用に陥らないようになおさら気をつけるべきだと思う。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;language=ja_JP&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=4774186015&amp;amp;linkId=39b086c770d3b85f907636ba1244e86b&quot;&gt;&lt;/iframe&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;ひいてはこれがエンジニア全体の報酬水準を引き上げることになるので、この発言は僕自身のポジショントークも少し入っている &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;ちなみ本引用記事の要旨としては、Square社はFalse Positiveを避けつつも、False Negativeにもならないようにとちゃんと考えて採用しているよ、という話 &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="採用" /><category term="読書" /><summary type="html">エンジニア採用について最近いろいろ考える機会が増えたので読んでみた。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/engineer/og.jpeg" /></entry><entry><title type="html">Rails E2EテストでpoltergeistからHeadless Chromeへ乗り換える</title><link href="https://blog.toshimaru.net/poltergeist-to-selenium-webdriver/" rel="alternate" type="text/html" title="Rails E2EテストでpoltergeistからHeadless Chromeへ乗り換える" /><published>2018-08-04T00:00:00+09:00</published><updated>2018-08-04T00:00:00+09:00</updated><id>https://blog.toshimaru.net/poltergeist-to-selenium-webdriver</id><content type="html" xml:base="https://blog.toshimaru.net/poltergeist-to-selenium-webdriver/">&lt;p&gt;RailsのCapybaraを使ったE2Eテスト(feature spec)をこの度、&lt;a href=&quot;https://github.com/teampoltergeist/poltergeist&quot;&gt;poltergeist&lt;/a&gt;から&lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/master/headless/README.md&quot;&gt;Headless Chrome&lt;/a&gt;に乗り換えてみたのでそのときのメモ。&lt;/p&gt;

&lt;h2 id=&quot;対応-pull-request&quot;&gt;対応 Pull Request&lt;/h2&gt;

&lt;p&gt;今回対応したPull Requestはこちら。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/toshimaru/RailsTwitterClone/pull/211&quot;&gt;Use headless Chrome instead of PhantomJS(poltergeist) by toshimaru · Pull Request #211 · toshimaru/RailsTwitterClone · GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;思ったよりも差分はコンパクトにまとまった。&lt;/p&gt;

&lt;h2 id=&quot;install-selenium-webdriver&quot;&gt;Install selenium-webdriver&lt;/h2&gt;

&lt;p&gt;まずは&lt;code class=&quot;highlighter-rouge&quot;&gt;poltergeist&lt;/code&gt; gemの代わりに、&lt;code class=&quot;highlighter-rouge&quot;&gt;selenium-webdriver&lt;/code&gt;をインストール。&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;-  gem &quot;poltergeist&quot;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+  gem &quot;selenium-webdriver&quot;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;change-capybarajavascript_driver&quot;&gt;Change Capybara.javascript_driver&lt;/h2&gt;

&lt;p&gt;次に&lt;code class=&quot;highlighter-rouge&quot;&gt;Capybara.javascript_driver&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;:poltergeist&lt;/code&gt;から&lt;code class=&quot;highlighter-rouge&quot;&gt;:selenium_chrome_headless&lt;/code&gt;に変更。&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;- require &quot;capybara/poltergeist&quot;
- Capybara.javascript_driver = :poltergeist
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ require &quot;selenium-webdriver&quot;
+ Capybara.javascript_driver = :selenium_chrome_headless
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ちなみに&lt;code class=&quot;highlighter-rouge&quot;&gt;:selenium_chrome_headless&lt;/code&gt;の設定は下記の変更の中でcapybara内に取り込まれている。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Capybara&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;register_driver&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:selenium_chrome_headless&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;browser_options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Selenium&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;WebDriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Chrome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;browser_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'--headless'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;browser_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'--disable-gpu'&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Capybara&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Selenium&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;browser: :chrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;options: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;browser_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;via. &lt;a href=&quot;https://github.com/teamcapybara/capybara/commit/0275eab42c610cd1ccde7947b051d0b00857b9ce&quot;&gt;add default selenium chrome driver registrations · teamcapybara/capybara@0275eab · GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;install-chromedriver&quot;&gt;Install chromedriver&lt;/h2&gt;

&lt;h3 id=&quot;on-mac&quot;&gt;On Mac&lt;/h3&gt;

&lt;p&gt;chromedriverが必要になってくるが、Macの場合はbrewで入れちゃうのが一番ラク。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; brew cask &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;chromedriver
&lt;span class=&quot;go&quot;&gt;Updating Homebrew...
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;==&amp;gt;&lt;/span&gt; Auto-updated Homebrew!
&lt;span class=&quot;go&quot;&gt;Updated 1 tap (homebrew/cask).
No changes to formulae.

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;==&amp;gt;&lt;/span&gt; Satisfying dependencies
&lt;span class=&quot;gp&quot;&gt;==&amp;gt;&lt;/span&gt; Downloading https://chromedriver.storage.googleapis.com/2.41/chromedriver_mac64.zip
&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;####################################################################### 100.0%&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;==&amp;gt;&lt;/span&gt; Verifying checksum &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;Cask chromedriver
&lt;span class=&quot;gp&quot;&gt;==&amp;gt;&lt;/span&gt; Installing Cask chromedriver
&lt;span class=&quot;gp&quot;&gt;==&amp;gt;&lt;/span&gt; Extracting nested container chromedriver
&lt;span class=&quot;gp&quot;&gt;==&amp;gt;&lt;/span&gt; Linking Binary &lt;span class=&quot;s1&quot;&gt;'chromedriver'&lt;/span&gt; to &lt;span class=&quot;s1&quot;&gt;'/usr/local/bin/chromedriver'&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;🍺  chromedriver was successfully installed!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注意事項&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;brew install chromedriver&lt;/code&gt;ではinstallできないので注意（ちょっと古いやり方）。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chromedriver-helper&lt;/code&gt; gemが入っているとうまく動かない場合があるので注意。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;on-circleci&quot;&gt;On CircleCI&lt;/h3&gt;

&lt;p&gt;CircleCI上では、&lt;code class=&quot;highlighter-rouge&quot;&gt;ruby:x.x-node-browsers&lt;/code&gt;のCircleCI公式Ruby Dokcer Imageを使っていればきちんと動作しました。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;na&quot;&gt;docker&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;circleci/ruby:2.5-node-browsers&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上記の設定の場合、Ruby2.5のnode-browsersバージョンをベースイメージとして使用している。&lt;/p&gt;

&lt;h2 id=&quot;on-travisci&quot;&gt;On TravisCI&lt;/h2&gt;

&lt;p&gt;これが今回の対応で一番ハマった設定でした。いろいろ試しましたが下記のエラーがなかなか解決できませんでした。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Failures:

  1) Authentication authorization screenshot
     Failure/Error: before { visit signin_path }

     Selenium::WebDriver::Error::WebDriverError:
        Unable to find Mozilla geckodriver. Please download the server from https://github.com/mozilla/geckodriver/releases and place it somewhere on your PATH. More info at https://developer.mozilla.org/en-US/docs/Mozilla/QA/Marionette/WebDriver.
     # ./spec/features/authentication_pages_spec.rb:9:in `block (3 levels) in &amp;lt;top (required)&amp;gt;'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;本当は&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo: false&lt;/code&gt;の設定で動かしたかったのですがそれだと上手くいかなかったので&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt;で起動させて&lt;code class=&quot;highlighter-rouge&quot;&gt;chromium-chromedriver&lt;/code&gt;をテスト前にInstallしてパスを通すという方法でテストを通しました。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;sudo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;required&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ruby&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;before_install&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sudo apt-get install -y chromium-chromedriver&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ln -s /usr/lib/chromium-browser/chromedriver ~/bin/chromedriver&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(もう少しスマートなやり方をご存知の方は教えていただけると嬉しいです🙏)&lt;/p&gt;

&lt;h2 id=&quot;参考リンク&quot;&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ohbarye.hatenablog.jp/entry/2018/03/10/232300&quot;&gt;PhantomJS + Poltergeist を Selenium + Headless Chrome で置き換える (1) Rails + Capybara による feature spec 編 - valid,invalid&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tech.speee.jp/entry/2017/06/15/135636&quot;&gt;RSpec の feature spec でヘッドレス Chrome を使う - Speee DEVELOPER BLOG&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://y-yagi.tumblr.com/post/166831012790/rails%E9%9B%91%E3%81%ABsystem-test%E3%81%A7headless-chrome%E3%82%92%E4%BD%BF%E3%81%86&quot;&gt;[Rails]雑にSystem TestでHeadless Chromeを使う | 日々雑記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="rails" /><category term="rspec" /><summary type="html">RailsのCapybaraを使ったE2Eテスト(feature spec)をこの度、poltergeistからHeadless Chromeに乗り換えてみたのでそのときのメモ。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/chromedriver.jpg" /></entry><entry><title type="html">VS Code Extensionの公開手順</title><link href="https://blog.toshimaru.net/how-to-publish-vscode-extension/" rel="alternate" type="text/html" title="VS Code Extensionの公開手順" /><published>2018-08-01T00:00:00+09:00</published><updated>2018-08-01T00:00:00+09:00</updated><id>https://blog.toshimaru.net/how-to-publish-vscode-extension</id><content type="html" xml:base="https://blog.toshimaru.net/how-to-publish-vscode-extension/">&lt;p&gt;先日VSCode Extensionを公開しました。公開するにあたっての手順をメモがてら残したいと思います。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Blogged. | はじめてのVS Code Extension、Hybrid Next Plusテーマを公開しました - Hack Your Design! &lt;a href=&quot;https://t.co/2cg3jwnT5q&quot;&gt;https://t.co/2cg3jwnT5q&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1024512092341030912?ref_src=twsrc%5Etfw&quot;&gt;August 1, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;visual-studio-team-servicesアカウントの作成&quot;&gt;Visual Studio Team Servicesアカウントの作成&lt;/h2&gt;

&lt;p&gt;まずVSCode Extensionを公開するためには、&lt;a href=&quot;https://visualstudio.microsoft.com/team-services/&quot;&gt;Visual Studio Team Services&lt;/a&gt;アカウントが必要になります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/vsts/sign-in.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;「MSのメールアカウントを作らなければならないんか！？」と一瞬思っちゃいましたが、手持ちのGmailなどでも登録できるのでご安心を。&lt;/p&gt;

&lt;h2 id=&quot;プロジェクト作成&quot;&gt;プロジェクト作成&lt;/h2&gt;

&lt;p&gt;自分の好きな名前でプロジェクトを作成します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/vsts/create-pj.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;アクセストークンの取得&quot;&gt;アクセストークンの取得&lt;/h2&gt;

&lt;p&gt;作成したプロジェクトページ( &lt;code class=&quot;highlighter-rouge&quot;&gt;https://{youraccount}.visualstudio.com&lt;/code&gt; )でアクセストークンを取得します。 右上メニューのセキュリティからアクセストークンの追加を行ってください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/vsts/security.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/vsts/accesstoken.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下記の内容でアクセストークンを作成します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Description: &lt;strong&gt;vsce&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Expire: &lt;strong&gt;1 year&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Scope: &lt;strong&gt;All&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;※ScopeをAllに設定しないとこのあとの手順がうまくいかないので注意！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/vsts/get-token.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;vsceのダウンロード&quot;&gt;vsceのダウンロード&lt;/h2&gt;

&lt;p&gt;VSCode Extensionの公開に際しては&lt;code class=&quot;highlighter-rouge&quot;&gt;vsce&lt;/code&gt;コマンドを使用します。npmでダウンロードしてください。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install -g vsce
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;publisher作成&quot;&gt;Publisher作成&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/manage&quot;&gt;Marketplace publisher management page&lt;/a&gt; で必要な項目を記入した上でCreate Publisherを行います。&lt;/p&gt;

&lt;h2 id=&quot;vsceログイン&quot;&gt;vsceログイン&lt;/h2&gt;

&lt;p&gt;下記のコマンドでvsceログインします。手順のなかでアクセストークンを聞かれるので上手順で入手したトークンを入力します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vsce login (publisher name)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;公開&quot;&gt;公開！&lt;/h2&gt;

&lt;p&gt;これで公開準備が整ったので、VSCode Extensionのルートで下記のコマンドを打ってExtensionを公開します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vsce publish
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考資料&quot;&gt;参考資料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.visualstudio.com/docs/extensions/publish-extension&quot;&gt;Publishing Visual Studio Code Extensions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/vsts/organizations/accounts/create-organization-msa-or-work-student?view=vsts&quot;&gt;Create a VSTS organization with a Microsoft account or a work account | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="vscode" /><summary type="html">先日VSCode Extensionを公開しました。公開するにあたっての手順をメモがてら残したいと思います。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/vsts/og.png" /></entry><entry><title type="html">はじめてのVS Code Extension、Hybrid Next Plusテーマを公開しました</title><link href="https://blog.toshimaru.net/vscoce-hybrid-next-plus/" rel="alternate" type="text/html" title="はじめてのVS Code Extension、Hybrid Next Plusテーマを公開しました" /><published>2018-07-31T00:00:00+09:00</published><updated>2018-07-31T00:00:00+09:00</updated><id>https://blog.toshimaru.net/vscoce-hybrid-next-plus</id><content type="html" xml:base="https://blog.toshimaru.net/vscoce-hybrid-next-plus/">&lt;p&gt;はじめてのVS code Extensionとしてybrid Next Plusというテーマを公開してみた。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;初めてのVSCode ExtensionとしてThemeを作ってみた（Beta Version）| Hybrid Next Plus - Visual Studio Marketplace &lt;a href=&quot;https://t.co/d8xWeLHQ51&quot;&gt;https://t.co/d8xWeLHQ51&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1021918426426531840?ref_src=twsrc%5Etfw&quot;&gt;July 25, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;きっかけ&quot;&gt;きっかけ&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;もともとVSCodeのデフォルトのテーマがいまいち好きになれなかった&lt;/li&gt;
  &lt;li&gt;Vimで&lt;a href=&quot;https://github.com/w0ng/vim-hybrid&quot;&gt;hybrid&lt;/a&gt;、Atomで&lt;a href=&quot;https://github.com/kaicataldo/hybrid-next-syntax&quot;&gt;hybrid next&lt;/a&gt;というテーマを気に入っていたのでそのテーマをVSCodeでも使おうと思った&lt;/li&gt;
  &lt;li&gt;公開されている&lt;a href=&quot;https://github.com/wyze/vscode-hybrid-next/&quot;&gt;vscode-hybrid-next&lt;/a&gt;を使おうと思ったが、少々気に食わない設定があった&lt;/li&gt;
  &lt;li&gt;同レポジトリにPRしようかと思ったがテーマのあて方が&lt;a href=&quot;https://www.sublimetext.com/docs/3/color_schemes_tmtheme.html&quot;&gt;tmTheme&lt;/a&gt;形式だったため小回りが効かない感じになってた&lt;/li&gt;
  &lt;li&gt;自分でテーマを作った &lt;a href=&quot;https://github.com/toshimaru/hybrid-next-plus&quot;&gt;hybrid-next-plus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考テーマ&quot;&gt;参考テーマ&lt;/h2&gt;

&lt;p&gt;背景やサイドバーの設定は、&lt;a href=&quot;https://atom.io/themes/one-dark-ui&quot;&gt;Atom One Dark&lt;/a&gt;を参考にした。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.github-camo.com/af4a063b48fb691fb25e664ca8e0680a31f6f1e4/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f3337383032332f32363234363831382f30383235356237362d336364362d313165372d396636642d3661653365313661383961392e706e67&quot; alt=&quot;atom one dark&quot; /&gt;&lt;/p&gt;

&lt;p&gt;:point_up: &lt;strong&gt;【図】Atom One Dark(公式READMEより引用)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;シンタックスハイライトのカラーは、&lt;a href=&quot;https://github.com/w0ng/vim-hybrid&quot;&gt;hybrid&lt;/a&gt;、&lt;a href=&quot;https://github.com/kaicataldo/hybrid-next-syntax&quot;&gt;hybrid next&lt;/a&gt;, &lt;a href=&quot;https://github.com/wyze/vscode-hybrid-next/&quot;&gt;vscode-hybrid-next&lt;/a&gt;を参考にしつつ一番しっくりくる色のあて方を選択した。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/kaicataldo/hybrid-next-syntax/master/screenshots/hybrid-next-screenshot-1.png&quot; alt=&quot;hybrid next&quot; /&gt;&lt;/p&gt;

&lt;p&gt;:point_up: &lt;strong&gt;【図】Atom Hybrid Next(公式READMEより引用)&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;最後に&quot;&gt;最後に&lt;/h2&gt;

&lt;p&gt;一応markdown, Ruby, jsonファイルあたりはちゃんと確認にしていい感じにsyntaxハイライトあたっていることを確認していますが、他の拡張子で不完全なところがあるかもなので何かありましたらPRお願いします 🙏&lt;/p&gt;

&lt;p&gt;手前味噌にはなるけどなかなかいいテーマに仕上がっていると思いますのでよかったら使ってみてください。&lt;/p&gt;

&lt;h2 id=&quot;追記&quot;&gt;追記&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/how-to-publish-vscode-extension/&quot;&gt;VS Code Extensionの公開手順&lt;/a&gt;を書きました。&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="vscode" /><summary type="html">はじめてのVS code Extensionとしてybrid Next Plusというテーマを公開してみた。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/vscode/hybrid.png" /></entry><entry><title type="html">RuboCopチームにgemの名前を譲った話</title><link href="https://blog.toshimaru.net/rubocop-rails-config/" rel="alternate" type="text/html" title="RuboCopチームにgemの名前を譲った話" /><published>2018-07-17T00:00:00+09:00</published><updated>2018-07-17T00:00:00+09:00</updated><id>https://blog.toshimaru.net/rubocop-rails-config</id><content type="html" xml:base="https://blog.toshimaru.net/rubocop-rails-config/">&lt;p&gt;かねてより僕が開発していた&lt;a href=&quot;https://github.com/toshimaru/rubocop-rails&quot;&gt;rubocop-rails&lt;/a&gt;というgemをRuboCop公式チームの要望により譲った。&lt;/p&gt;

&lt;p&gt;僕がこのgemを作った経緯とかは下記の記事の通り。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;つくったやつ | Railsと同じRuboCopの設定が利用できるrubocop-rails gemを作った - Hack Your Design! &lt;a href=&quot;https://t.co/szG0eLPetS&quot;&gt;https://t.co/szG0eLPetS&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/958123075572195331?ref_src=twsrc%5Etfw&quot;&gt;January 29, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;きっかけ&quot;&gt;きっかけ&lt;/h2&gt;

&lt;p&gt;名前を譲ることになったきっかけは下記のIssue。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rubocop-hq/rubocop/issues/5976&quot;&gt;Extract Rails Cops in a separate · Issue #5976 · rubocop-hq/rubocop&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;より正確にいうとこのIssueの前に&lt;a href=&quot;https://rubykaigi.org/2018/&quot;&gt;RubyKaigi 2018&lt;/a&gt;の懇親会でRuboCop作者から僕へ間接的に打診があり、上記のIssueに至る。&lt;/p&gt;

&lt;p&gt;RuboCopチームの要望を要約すると「RuboCop公式にRailsの拡張を作りたい。gem名はrubocop-railsとしたい。名前を頂戴！」と感じ。僕の想いとしては「RuboCop公式チームとして使いたい名前ということであればどうぞどうぞ。わかりやすい名前を付けることはRubyコミュニティ全体の利益にもなるだろうしね！」という感じ。&lt;/p&gt;

&lt;h2 id=&quot;譲るにあたりやったこと&quot;&gt;譲るにあたりやったこと&lt;/h2&gt;

&lt;p&gt;下記のようなIssueを作成して進めていった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/toshimaru/rubocop-rails/issues/31&quot;&gt;[IMPORTANT ANNOUNCEMENT] Transfer rubocop-rails gem to RuboCop Team · Issue #31 · toshimaru/rubocop-rails&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rubocop-rails&lt;/code&gt; に代わる新しいgemを作成: &lt;a href=&quot;https://github.com/toshimaru/rubocop-rails_config&quot;&gt;rubocop-rails_config&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rubocop-rails&lt;/code&gt; の新しいversionを切って、post_install_messageでRenameの旨を周知&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rubocop-rails_config&lt;/code&gt; のほうに簡単にUpdateできるようなUpdate Generator Taskを用意&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rubocop-rails&lt;/code&gt; というgemに新しいOwnerを付与&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rubocop-rails&lt;/code&gt; のRename前の古いバージョンをrubygemsから削除&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一番最後の &lt;strong&gt;古いバージョンをrubygemsから削除&lt;/strong&gt; はIssueでもやり取りしている通り、既存のビルドを壊すことになるので正直苦渋の決断であった。だけれどもRuboCopがdevelopment依存のgemであること、全く違うgemになったら既存のgemユーザーを驚かせてしまうこと、これらを総合的に考えた結果、古いバージョンを消してでもgemのRename周知を優先させようと思い至った。これに関しては正直正解はないと思う。&lt;/p&gt;

&lt;h2 id=&quot;rubocopコミッターのkoicさんが発表してくださいました&quot;&gt;RuboCopコミッターのkoicさんが発表してくださいました&lt;/h2&gt;

&lt;p&gt;本件に関してはRuboCopコミッターの&lt;a href=&quot;https://twitter.com/koic&quot;&gt;@koic&lt;/a&gt;さんも先日の&lt;a href=&quot;https://techplay.jp/event/679666&quot;&gt;Rails Developers Meetup 2018 Day 3 Extreme&lt;/a&gt;にて発表して頂いたようです。:innocent:&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-slide=&quot;57&quot; data-id=&quot;612849c52252464d8a63fc97f90c6091&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;発表エントリ: &lt;a href=&quot;http://koic.hatenablog.com/entry/railsdm-2018-day3-extreme&quot;&gt;Rails Developers Meetup 2018 Day 3 Extreme に登壇した - koicの日記&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;エピソードのご紹介ありがとうございました。:pray:&lt;/p&gt;

&lt;h2 id=&quot;参考資料&quot;&gt;参考資料&lt;/h2&gt;

&lt;p&gt;なお、gemを消す方法に関しては下記を参考にさせてもらった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.s21g.com/articles/1755&quot;&gt;公開した gem を削除する方法 - ヽ( ・∀・)ノくまくまー - s21g&lt;/a&gt;&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="rails" /><category term="rubocop" /><summary type="html">かねてより僕が開発していたrubocop-railsというgemをRuboCop公式チームの要望により譲った。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/rubocop-rail.png" /></entry></feed>