<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Hack Your Design!]]></title>
  <link href="http://blog.toshimaru.net/atom.xml" rel="self"/>
  <link href="http://blog.toshimaru.net/"/>
  <updated>2014-12-06T12:48:11+00:00</updated>
  <id>http://blog.toshimaru.net/</id>
  <author>
    <name><![CDATA[Toshimaru]]></name>
  </author>

  
  <entry>
    <title type="html"><![CDATA[光へ]]></title>
    <link href="http://blog.toshimaru.net/hikari-e/"/>
    <updated>2014-12-03T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/hikari-e</id>
    <content type="html"><![CDATA[<p>タカキは恐れていた。自分は開発者として一人前であるのか。現時点の自分のスキルセットは市場価値があるのか。開発者としての成長は止まっていないか。技術トレンドに取り残されていないか。自分の生産性に見合う対価は支払われているか。</p>

<p>ITエンジニアとはほとほと難しい職業だ。終わりがない。何か１つ技術を身につけたとしてもその技術は５年後、１０年後にはもう枯れている技術かもしれない（多くの場合、五年も経てば技術は陳腐化してしまうだろう）。最新の流行りの技術を勉強し身に付けたとしても技術潮流が大きく変わって使われなくなることだってすらある。</p>

<p>それゆえエンジニアは面白い職業でもある。日々変化する技術にキャッチアップし、その変化を楽しむこと。変化の流れに身を委ねる。他の産業にはない流れの速さだ。取り残されないようにうまく流れに乗る。進歩、進歩。学習、学習。吸収、吸収。毛刈り、毛刈り。おっと、いつのまにかYak Shavingしていた。</p>

<p>★</p>

<p>タカキがエンジニア志望したのには深い理由はなかった。ゴミのような「文系ライフ」を謳歌していたと思っていたらあっという間にいざ就活、周囲が一様に同じような黒い服を身にまとい、明るかった髪色が均一化した。</p>

<p>「お前志望企業どうすんの？」　友人の問いにタカキは答えられなかったが、その晩テレビでやっていた討論番組でどこかのIT社長が「これからはITの時代だ」「受験勉強で役に立たない知識を学ぶよりプログラミングを学ぶべきだ」という要旨のことを言ってたのをビールを片手に聞きIT開発者を目指すことを彼は決めた。子供の頃からコンピュータで遊ぶのが好きだった彼にとっては悪くない選択だった（とはいえやっていたのはもっぱらネットとゲームだ）。</p>

<p>そうしてタカキが新卒で入った会社は某大手ITベンダーの下請けSIだった。就職氷河期の中、Dラン大学・文系出身・プログラミングすらまともにやったことの無いタカキに開発者としての内定を出した稀有な会社だ。大手企業の選考は壊滅的、無い内定状態のタカキは他に選択肢もなく入社を決めた。</p>

<p>その会社（仮にK社としよう）はマイクロソフト技術ベースの開発を行っていた。.NET Framework, Microsoft SQL Server, Windows Server, Visual Basic, 誰が作ったかわからない社内フレームワーク…。</p>

<p>今でこそ「アレは掃き溜めのような環境だった」とタカキは言えるが当時の彼には何もわからなかった。無理もない、開発者として右も左もわからない状況だったのだ。良い悪いなんて価値判断もできるわけがない。当時の彼にはK社こそが＜世界の中心＞だった。</p>

<p>開発者として働き始めてITニュースチェックは毎朝欠かさずに行うようになった。するとK社では使われていない技術用語を目にすることが明らかに多かった。Ruby on Rails, Angular.js, AWS, Git, Github, Node.js, HTML5, CI, RESTful, アジャイル, Docker, Go…。タカキはふと気づく「ここは＜世界の中心＞なんかじゃない。世界の片隅、しかもすごく小さい辺境の地だ。」と。</p>

<p>そこからタカキが世界の広さを知るまでは時間はそうかからなかった。まずはTwitterでIT界隈で有名な人を片っ端からフォローした。彼らの共有している記事は欠かさずチェックし、彼らが呟いているワードから彼らがどんな技術に注目しているのかを把握した。次に興味を持った技術分野の勉強会にも顔を出し、その分野のエンジニアたちと交流を行った。</p>

<p>気づくとタカキの技術力は社内の先輩より高くなっていた。最初は単純な疑問だった。「なぜこの人はこんなふうにわざわざ汚いコードを書くのだろう？」それが日々の積み重ねで不満へとだんだん変わっていった。「なぜこの人はなんでこんなクソコードを書くのだ？」「どうして汎用的に使えるようなクラスを作らない？」「どうしてシステムを疎結合に設計しない？」「どうして品質を高めるためにテストを書かない？」「どうしてオープンソースの自社フレームワークなんかよりずっとずっと優れたフレームワークを使わない？」どうして。どうして。どうして。　(そして驚くべきことに彼らはタカキの１．５倍から２倍以上の給料をもらっている)</p>

<p>ある日、タカキは当時かかわっていたプロジェクトの開発マネージャーに進言したことがあった。「このコードの作りは使う側から見て少し使いにくいのでこのように変更しませんか？」　タカキの言葉にマネージャーはこのような要旨のことを返した。「開発経験が浅い若造のお前に何がわかる。俺が設計したコードに口出しするな」</p>

<p>タカキはK社を去ることを決意した。</p>

<p>★</p>

<p>新しい環境ではかつてはタカキの世界の外にあった技術が目の前にあった。Ruby on Rails, CI, AWS, Github, Go…。不条理なことを言う「ビッグ・ブラザー」たちはもう居ない。今ではリトル・ピープルとして仲間とともにタカキは楽しく働いている。</p>

<p>かつての＜世界の中心＞はもう世界の中心ではなくなった。今ではブラウザの検索窓ごしに世界が観える。</p>

<p>「ハロー、ワールド。」</p>

<p>タカキは呟いた。</p>

<p><span style="color:#eee">Where there’s a will, there’s a way.</span></p>

<p><strong>※この話はフィクションです。</strong></p>

<hr />

<p><a href="http://www.adventar.org/calendars/628">闇 Advent Calendar 2014</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pry-byebug を使ってRailsアプリをステップ実行する]]></title>
    <link href="http://blog.toshimaru.net/rails-pry-byebug/"/>
    <updated>2014-12-02T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/rails-pry-byebug</id>
    <content type="html"><![CDATA[<p>Railsアプリケーションのデバッグはどのように行っていますか？　愚直にプリントデバッグ？　でも複雑なロジック内だと「このロジックのこの処理のここでピンポイントで止めたい！」という場合もありますよね。</p>

<p>そんなときに便利なのがpry-byebug. Githubのリンクは下記。</p>

<p><a href="https://github.com/deivid-rodriguez/pry-byebug">https://github.com/deivid-rodriguez/pry-byebug</a></p>

<p>pry-byebugを使えばピンポイントで処理を止めてステップ実行が可能になります。</p>

<h2 id="requirement">Requirement</h2>

<ul>
  <li>Ruby2以上</li>
</ul>

<p>pry-byebugで使われている<a href="https://github.com/deivid-rodriguez/byebug">Byebug</a>はRuby2前提のデバッガーなので2以上が必要になってきます。</p>

<h2 id="section">導入</h2>

<p>下記をGemfileに追加して<code>bundle install</code>.</p>

<pre><code>gem 'pry-byebug', group: :development
</code></pre>

<h2 id="section-1">ユースケース</h2>

<p>例えばこんなコントローラーのロジックがあったとする。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">PostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="c1"># ...</span>
  <span class="k">def</span> <span class="nf">create</span>
    <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">post_params</span><span class="p">)</span>
    <span class="n">result</span> <span class="o">=</span> <span class="vi">@post</span><span class="o">.</span><span class="n">complicated_logic</span>
    <span class="c1">#</span>
    <span class="c1"># ... long logic ...</span>
    <span class="c1">#</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></div>

<p>resultの中身を見たい場合はこうすればよい。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">PostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="c1"># ...</span>
  <span class="k">def</span> <span class="nf">create</span>
    <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">post_params</span><span class="p">)</span>
    <span class="n">result</span> <span class="o">=</span> <span class="vi">@post</span><span class="o">.</span><span class="n">complicated_logic</span>
    <span class="nb">binding</span><span class="o">.</span><span class="n">pry</span>
    <span class="c1">#</span>
    <span class="c1"># ... long logic ...</span>
    <span class="c1">#</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></div>

<p>すると<code>binding.pry</code>を通る処理をした際に、下記のように表示されます。</p>

<p>From: app/controllers/posts_controller.rb @ line 31 PostsController#create:</p>

<pre><code>   26: def create
   27:   @post = Post.new(post_params)
   28:   result = @post.complicated_logic
   29:   binding.pry
   30:   # ... long logic ...
=&gt; 31:   respond_to do |format|

[1] pry(#&lt;PostsController&gt;)&gt;
</code></pre>

<p>この状態で下記のように変数をみたりできます。</p>

<pre><code>[1] pry(#&lt;PostsController&gt;)&gt; result
=&gt; true
[2] pry(#&lt;PostsController&gt;)&gt; post_params
=&gt; {"title"=&gt;"a", "category"=&gt;"b", "content"=&gt;"c"}
</code></pre>

<h2 id="section-2">その他のコマンド</h2>

<p>ステップ実行に使えるコマンドは下記４つ。</p>

<ol>
  <li><code>step</code></li>
  <li><code>next</code></li>
  <li><code>finish</code></li>
  <li><code>continue</code></li>
</ol>

<p>次の行を実行したければ<code>step</code>、Pryセッションから抜けたい場合は<code>continue</code>を打てばよい。</p>

<h3 id="section-3">コマンドエイリアス</h3>

<p>それぞれのコマンドをいちいち打つのがダルいので、プロジェクトルートに<code>.pryrc</code>を置きに下記のように書くとエイリアスを設定できるようだ。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="no">PryByebug</span><span class="p">)</span>
  <span class="no">Pry</span><span class="o">.</span><span class="n">commands</span><span class="o">.</span><span class="n">alias_command</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;continue&#39;</span>
  <span class="no">Pry</span><span class="o">.</span><span class="n">commands</span><span class="o">.</span><span class="n">alias_command</span> <span class="s1">&#39;s&#39;</span><span class="p">,</span> <span class="s1">&#39;step&#39;</span>
  <span class="no">Pry</span><span class="o">.</span><span class="n">commands</span><span class="o">.</span><span class="n">alias_command</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;next&#39;</span>
  <span class="no">Pry</span><span class="o">.</span><span class="n">commands</span><span class="o">.</span><span class="n">alias_command</span> <span class="s1">&#39;f&#39;</span><span class="p">,</span> <span class="s1">&#39;finish&#39;</span>
<span class="k">end</span></code></pre></div>

<p>本エントリで紹介したpry-byebugなどのデバッグgemを駆使してRailsアプリのデバッグをもっと効率的にしましょう！</p>

<p>Happy Debugging Life!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[カナダ・バンクーバー情報（2014年度版）]]></title>
    <link href="http://blog.toshimaru.net/vancouver-infomation/"/>
    <updated>2014-11-09T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/vancouver-infomation</id>
    <content type="html"><![CDATA[<p>2013年から一年間カナダ・バンクーバーに滞在した僕がバンクーバーの様々な情報を共有します。</p>

<h1 id="section">生活編</h1>
<ul>
  <li>電車はスカイトレインが便利
    <ul>
      <li>切符は三種類のみ。1ゾーン、2ゾーン、3ゾーンの三種類。数字が小さくなるほど移動できる範囲が狭くなる。 使うエリアが1ゾーン内であれば1ゾーンを、2ゾーンエリアに跨って使用するのであれば2ゾーンの切符を購入する。</li>
      <li>定期券を一旦買ってしまえばそのゾーン内であれば電車もバスも好きなだけ乗ってOK. 難しい料金システムはない。</li>
      <li><a href="http://tripplanning.translink.ca/FILE/Apps/Info/images/skytrain_map.png">スカイトレインMAPを参考にどうぞ</a>。</li>
    </ul>
  </li>
  <li>車なくても公共交通機関が十分整備されているのでバンクーバー周辺は大体どこでも行ける。
    <ul>
      <li>米国シアトルまで買い物に行きたい！とかなら車あったほうが断然便利。</li>
    </ul>
  </li>
  <li>エスカレーターのポジションは右側。大阪スタイル。</li>
  <li>図書館が良い感じ。集中して勉強したいときに。
    <ul>
      <li>十分な数の机、椅子が用意されていてWiFiも提供されている。</li>
    </ul>
  </li>
  <li>ショッピングモールに行きたいなら、メトロタウン or パシフィックセンターが定番どころ。</li>
  <li>いろんな小さい店をぶらぶらと巡回したいなら、ショッピングストリートとして栄えるロブソンストリートを歩いてみるのがオススメ。</li>
  <li><a href="http://vcryugaku.exblog.jp/14575406">BCIDを作成</a>すれば、身分証としてパスポートを持ち歩く必要がない。日本人は若く見られがちでIDをバーやクラブでアラサーでも求められることがあるので、BCIDはあるとかなり便利。パスポートを持ち歩きたくない人は作成するべき。</li>
  <li>くしゃみとかせきをしたときは「Excuse me.」「Pardon me.」と音を出してしまったことに対して周囲に謝っておく。</li>
  <li>1カナダドル = ???円　→<a href="https://www.google.ca/?q=1%20cad%20jpy#q=1+cad+jpy">ここ</a>で確認</li>
</ul>

<h2 id="section-1">シェアハウスを探す</h2>
<ul>
  <li>シェアハウスを探すなら下記２つのサイトが定番どころ。
    <ul>
      <li>英語サイト：<a href="http://vancouver.craigslist.ca/">Craigslist</a></li>
      <li>日本語サイト：<a href="http://www.jpcanada.com/">JPカナダ</a></li>
      <li>日本人と住みたいという方はJPカナダ一択、その辺気にしないということであればCraigslitも便利（ただ連絡が返ってこない率が高いかも）。</li>
    </ul>
  </li>
</ul>

<h1 id="section-2">気候編</h1>
<ul>
  <li>夏を除いて一年を通して雨が多い。傘必須（折りたたみを１つ常に持ち歩いていると便利）。
    <ul>
      <li>バンクーバーは間違いなく夏が最高の季節。雨が少なく暑すぎるない（むしろたまに寒い）。</li>
      <li>夏は朝6時から夜の10時まで太陽の光があるという日の長さ。素晴らしい。</li>
    </ul>
  </li>
  <li>気温は夏は25℃とかそんな感じ。</li>
  <li>冬は10℃以下になるが、雪が降ることはあんまりない。</li>
</ul>

<h1 id="section-3">留学情報編</h1>
<ul>
  <li>留学時には保険は悪い事言わんから入っておけ。
    <ul>
      <li>こっちでもっと安い保険に加入するというのもアリだけの日本のサービスの質が世界一。</li>
    </ul>
  </li>
  <li>もしあなたが特別なスキルが無く、カナダで就職したいのなら、BCITで専門スキルを付けるのが手堅い。</li>
  <li>フレキシブルな学校探してるなら<a href="http://www.eh-plus.com/">eh-plus</a>とかオススメ。</li>
</ul>

<h1 id="section-4">観光編</h1>
<ul>
  <li>ウィスラー:  スキー・スノボができる</li>
  <li>ビクトリア: バンクーバー近くにある島。田舎。</li>
  <li>ダウンダウン: 小さいのでダウンタウンエリア内は歩いていろいろなところ回れる</li>
  <li>ノース・バンクーバー: ハイキングとかしに行くならここ。シーバスに乗るのも気持ち良い。</li>
  <li>スタンレー・パーク: 自転車のって外周してみるのが○</li>
  <li>カナダプレイス周辺をぶらぶら歩くだけでも気持ちいい</li>
  <li><a href="http://www.tripadvisor.ca/Attractions-g154943-Activities-Vancouver_British_Columbia.html">ここ</a>から探してみてもよい。</li>
</ul>

<h1 id="section-5">レストラン編</h1>
<ul>
  <li>日本食レストラン
    <ul>
      <li>「Goo」レストランが有名。ダウンタウンに何店舗かある</li>
      <li>焼き肉なら「牛角」がある</li>
      <li>ラーメンなら日本でも有名な「山頭火」が安心のチョイス。</li>
    </ul>
  </li>
  <li>サンドイッチショップ
    <ul>
      <li><a href="http://meatandbread.ca/">Meat &amp; Bread</a></li>
      <li><a href="http://scentofasandwich.com/">Scent of a Sandwich</a></li>
      <li><a href="http://www.biglousbutchershop.com/">Big Lou’s Butcher Shop</a></li>
      <li><a href="http://www.finchteahouse.com/">Finch’s Tea &amp; Coffee House</a></li>
      <li>バンクーバーで食べるランチはサンドイッチが一番好きだった</li>
    </ul>
  </li>
  <li>カフェ
    <ul>
      <li>チェーン系のカフェはStarbucks, Waves, Blenzあたりに行けば良い</li>
      <li>日本と違い、Wifiは当然のようにどこも使えるのでネットの心配ご無用。</li>
      <li>自動販売機が無い代わりにみんなコーヒーを買って飲み歩きをする。</li>
    </ul>
  </li>
  <li>パブ
    <ul>
      <li>Cactus Club Cafeが安定（ちょい料金は高めかも）</li>
      <li>ビールの種類がいろいろあるのでいろいろな味・香りを楽しむのがオススメ。</li>
    </ul>
  </li>
  <li><a href="http://www.urbanspoon.com/c/14/Vancouver-restaurants.html">ここ</a>で探してみると良い。</li>
</ul>

<h1 id="section-6">人・国民性編</h1>
<ul>
  <li>カナダ人はインターナショナルな空気感になれてるので気さくで優しい
    <ul>
      <li>といっても「カナダ人」といったときに中国系カナダ人とかも含むので、同じカナダ人でも国民性が全然違う。</li>
    </ul>
  </li>
  <li>カナダで生まれ育っていない中国人とか韓国系の人の接客態度は無愛想なことが多いかも？</li>
  <li>適当
    <ul>
      <li>給料、教科書遅れる</li>
      <li>アポイントメントがあるのに20-30分待たされたりした</li>
      <li>レジで会計通したのに袋に商品入れてくれなかったり、商品をレジまで持っていったのにレジに通してくれなかったり</li>
    </ul>
  </li>
  <li>アジア人多い。半分くらい
    <ul>
      <li>東アジアのインターナショナルスチューデントの割合は50%中国、30%韓国人、15%日本人、5%台湾人みたいな印象。</li>
    </ul>
  </li>
</ul>

<h1 id="section-7">各種コミュニティ</h1>
<ul>
  <li><a href="http://www.meetup.com/cities/ca/bc/vancouver/">meetup.com</a>なんかでコミュニティを見つけるとよい。</li>
  <li>オススメは下記
    <ul>
      <li>Japanese meetup: 日本人、日本人好きが集まるmeetup. 日本好きの外人とか仲良くなりやすく話しも通じて外人の友達つくるならこのへん良い。</li>
      <li>English Conversation Meetup: 英語第二外国語学習者が集まるコミュニティ。英語初学者には参加しやすいコミュニティ。１年以上くらい居てある程度喋れる人にとっては、ややレベルが低いのが難。</li>
    </ul>
  </li>
  <li>自分はエンジニアなので各種技術meetupに参加してました。</li>
</ul>

<h1 id="section-8">航空券</h1>
<ul>
  <li>カナダ→日本 or anywhere の航空券はこのあたりで検索するとよい
    <ul>
      <li><a href="http://www.tripadvisor.ca/CheapFlightsHome">tripadvisor</a></li>
      <li><a href="http://www.skyscanner.ca/">Skyscanner</a>　<a href="http://www.skyscanner.jp/">Skyscanner 日本語</a>　</li>
    </ul>
  </li>
  <li>バンクーバー発のツアーを探すなら <a href="http://www.his-canada.com/">H.I.Sバンクーバー支店</a>があるので気軽に相談してみるとよい。</li>
</ul>

<h1 id="section-9">日系食材</h1>
<ul>
  <li>「コンビニ屋」が有名。価格は日本価格の2,3倍の印象。</li>
  <li>安く探したいのなら中国系のスーパーマーケットになるけど「T&amp;T」が良い。</li>
</ul>

<h1 id="section-10">バンクーバーの物価</h1>
<ul>
  <li>全体的に日本よりちょっと高くつくイメージ。</li>
  <li>日本より高い
    <ul>
      <li>タバコ</li>
      <li>本</li>
      <li>酒</li>
      <li>食料品</li>
      <li>レストラン</li>
    </ul>
  </li>
  <li>日本より安い
    <ul>
      <li>CD</li>
      <li>DVD</li>
      <li>服</li>
      <li>コーヒー</li>
    </ul>
  </li>
  <li>同じくらい
    <ul>
      <li>家賃（ダウンタウンはやっぱ高い。でもシェアハウスなら安く見つけられる）</li>
    </ul>
  </li>
</ul>

<h1 id="section-11">治安編</h1>
<ul>
  <li>世界的に見てバンクーバーは相対的にかなり安全な街だと思う</li>
  <li>図書館でPC使ってる時にウトウトしてたらMacBook Airを盗まれそうになった<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup>。気をつけるに越したことはないです</li>
  <li>ガスタウン周辺にホームレスが多くいる。歩いてるだけで「小銭恵んでくれませんか？」と歩み寄ってくる</li>
  <li>基本アメリカと一緒でブロックとブロックの間の細い小路は夜（昼でも）歩かないほうが良い。</li>
  <li>人気のあるメインストリートさえ歩いていれば一人で夜歩いてても危なくはないと感じた</li>
  <li>女性は上記に全くあてはまらないかもなので、気をつけすぎるくらいでいいかも？</li>
</ul>

<h1 id="section-12">仕事編</h1>
<ul>
  <li>基本的には定時上がりがデフォルト。</li>
  <li>レストランとかカフェの店員の時給は1200円くらいだろうか。</li>
  <li>カナダで働くなら<a href="http://gotovan.com/manual/view.php?id=9">SINカードが必要なので取得</a>しときましょう。</li>
  <li>メモ: <a href="http://internetcom.jp/busnews/20130213/3.html">バンクーバーを北米進出のゲートウェイに</a></li>
</ul>

<h1 id="section-13">その他</h1>
<ul>
  <li>荷造りはここを参考に。<a href="http://ta-bi.net/posts/packing/">荷造り・パッキングのコツ</a></li>
  <li>カナダは世界でロシアについで二番目にでかい国、自然がたくさん！</li>
  <li>バンクーバーは世界の「住みたい街」ランキングに毎年上位にくいこむ街。カナダでも一番ナイスな街なんて言われているっぽい。</li>
</ul>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>それまではバンクーバーは日本くらい安全だなぁと思い込んでいたけどそのイメージがこの事件以降崩れさった <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpecが通ったり落ちたりしたときに]]></title>
    <link href="http://blog.toshimaru.net/rspec-occasional-fail/"/>
    <updated>2014-09-23T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/rspec-occasional-fail</id>
    <content type="html"><![CDATA[<p>RSpecがたまに落ちたり通ったりする。そんなときはRSpecのテスト実行順序によりテストがFailしている可能性が高い。つまりあるテストがあるテストの実行後じゃないと通らない、みたいな状況に陥っている可能性があり、これは順番に依存したテストなのでよろしくない状態である。</p>

<h3 id="section">バージョン情報</h3>
<ul>
  <li>rails (4.1.5)</li>
  <li>rspec (3.1.0)</li>
</ul>

<p>RSpecを順番に依存させないために<code>spec_helper.rb</code>でこんな設定がされている。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Run specs in random order to surface order dependencies. If you find an</span>
<span class="c1"># order dependency and want to debug it, you can fix the order by providing</span>
<span class="c1"># the seed, which is printed after each run.</span>
<span class="c1">#     --seed 1234</span>
<span class="n">config</span><span class="o">.</span><span class="n">order</span> <span class="o">=</span> <span class="s2">&quot;random&quot;</span></code></pre></div>

<p>この設定によりテスト実行の順序がランダムになり、順序に依存しないテストの記述が可能となる。シード値はテストの最後に得られる。</p>

<pre><code>Randomized with seed 724
</code></pre>

<p>Failしたテストのこのシード値を設定してテストを走らせればFailしたテストの順番を再現できる。</p>

<pre><code>$ bundle exec rspec --seed 724 --fail-fast
</code></pre>

<p><code>--seed</code>でシード値を指定、<code>--fail-fast</code>を設定してFailしたときにテストを即時終了させるようにする。</p>

<p>こうすればFailするテストを再現できて、どのテストが順番に依存して落ちているのかがわかります。</p>

<h3 id="section-1">参考</h3>
<p><a href="http://ikm.hatenablog.jp/entry/2013/03/26/003838">ランダムに落ちるspecの修正で便利だったRSpecの2つの設定</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[就活日記(完) 就職]]></title>
    <link href="http://blog.toshimaru.net/job-hunting-fin/"/>
    <updated>2014-08-15T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/job-hunting-fin</id>
    <content type="html"><![CDATA[<p><a href="/job-hunting-0/">就活日記(0) エントリー</a></p>

<h2 id="gunosy">Gunosyに入社しました</h2>
<p>7月初旬より就活を始め就活日記を書いてまいりましたが、Gunosyに入社する運びとなりましたのでご報告します（今月からすでに働き始めてます）。Gunosyの訪問記事は<a href="/job-hunting-4/">こちら</a>。</p>

<p>決め手としてはまぁこんな感じです。</p>

<ul>
  <li><a href="/job-hunting-0/">就活日記(0)</a>にて書いた「応募基準」に大体当てはまってる</li>
  <li>さくっとオファーもらった（会社説明兼面接が一回、CTO/CEOとの面接一回の計二回）</li>
  <li>若くて優秀な人が多そう、仲も良さそう</li>
  <li>勉強会も定期開催してて新しい技術の習得に積極的</li>
  <li>Goとかプロダクションレベルで使ってる珍しい会社→新しいこともやれそう</li>
</ul>

<p>一ヶ月以上かかるかなーと見込んでましたが、本格的に就活を始めてから3週間以内にはオファーをもらえた。自分の場合は無職だったので、オファーをもらったその日に「明日からアルバイトで働いてもいいよ」と言われ、結局オファーをもらった2日後にはアルバイトとしてGunosyで働いていた。今月からは社員として働いている。</p>

<p>ちなみにGunosy面接時には僕の書いた<a href="/job-hunting-0/">就活日記(0)</a>を中の人が既に読んでもらっていたようで、僕の求める応募基準に則して会社説明をしてもらったので就活日記を書いておいてよかった。</p>

<h3 id="section">他の会社の話</h3>

<p>「他の会社はダメだったの？」と聞かれると、正直どこもいい会社で「（もし採用してくれるのであれば）どの会社に入っても面白い体験ができるだろう」と思います。特に（入社会社以外で）オススメはどこか？ときかれると、以下です。</p>

<ul>
  <li>Wantedly</li>
  <li>KAIZEN Platform</li>
</ul>

<p>ただココに挙げたのはそれぞれWantedlyはサービスに共感したから、KAIZENにははっきりと明文化されたエンジニア文化があるからであって、一番重要なのは<strong>興味のある会社に実際に行って・そこにいる人に会って・話を聞いて・自分に合うかどうか</strong>だと思うので、とりあえず話を聞いてみることを強くオススメします。その上で会社が合うかどうかは自分で判断してください。</p>

<h2 id="section-1">モダンな開発環境は当たり前</h2>
<p>会社を選ぶ基準の１つに「モダンな開発環境が整備されている」があったのですが、今回いろいろ会社を周って話を聞いた結果、（少なくとも自分が周った会社は）<strong>モダンな開発環境は当たり前</strong>のように整備されてました。Githubは当たり前のように使ってコードレビューをしていて、テストを書いてCI回してて、リッチなJSアプリケーションを書くときはJavaScript MV*フレームワーク使ってて、PCはMacで…といった感じです。瑣末な違いはあれどどこの会社もモダンな開発環境は整っていました。</p>

<p>なので最近のスタートアップにおいてはモダンな開発環境が整っていることは前提として、その先の「何をやっていきたいか？」というのが重要だと感じました。具体的には、、、</p>

<ul>
  <li>どんなiOS/Android/Webアプリケーションを作りたいのか？</li>
  <li>どんな仲間と働きたいのか？</li>
  <li>スモールチームで個人の判断で裁量持って動きたいのか、それとも他の誰かと協力して動きたいのか？</li>
  <li>どんな雰囲気の中で働きたいのか？</li>
  <li>等々…</li>
</ul>

<p>このへんの辺りを考えて会社を選んでいければいいかと思いました。</p>

<h2 id="web">WEBエンジニアでよかった</h2>
<p>Wantedlyで「とりあえずまずは話を聞きに行く」という感じでカジュアルに話を聞きに行けるのも、どこも良いエンジニアを求めているからだと思います。自分は文系出身でエンジニアになる予定はそんなに無かった身ですが、今こうやっていろんな会社に行っていろんな人と会ってお話できるのもWEBエンジニアだったからこそです。エンジニアで良かった。</p>

<h2 id="were-hiring">We’re hiring!!!</h2>
<p>GunosyはGunosyをもっともっと良くしてくれるエンジニアを求めています（具体的にはiOSエンジニア、Androidエンジニア、Go/Railsエンジニア、Pythonエンジニア）。興味があれば一緒に働きましょう。応募は以下からどうぞ。</p>

<p><a href="https://www.wantedly.com/companies/gunosy">Gunosyのソーシャル採用・Wantedly</a></p>

<h2 id="amazon">Amazonウィッシュリスト</h2>
<p>エンジニアの謎のくれくれ根性、ウザいからやめろ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Rails】has_many, throughの逆の関連はdelegate, toかhas_one, through]]></title>
    <link href="http://blog.toshimaru.net/belongs_to-through/"/>
    <updated>2014-08-12T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/belongs_to-through</id>
    <content type="html"><![CDATA[<h2 id="tldr">TL;DR</h2>

<p>結論は<code>belongs_to</code>,<code>through</code>でなく、<code>delegate</code>, <code>to</code> or <code>has_one</code>, <code>through</code>。</p>

<h2 id="hasmany-through">has_many, through</h2>

<p>RailsでこんなModel構成があったとします。ユーザーは複数の記事をもっていて、その記事は複数のタグを持っている、という状態です。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:posts</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:tags</span>
  <span class="n">belongs_to</span> <span class="ss">:user</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Tag</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">belongs_to</span> <span class="ss">:post</span>
<span class="k">end</span></code></pre></div>

<p>特定のUserがどんなTagを持っているかを調べるには<code>through</code>を使うと簡単に実装できます。<code>User</code>モデルに<code>through</code>を追加しましょう。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:posts</span>
  <span class="n">has_many</span> <span class="ss">:tags</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:posts</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:tags</span>
  <span class="n">belongs_to</span> <span class="ss">:user</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Tag</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">belongs_to</span> <span class="ss">:post</span>
<span class="k">end</span></code></pre></div>

<p>こうすることで、<code>@user.tags</code>でユーザーが所有するタグを取得できます。</p>

<p>ではここで疑問。逆に<code>Tag</code>から<code>Post</code>を省いて<code>User</code>を導きだすことはできないのでしょうか？</p>

<h2 id="delegate-">delegate を使う</h2>

<p>結論からいうと<code>delegate</code>を利用することで省けます。具体的には<code>Tag</code>モデルをこうします。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:posts</span>
  <span class="n">has_many</span> <span class="ss">:tags</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:posts</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:tags</span>
  <span class="n">belongs_to</span> <span class="ss">:user</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Tag</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">belongs_to</span> <span class="ss">:post</span>
  <span class="n">delegate</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="ss">:post</span>
<span class="k">end</span></code></pre></div>

<p>これで<code>@tag.user</code>なんて風に当該tagを所有するuserにアクセスできます。</p>

<h2 id="section">追記（2014/11/11）</h2>

<p>このように<code>has_one</code>, <code>through</code>も使えます。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:posts</span>
  <span class="n">has_many</span> <span class="ss">:tags</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:posts</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:tags</span>
  <span class="n">belongs_to</span> <span class="ss">:user</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Tag</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">belongs_to</span> <span class="ss">:post</span>
  <span class="n">has_one</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:post</span>
<span class="k">end</span></code></pre></div>

<h3 id="section-1">参考</h3>
<ul>
  <li><a href="http://stackoverflow.com/questions/4021322/belongs-to-through-associations">belongs_to through associations</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[就活日記(6) KAIZEN platform Inc.]]></title>
    <link href="http://blog.toshimaru.net/job-hunting-6/"/>
    <updated>2014-07-26T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/job-hunting-6</id>
    <content type="html"><![CDATA[<p><a href="/job-hunting-0/">就活日記(0) エントリー</a></p>

<h2 id="section">きっかけ</h2>
<p>Kaizenといえばカリスマハッカー、<a href="https://twitter.com/naoya_ito">Naoya Itoさん</a>が勤めていることでよく知られているかと思う。<a href="http://d.hatena.ne.jp/naoya/">ブログ</a>や<a href="https://speakerdeck.com/naoya">プレゼン</a>、<a href="http://rebuild.fm/">rebuild.fm</a>にてNaoyaさんが折に触れてKaizenについて言及するので気になって気になって仕方ない、ということで訪問。</p>

<h2 id="kaizen">Kaizenを支えている技術</h2>

<p>使われている技術は下記ページに紹介されているので、ここで改めて紹介する必要はないかと思う。</p>

<p><a href="http://kaizenplatform.in/hiring/engineer.html">KAIZEN platform Inc. ではエンジニアを募集しています</a></p>

<p><img src="/images/posts/job-hunting/kaizen.png" alt="Kaizen Technology" /></p>

<p>開発の進め方などに関してはNaoyaさんがブログにまとめているのでそちらを読むとよいかと思う。</p>

<p><a href="http://d.hatena.ne.jp/naoya/20131013/1381651545">Webサービス開発現場から / 近頃の開発のやり方 ･･･ Github と Pull Request とコードレビュー</a></p>

<h2 id="section-1">働き方</h2>
<p>上ページの中でも紹介されているがKaizenの働き方は特徴的だ。見出しだけ抜き出してみると、、、</p>

<ul>
  <li>OSSのように作る</li>
  <li>オープンなコミュニケーション</li>
  <li>リモートワーク</li>
  <li>自動化</li>
  <li>コードとしてのインフラ</li>
  <li>オープンな組織・ハッカー文化</li>
</ul>

<p>この働き方は<a href="https://github.com/about/jobs">githubの働き方</a>をモデルとして作られているようだ。中でも興味深いのはリモートワークを導入している点。日本企業でリモートワークを積極的に導入していこうとしている企業はそんなに多くはない中、Kaizenは「リモートワークを妥協」していない。リモートワークを実践するためのツール群も良いモノであればどんどん導入していっているようだ。</p>

<p>エンジニアはリモートワークを絶対しなければいけないのかというとそんなことはなく、重要視しているのは「その人が最も生産性が高くなる環境で働く」ということのようだ。新宿にあるオフィスから物理的に通勤困難な人はリモートワークで働かざるを得ないわけだが、そうではない人はオフィスに来て働いてもOKだという。中には週の半分がリモート、もう半分はオフィスで働く人もいるようだ。</p>

<p>このへんのリモートワークをするかどうかの選択権もまた与えられているのは良いことかと思う。というのも人によってはリモートでは生産性が出ないという人もいるからだ。自分の場合、集中してコードを書きたいときはリモートワークしたくて、コミュニケーションが多く発生するようなステージ（まだ仕様が煮詰まっていないプロジェクト発足時など）だと対面で働きたいなと思う。</p>

<h2 id="section-2">なぜ日本にはリモートワークが少ないのか</h2>
<p>ところでなぜ日本はそれほどリモートワークスタイルが少ないのだろうか（自分は海外で働いたときにリモートワークを経験した。あとリモートワークの求人も見ることが多かった）。考えられる理由としては、</p>

<ul>
  <li>従業員を信頼していない（「直接管理していないからサボるんじゃないか」という懸念）</li>
  <li>対面での会議、コミュニケーションができない</li>
  <li>セキュリティ的な理由（会社の仕事は外に持ち出さない）</li>
  <li>社内規定が云々…</li>
</ul>

<p>上記のうち会議、コミュニケーションの部分に関してはITツールを駆使することで解決できることだ。特にエンジニアの場合、Githubをはじめ、HipChat/Slackなどのチャットツール、Hangout/Skypeなどのビデオ通話サービスなどリモートワークでも問題なく仕事を進められるようなツール群が存在するのでリモート勤務がやりやすいかと思う。</p>

<p>一方でリモートワークは会社にとって良い事もある。</p>

<ul>
  <li>割り込みが減る→作業に集中できる→生産性アップ</li>
  <li>物理的な場所を取らない</li>
  <li>リモートワークを許可することで場所にとらわれない採用ができる。（地方に住む人、海外在住の人）</li>
</ul>

<p>最近は37Signalsの<a href="http://www.amazon.co.jp/gp/product/4152094338/ref=as_li_tf_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4152094338&amp;linkCode=as2&amp;tag=toshimaru-22">『強いチームはオフィスを捨てる: 37シグナルズが考える「働き方革命」』</a>なんて本が話題になったけど、まだまだリモートワークが少ないのが日本の現状なので今後リモートワークを認める企業がKaizenのように増えていけばいいと思う。</p>

<blockquote>
  <p>もちろん対面でやった方が早いと思うことはたくさんあるけど、本当にそれは対面じゃないとできないのかというところをまずは疑ってみないことには、新しい働き方を追求するということはできない。結果的にそれで会議を減らす、非同期に作業することができれば全体の効率が上がるわけで、そこで思考停止しない･･･ということが大切だと思う</p>
</blockquote>

<p>(via <a href="http://d.hatena.ne.jp/naoya/20140512/1399864629">Sqwiggle が良いという話、またはリモートでアジャイル開発をどう進めるか</a>)</p>

<h2 id="section-3">採用・人について</h2>
<p>自分の受けてる企業がそうだったけど、スタートアップって良い人がいれば即採用みたいなノリが多かったけど、Kaizenはじっくり人を選考している感を受けました。書類選考が採用のスタート地点なあたりそれが表れている。</p>

<p>逆にいうとそれだけ「応募者が技術者として（働き方含め）Kaizenに合うか」を見極めたいのでしょう。ちなみに既にKaizenで働いている人はリモートでもしっかり働ける技術的に熟達したエンジニアの方が多い印象でした。</p>

<h2 id="section-4">エンジニア行動指針</h2>
<p>Kaizenにはこんな行動指針がエンジニア間でシェアされている。</p>

<p><img src="/images/posts/job-hunting/kaizen-kodoshishin.png" alt="Kaizenエンジニア行動指針" /></p>

<p>(via <a href="https://speakerdeck.com/naoya/b2bsabisukai-fa-falsexian-chang-kara-number-devsumi">B2Bサービス開発の現場から</a>)</p>

<p>チラリと見せてもらったけど分量としてそんなに多くなく、シンプルで力強い行動指針が示されていてとても良い感じでした。宗教ってわけじゃないけどいざ何かに迷ったときに「この行動指針に則って考えるとこっちのほうが良いよね」みたいに考えられるので良いよね。</p>

<h2 id="section-5">こんな人におすすめ</h2>
<p>リモートワークワークをしたい方、Kaizenの働き方に共感できる人であればKaizenはステキな環境なのではないのでしょうか。Kaizenにはハッカーにとって居心地の良い環境があります。</p>

<p><a href="http://kaizenplatform.in/hiring/engineer.html#application_engineer">KAIZEN platform Inc.の公式採用ページ</a></p>

<h2 id="section-6">追記（2014/11/03）</h2>
<script async="" class="speakerdeck-embed" data-id="153982a0431f01329b8852a2dda60dbc" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[brew upgrade mysql 後にpidエラー]]></title>
    <link href="http://blog.toshimaru.net/mac-mysql-upgrade-error/"/>
    <updated>2014-07-25T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/mac-mysql-upgrade-error</id>
    <content type="html"><![CDATA[<p><code>brew upgrade mysql</code>したらmysqlが起動しなくなった。<code>mysql.server start</code>ができない。</p>

<pre><code>$ mysql.server start
Starting MySQL
. ERROR! The server quit without updating PID file (/usr/local/var/mysql/Toshimac.local.pid).
</code></pre>

<p>ググるといろいろ出てきて30分くらい調査した結果、結局下記コマンド一発で起動できた。</p>

<pre><code>$ sudo mysql.server start
Password:
Starting MySQL
. SUCCESS!
</code></pre>

<p>ただの権限周りの問題だったようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec2からRSpec3にバージョン上げたらテストがFailしまくった話]]></title>
    <link href="http://blog.toshimaru.net/rspec2-to-rspec3-errors/"/>
    <updated>2014-07-19T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/rspec2-to-rspec3-errors</id>
    <content type="html"><![CDATA[<p>遊びで作ってるRailsアプリケーションのRSpecのバージョンを２から３に上げたら、２では全部通ってたテストが３にした途端テストが100個くらいFailした。一体何が起こっているかわからなかったのでRSpec3の挙動の違いを調べてみることにした。</p>

<p><code>rspec-rails</code>を<code>bundle install</code>したあと<code>rspec:install</code>する。</p>

<pre><code>$ rails g rspec:install
create  .rspec
create  spec
create  spec/spec_helper.rb
create  spec/rails_helper.rb
</code></pre>

<p>今までなかった<code>rails_helper.rb</code>ってのが作られている。<code>scaffold</code>で生成されるspecディレクトリの構成はこう。</p>

<pre><code>spec
├── controllers
│   └── users_controller_spec.rb
├── helpers
│   └── users_helper_spec.rb
├── models
│   └── user_spec.rb
├── rails_helper.rb
├── requests
│   └── users_spec.rb
├── routing
│   └── users_routing_spec.rb
├── spec_helper.rb
└── views
    └── users
        ├── edit.html.erb_spec.rb
        ├── index.html.erb_spec.rb
        ├── new.html.erb_spec.rb
        └── show.html.erb_spec.rb
</code></pre>

<p>試しに<code>spec/controllers/users_controller_spec.rb</code>を開いてみると冒頭がこんな感じになっていました。</p>

<pre><code>require 'rails_helper'
</code></pre>

<p><a href="http://willnet.in/126">RSpec 3 時代の設定ファイル rails_helper.rb について</a></p>

<blockquote>
  <p>というわけで、これまで require ‘spec_helper’ としていた箇所の大部分は require ‘rails_helper’ に置換してあげる必要がありそうですね。パーフェクト Ruby on Rails のテストの章は require ‘spec_helper’ となっているので、RSpec 3 のリリース版を利用する場合は適宜読み替えをお願いします。</p>
</blockquote>

<p><code>spec_helper</code>を<code>rails_helper</code>に変えて、それらの２ファイルの設定をRSpec3用に見直せば全てのテストが問題なく通るようになりました、とさ。</p>

<p>RSpec3よりruby1.8,ruby1.9をサポートしなくなったり新しいマッチャーが増えたりしてるので変更点を下記より再度確認してみるとよいと思います。</p>

<p><a href="http://myronmars.to/n/dev-blog/2014/05/notable-changes-in-rspec-3">Notable Changes in RSpec 3</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[就活日記(5) トレタ]]></title>
    <link href="http://blog.toshimaru.net/job-hunting-5/"/>
    <updated>2014-07-14T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/job-hunting-5</id>
    <content type="html"><![CDATA[<p><a href="/job-hunting-0/">就活日記(0) エントリー</a></p>

<h2 id="section">きっかけ</h2>
<p><a href="http://blog.masuidrive.jp/2014/03/31/toreta-jobs/">トレタで一緒に働いてくれるRails/iOSエンジニアを探しています</a></p>

<p><del>「豚しゃぶがただただ食べたい…」その一心で応募。</del> <a href="http://toreta.in/">トレタ</a>というサービスの存在を知ったのは<a href="https://twitter.com/masuidrive">@masuidrive</a>さんこと増井雄一郎さんがきっかけだった。増井さんが今何をやっていて何をやろうとしているのか、一度お話してみたかったこともあり豚しゃぶをご馳走になることにした。</p>

<p>増井さんとAutoPagarize作者として有名な<a href="http://swdyh.github.io/">swdyh</a>さんとお話する。</p>

<h2 id="section-1">トレタを支えている技術</h2>
<ul>
  <li>Github</li>
  <li>RoR</li>
  <li>Backbone.js</li>
  <li>Jenkins</li>
  <li>Slack</li>
</ul>

<p>（飲み食いしながらメモを取らずに聞いていたので記憶違いで間違っているかも…）</p>

<p>「難しいことはしない、新しすぎるものを不用意に導入しない」という姿勢が他のスタートアップとは最も違うところだった。技術にアンテナを張ったスタートアップだと「新技術サイコー！」「新技術フォローしてる俺ら超カッコイイ…（ドヤァ）」とともするとなりがちな気がするのだけど、トレタはそんなことはなかった。</p>

<p>増井さんは新しいことは趣味の範囲内でやって（<a href="http://mobiruby.org/">MobiRuby</a>なんかはその代表格のようだ）、商用で動く環境には下手に地雷が多い・地雷を踏みそうな技術は使わないという考えのようだった。この姿勢が少ないコストでユーザーに安定したサービスを届ける秘訣なような気がした。</p>

<p>あと技術雑談の中で二人ともGo推しな感じだったのが印象深かった（Node.jsはディスり気味だった）。Goはやっぱりキテる言語なのかもしれない。</p>

<h2 id="section-2">なぜ予約アプリケーション？</h2>
<p>トレタはもともとミイルチームからスピンアウトするかたちで生まれた。トレタが生まれた経緯には中村仁さん（<a href="https://twitter.com/hitoshi">@hitoshi</a>さん）が店を経営する中で抱えた問題意識が根底にあるようだ。</p>

<blockquote>
  <p>動機は極めて単純です。僕自身が豚組を初めとした飲食店で長く現場に立ってきて、そこで多くの非効率や課題を目の当たりにしてきたからです。
(中略)
そして数年の構想期間を経て、自らそれを解決することに挑戦したのがトレタなのです。
トレタが解決を目指す課題。それは「予約」です。</p>
</blockquote>

<p><a href="http://hitoshi.hatenablog.com/entry/2013/12/18/113038">新サービス「トレタ」を正式リリースしました</a></p>

<p>上記事に書いてあるようにトレタが強みとしてるのは「使い勝手」であり、そのUI/UXの良さにあるのだと思う。中村さんが実際に店を経営する中で生まれた＜現場目線＞のUIなので、他社サービスよりはよいモノなのだろう。</p>

<h2 id="section-3">増井雄一郎さん</h2>
<p>とにかく増井雄一郎さんの経歴は面白い。</p>

<p><a href="http://next.rikunabi.com/tech/docs/ct_s03600.jsp?p=002467">なぜコードを書き続けるのか？ギーク増井雄一郎の原点</a></p>

<p>上記事を読んでわかるように一生コードを書いていられる奇人、それが増井雄一郎さんだ。そういう人は往々にしてNERDな性格（コンピューターおたくでコミュニケーション力のない不器用な人）であることが多いのだけど増井さんは例外のようで、すごく人当たりがよく必要があればガツガツコミュニケーションしていくようなタイプの人だ。</p>

<p>増井さんの公開した<a href="https://wri.pe/">wri.pe</a>には今でも簡単なテキストを書きたいときに重宝している。個人サービスながら少なくない人からの注目を集め<a href="http://blog.masuidrive.jp/2014/03/31/open-wri-pe/">オープンソース化</a>もしている。</p>

<p>その奇人性ゆえに常人には理解し難いかもしれないが、全てのエンジニアは増井雄一郎さんの生き様から何かしら学べることがあるのじゃないだろうか。</p>

<h2 id="section-4">こんな人にいいかも</h2>
<p>増井さんもswdyhさんも両名ともにベテランなので、お二人と一緒に働けばいろいろ学べることが多いかと思います。現在その二名しかエンジニアは居ないようなので、フルスタックな「何でもデキます！」系エンジニアが欲しいと思いきやそうでもなく、しっかりした専門性がある人材も求めているようです。</p>

<p>興味がある人は一緒に会食してはいかがでしょうか？　豚から始まる恋もある。</p>

<p><a href="https://www.wantedly.com/projects/6519">トレタの採用ページ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[就活日記(4) Gunosy]]></title>
    <link href="http://blog.toshimaru.net/job-hunting-4/"/>
    <updated>2014-07-11T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/job-hunting-4</id>
    <content type="html"><![CDATA[<p><a href="/job-hunting-0/">就活日記(0) エントリー</a></p>

<h2 id="section">きっかけ</h2>
<p>Gunosyは海外滞在中も日本語で書かれたテック系ニュース・ソースとして活躍しており、利用当初からとても良いサービスだと思っていた。<a href="http://jp.techcrunch.com/2014/06/23/jp20140623gunosy/">今年になって大型の資金調達を</a>していたり、今後の成長株であることも間違いなさそうだし訪問。</p>

<h2 id="gunosy">Gunosyを支えている技術</h2>
<ul>
  <li>Github</li>
  <li>RoR</li>
  <li>Golang</li>
  <li>CircleCI</li>
  <li>Jenkins</li>
  <li>MySQL</li>
  <li>MongoDB</li>
  <li>Redis</li>
  <li>Docker</li>
  <li>HipChat / Slack</li>
  <li>Qiita Team</li>
  <li>Yammer</li>
</ul>

<p>注目すべきはAPIサーバ部分をGolangで書いていることだった。GoのWEBフレームワークを特に使っているというわけではなく、速度が出る素のGoで書いているということだった。RailsからGoへの移行の経緯あたりは下記の発表に詳しい。</p>

<p><a href="https://speakerdeck.com/ymatsuwitter/katutedockergaita">300万人をGoで捌いた話</a></p>

<p>また技術的なチャレンジとして<a href="https://speakerdeck.com/ymatsuwitter/katutedockergaita">Dockerも試したりして</a>おり、どんどん新しい技術を取り入れて既存の仕組みを改善していこうという姿勢が見られた。</p>

<p>ところでこれらの発表をしている<a href="https://twitter.com/y_matsuwitter">@y_matsuwitter</a>さんは自分よりも全然まだ若いのにGunosy執行役員でインフラからプログラムもバリバリ書けるスーパーエンジニアだ。しゅごい。</p>

<h2 id="section-1">雰囲気</h2>
<p>とにかく若いエンジニアが多く、仲もとても良さそうだった。先に上げたy_matsuwitterさんも25歳だし27,8歳くらいの人が多いとのことだ。スケスケの会議室でエンジニアから話を聞いたのだけど、スケスケルームはきっと会社のオープンネスとか透明性を象徴しているんだろうなと思った。きっと風通しの良い職場なのだろう。</p>

<p>また技術者はやりたいことをどんどん取り組めるような空気もあるようだ。何か新しいやりたいことがあったときにエンジニアが手を挙げれば「（そのやりたいことが妥当であれば）社内でそれを止める人はいない」とのことだ。スタートアップでは優秀な人の入社をきっかけに社内が変わり始めたりすることも多いと思うがGunosyもその例外ではないようだ。</p>

<h2 id="section-2">基本の積み重ね</h2>
<p>Gunosyはいわゆる＜キュレーションニュースメディア＞で使えば使うほど記事がパーソナライズされていき興味のある記事が届けられる精度も高まっていくようになっている。どのようにそのレコメンデーションエンジンを向上しているかを聞いてみると「そんな難しいことはしていない。基本を積み重ねていっているだけ」と言っていた。</p>

<p>社内で論文の勉強会をしてまだ実装に落とされていない論文の内容を実装に落としていくなどして、リコメンドエンジンをブラッシュアップしていっているようだ。こういう積み重ねを真摯に着実に行っているからこそ良いプロダクトも生まれてくるのだろう。</p>

<blockquote>
  <p>スタートアップだと、どうしても即効性のある技術やノウハウの方がが大きく価値認識されがちですが、僕たちは長期的な視点を持って、新旧かかわらず様々な研究を追っています。</p>
</blockquote>

<p><a href="http://careerhack.en-japan.com/report/detail/283">“数字は神より正しい”《Gunosy》が掲げる、フェアでクールな指針。</a></p>

<p>（上記事はGunosyの哲学がよくわかる記事なので興味のある方は一読すべし）</p>

<h2 id="section-3">総評</h2>
<p>今まで訪問した会社の中では一番よかった（と書くように言われた）。</p>

<h2 id="section-4">こんな人におすすめ</h2>
<p>Gunosyは手を挙げれば自分のやりたいことがチャレンジできる場所です。また若いエンジニアが多く仲も良さ気で和気あいあいと働ける職場だと感じました。神でなく数字を信仰できるような人にはピッタリの環境です。</p>

<p><a href="https://www.wantedly.com/companies/gunosy">Gunosyの採用ページ</a></p>

<h2 id="section-5">こちらもどうぞ</h2>
<ul>
  <li><a href="http://blog.kushii.net/archives/1876150.html">株式会社Gunosy に行ってきた！</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[就活日記(3) Quipper]]></title>
    <link href="http://blog.toshimaru.net/job-hunting-3/"/>
    <updated>2014-07-10T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/job-hunting-3</id>
    <content type="html"><![CDATA[<p><a href="/job-hunting-0/">就活日記(0) エントリー</a></p>

<h2 id="section">きっかけ</h2>
<p>Quipperといえば、<a href="http://blog.kyanny.me/entry/2013/05/25/Leave_from_paperboy%26co_%2C_join_to_Quipper">kyannyさん</a>や<a href="http://mizchi.hatenablog.com/entry/2013/09/07/171644">mizchiさん</a>が在籍していることや、NaoyaItoさんが<a href="http://d.hatena.ne.jp/naoya/20131013/1381651545">ブログやプレゼンでQuipperに言及していたり</a>一部のエンジニアからはよく知られている会社だ。</p>

<p>海外（ロンドン・マニラ）にも拠点を置いているという点も魅力的だし、カナダにてkyannyさんの旧友に出会いそのお友達経由で会社に招待いただけたりもしたので話を聞きに行くことに決めた。</p>

<h2 id="quipper">Quipperを支えている技術</h2>

<ul>
  <li>Github</li>
  <li>RoR / Grape</li>
  <li>MongoDB</li>
  <li>HTML5</li>
  <li>CoffeeScript</li>
  <li>Backbone.js + Chaplin</li>
  <li>HipChat / Slack</li>
  <li>Mocha / Chai</li>
  <li>Jenkins</li>
  <li>CircleCI</li>
  <li>Hubot</li>
</ul>

<p>言うまでもなくモダンな環境。カバレッジは他の会社よりは厳しく見てるのではということだったが、JSもしっかりテストしているあたりきっとそうなのだろう。</p>

<p>どんな技術を使ってるとか雰囲気とかはkyannyさんがブログに詳しく書いているので興味があればこちらもあわせて見ると良いだろう。</p>

<ul>
  <li><a href="http://blog.kyanny.me/entry/quipper-sense-of-speed">Quipper のスピード感</a></li>
  <li><a href="http://blog.kyanny.me/entry/2013/07/28/%E3%83%AB%E3%83%BC%E3%82%AF%E3%80%81_MongoLab_%E3%82%92%E4%BD%BF%E3%81%88%EF%BC%81">ルーク、 MongoLab を使え！</a></li>
</ul>

<p>イギリスのエンジニアとの開発は、タイムゾーンの問題とかどうなん？とか思ったが、GithubやHipChatなどで<a href="http://zachholman.com/posts/how-github-works-asynchronous/">非同期的な働き方</a>をしているので問題ないとのことだ。Githubをベースとした<a href="http://zachholman.com/posts/how-github-works/">Asynchronous Work</a>バンザイ。</p>

<h2 id="section-1">雰囲気</h2>
<p>今まで訪れた会社の中でオフィスの雰囲気が一番スタートアップ的な雰囲気が強かった印象がある。床のカーペットを剥がしてカラフルなカーペットを敷き詰めていたり、壁にQuipperの会社イメージ・イラストを描いていたり。朽ち果てた観葉植物がオフィスの片隅に放置されて粛々と負のオーラを放っており、「観葉植物」という概念そのものを脱構築していこうという哲学を感じた。</p>

<p>そういえばバンクーバーにある<a href="https://hootsuite.com/">Hootsuite</a>という会社では元・警察署だった場所をまずは壁から全部ぶち破りリノベーションを行い<a href="http://www.fubiz.net/2014/06/12/inside-hootsuite-office/">今の姿</a>になったとのことだ。日本でもこれくらい派手なことをやる会社があってもよいと思う。とりあえず全てのITスタートアップは<a href="https://twitter.com/toshimaru_e/statuses/431978854949736448">週末に飲み放題のビール・ワインサーバー</a>から導入すべきだ。閑話休題。</p>

<p><a href="http://www.quipper.com/about-us">About us</a></p>

<p>海外のスタートアップには多いけど、こうやって会社のメンバー全員を顔出しでリストアップした上で個々人が何を担当しているかを明確にするのもいいカルチャーだと思った。＜○○という会社の中にいる個＞というよりは、＜個によって構成される○○会社＞という感じで。会社を構成する個々人へのリスペクトがあるっていうか（小さい規模だからこそ紹介できるってのはあるけど）。</p>

<h2 id="section-2">エンジニアと話す</h2>
<p>日本のJS界の若手オピニオンリーダーであり希代のフロントエンドエンジニアである<a href="https://twitter.com/mizchi">@mizchi氏</a>とも話す（装飾しすぎてなんか胡散臭くなった）。JS技術を使って「無茶」をするのが仕事と言っていたが、無茶をしすぎ気味のときは周りのエンジニアがサポートしつつその「無茶」を現実のモノにしていく辺りに、Quipper開発チームの強さを感じた。そのような体制があるからこそエッジな技術を各プロダクトに導入していける。</p>

<p>kyannyさんはフィリピン出張とのことで話せなかった。</p>

<h2 id="section-3">ビジネス的な話</h2>
<p><a href="http://www.quipperschool.com/">Quipper School</a>は東南アジアの地域を中心としてアプリランキング上位に食い込むほどヒットしているようで、今後も「学習プラットフォーム」という軸でビジネスをグローバルに展開していく予定とのことだ。</p>

<blockquote>
  <p>Quipperは、「知の流通革命」 というビジョンの元、学習コンテンツの制作・配信や学びのモニタリング、アセスメントを可能にするクラウドベース（ウェブ・モバイル）の学習プラットフォームを提供しています。今回の増資によって、プラットフォームの一層の機能充実を図ると共に、経営基盤を強化し、日本を含むアジア地域、欧米におけるグローバル展開の加速を行うとしています。</p>
</blockquote>

<p>(via. <a href="http://edtech-media.com/2014/03/07/quipper-2/">Quipper（クイッパー）、ベネッセ、グロービス、Atomicoを引受先として、約5.8億円を増資</a>)</p>

<p>今後もビジネスチャンスをいろいろと探っていくと思われるが、上記に書いたような強力なエンジニアチームがいるのでどんなアイディアもカタチにしていけるのではないだろうか。</p>

<h2 id="section-4">こんな人におすすめ</h2>
<p>Quipperはエンジニアが「無茶」をできる環境があります。エッジな技術で無茶をしたい人に向いているかもしれません。</p>

<p>モバイル・アプリケーションはネーティブではなくHTML5/JS技術を使って実装しているあたり、サーバーサイドもさることながら、フロント側もきっちりできる人があっているかと思いました。</p>

<p><a href="https://www.wantedly.com/companies/quipper">Quipperの採用ページ</a></p>

<h2 id="section-5">追記</h2>
<blockquote class="twitter-tweet" lang="en"><p>エッジというよりは固い感じでやってるつもりだけどもあんまり他の会社知らないのでよくわからず</p>&mdash; Masatomo Nakano (@masatomon) <a href="https://twitter.com/masatomon/statuses/486936618499309568">July 9, 2014</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" lang="en"><p>(今思いついただけの)Quipperの開発方針 1.「普通」にやるべきことをやる 2.ユーザーを(悪い意味で)びっくりさせない 3. 楽しむ</p>&mdash; Masatomo Nakano (@masatomon) <a href="https://twitter.com/masatomon/statuses/486945136023457792">July 9, 2014</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" lang="en"><p>4. つらくても折れない心でがんばる（ブラック</p>&mdash; Kensuke Nagae (@kyanny) <a href="https://twitter.com/kyanny/statuses/486945387916173313">July 9, 2014</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[就活日記(2) freee]]></title>
    <link href="http://blog.toshimaru.net/job-hunting-2/"/>
    <updated>2014-07-09T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/job-hunting-2</id>
    <content type="html"><![CDATA[<p><a href="/job-hunting-0/">就活日記(0) エントリー</a></p>

<h2 id="section">きっかけ</h2>
<p>なんか最近<a href="http://www.freee.co.jp/">freee</a>とか<a href="http://www.zaim.co.jp/">zaim</a>とか<a href="https://moneyforward.com/">マネーフォワード</a>とかファイナンス系のサービスが増えてきているなーという印象の中で、freeeが<a href="http://thebridge.jp/2014/04/freee-raises-800m-yen-from-dcm">８億円の資金調達</a>という記事を見たことと、中の人から招待いただけたこともあり訪問。</p>

<h2 id="freee">freeeを支えている技術</h2>
<p>モダンな環境は整ってる。</p>

<ul>
  <li>Github</li>
  <li>RoR</li>
  <li>CoffeeScript</li>
  <li>Backbone.js</li>
  <li>Vue.js</li>
  <li>Jenkins</li>
  <li>Hubot</li>
  <li>HipChat</li>
  <li>Qiita Team</li>
  <li>Ansible</li>
  <li>Asana</li>
</ul>

<p>最近フロントエンド界隈のエンジニアからよく聞く<a href="http://vuejs.org/">Vue.js</a>を早速実戦投入しているのには驚いた。Vue.jsは<a href="https://github.com/yyx990803/vue#browser-support">IE8サポートは既に切っている</a>。ユーザーの中にはIE8ユーザーもいるということで、Vue.jsの中を少々ハックして使っているとのことだ。</p>

<p>あと日本の会社で使ってる事例をあんまり聞かない<a href="https://asana.com/">Asana</a>を使っているというのも興味深かった。そういえばAsanaというサービスを知ったきっかけはカナダでアプライした会社がAsanaを使っていたからだった。</p>

<p>余談だが外部連携している金融機関のデータをスクレイピングで取得しているということだったが、メンテが大変そうなのでさっさと金融機関はAPIを公開してくれればいいのにと思ったがきっと大人の事情でまだ当分の間はAPIは公開されないのだろう。</p>

<h2 id="section-1">バグ当番制度</h2>
<p>エンジニアの間で実施されている「バグ当番制度」というのが面白かった。毎週バグ当番を１人決めて選出された人がIssueに上がっているバグを潰すというものだ。さらに面白いのはサーバーサイドを担当しているエンジニアもバグ当番でiPhoneアプリのバグを潰したりするという話だ（一応そういう人のために比較的簡単なものをバグ当番のバグに割り当てているらしい）。</p>

<p>この制度によりサーバーサイドを担当しているエンジニアもiPhoneアプリケーションについて知らざるをえず、それがエンジニアのスキル・知見を広がることにも繋がり、なかなか面白い取り組みだと思った。</p>

<h2 id="section-2">休憩スペース</h2>
<p>休憩スペースはとても広く各種設備も充実している。プロジェクター、卓球台、ミニ四駆のコース、ドリンク（ビール含）。ホワイトボードには卓球のトーナメント表が残されており、卓球プレイヤーたちが白熱した試合を繰り広げた模様だった。LT・勉強会などの各種イベントも開きやすいような印象でそういうスペースがあるのは良い。</p>

<h2 id="section-3">ビジネス的な話</h2>
<p>冒頭にも述べたように８億円の資金も調達したということで絶賛拡大中。６月に会社を移転して早速10人近くのエンジニアもとったとのことで採用もガンガン行っている。話したCo-Founderの方は「来年六月までこのオフィスは持たないだろう」とおっしゃってた。</p>

<p>まずは日本のデファクトとなっている会計ソフトウェアからシェアを奪う、その後グローバル展開も狙ってるとのことで、それらを考えると夢がヒロガリング。</p>

<h2 id="section-4">こんな人におすすめ</h2>
<p>「バグ当番」の制度でも象徴されるように、１つの領域に留まらないフルスタック的な活躍を期待される模様。スタートアップ的な活気があり会社の皆が一丸となり今後の成長を支えていこうという気概を感じた。</p>

<p>freeeの急成長を支えたいエンジニアは今すぐジョイン。</p>

<p><a href="https://www.wantedly.com/companies/cfo">freeeの採用ページ</a></p>

<h2 id="section-5">あわせてどうぞ</h2>
<ul>
  <li><a href="http://blog.kushii.net/archives/1914293.html">freee 株式会社 に行ってきた！</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[就活日記(1) Wantedly]]></title>
    <link href="http://blog.toshimaru.net/job-hunting-1/"/>
    <updated>2014-07-08T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/job-hunting-1</id>
    <content type="html"><![CDATA[<p><a href="/job-hunting-0/">就活日記(0) エントリー</a></p>

<h2 id="section">きっかけ</h2>
<p>Wantedlyをヘビーに使い始めてわりとすぐにWantedlyの中の人から招待もらえた。Wantedly自体使っててすごく良いサービスだと思っていたので遊びに行くことにした。</p>

<h2 id="wantedly">Wantedlyを支えてる技術</h2>
<p>WantedlyにはPC/Mobile用のWeb上のアプリケーションと、iPhone/Androidアプリケーションがある。</p>

<p>iPhone/Androidは基本ネイティブ。Swiftとかも勉強会で取り上げたり精力的。どんどん新しくていいものには取り入れていくような姿勢が見られた。（参考：<a href="http://engineer.wantedly.com/2014/04/28/how-wantedly-make-ios-app.html">WantedlyではどうやってiOSアプリ開発しているのか</a>）</p>

<p>サーバーサイドはRoR。フロントエンドはHaml, Scss, CoffeeScript, Backbone.js, AngularJSあたりを使っている模様。CSSはreset.css的なの以外は基本CSSライブラリは使っていないとのこと。</p>

<p>HipChatでコミュニケーション。CIはGithubをフックして<a href="http://wercker.com/">wercker</a>でCI。テストに関してはそこまでカバレッジ率を意識しすぎることなく、クリティカルなロジックを集中してテストしていこうという感じ。<a href="http://kenn.hatenablog.com/entry/2014/01/03/095026">「テスト書きすぎ問題」</a>とかもあるのでこの方向性は間違ってないと思う。</p>

<p>いわゆるモダンな開発環境が一通り整っておりナウい感じだった。</p>

<h2 id="section-1">ビジネス的な話</h2>
<p>既に企業と求職者を結びつけるWantedlyがビジネス的にうまく回っており、Wantedly自体の機能拡充とあわせて「日本のLinkedIn」となるようなプラットフォームを作りたいとのこと。LinkedInは「北米で就活する際にはアカウント必須」と言われ、カナダで就活する際にはアカウント作成し使ったがUIとかゴチャゴチャしてて正直使うのがイヤだったので、是非Wantedlyさんには頑張っていただきたい。</p>

<p>Wantedlyの他には<a href="https://contacts.wantedly.com/">連絡帳アプリ・CONTACT</a>とかやってる。</p>

<p>既にWantedlyでかなり企業ならびにユーザーの心をキャッチしているので、その採用プラットフォームを起点として広がるビジネス的展開の可能性は無限大だなと思いました。そしてきっと手堅い。</p>

<h2 id="ceo">CEO・仲さん</h2>
<p>日本一<a href="https://www.youtube.com/watch?v=TSUryiRhgJw">ストールが似合うことで有名な仲さん</a>ですが（今僕が即興で作った）、仲さんが今でもコードをコミットし組織のコントリビュート・ランキング四位なのは驚いた。組織の成長とともにマネジメント側の人はコードは書かなくなるという印象を持ってるのだが、仲さんは例外らしい。</p>

<p>大体テック系スタートアップは野郎ばかりのホモ・ソーシャル感が強いんですが、そんなホモソーシャルの中に咲く一輪の花、女性CEOがいるのはとても好感が持てました。きっとデキる女性社員も多いのだろうと勝手に予想しました。そして女性社員率も比較的高い。</p>

<p>余談になるが、会議室の片隅に仲さん作の「FUCKIN PRAY FOR JAPAN」と書かれた絵画が置いてあって、地震後のチャリティー絵画として海外に出展したが売れなかったという渋い話を聞いたけど、僕は仲さんがロックな人であることがわかりさらに好感度を上げた。</p>

<h2 id="section-2">こんな人におすすめ</h2>
<p>Wantedlyはサーバーサイドのみを書く、クライアントサイドのみを書くというより、どちらも書けるようなフルスタック志向の人が向いているかもしれません。</p>

<p>CTOの方が「日本一技術者の面接が難しい会社にする」と言っており並大抵のスキルの人は門前払いになるかもしれません。ですが逆に言うとそれだけ厳選された少数精鋭の優秀な人がチームにいるということになるわけで、そのような環境下で優秀な仲間たちと切磋琢磨したい人にはいいかと思います。</p>

<p>会ったエンジニアは一部ですが、話を聞くとモバイルデベロッパーがAPIもごりごりメンテナンスしていたり、コードが書けるデザイナーさんがいたりときっとみなさん優秀な方なんだろうなぁという印象でした。</p>

<p>興味のある方はまずWantedlyオフィスで開催される<a href="https://www.wantedly.com/projects/5106">もくもく会</a>から参加してはいかがでしょうか？</p>

<p><a href="https://www.wantedly.com/companies/wantedly">Wantedlyの採用ページ</a></p>

<h2 id="section-3">あわせてどうぞ</h2>
<ul>
  <li><a href="http://blog.kushii.net/archives/1874257.html">ウォンテッドリー株式会社 に行ってきた！</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[就活日記(0) エントリー]]></title>
    <link href="http://blog.toshimaru.net/job-hunting-0/"/>
    <updated>2014-07-07T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/job-hunting-0</id>
    <content type="html"><![CDATA[<p>カナダからワーホリビザも切れるというところで帰国した。仕事も無いし金もないので日本で就職活動を開始した。その記録を残す。</p>

<h2 id="section">使った転職サイト</h2>
<p>転職活動するにあたっては<a href="https://www.wantedly.com/">Wantedly</a>を使用した。ソーシャルリクルーティングサイトの中では最近他のエンジニアからよく聞くホットなサイトだ。</p>

<p>使ってみて一番いいなと思った点はいきなり「選考開始！面接！」というよりも、「まずは話を聞いてみたい」から会社と関係を始めることが出来る点。求人文章を読んだだけでは会社の中の雰囲気まで伝わらないというのが実際。「興味はあるんだけどなー。でもまだ面接に行くほどでも…」みたいな温度感だと大体その会社をブクマしただけで応募までは行かないと思うが、Wantedlyはその辺の応募のハードルが低くて良い。</p>

<p>またWantedly登録後、（自分はプロフィールを充実させておいたのだが）企業からも「遊びに来ませんか？」という招待が来ることがあり、そこで会社との出会いも広がってステキだ。ココロオドル。<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup></p>

<p><img src="/images/posts/job-hunting/invite.png" alt="Wantedly Invite" /></p>

<p>会社から招待されることにより自身の承認欲求も良い感じに満たされて幸福度が増す。ハッピー。</p>

<h2 id="section-1">なぜ就活日記？</h2>
<p>内容のないホットエントリ入りした入社・退職エントリを見て「で、誰？」「<a href="https://twitter.com/itmammoth/status/420021368537624576">個人の日記レベル</a>」とか思う人も少なからずいることだろう。</p>

<blockquote>
  <p>「○○株式会社を退職しました」「○○にジョインしました！」などの見出しやキラキラした文章を見て舌打ちをしたことはありませんか？ 　(中略)　一般的に入社/退職エントリというのは活動は秘密裏に行われて発表だけ公的で大々的にするのが主なので、そういう風潮に終止符を打ちたかったというのが本音です</p>
</blockquote>

<p>（via.
<a href="http://laiso.hatenablog.com/entry/2014/01/27/%E5%B0%B1%E6%B4%BB%E6%97%A5%E8%A8%98_%287%29_%E7%B7%8F%E9%9B%86%E7%B7%A8%E5%9B%9E">就活日記 (7) 総集編回</a>）</p>

<p>この就活日記シリーズはこのような<a href="https://twitter.com/laiso">laisoさん</a>の考え方に強く共感して書かれたものだ。自分自身、今回転職活動をするにあたって<a href="http://laiso.hatenablog.com/entry/2014/01/11/%E5%B0%B1%E6%B4%BB%E6%97%A5%E8%A8%98_(0)_%E3%82%A8%E3%83%B3%E3%83%88%E3%83%AA%E3%83%BC">laisoさんの就活日記シリーズ</a>は何度も何度も読み返した。そして今回企業選びにも実際、laisoさんが受けた企業に触発されているところが多々ある。</p>

<p>ということで「自分が書く就活日記も誰かの役に立つかもしれない」という思いの元、自分も就活日記を書いてみる。</p>

<h2 id="section-2">応募基準</h2>
<p>自分がアプライする会社の基準はこんな感じ。</p>

<ul>
  <li>使ってる技術:
    <ul>
      <li>Ruby on Rails</li>
      <li>クライアントサイドフレームワーク(Backbone.js, AngularJS)</li>
    </ul>
  </li>
  <li>開発環境:
    <ul>
      <li>Mac</li>
      <li>Github</li>
      <li>コードレビュー文化</li>
      <li>テスト・CI環境</li>
    </ul>
  </li>
  <li>B2Cで将来性があるサービス</li>
  <li>その会社のやっていること・方向性に共感できる</li>
  <li>成長性がある会社
    <ul>
      <li>逆に言うと成長しきった大企業じゃない会社だとよい</li>
    </ul>
  </li>
  <li>エンジニアを尊重する文化がある</li>
</ul>

<p>全てあてはまってると望ましいけど一部でも良い。</p>

<h2 id="section-3">就活日記一覧</h2>
<ul>
  <li><a href="#">就活日記(0) エントリー</a>（今ココ）
<a href=" http://b.hatena.ne.jp/entry/blog.toshimaru.net/job-hunting-0/"><img src=" http://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/job-hunting-0/" /></a>
<br /></li>
  <li><a href="/job-hunting-1/">就活日記(1) Wantedly</a> 
<a href=" http://b.hatena.ne.jp/entry/blog.toshimaru.net/job-hunting-1/"><img src=" http://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/job-hunting-1/" /></a>
<br /></li>
  <li><a href="/job-hunting-2/">就活日記(2) freee</a>
<a href=" http://b.hatena.ne.jp/entry/blog.toshimaru.net/job-hunting-2/"><img src=" http://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/job-hunting-2/" /></a>
<br /></li>
  <li><a href="/job-hunting-3/">就活日記(3) Quipper</a>
<a href=" http://b.hatena.ne.jp/entry/blog.toshimaru.net/job-hunting-3/"><img src=" http://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/job-hunting-3/" /></a>
<br /></li>
  <li><a href="/job-hunting-4/">就活日記(4) Gunosy</a>
<a href=" http://b.hatena.ne.jp/entry/blog.toshimaru.net/job-hunting-4/"><img src=" http://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/job-hunting-4/" /></a>
<br /></li>
  <li><a href="/job-hunting-5/">就活日記(5) トレタ</a>
<a href=" http://b.hatena.ne.jp/entry/blog.toshimaru.net/job-hunting-5/"><img src=" http://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/job-hunting-5/" /></a>
<br /></li>
  <li><a href="/job-hunting-6/">就活日記(6) KAIZEN platform Inc.</a>
<a href=" http://b.hatena.ne.jp/entry/blog.toshimaru.net/job-hunting-6/"><img src=" http://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/job-hunting-6/" /></a>
<br /></li>
  <li><a href="/job-hunting-fin/">就活日記(完) 就職</a>
<a href=" http://b.hatena.ne.jp/entry/blog.toshimaru.net/job-hunting-fin/"><img src=" http://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/job-hunting-fin/" /></a>
<br /></li>
</ul>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>中の人はこれを「採用業界の＜出会い系＞」なんて表現していた。 <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[packerを使ってDigital Ocean上にイメージを作成する]]></title>
    <link href="http://blog.toshimaru.net/digitalocean-image-with-packer/"/>
    <updated>2014-03-16T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/digitalocean-image-with-packer</id>
    <content type="html"><![CDATA[<p>＜前回のあらすじ＞<br />
<a href="/digital-ocean-vagrant-puppet/">1円クラウド・DigitalOceanのインスタンスをVagrantで上げて、puppetでプロビジョニングする</a></p>

<p><a href="http://www.packer.io/">packer</a>を使ってDigital Ocean上にイメージを作成してみたのでそのときのメモ。</p>

<h2 id="packer">Packerとは？</h2>

<p><a href="http://www.vagrantup.com/">Vagrant</a>がVMの構築とかAWS/Digitgal Oceanでのインスタンス作成とかを抽象化して、プログラマブルにすることが可能なツールだとしたら、Packerはそれをさらに抽象化して、1つの設定ファイル(JSON)からAWS, Digital Ocean, VirtualBox向けのイメージを作成できるツール。</p>

<h2 id="digital-ocean">Digital Oceanにイメージ作成する</h2>

<p>今回はDigital Oceanにイメージを作成した。まずはpakcer用のディレクトリを用意。</p>

<pre><code>$ mkdir packer-test
$ cd packer-test
</code></pre>

<p>次にpackerの設定ファイルを用意。ファイル名は何でもよいっぽい。</p>

<pre><code>$ touch Packer.json
</code></pre>

<p>このように書く。</p>

<pre><code>{
  "builders": [
    {
      "type": "digitalocean",
      "client_id": "your_client_id",
      "api_key": "your_api_key",
      "image_id": 1505447,
      "region_id": 3,
      "size_id": 66
    }
  ],

  "provisioners": [
    {
      "type": "shell",
      "script": "setup.sh"
    }
  ]
}
</code></pre>

<p><code>builder</code>でタイプをチョイス。今回は<code>digitalocean</code>を選択。<code>client_id</code>, <code>api_key</code>を設定。<code>image_id</code>,<code>region_id</code>,<code>size_id</code>のint値については<a href="https://developers.digitalocean.com/">こちらのDigitalOcean API</a>を見るとよいっぽい。</p>

<p>プロビジョニングのタイプは今回はシンプルにshellを設定。適当に<code>setup.sh</code>を作る。</p>

<pre><code>$ echo "echo 'hello world'" &gt; setup.sh
</code></pre>

<h2 id="packer-1">Packer!</h2>

<p>packerビルドしてみる。</p>

<pre><code>$ packer build Packer.json
digitalocean output will be in this color.

==&gt; digitalocean: Creating temporary ssh key for droplet...
==&gt; digitalocean: Creating droplet...
==&gt; digitalocean: Waiting for droplet to become active...
==&gt; digitalocean: Waiting for SSH to become available...
==&gt; digitalocean: Connected to SSH!
==&gt; digitalocean: Provisioning with shell script: setup.sh
    digitalocean: hello world!
    digitalocean:
==&gt; digitalocean: Gracefully shutting down droplet...
==&gt; digitalocean: Creating snapshot: packer-1395033724
==&gt; digitalocean: Waiting for snapshot to complete...
==&gt; digitalocean: Destroying droplet...
==&gt; digitalocean: Deleting temporary ssh key...
Build 'digitalocean' finished.

==&gt; Builds finished. The artifacts of successful builds are:
--&gt; digitalocean: A snapshot was created: 'packer-1395033724' in region 'San Francisco 1'
</code></pre>

<h2 id="section">結果</h2>

<p>Before,Afterで見てみる。</p>

<p>Before:</p>

<p><img src="/images/posts/packer/do-before.png" alt="before" /></p>

<p>After:</p>

<p><img src="/images/posts/packer/do-after.png" alt="after" /></p>

<p>イメージのスナップショット（<code>packer-1395033724</code>）が作成されてますね。</p>

<h2 id="section-1">最後に</h2>

<p>packerはあくまでもイメージを作成するツールであり、イメージを管理するツールではないようです。</p>

<blockquote>
  <p>Packer only builds images. It does not attempt to manage them in any way.</p>
</blockquote>

<p>See. <a href="http://www.packer.io/intro/getting-started/build-image.html">http://www.packer.io/intro/getting-started/build-image.html</a></p>

<p>また、<code>builders</code>の設定を変更することで、<a href="http://www.packer.io/docs/builders/amazon.html">Amazon EC2</a>や<a href="http://www.packer.io/docs/builders/googlecompute.html">Google Compute Engine</a>とかにもイメージ作成できるようですね。</p>

<h3 id="github-repo">Github Repo</h3>

<p>今回使ったものをGithubにおいておきます。</p>

<p><a href="https://github.com/toshimaru/packer-digitalocean-sample">https://github.com/toshimaru/packer-digitalocean-sample</a></p>

<h3 id="section-2">参考</h3>

<ul>
  <li><a href="http://rebuild.fm/25/">Rebuild: 25: Immutable Infrastructure (Naoya Ito, Gosuke Miyashita)</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1円クラウド・DigitalOceanのインスタンスをVagrantで上げて、puppetでプロビジョニングする]]></title>
    <link href="http://blog.toshimaru.net/digital-ocean-vagrant-puppet/"/>
    <updated>2014-03-12T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/digital-ocean-vagrant-puppet</id>
    <content type="html"><![CDATA[<p>流行りの1円クラウド、DigitalOcean上にVagrantでインスタンス(DigitalOcean的にはDroplet)を立ててみて、それが感動的にラクだったので書き残しておく。</p>

<h2 id="install-vagrant-command">Install vagrant command</h2>

<p>Mac使っているのであれば<a href="https://github.com/phinze/homebrew-cask">homebrew-cask</a>を使うのが便利。</p>

<pre><code>$ brew cask install vagrant
</code></pre>

<p>バージョンは1.5.1</p>

<pre><code>$ vagrant -v
Vagrant 1.5.1
</code></pre>

<h2 id="install-vagrant-digitalocean-plugin">Install vagrant-digitalocean plugin</h2>

<p>そのままではDigitalOceanは使えないので、次にvagrantのDigitalOceanプラグインをインストール。</p>

<pre><code>$ vagrant plugin install vagrant-digitalocean
</code></pre>

<h2 id="vagrantfile-configuration">Vagrantfile Configuration</h2>

<p>まずはVagrantfileを用意。</p>

<pre><code>$ mkdir vagrant-digitalocean-test
$ cd vagrant-digitalocean-test
$ touch Vagrantfile
</code></pre>

<p>次に<code>Vagrantfile</code>に書く設定。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="s1">&#39;2&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>

  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="ss">:digital_ocean</span> <span class="k">do</span> <span class="o">|</span><span class="n">provider</span><span class="p">,</span> <span class="n">override</span><span class="o">|</span>
    <span class="n">override</span><span class="o">.</span><span class="n">ssh</span><span class="o">.</span><span class="n">private_key_path</span> <span class="o">=</span> <span class="s1">&#39;~/.ssh/id_rsa&#39;</span>
    <span class="n">override</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s1">&#39;digital_ocean&#39;</span>
    <span class="n">override</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box_url</span> <span class="o">=</span> <span class="s2">&quot;https://github.com/smdahlen/vagrant-digitalocean/raw/master/box/digital_ocean.box&quot;</span>

    <span class="n">provider</span><span class="o">.</span><span class="n">client_id</span> <span class="o">=</span> <span class="s1">&#39;{your_client_id}&#39;</span>
    <span class="n">provider</span><span class="o">.</span><span class="n">api_key</span> <span class="o">=</span> <span class="s1">&#39;{your_api_key}&#39;</span>

    <span class="n">provider</span><span class="o">.</span><span class="n">image</span>                <span class="o">=</span> <span class="s1">&#39;CentOS 6.4 x64&#39;</span>
    <span class="n">provider</span><span class="o">.</span><span class="n">region</span>               <span class="o">=</span> <span class="s1">&#39;San Francisco 1&#39;</span>
    <span class="n">provider</span><span class="o">.</span><span class="n">size</span>                 <span class="o">=</span> <span class="s1">&#39;512MB&#39;</span>
  <span class="k">end</span>

<span class="k">end</span></code></pre></div>

<p><code>provider.client_id</code>, <code>provider.api_key</code>の値はアカウント作成後、下記URLより生成できる。</p>

<p><a href="https://cloud.digitalocean.com/api_access">https://cloud.digitalocean.com/api_access</a></p>

<p>今回はCentOS6.4、場所はサンフランシスコ、サイズは512で作ってみる。</p>

<h2 id="section">インスタンス作成！</h2>

<p>あとはこのコマンドのみ。</p>

<pre><code>$ vagrant up --provider digital_ocean
</code></pre>

<p>これで一分くらい待つと立ち上がりました。動いてます。</p>

<pre><code>$ vagrant status
Current machine states:

default                   active (digital_ocean)

active
</code></pre>

<p>あとは<code>vagrant ssh</code>するなり<code>vagrant destroy</code>（インスタンス破棄[重要！]）するなり。</p>

<h2 id="section-1">プロビジョニング</h2>

<p>これだけでは最小パッケージで必要なパッケージが入ってなく片手落ち。そうだ、puppetでプロビジョニングしてみよう。<code>Vagrantfile</code>をこうしてみる。</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="s1">&#39;2&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;shell&quot;</span><span class="p">,</span> <span class="ss">inline</span><span class="p">:</span> <span class="s2">&quot;rpm -Uvh http://ftp-srv2.kddilabs.jp/Linux/distributions/fedora/epel/6/x86_64/epel-release-6-8.noarch.rpm --force&quot;</span>
  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;shell&quot;</span><span class="p">,</span> <span class="ss">inline</span><span class="p">:</span> <span class="s2">&quot;yum -y install puppet&quot;</span>

  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="ss">:digital_ocean</span> <span class="k">do</span> <span class="o">|</span><span class="n">provider</span><span class="p">,</span> <span class="n">override</span><span class="o">|</span>
    <span class="n">override</span><span class="o">.</span><span class="n">ssh</span><span class="o">.</span><span class="n">private_key_path</span> <span class="o">=</span> <span class="s1">&#39;~/.ssh/id_rsa&#39;</span>
    <span class="n">override</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s1">&#39;digital_ocean&#39;</span>
    <span class="n">override</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box_url</span> <span class="o">=</span> <span class="s2">&quot;https://github.com/smdahlen/vagrant-digitalocean/raw/master/box/digital_ocean.box&quot;</span>

    <span class="n">provider</span><span class="o">.</span><span class="n">client_id</span> <span class="o">=</span> <span class="s1">&#39;{client_id}&#39;</span>
    <span class="n">provider</span><span class="o">.</span><span class="n">api_key</span> <span class="o">=</span> <span class="s1">&#39;{api_key}&#39;</span>

    <span class="n">provider</span><span class="o">.</span><span class="n">image</span>                <span class="o">=</span> <span class="s1">&#39;CentOS 6.4 x64&#39;</span>
    <span class="n">provider</span><span class="o">.</span><span class="n">region</span>               <span class="o">=</span> <span class="s1">&#39;San Francisco 1&#39;</span>
    <span class="n">provider</span><span class="o">.</span><span class="n">size</span>                 <span class="o">=</span> <span class="s1">&#39;512MB&#39;</span>
  <span class="k">end</span>

  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;puppet&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">puppet</span><span class="o">|</span>
    <span class="n">puppet</span><span class="o">.</span><span class="n">options</span>                <span class="o">=</span> <span class="s2">&quot;--verbose&quot;</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></div>

<p>最初にpuppetをインストールコマンドを追加。そして</p>

<h2 id="puppet-manifest">puppet manifest</h2>

<p>puppetのmanifestファイルを定義します。</p>

<pre><code>$ mkdir manifests
$ touch manifests/default.pp
</code></pre>

<p><code>manifests/default.pp</code>はこう。vimとgitのパッケージを追加。必要に応じて追加したりする。</p>

<pre><code>package {
  [
    'vim-enhanced',
    'git',
  ]:
  ensure =&gt; installed
}
</code></pre>

<h2 id="lets-provision">Let’s provision!</h2>

<pre><code>$ vagrant provision
</code></pre>

<p>これでpuppet経由で、vimやらgitが入る。良い。</p>

<h2 id="section-2">本当に１円？</h2>

<p>はい。</p>

<p>検証環境として使ったあとに、dropletをちゃんと破棄していればこうなります。</p>

<p><img src="/images/posts/vagrant/bill.png" alt="bill" /></p>

<p>現時点で<code>1USD</code> = <code>102JPY</code>くらいなので<code>0.01USD</code>=約１円ですね。</p>

<h2 id="github-repo">Github Repo</h2>

<p>Githubに今回のサンプルの最終形を置いておく。</p>

<p><a href="https://github.com/toshimaru/vagrant-digitalocean-puppet">https://github.com/toshimaru/vagrant-digitalocean-puppet</a></p>

<h3 id="section-3">参考</h3>

<ul>
  <li><a href="http://blog.glidenote.com/blog/2013/12/05/digital-ocean-with-vagrant/">VagrantとSSDなVPS(Digital Ocean)で1時間1円の使い捨て高速サーバ環境を構築する</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chromebookを使ってみた WEBだけ使えればいい人にはオススメ、開発マシンとしては難しい]]></title>
    <link href="http://blog.toshimaru.net/chromebook-firstimpression/"/>
    <updated>2014-03-09T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/chromebook-firstimpression</id>
    <content type="html"><![CDATA[<p><a href="http://blog.livedoor.jp/itsoku/archives/37545648.html">ついに激安PCのChromeBookが日本上陸！東芝が来月にも発売へ</a></p>

<p>Chromebookが日本にも来るようですね。カナダにて一足先にChromebookを一週間ほど触ってみたので、その感想を書いてみようと思います。</p>

<h2 id="section">スペック</h2>

<p>購入したのはSamsungのChromebook. ３万円くらいでした。安い。</p>

<p><img src="/images/posts/chromebook/chromebook1.jpg" alt="chromebook pic 1" /></p>

<p>特徴はざっくりこんな感じ。</p>

<ul>
  <li>11.6 インチディスプレイ</li>
  <li>約1キログラム</li>
  <li>2GB メモリ</li>
  <li>16GB SSD</li>
  <li>Samsung Exynos 5 Dual Processor</li>
</ul>

<p>via. <a href="https://www.google.com/intl/ms/chrome/devices/samsung-chromebook.html#specs">Samsung Chromebook</a></p>

<p>重さも軽くノートのように持ち運べるので携帯性は優れてて良いかと。SSD容量が少ないのは「ファイルはローカルじゃなくWEBに置いてね」というChromeOSの思想から気にしちゃいけないところ。動作に関してはタブ何十枚も一度に開いたり動画を閲覧してたりするとモッサリするかなって感じだった。</p>

<p>何より驚いたのは起動の早さでした。本当に10秒くらいで起動するんですよ、これが。見てて気持ちよかった。</p>

<h2 id="chrome-os">Chrome OSの思想</h2>

<p>ChromeOSは全ての作業がブラウザ/WEBで実行可能になりつつある昨今、生まれるべくして生まれたOSだと思う。僕らが日々パソコンの前に座って行う作業はウェブ上で可能な作業へとシフトしていっている。メールチェックはOutlookからGmailへと、ドキュメント作成はWord/ExcelからGoogleDocsへと、各種データはローカル保存からEvernote,DropBoxなどのクラウドストレージへと移行している。プログラミングですら<a href="https://c9.io/">Cloud9 IDE</a>などのサービスでウェブ上で可能になっている。</p>

<p>ChromeOSには従来のようなデスクトップやファイルといった発想はない。</p>

<blockquote>
  <p>Googleアカウントを利用してログインする。Google Chrome OSのユーザインタフェースは、基本的にGoogle Chromeだけが全面に出ている形で、デスクトップやファイルブラウザなどは無く、すべてのアプリケーションはウェブアプリケーションという形でGoogle Chromeにインストールされ、実行される。インストールしたアプリはGoogle Chromeにショートカットを作成してアクセスすることが出来る。</p>

  <p><a href="http://ja.wikipedia.org/wiki/Google_Chrome_OS">Google Chrome OS - Wikipedia</a></p>
</blockquote>

<p>起動するとこんな画面。一見他OSのデスクトップのようにファイルが置けたりするんじゃないの？って思うかもしれないけどそんなことはない。</p>

<p><img src="/images/posts/chromebook/chromebook2.jpg" alt="chromebook pic 2" /></p>

<p>基本的にアプリケーションはChrome上で動作するアプリケーションのみなので、下部にズラって並んでるのはChromeアプリのショートカットアイコン。クリックするとChromeが開きWEBアプリが起動する感じ。</p>

<h2 id="section-1">開発者マシンとして利用可能？</h2>

<p>自分は開発者なので開発者マシンとして利用可能かも試してみた。</p>

<p>結論から言うと現時点では難しいという印象。</p>

<h3 id="developer-mode">Developer Mode</h3>

<p>Chromebookには<a href="http://www.chromium.org/chromium-os/chromiumos-design-docs/developer-mode">Developerモード</a>というのがあって、これをONにすることでシェル操作が可能になったりする。例えば自分のSamsung Chromebookであれば<a href="http://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices/samsung-arm-chromebook#TOC-Developer-Mode">この手順</a>でDeveloperモードがONにできた。</p>

<h3 id="chrome">Chrome上で動作する代替アプリケーション</h3>

<p>Chrome上で動作する開発者用のアプリケーションとしてはこんなのが紹介されてる。</p>

<ul>
  <li><a href="https://chrome.google.com/webstore/detail/secure-shell/pnhechapfaindjhompbnflcldabbghjo">Secure Shell</a> - ターミナル、SSHクライアント</li>
  <li><a href="https://chrome.google.com/webstore/detail/chrome-remote-desktop/gbchcmhmhahfdphkhkmpfmihenigjmpp">Chrome Remote Desktop</a> - リモートデスクトップ</li>
  <li><a href="https://chrome.google.com/webstore/detail/text/mmfbcljfglbokpmkimbfghdkjmjhdgbg">Text</a> - テキストエディタ</li>
  <li><a href="https://chrome.google.com/webstore/detail/beagle-term/gkdofhllgfohlddimiiildbgoggdpoea">Beagle Term</a> - ターミナルエミュレータ</li>
  <li><a href="https://chrome.google.com/webstore/detail/cloud9/nbdmccoknlfggadpfkmcpnamfnbkmkcp">Cloud9</a> - オンラインIDE</li>
  <li><a href="http://runnable.com/">Runnable</a> - クラウドベースIDE</li>
</ul>

<p>via. <a href="http://www.chromium.org/chromium-os/developing-apps-on-your-chromium-os-device">Developing apps on your Chromebook</a></p>

<p>どれも悪くはないけど痒いところには手が届かない感じ。</p>

<h3 id="section-2">その他</h3>

<p>他にも<a href="http://jeremyckahn.github.io/blog/2013/02/09/setting-up-a-local-development-environment-in-chrome-os/">Setting Up a Local Development Environment in Chrome OS</a>や<a href="http://lifehacker.com/how-to-install-linux-on-a-chromebook-and-unlock-its-ful-509039343">How to Install Linux on a Chromebook and Unlock Its Full Potential</a>なんかを参考に<a href="https://github.com/dnschneid/crouton">crouton</a>を使ってみたりしたけど、まだまだ発展途中という印象だった。</p>

<h3 id="tips">Tips</h3>

<p><a href="http://www.chromestory.com/google-chromebook/">100 Tips for Your Google Chromebook</a></p>

<h2 id="section-3">まとめ</h2>

<p>パソコンの普段の使い方が「Gmailでメールチェック」「YouTube/ニコ動などで動画視聴」「Twitter/Facebook閲覧」などWEBに閉じている方であれば、Chromebookはオススメできます。WindowsやMacよりも低価格ですし、悪い買い物ではないと思います。</p>

<p>ただ仕事での利用、ソフトウェア開発などの利用シーンにおいてはオススメできません。「Chrome縛り」でイケると思ってchromebook試用してみたが、僕は思ったより辛かった。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[バンクーバーの仕事を退職しました]]></title>
    <link href="http://blog.toshimaru.net/vancouver-job-after/"/>
    <updated>2014-03-07T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/vancouver-job-after</id>
    <content type="html"><![CDATA[<p>バンクーバーでWebデベロッパーの仕事を見つけ約半年ほど(5ヶ月くらい)働いてきましたが、この度その仕事を辞めることにいたしましたので報告します。</p>

<p>どのように海外で就活してジョブGETに至ったかやカナダの現地企業で働いてみて感じてことは以前のエントリにまとめてあります。興味がある方はそちらをどうぞ。</p>

<ul>
  <li><a href="http://blog.toshimaru.net/how-to-find-job-in-Vancouver/">僕が単身海外（バンクーバー）に来て仕事を見つけるまでにやったこと</a></li>
  <li><a href="http://blog.toshimaru.net/my-impression-after-working-2-months/">2ヶ月間WEBエンジニアとして海外で働いてみて感じたこと</a></li>
</ul>

<p>今回は海外の仕事の振り返りエントリとして、（日本語で書いていることだし）良い事も悪い事も含めざっくばらんに書いてみようと思います。</p>

<h2 id="section">やってたこと</h2>

<p>働いていた会社は<a href="http://www.sproutatwork.com/">Sprout Willness Solution</a>というところになります。</p>

<p>そこでWebアプリケーションを作っていました。どんなアプリケーションかは下記の動画を観てもらうと早いかもしれません。</p>

<iframe width="560" height="315" src="//www.youtube.com/embed/JI7xKhJvOXM?rel=0" frameborder="0" allowfullscreen=""></iframe>

<p>似たようなサービスが日本に無いのでなかなか説明するのが難しいのですが、一言で表現するなら「従業員の健康促進WEBアプリケーション」とでもいいましょうか。B2Bで企業に対し提供されるWEBアプリで、それを使い従業員はアクティビティをトラッキングしたり、目標をセットしたり、イベントを作成したりできるサービスになります。</p>

<p>入社当初は当アプリのi18nプロジェクトのコアエンジニアとしてイギリス人のもう一人のコア開発者と共に働きました。対応言語は英語とフランス語の２か国語（カナダの公用語は英語とフランス語）。このi18n対応は３ヶ月ほどで終わり、その後は新機能の開発、機能改修、バグフィックスなどをやってました。</p>

<h2 id="section-1">辞める理由</h2>

<p>ワーキングホリデーのビザが切れる直前のギリギリまで働き続けることも可能だったのですが、今回その前に退職という選択をしました。なぜ辞めるのか。大きく理由は３つです。</p>

<h3 id="section-2">コントリビュートできた</h3>

<p>第一に技術的な意味で自分ができる貢献は十分にできたかなと感じたからです。以下は会社から与えられた基本タスク以外にやったことです。</p>

<ul>
  <li>Gitコマンドの使い方 (rebase, cherry-pickなど)を同僚に教えた</li>
  <li>Github上でプルリクエストを出すかたちで新機能の開発を進めた（誰もプルリ機能を使ってなかったので広める意味でやってたけど、結局だれもプルリ方式の開発を真似してくれなかった…）</li>
  <li>煩雑なマニュアル・デプロイプロセスがあったのでシェルスクリプトを書いてデプロイの一部を自動化</li>
  <li>コードのリファクタリング</li>
  <li>不必要・ムダなファイルを削除</li>
</ul>

<p>これらは別段すごく難しいことでもないし、そこそこのエンジニアであれば行って当たり前のことだと思います。しかし誰もやろうとしなかったので僕がやりました。</p>

<p>これらの他にも実装方法、設計、開発方法とかに改善余地はあったけど、その辺を同僚・上司とディスカッションして決定まで持っていくだけの英語力が僕になく、この辺が自分の貢献できる限界かな、という感じでした。</p>

<h3 id="section-3">海外でも通用する</h3>

<p>第一の理由で書いたように、同僚に何かを教えてもらうよりも、自分がgitコマンドの使い方など同僚に何かを教えることが多かったです。言い換えると技術的な面で会社からは学ぶことはほとんどなかった、ということになります。他の同僚エンジニアと技術力を比べても自分のほうが高かった気がしてます。このことは僕に「海外でも自分の能力は通用する」という実感を与えました。これが第二の理由です。</p>

<p>漠然と「海外のプログラマはデキる！」というイメージを抱いていたわけですが、まぁもちろんそんなことはないですよね。どこの国でもそこそこ優秀な層は全体の数十％で、さらにそこから超が付く優秀になると数％なわけです。漠然と海外にある種の＜エンジニアの理想郷＞を描いていたわけですが、そんな世界はもちろんなかったわけです。</p>

<p>自分が超の付く優秀なエンジニアだとは思っていませんが、海外でも自分の力が通用すると知れたのは今後の自信にもつながりとても良かったと思ってます。</p>

<h3 id="section-4">英語の壁</h3>

<p>技術力「は」通用しました。しかし英語力はまだまだだなと感じさせられました。先日こんな記事を見つけました。</p>

<blockquote>
  <p>文系で日本人と関係ないことをしようとすると、問答無用で１）（<em>筆者注：英語スピーキングレベル上級</em>）を目指す必要があり、そうでないと、能力以前にチャンスをほとんど与えられません。 <em>(…中略…)</em> 理系のエンジニアであれば、２）（<em>筆者注：英語スピーキングレベル中級</em>）になれば、どんな場所でも昇進のチャンスはあるでしょう。ちょっとイライラするけど、スキルをも持っているなら我慢できるレベルです。</p>

  <p><a href="http://nururi.com/?eid=528">じゃあ、英語スピーキング</a></p>
</blockquote>

<p>自分はスキルで会社に採用された形になりますが、上エントリにおけるレベルの「中級レベル」にも満たないスピーキング能力です。（初級と中級の間くらいだと思う）　エンジニア間の会話では同じテクノロジーを共有して話すことになるので、英語が話せなくてもなんとかなりましたが、ビジネス層の人との会話となるとそうもいきません。「実装方法」「デッドラインに間に合いそうか」「なぜこのバグが発生したか」などのトピックを技術のわからない人にもわかるように英語で説明する必要があります。そのときにやっぱり英語能力の足りなさを感じるわけです。</p>

<p>そして周りはみんなカナディアンで英語ネイティブスピーカー。そんな中に身を置いていると、技術的な面では無問題ですが、英語の面で皆の足を引っ張っていることは明らかなわけです。</p>

<p>もちろん僕は帰国子女でもないし海外生活も一年足らずなので、そのレベルでネイティブ・スピーカーと対等に話そうなどとはどだい無理な話ですが、それでもビジネスシーンで自分の英語力が不足していことは痛感しました。ということで残りの滞在期間は英語の学習に充てることにしました。それが残りの期間を最も有効に活用できる道と考えました。</p>

<h2 id="section-5">良かったこと</h2>

<p>以下は仕事を振り返って良かったことです。</p>

<ul>
  <li>英語環境下で働けた</li>
  <li>Githubで開発できた</li>
  <li>コード、開発フローをちょっとだけ改善できた</li>
  <li>技術力が通用した</li>
  <li>英語能力がまだまだだと知れた</li>
  <li>ノー残業だったこと（MAX残業は一時間くらい）</li>
  <li>ノー残業環境を活かし、自分でCodeSchoolなどのオンラインコースをとって新しい技術を学べた</li>
</ul>

<h2 id="section-6">悪かったこと</h2>

<p>悪かったこと。（これはあくまでも自分の働いたスタートアップの環境であってカナダ企業全体に当てはまることでは全くないと思うので普遍化しないでくださいね。）</p>

<ul>
  <li>全体的に適当
    <ul>
      <li>デッドラインを守らない、無計画なスケジュールを立てる、仕様がざっくりしすぎている、など</li>
      <li>給料の支払いが遅れたりすることがあった。それに対する会社側の対応も不誠実なものだったのでイライラした</li>
    </ul>
  </li>
  <li>英語でコミュニケーションがうまくできなかった</li>
  <li>スタートアップの負の側面に立ち会う
    <ul>
      <li>開発者を統括するマネージャーが辞めた、続けざまに重要な役割を担っていたキー開発者が辞めた。そして僕への負担が２倍以上になったりした。スタートアップは成長スピードが早い一方、このように壊れるのも早い。スタートアップの負の側面を見た気がした。</li>
    </ul>
  </li>
</ul>

<h2 id="section-7">今後</h2>

<p>語学学校でもう少し英語の勉強をして夏頃に日本に帰ろうと思います。日本での仕事どうしようかなぁ…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013年に参加したAdventCalendar、そしてAdventCalendar参加の意義]]></title>
    <link href="http://blog.toshimaru.net/2013-advent-calendar/"/>
    <updated>2013-12-29T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/2013-advent-calendar</id>
    <content type="html"><![CDATA[<p>2013年のAdvent Calendarは下記の記事にて参加しました。</p>

<ul>
  <li><a href="http://blog.toshimaru.net/php-force-property/">PHPのプロパティをStrictに定義する</a> (<a href="http://www.adventar.org/calendars/101">PHP Advent Calendar 2013</a>)</li>
  <li><a href="http://blog.toshimaru.net/one-thing-you-should-know-about-asahikawa/">旭川にある有名な動物園についてあなたが知るべきたった１つのこと</a> (<a href="http://www.adventar.org/calendars/77">道民部 Advent Calendar 2013</a>)</li>
  <li><a href="http://blog.toshimaru.net/php-trait/">PHP5.4のtrait機能を理解する</a> (<a href="http://www.adventar.org/calendars/101">PHP Advent Calendar 2013</a>)</li>
  <li><a href="http://blog.toshimaru.net/canadian-beers/">カナディアンビールの紹介</a> (<a href="http://www.adventar.org/calendars/86">ビール Advent Calendar 2013</a>)</li>
  <li><a href="http://blog.toshimaru.net/css-animation/">CSS3アニメーションを使ってサイトをリッチに</a> (<a href="http://www.adventar.org/calendars/57">CSS Property Advent Calendar 2013</a>)</li>
  <li><a href="http://blog.toshimaru.net/chrome-dev-tool/">細かすぎて伝わりにくいChrome Developerツールを使いこなそう！</a> (<a href="http://www.adventar.org/calendars/62">Frontrend Advent Calendar 2013</a>)</li>
  <li><a href="http://blog.toshimaru.net/jquery-8-tips/">jQuery使いが知っておくべき8つのjQueryテクニック</a> (<a href="http://www.adventar.org/calendars/135">jQuery Advent Calendar 2013</a>)</li>
</ul>

<p>合計７本。思ったよりも多く書くことができました。</p>

<h2 id="advent-calendar">Advent Calendar参加意義</h2>

<p>Advent Calendarに参加する意義とは何でしょうか？　僕は下記のように考えています。</p>

<ul>
  <li>ブログを書くきっかけになる</li>
  <li>ブログを書くモチベーションになる</li>
  <li>普段より多くの人に読んでもらえる</li>
  <li>他の人のブログを知る・読むきっかけになる</li>
</ul>

<h2 id="section">ブログを書くきっかけになる</h2>

<p>自分の場合、「これブログに書こうかなー」とネタだけ書き留めておいてあるのですが、面倒で＜下書き＞状態のまま保存されている記事がいくつかあります。Advent Calendarはそれを掃き出すいいきっかけとなります。例えばPHPについてブログを書こうかなと思っていることがあるのであれば、思い切ってPHP Advent Calendarに参加して書くきっかけとしちゃいましょう。</p>

<p>Advent Calendarは12月という時期もあり2013年を総括する良いきっかけでもあります。エンジニアであれば2013年の間に学んだ新しい技術、面白い技術、紹介したい技術を2013年総括の意味も込めて書いてみましょう。ブログに残すことにより自分が2013年に何を学んだのかを振り返る良いきっかけにもなりますし、「書く」ことにより自分自身の知識の整理にもなり良い事尽くしです。</p>

<h2 id="section-1">ブログを書くモチベーションになる</h2>

<p>ブログを書くモチベーションになるのもAdvent Calendarの良いところです。１人で書いているとブログを書こうと思い立ってもどうしても「別に後でいいか」「今度時間あるときに更新しようか」と放置気味になってしまうのが怠惰な人間の性（さが）であります。</p>

<p>しかしAdvent Calendarの場合はみんなでやっているので、「みんなも更新してるし俺も頑張るか」って気になります。あと更新する日付も事前に決定されているので「○○日までには記事を書いてアップデートしなきゃ！」というある意味締め切り的な役割もあります。</p>

<p>逆にこれを利用して、書くネタはないけどとりあえず参加だけポチっておいて＜更新しなきゃいけない状況＞を作ることでブログ記事を書くことができるって作戦もありかと思います。</p>

<p>あと<a href="http://dic.nicovideo.jp/a/%E9%A0%93%E6%8C%AB%E3%81%97%E3%81%9F%E6%8A%80%E8%A1%93%E7%B3%BB%E3%82%A2%E3%83%89%E3%83%99%E3%83%B3%E3%83%88%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%BC%E3%81%AE%E4%B8%80%E8%A6%A7(2013%E5%B9%B4)">こんな</a>のもネタ記事として存在していますが、Advent Calendarを書かない人の抑止力として働いてて悪くないネタ記事だと思ってます。「俺が記事更新しなかったから＜頓挫＞とか言われた！」なんてなりたくないですもんね。</p>

<h2 id="section-2">普段より多くの人に読んでもらえる</h2>

<p>これも良いことです。Advent Calendarの記事にたどり着く流れとしては下記のような可能性があるかと思います。</p>

<ol>
  <li>普段からのブログの読者</li>
  <li>Advent Calendarのサイトからたどり着く</li>
  <li>バズったAdvent Calendarから同じAdvent Calendarの別の記事を読みに行く</li>
</ol>

<p>普段ブログでリーチできる読者というのは1のみかと思います。例えばRSSでブログを購読しているとかTwitterでフォローしていてそこから記事にたどり着くとか。1の読者は普段からそのブログを読んでいるので、Advent Calendarとして書こうが書かまいがあまり影響はないと言えます。</p>

<p>しかしAdvent Calendarに書くことにより、普段ブログに訪れないであろう2や3の人までリーチできるのは良いことです。つまり、Advent Calendarというメディアを利用するということです。最新技術にアンテナ張っているエンジニアであれば、自分の興味ある技術のAdvent Calendarは全部とは言わずとも、それなりにチェックしているかと思います。これらのエンジニアは大手のAdvent Calendarサイト（<a href="http://www.adventar.org/">Adventar</a>とか<a href="http://qiita.com/advent-calendar">Advent Calendar (qiita)</a>）であればチェックしているかと思うのでそこからのブログの流入が見込めます。</p>

<p>また3のようにバズった記事からの流入の可能性も見込めますね。例えば下記の記事は技術界隈にとどまらず、多くの人に読まれたようです。</p>

<p><a href="http://blog.jugyo.org/post/70240698465">◯ックパッドの面接に落ちたことを社員の高◯さんに言いふらされた話</a> from <a href="http://www.adventar.org/calendars/252">闇 Advent Calendar 2013</a></p>

<p>この記事を読んだ人の中には「闇Advent Calendarにはこの記事の他にどんな闇があるのだろう？」と興味を持ち他の記事も読みに行ったのではないでしょうか。このように普段読まれない読者からもブログを読んでもらえてAdvent Calendarは素晴らしいです。</p>

<h2 id="section-3">他の人のブログを知る・読むきっかけになる</h2>

<p>他の人のブログを知ったり、読んだりするきっかけにもなるのも良いです。上記に書いたような普段からのブログ読者、あるいはバズった記事でないとなかなか新たなブログを知ったりするのは難しいです。自分も今回参加したAdvent Calendarのその他の記事を読んだのをきっかけにTwitterをフォローしたり、そこから同ブログの別の記事をディグったりしました。</p>

<p>わりとブログ上でのエンジニア有名人はAdvent Calendarに参加しているケースも多いので、PHPのカレンダーであればPHP界隈のエンジニア、フロントエンドのカレンダーであればフロントエンド界隈のエンジニア、GoのカレンダーであればGo界隈のエンジニアにどんな人がいるのかを知ることができます。例えばGoなんかは最近ホットになっている言語でもあるのでAdvent Calendarに参加しているエンジニアの方々をフォローしていれば、Go言語の最新動向もフォローできると思います。</p>

<h2 id="advent-calendar-1">Advent Calendarを終えて</h2>

<p>このようにAdvent Calendarはエンジニアにとって良い事尽くしですので、来年のAdvent Calendarも参加したいなーと考えている所存です。これを読んでいるエンジニアの方でAdvent Calendarに参加したことないという方は来年のカレンダーにチャレンジしてみてはいかがでしょうか？</p>

<h3 id="section-4">反省</h3>

<p>前半の記事は参加表明した後に当日になる前に準備をすることができたのでちゃんと日本時間で更新することができましたが、後半の方は日本との時差もあり日本時間で1日遅れての更新となってしまった記事がありました。それが今回の反省点。</p>
]]></content>
  </entry>
  

</feed>
