<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Hack Your Design!]]></title>
  <link href="http://blog.toshimaru.net/atom.xml" rel="self"/>
  <link href="http://blog.toshimaru.net/"/>
  <updated>2013-12-08T01:31:11+00:00</updated>
  <id>http://blog.toshimaru.net/</id>
  <author>
    <name><![CDATA[Toshimaru]]></name>
  </author>

  
  <entry>
    <title type="html"><![CDATA[PHP5.4のtrait機能を理解する]]></title>
    <link href="http://blog.toshimaru.net/php-trait/"/>
    <updated>2013-12-08T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/php-trait</id>
    <content type="html"><![CDATA[<p>この記事は<a href="http://www.adventar.org/calendars/101">PHP Advent Calendar 2013</a>の8日目の記事です。本エントリではphp5.4の注目機能の１つである<a href="http://php.net/manual/ja/language.oop5.traits.php">trait</a>をどう扱うべきかを書いてみようと思います。</p>

<h2 id="trait">Traitとは</h2>

<p>Traitとは継承関係と関係なく実装を再利用できる仕組みのことです<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup>。言い換えるならば、「多重継承」であったり「Mix-in」を可能にする仕組みと言えるでしょう。Rubyistの間ではMix-inの概念は当たり前のことでしょうが、PHP界隈ではTraitは新しい機能ということもあり浸透していない概念かと思います（Ruby以外にもTraitと似た機構はあるみたいですね<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup>）。</p>

<p>本エントリではPHPerの間では未だ聞き慣れないであろうTraitの概念を実コードとともに紹介してみようと思います。</p>

<h2 id="trait-1">Traitの特徴</h2>

<p>Traitの簡単な特徴は以下の通りです。</p>

<ul>
  <li>PHP5.4以降必須</li>
  <li>Trait自身のインスタンスを作成することはできない</li>
  <li>振る舞いを継承関係のような上下方向ではなく水平方向に定義可能</li>
</ul>

<h2 id="trait-2">Traitを使うと嬉しくなる状況</h2>

<p>ではTraitを使うべき状況、使うと嬉しい状況とはどんな状況でしょうか？　まずは下記を満たす実装を普通にPHPで書いてみます。</p>

<ul>
  <li>人間(<code>Human</code>): 「話す」「逃げる」などの基本行動が可能</li>
  <li>戦士(<code>Warrior</code>): 基本行動に加え「物理攻撃」が可能</li>
  <li>魔法使い(<code>Wizard</code>): 基本行動に加え「魔法攻撃」が可能</li>
</ul>

<p>結果、このようになりました。</p>

<script src="https://gist.github.com/toshimaru/00cc0dc16120976c7fcb.js"></script>

<p>基本行動可能な<code>Human</code>クラスがあってそれを継承した<code>Warrior</code>,<code>Wizard</code>がいて…。普通のコードかと思います。</p>

<h3 id="section">追加要件：「魔法戦士を追加したい！」</h3>

<p>こんな要望がきました。「魔法戦士も追加したいんだよねー！」　さて上記のような実装に魔法戦士を加えるとしたらどうなるでしょうか？</p>

<p>魔法も攻撃もできなきゃいけないから、まず<code>Warrior</code>を継承してその次に<code>Wizard</code>も継承して…と、ここで多重継承の問題が出てきますね。愚直に<code>Human</code>を継承した魔法戦士を作ってもいいのですが、同じコードを二度は書きたくないですよね。DRYに行きたいですよね、ね？</p>

<h3 id="trait-3">Traitを使ってみる</h3>

<p>そこでTraitの出番です。<code>trait</code>であれば振る舞いを水平方向に構成できちゃうんです。え？よくわからない？　コードを見てください。</p>

<script src="https://gist.github.com/toshimaru/ad5430fca181db62cd7a.js"></script>

<p>まずは<code>Attackable</code>、<code>Spellable</code>というトレイト、つまり「物理攻撃が可能である」「魔法攻撃が可能である」という特性を定義します。ここまでくればもう簡単。あとはそれを<code>WarriorWizard</code>クラス内で<code>use</code>してやるだけです。これで<code>WarriorWizard</code>は魔法も物理攻撃も可能になります。</p>

<p>ね？簡単でしょ？</p>

<h2 id="traittrait">今後のTrait事情―まだ来ないであろうTraitの波　</h2>

<p>今回紹介したTraitはフレームワークの設計を根本から変えうる素晴らしい機能なのですが、<a href="http://w3techs.com/technologies/details/pl-php/5/all">PHP5.4の使用率がまだ10%</a>なこと、まだまだTraitを使ったコード使用例が少ないこと、これらを考えるとTraitがPHPerに広く普及するにはあと2,3年はかかるのかな、と考えています。</p>

<p>CakePHP3では、PHP5.4が必須となり、<a href="http://www.engineyard.co.jp/blog/2013/cakephp3-preprepreview/">trait機能がうまく活用された設計</a>となっています。このフレームワークレベルでのTrait有効活用を機に、Traitを利用したナイスなコード、ひいてはPHP5.4の使用が今後増えていけばいいなと思っています。</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><a href="http://www.slideshare.net/tlync/trait">Trait とは? その使い道を考えてみる</a> <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>RubyだとMix-in、Scalaだとtrait、Perl6だとrole　にあたります。 <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bcコマンドで16進数変換]]></title>
    <link href="http://blog.toshimaru.net/bc-decimal-hex/"/>
    <updated>2013-12-05T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/bc-decimal-hex</id>
    <content type="html"><![CDATA[<p>パッと計算したいときにはよくコマンドラインを立ち上げて<code>bc</code>コマンドを使います。基本10進数を扱うのがメインなんですが、たまーに16進数とかも扱いたいときがあります。その方法をご紹介。</p>

<h2 id="section">基本</h2>

<p>基本は下記の２つの値を設定して10進数以外を扱うことができます。（初期値は10で設定されてます）</p>

<ul>
  <li><code>obase</code>: 出力したい進数を設定</li>
  <li><code>ibase</code>: 入力となる進数を設定</li>
</ul>

<h2 id="section-1">10進数→16進数</h2>

<p><code>obase</code>を設定すればOK.</p>

<pre><code>obase=16
255
FF
</code></pre>

<p>255 -&gt; FF です。</p>

<h2 id="section-2">16進数→10進数</h2>

<p>逆もいってみます。<code>ibase</code>を設定します。</p>

<pre><code>ibase=16
AA
170
</code></pre>

<p>AA -&gt; 170 です。</p>

<h2 id="section-3">2進数、8進数</h2>

<p>もちろん他にも2進数やら8進数やら設定次第でOKです。</p>

<pre><code>obase=2
255
11111111
</code></pre>

<p>255 -&gt; 11111111 です。</p>

<h3 id="section-4">参考</h3>

<ul>
  <li><a href="http://linux.just4fun.biz/%E9%80%86%E5%BC%95%E3%81%8DUNIX%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89/bc%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A716%E9%80%B2%E6%95%B0%E3%80%8110%E9%80%B2%E6%95%B0%E3%80%818%E9%80%B2%E6%95%B0%E3%80%812%E9%80%B2%E6%95%B0%E3%81%AE%E5%A4%89%E6%8F%9B%E3%83%BB%E8%A8%88%E7%AE%97%E3%82%92%E8%A1%8C%E3%81%86.html">bcコマンドで16進数、10進数、8進数、2進数の変換・計算を行う方法</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[旭川にある有名な動物園についてあなたが知るべきたった１つのこと]]></title>
    <link href="http://blog.toshimaru.net/one-thing-you-should-know-about-asahikawa/"/>
    <updated>2013-12-04T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/one-thing-you-should-know-about-asahikawa</id>
    <content type="html"><![CDATA[<font size="6">旭「川」動物園ではなく旭「山」動物園なのだ！</font>

<p></p>

<p>これ、北海道出身じゃない人の１０人中、８〜９人くらいは間違えてた。（ソースは俺）　こんな感じの会話をいつもする。</p>

<p>友「どこ出身？」<br />
僕「北海道だよー」<br />
友「へー、北海道のどこ？」<br />
僕「旭川だよー」<br />
友「あー、有名な動物園のあるとこ？」<br />
僕「そうそう！」<br />
友「旭「川」動物園だよね！」<br />
僕「旭「山」動物園ですっ！」</p>

<p>旭川の<strong>旭山</strong>にあるから旭山動物園なのです。でも旭<strong>川</strong>動物園と勘違いしている人が僕が思ったよりも多くいるみたいです…。最近はもう訂正するのもアレなので「旭<strong>川</strong>動物園」でもいいかなって思ってきました。</p>

<p>でもやっぱり旭川出身の道産子としては名前を間違えてほしくないのがホンネだったりするのですよ(´・ω・｀)</p>

<hr />

<p>以上、<a href="http://www.adventar.org/calendars/77">道民部 Advent Calendar 2013</a>、４日目の記事でした。</p>

<p>※写真は<a href="http://asahiyama.boo.jp/index.html">旭山動物園の動物写真集</a>からお借りしました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitのログから特定の文字列を含むコミットを採掘する]]></title>
    <link href="http://blog.toshimaru.net/git-log-p-s/"/>
    <updated>2013-12-02T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/git-log-p-s</id>
    <content type="html"><![CDATA[<p>「このコード書いたのは誰だ？」ってのは<code>git blame</code>からの<code>git show</code>でOKですが、多くのコミットを重ねている場合、<code>git blame</code>では「元々誰がどういう意図でこのコードを足したのか？」ってとこまでは負えなかったりします。そんなときはこんなgitコマンドを使えばOK.</p>

<pre><code>$ git log -p -S 'function shitty_function'
</code></pre>

<p>これで<code>shitty_function</code>というfunctionに関する最初から今にいたるまでのコミットをログから発掘できます。</p>

<h2 id="section">参考</h2>

<ul>
  <li><a href="http://blog.eiel.info/blog/2013/06/04/git-log-s/">このコード書いた誰だよ! そんな時の Git Log -S でもしてみよう</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPのプロパティをStrictに定義する]]></title>
    <link href="http://blog.toshimaru.net/php-force-property/"/>
    <updated>2013-12-01T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/php-force-property</id>
    <content type="html"><![CDATA[<p>本記事は<a href="http://www.adventar.org/calendars/101">PHP Advent Calendar 2013</a>一日目の記事として書きます。　現在僕しかカレンダーに参加していないようなのでお暇な方は是非参加してみてくださいね！</p>

<hr />

<p>PHPといえばそのユルさ・ルーズさが嫌われる１つの原因ですよね（と同時に好かれる理由でもある）。例えば<a href="http://www.php.net/manual/ja/language.oop5.properties.php">プロパティ</a>に関してこんなユルさがあります。</p>

<script src="https://gist.github.com/toshimaru/6dc602b5ce5db54f8db0.js"></script>

<p>まずは1を見てください。<code>public</code>なプロパティには普通にアクセスできて、<code>private</code>なプロパティにはアクセスできない。普通ですね。</p>

<p>次に2です。未定義の<code>hoge</code>プロパティにアクセスしてみます。<code>Undefined property</code>で怒られます。ここもOK.</p>

<p>次に3。未定義の<code>hoge</code>プロパティを外部からセットしてみます。エラーは起こりません。この辺から少しおかしい。その後、もう一度2でやったことをやってみます。今度はうまくいきます（なんと！）。</p>

<p>「え、じゃあプロパティ外部から自由に定義し放題じゃないですか」と思ったあなた、その通り、PHPでは自由にプロパティを外部から弄くり回せちゃうわけです。4でやっているように。</p>

<h2 id="strict">解決策 (Strictなプロパティ)</h2>

<p>実際のところもうちょっと厳密にプロパティを制御したいですよね。外部からプロパティを自由に操作してほしくはない。プロパティを強制することはできないだろうか、ということで出来上がったのがこちら。</p>

<script src="https://gist.github.com/toshimaru/4721470.js"></script>

<p>まず注目してもらいたいのは、<code>val</code>という変数を<code>private</code>として宣言しているところです。これにより<code>val</code>変数はクラスに隠蔽されています。</p>

<p>ではどう<code>val</code>変数にアクセスするのか？　通常であれば<code>getVal()</code>,<code>setVal()</code>なんていうアクセッサーを用意しちゃうところですが、ここでは<code>__get</code>, <code>__set</code>の<a href="http://php.net/manual/ja/language.oop5.magic.php">マジックメソッド</a>を利用することで普遍的に実装しています。</p>

<p>これにより最初に紹介した例の3,4のような自由にプロパティを外部から定義できちゃうようなことは防げます。小さい実装のわりにはこれで得られるメリットが大きく、我ながら素敵な実装と思うんですが、どうでしょう？</p>

<hr />

<p>次回のPHP Advent CalendarはPHP5.4について書きたいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github+hubコマンドで快適なGithubライフを営む]]></title>
    <link href="http://blog.toshimaru.net/github-and-hub/"/>
    <updated>2013-11-28T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/github-and-hub</id>
    <content type="html"><![CDATA[<p><code>github</code>で開発を進めている場合、<a href="https://github.com/github/hub">hubコマンド</a>の利用が素敵な感じです。</p>

<h2 id="section">インストール</h2>

<p>Macを使っていると<code>brew</code>使って<code>hub</code>コマンドが一発で入ります。</p>

<pre><code>$ brew install hub
</code></pre>

<h2 id="github">gitのエイリアスをhubコマンドで拡張</h2>

<p>ただこのままだとhubコマンドはgitコマンドと分離しており少し不便なので、gitコマンドをhubコマンドで置き換えてやりましょう。もちろん既存のgitコマンドに悪影響を与えるようなことはありません。やり方は下記の１行を<code>.zshrc</code>なり<code>.bashrc</code>に追記すればOK.</p>

<pre><code>eval "$(hub alias -s)"
</code></pre>

<h2 id="githubclone">githubからのcloneが楽に</h2>

<p>hubコマンドの導入によりGithubからのcloneが楽になります。下記のように<code>{user}/{repo}</code>でcloneできます。</p>

<pre><code>$ git clone toshimaru/dotfiles
</code></pre>

<h2 id="github-1">githubページを開く</h2>

<p>自分の場合、GithubにpushしたあとにGithubのGUI上でDiffであったり諸々の状態を確認したいことがよくあります。<code>hub</code>コマンドであれば一発でいけます。</p>

<pre><code>$ git browse
</code></pre>

<p>規定のブラウザで当該Githubページが開きます。</p>

<h2 id="section-1">その他</h2>

<p>他にもpull-requestをコマンドから簡単に送れるようになったり嬉しいことがたくさんあります。詳しくは<a href="http://hub.github.com/">公式hubページ</a>を見てください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【翻訳】クソ酷いウェブサイト]]></title>
    <link href="http://blog.toshimaru.net/motherfucking-website/"/>
    <updated>2013-11-24T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/motherfucking-website</id>
    <content type="html"><![CDATA[<p>最近のエントリでクソクソ言ってたらHackers Newsから<a href="http://motherfuckingwebsite.com/">Motherfucking Website</a>というクソ記事が流れてきたので翻訳してみた。</p>

<p><a href="http://toshimaru.net/motherfuckingwebsite/">クソ酷いウェブサイト</a></p>

<iframe src="http://toshimaru.net/motherfuckingwebsite/"></iframe>

<h2 id="section">あわせて読みたい</h2>

<p><a href="http://justinjackson.ca/words_japan.html">これはウェブページです｡</a></p>

<h2 id="section-1">翻訳後記</h2>

<p>余談になるが、今回の記事は mother fucker, fucking, son-of-bitch などかなりのswear wordsを含むのでその勢いを消さずに翻訳することに努めた。日本語だとあんまりこのような罵倒語にはバリエーションがないのでなかなか難しかったが、原文の勢いはそれなりに保てたように思う。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Analyticsにみるブログ記事のバズり方の流れ]]></title>
    <link href="http://blog.toshimaru.net/buzz-flow/"/>
    <updated>2013-11-23T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/buzz-flow</id>
    <content type="html"><![CDATA[<p><a href="/cool-ui/">先日のブログ記事</a>がバズりました。現時点でおおよそtweet数1200、いいね数1000、はてブ数900となっています。はてブ数500以上もらったのは始めての経験でGoogle Analyticsを興味深く眺めてたんですが、面白い傾向が見えたので個人的メモの意味もこめて書いてみます。</p>

<h2 id="section">バズによるページビュー変化</h2>

<p>まずは今月のページビューのチャート。</p>

<p><img src="/images/posts/buzz/chart.png" alt="pageview chart" /></p>

<p>今までのビュー数がアホみたいにみえますね（笑）。恐るべしバズ効果。</p>

<h2 id="section-1">流入元</h2>

<p>これだけ各種SNSでシェアされたので、次はどこからの流入が最も多かったのかが気になりました。</p>

<p><img src="/images/posts/buzz/sources.png" alt="流入元" /></p>

<p>なんと一番はTwitterでもFacebookでもはてなでもなくGunosyでした！　いかにみんながGunosyで情報を消化しているかがわかりますね。</p>

<h2 id="gunosytwitterfacebook">Gunosy砲、Twitter砲、Facebook砲、はてブ砲それぞれの波及順序</h2>

<p>今回Gunosy砲、Twitter砲、Facebook砲、はてブ砲全てを食らったわけですがどういう順番で砲撃されるかを見てみました。</p>

<p><img src="/images/posts/buzz/compare2.png" alt="比較２" /></p>

<ul>
  <li>青：全体</li>
  <li>オレンジ：Gunosy</li>
  <li>緑：はてな</li>
  <li>紫：Twitter</li>
  <li>黄：Facebook</li>
</ul>

<p><img src="/images/posts/buzz/compare.png" alt="比較１" /></p>

<p>なんとなく感じてた自分の感覚値と一緒の感じでした。順番としてはこんな感じです。</p>

<ol>
  <li>Twitter/Facebookでシェアされ始める。と同時にはてなブックマークされ始める。</li>
  <li>はてな新着エントリ入り→ホットエントリ入り→はてなからのアクセス数が一気に増える</li>
  <li>Twitterのシェアがどんどん拡大、アクセス数も増える</li>
  <li>Twitter/はてなの流入が落ち着き始める頃に記事がGunosyに取り上げられる→Gunosyから大量アクセス</li>
  <li>1-4の間、Facebookからはじわじわとアクセス数が上がっている</li>
</ol>

<p>Gunosyに取り上げられた日の翌日にはアクセス数が落ち着き始める感じでしょうか。</p>

<h2 id="section-2">軽く分析</h2>

<p>FBいいね数、Tweet数はだいたい同じにもかかわらずFacebookからの流入のほうがTwitterよりも少ないのは面白かった。つまりFacebookのほうが共有されたとしても波及効果はTwitterよりも低いということになりますね。</p>

<p>長い記事だったせいか読者傾向に大きな違いは見られなかったです。みんな５分くらいは滞在して読んでくれたみたいです。</p>

<p>あとGunosyからのアクセス数が一番多かったのは驚きでした。自分もニュースソースのほとんどはGunosyから見るようにしているのですが、みなさんもそうなんですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「UIの進化を止めるうんこユーザーに我々はどう立ち向かうべきか」後記]]></title>
    <link href="http://blog.toshimaru.net/cool-ui-after/"/>
    <updated>2013-11-22T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/cool-ui-after</id>
    <content type="html"><![CDATA[<p><a href="/cool-ui/">UIの進化を止めるうんこユーザーに我々はどう立ち向かうべきか</a>が予想以上にたくさんの人に読んでもらった。もともと件の記事の対象読者は開発者・デザイナーなどの「中の人」を想定しており、エントリタイトルの「我々」というのももちろん、僕のようなWEB開発者を含む「中の人」のことを指してる。それが一般ユーザー（件のエントリで言うところの「クソユーザー」を含む）まで広がり読んでいただいたようで、大変ありがたい。感謝！</p>

<p>お陰で記事に関して読んだ人から様々な反応をいただくことができた。せっかくなので後記として残しておく。（文章は砕け気味な）</p>

<h2 id="ui">誰のためのUIか？</h2>

<p>答えはもちろんユーザー。「クソユーザー」とか言ってゴメン。あれは意図的に悪意を持たせたんだ。だからタイトルは「クソ」ユーザーじゃなくてあえて「うんこ」ユーザーと表現を緩めてみたんだ。緩めたといってもケツを緩めたとかそういうわ(以下略</p>

<p>では次に誰のための「UIの進化」か？　もちろんユーザー。破壊的な変更であれ少しの変更であれ、最終帰着点に「より良いユーザー体験（UX）を提供する」ことがなきゃダメだと思う。</p>

<p>そうでなければその変更は運営の「エゴ」であり、（また汚い言葉で気が引けるが）「オナニー」だ。アートであればオナニー上等、それで良い。しかしニコ動の場合そうはいかない。BtoCビジネスで、ユーザーのお金でサービスが成り立っている以上、最後に見るべき・聞くべきはユーザーの声だ。（そしてユーザーが離れてしまった場合、結局困るのはドワンゴだしね）</p>

<p>あの記事では開発者やデザイナーの「オナニー」を推奨する意図はないことをここで強調しておく。</p>

<h2 id="section">ニコニコ動画に対する僕の態度</h2>

<p>「ユーザーDisに見せかけたニコニコDis」とか言われたんだけど、あの記事での僕のスタンスとしてはニコニコ動画は「応援している」である。</p>

<p>よく読めばわかると思うが、あの記事ではニコ動のDisもしてるし同時に支持もしている。現状のUIを「ファット」と表現し変更する必要があることを示した反面、「ニコ動は「本当にクール」なUIを今後も自信を持って提供していくべき」と結んで変更を促している。</p>

<p>僕はどちらかというと変更に許容的なアーリーアダプターの部類で、新しいものは良くなるのであればどんどん入れて欲しい、というタイプだ。だからニコ動の現状のUIを「クソ」だと思ってるからこそ（実際はそこまでヒドイとは思ってないが）、良いUI変更は期待しているしどんどん行っていって欲しい。（僕はニコ動はβ時代からの会員だし、今でも頻繁に見ているよ！）</p>

<h2 id="section-1">まさらっきさんについて</h2>

<p>同じエンジニアとして発言をパプリックに表明したい気持ちもわかるし、「最高にクール」なUIを拒否されたことに対して激おこになる気持ちもわかる。けど「殺す」とかは表現として適切ではないと思う。自分も実経験として不用意なネットの発言で会社に迷惑かけたという苦い思ひ出がある。所属会社を公開しているのであればなおさら発言には自覚的になるべきでは。</p>

<p>という大体皆さんと一緒な一般論。</p>

<h2 id="section-2">今回のニコニコ静画の変更について</h2>

<p>「ニコニコ動画のUIの話してるけど今回は静画のUIの話だよ？」ということについて。</p>

<p>僕はニコニコ静画は全然使わないので、今回の運営が行った変更については全く知らない。僕が知っているのは<a href="http://togetter.com/li/590729">@masarakkiさんのTwitter上でのやり取り</a>だけで、実際にニコニコ運営陣がニコニコ静画の何をどう変更したかまでは知らない。知っているのは「ユーザーの不満の声によってどうやらUIをロールバックさせたらしい」ということのみ。よって静画のUI変更については僕は何も言えないし、何も言う権利はない。</p>

<h2 id="ui-1">結局お前の言う「クール」なUIってなんなのよ？</h2>

<p>僕はUIの専門家でもなければデザイナーでもないので、この「クール」なUIは何か、ということは明言は避けた。そして予想通りそこをツッコまれた。</p>

<p>この辺の話は僕が書くべきではないと思うし、書いても素人目線の「クソ」つまらないエントリになることは見え見えだった。だから書かなかった。でもせっかくなのでこれを機に「僕が思うクールな最強(笑)のUI」を別エントリとしてまとめてみようかと考えている。まだ自分の中でうまく言語化できない部分が多いのでいつになるかはわからない。なのでこれ以上はここでは言えない。</p>

<p>あと逆に聞きたいのだけど、UI/UXの専門家さんが思う「クール」なUIってなんなんだろう？　「クール」っていう言葉が気に入らないなら単純に「良い」と思うUIでいい。そのへんをどう定義するか、そもそも定義可能なのか？　すごく興味があるし知りたい。</p>

<h2 id="windows-ui">Windows UI</h2>

<p>「クソUIってWindowsのUIのこと？」ってコメントをいくつか見た。</p>

<p>Windows 8のMetroUI化とMS Officeのリボン化の２つは格好のUI「劇的変化」の例だったんだけど、記事をあれ以上冗長にしたくなかったからそのへんの話は省いた。個人的にはMetroUIはアリ、リボンはナシって感じ。それ以上は言及しない。</p>

<h2 id="section-3">日本語はクールじゃない？</h2>

<p>「ジャパニーズ・デザイン」として日本語にも言及した。「日本語クールじゃないと思ってんの？」って思われたようだが、そんなことはない。日本語は＜言語＞として表現に富む美しい言語だと思うし、＜文字＞としても書道という素晴らしい芸術があるように美しい文字表現が可能だ。</p>

<p>ただWEBデザインに限定してみるとどうだろう？　英語圏のようにWEBフォントの採用は日本語ではなかなかしにくい。今流行りのフラットデザインと日本語を合わせたときもややボテッとした印象になってしまいクールじゃない。さっき美しいと言った書道のような文字も画像じゃないと十分に表現することは難しいだろう。</p>

<p>このようにWEBでの利用シーンを考えると表現の幅が「クール」じゃない方向に限られるかなとは思ってる。</p>

<h2 id="section-4">終わりに</h2>

<p>余談になるが本ブログタイトルの「Hack Your Design!」というタイトルは、今ある既成のデザイン、もっといえば僕たちがもっている既成の価値観・パラダイムを組み替えて（ハックして）いこーぜ！という想いの元付けたタイトルである。エクスクラメーションマーク（！）は「破壊的変更」の意味だ（Ruby書く人ならわかるよね？）。</p>

<p>あの記事を書いた後、開発者、デザイナー、UX専門家、ニコ動を使うユーザー、ニコ動を使わないユーザー、いろいろな人から反応をもらえた。これをきっかけに皆の持ってるUIの価値観を少しでも「Hack」することができたのならば、それは幸いだ。</p>

<h3 id="section-5">更新情報</h3>

<ul>
  <li>「まさらっきさんについて」「日本語はクールじゃない？」を追加（2013/11/23 14:15）</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Canvas+Chart.jsでグラフを描画する]]></title>
    <link href="http://blog.toshimaru.net/chart-js/"/>
    <updated>2013-11-21T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/chart-js</id>
    <content type="html"><![CDATA[<p><a href="/cool-ui/">昨日のエントリ</a>で実験的に記事内のグラフを画像ではなくJSでCanvas要素を使って描画してみました。そのときに使用した<a href="http://www.chartjs.org/">Chart.js</a>がなかなかいい感じだったので紹介。</p>

<h2 id="section">導入</h2>

<p>まずは<code>Chart.js</code>をincludeしてください。</p>

<pre><code>&lt;script src="Chart.js"&gt;&lt;/script&gt;
</code></pre>

<h2 id="section-1">線グラフ</h2>

<p>まずは線グラフ。</p>

<canvas id="line" width="300"></canvas>

<script src="https://gist.github.com/toshimaru/e9d483cdb65c54d87e8d.js"></script>

<h2 id="section-2">棒グラフ</h2>

<p>次は棒。</p>

<canvas id="bar" width="300"></canvas>

<script src="https://gist.github.com/toshimaru/14e8e9ab91d48b71673c.js"></script>

<h2 id="section-3">レーダーチャート</h2>

<p>次はレーダーチャート。幅の制限により少し小さくなってしまいました。</p>

<canvas id="radar" width="300"></canvas>

<script src="https://gist.github.com/toshimaru/136570ccc4f90049096a.js"></script>

<h2 id="section-4">円グラフ</h2>

<p>最期に円グラフ。</p>

<canvas id="pie" width="300"></canvas>

<script src="https://gist.github.com/toshimaru/2fb67c25d80683e4f1e2.js"></script>

<script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/Chart.js/0.2.0/Chart.min.js"></script>

<script type="text/javascript">
(function(){
  // line
  var ctx = document.getElementById("line").getContext("2d");
  var data = {
    labels : ["1月", "2月", "3月", "4月", "5月"],
    datasets : [
      {
        fillColor : "rgba(220,220,220,0.5)",
        strokeColor : "rgba(220,220,220,1)",
        data : [65,59,90,81,56]
      },
      {
        fillColor : "rgba(151,187,205,0.5)",
        strokeColor : "rgba(151,187,205,1)",
        data : [28,48,40,19,100]
      }
    ]
  }
  new Chart(ctx).Line(data);

  // bar
  var ctx = document.getElementById("bar").getContext("2d");
  new Chart(ctx).Bar(data);

  var ctx = document.getElementById("radar").getContext("2d");
  new Chart(ctx).Radar(data);

  var ctx = document.getElementById("pie").getContext("2d");
  var data = [
    {
      value: 30,
      color:"#F38630"
    },
    {
      value : 50,
      color : "#E0E4CC"
    },
    {
      value : 100,
      color : "#69D2E7"
    }
  ]
  new Chart(ctx).Pie(data);
})();
</script>

<h2 id="section-5">その他</h2>
<p>もっと細かいチャートの設定がしたければ<code>data</code>のあとにオプション引数を取ることもできます。その他のグラフ、細かいオプションに関しては<a href="http://www.chartjs.org/docs/">公式ドキュメント</a>を参考にしてください。</p>

<p>あと細かいところですがチャートを描画するときにアニメーションで描画されてます。気付かなかったかもなので一応。</p>

<h2 id="section-6">課題</h2>

<p>見てわかるようにレスポンシブデザインに対応しておりません。なのでとりあえずのところ現在はwidthを300に固定することにしています（なのでグラフが小さくなっております）。これに関しては<a href="https://github.com/nnnick/Chart.js/issues/56">Github Issues</a>で現在も議論されておりますがスマートな解決法は無いので、公式のレスポンシブデザイン対応が期待されます。</p>

<h3 id="section-7">参考</h3>

<p><a href="http://startapp.jp/2013/07/21/how-to-create-flat-chart.html">絶対まねしたい！Chart.jsを使ってフラットデザインぽいグラフを作る方法</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIの進化を止めるうんこユーザーに我々はどう立ち向かうべきか]]></title>
    <link href="http://blog.toshimaru.net/cool-ui/"/>
    <updated>2013-11-20T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/cool-ui</id>
    <content type="html"><![CDATA[<script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/Chart.js/0.2.0/Chart.min.js"></script>

<p><a href="http://togetter.com/li/590729">「基本的に運営側がすることが正しいんですよ Webの世界ってそういう論理で動いてるんですよ」理論</a></p>

<p>実はここで言われている<a href="https://twitter.com/masarakki">@masarakki</a>さんの意見はすごくわかる。「最高にクール」なUIがクソユーザー（便宜上、UIの良さがわからないユーザーを本エントリではそう呼ぶ）によって阻止されるのは中の人としては決して喜ばしいことではない。</p>

<h2 id="ui">ユーザーは「最高にクールなUI」がわかるか？</h2>

<p>まずこの問いから始めたい。一般ユーザーは「最高にクール」なUIがわかるか？</p>

<p>答えはNOだ。彼らは「使いやすい」UIはわかっても「クール」なUIはわからない。そして「使いやすい」というのは結局各人の主観に依るものなので、この「使いやすい」UIというのは参考にはできても信用はできないものである。</p>

<p>この話を読んで真っ先に思い出した１つの話がある。</p>

<blockquote class="twitter-tweet"><p>フラットデザインや新機種が評判どうか、というのはAppleにとっては意味が無い。Appleは消費者や開発者の意見を聞かない。なぜなら消費者というのは自分たちが何を欲しがっているのか理解していないため、聞いても意味が無いから（だからAppleではユーザビリティテストをしない）。</p>&mdash; Hak Matsuda (@hak) <a href="https://twitter.com/hak/statuses/383983878186094592">September 28, 2013</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>iOS7が紹介されてすぐはiPhone開発者・デザイナーから不満の声をよく聞いた。しかしiOS7がリリースされ実際にアップデートしたユーザーの話を聞いてみると、思ったよりも不満の声は聞かない。むしろ「使い始めてみるとiOS6のデザインが古臭く見える」くらいらしいのだ<sup id="fnref:ios7"><a href="#fn:ios7" class="footnote">1</a></sup>。結局、iOS7の不満の声はユーザーのiOS7への「慣れ」によって解決されてしまう問題だったのだ。</p>

<p>同時に上の話は当然のようにも思う。なぜならAppleはiPhoneで「未来」のUIを提供しているからだ。そのUIは未だユーザー達が体験したことのないUIであり、ユーザーの想像力の及ばないUIだ。Appleにとってユーザーは「何を欲しがっているのか理解していない」クソなのである。なのでAppleがユーザーの声を聞く意味は無い。</p>

<p>そういう意味において「基本的に運営側がすることが正しいんですよ」理論はあながち間違っていない。</p>

<h2 id="ui-1">「UIを破壊していく」という行為</h2>

<p>ユーザーの声を第一価値基準に置いてしまうとUIの破壊的変更は行えない。なぜなら旧UIと新UIの２つがあったときにクソユーザーが肯定するのは当然「慣れ」ている旧UIだからだ。この事例の典型的な例が<a href="http://www.itmedia.co.jp/news/articles/1304/02/news033.html">CookpadのiPhone UIリニューアル</a>である。</p>

<p>「開発チームにはユーザーエクスペリエンス（UX）の専門家を入れ、ユーザーインタビューを重ねるなど、ユーザー目線に立った設計を重視。」とあるのでUX的観点でアプリは確実に良くなっているはずである。ただクックパッドチームにとって想定外だったのは「慣れ」を第一価値基準に置くクックパッドユーザー、クソBBAたちの存在である。結果的に彼女らからとんでもないレビュー１スター攻撃をくらってしまった。</p>

<p>しかしこのようなクソユーザーの声ばかりに耳を傾けていてはいけない。さもなければUIの進化は止まる。UIの進化のためにはあるタイミングにおけるUIの破壊行為が不可欠だ。UI破壊のアプローチとして以下の２つが取りうる。</p>

<ol>
  <li>漸進的変化: 徐々にUIに変化を加えていくアプローチ</li>
  <li>劇的変化: UIをフルスクラッチで再構築するアプローチ</li>
</ol>

<h3 id="section">漸進的変化</h3>

<p>前者の場合のメリットとしてはユーザーの不満の声を極力少なくすることができる。ユーザーに気づかせない、あるいは「あれ、いつの間にかここ変わってる？」と思われるくらいの変更に留めておく。この変更の例としてはGoogleの検索結果画面が挙げられる。</p>

<p>Googleの検索結果は微細なデザインが変わっているとはいえ、本質的なデザインは何一つ変わっていない。ここに2001年のGoogleの検索結果画面がある。</p>

<p><img src="/images/posts/ui/google.png" alt="google" /></p>

<p>Googleのロゴが左上にあって、その右に検索フォームと検索ボタンがあり、その下に検索結果がある。本質的なUIとしては何も変わっていないのがわかるはずだ。</p>

<p>この変化の仕方のデメリットとしては大々的なUI破壊ができないということだ。具体的には現在のUIをフルフラットUIで作りなおそう、といったことはできない。</p>

<h3 id="section-1">劇的変化</h3>

<p>後者はAppleがiOS6をiOS7にアップデートしたときのような劇的な変化、Apple的アプローチだ。メリットとしてはUIをコンセプトレベルで作り変えることができる。フルフラットUIに変更しようとか、3カラムだったデザインを1カラムのレスポンシブデザインに作り変えようとか。</p>

<p>デメリットとしては上記に書いたように旧UIに「慣れ」たユーザーからの不満の声が上がることだ。新UIに全く満足できないユーザーが出てきた場合の最悪のシナリオとして、既存ユーザーのサービス離れも起こりえる。</p>

<p>逆に言うとサービス提供者としてはその最悪のシナリオも想定しておく必要があるだろう。UIをロールバックさせるのか、クソユーザーの不満の声を聞きつつ新UIをアップデートしていくのか、不満の声を無視してサービスの提供を続けていくのか。</p>

<h2 id="ui-2">何が「クール」なUIなのか</h2>

<p>ところで「クール」なUIというのはどういったUIなんだろうか。たとえ運営が「最高にクール」なUIだと信じこんでいたとしても本質的に「クール」でなければユーザーは離れていくだけだろう。クールなUI、私は「慣れとともにUX満足度が向上する」UIだと思っている<sup id="fnref:ui"><a href="#fn:ui" class="footnote">2</a></sup>。グラフに表すとこのようになる。</p>

<canvas id="myChart1" width="300" height="200"></canvas>

<script type="text/javascript">
(function(){
var ctx = document.getElementById("myChart1").getContext("2d");
var data = {
  labels : ["時間の経過", ""],
  datasets : [
    {
      fillColor : "rgba(106,178,202,0.5)",
      strokeColor : "rgba(150,150,150,1)",
      pointColor : "rgba(150,150,150,1)",
      pointStrokeColor : "#fff",
      data : [20,100]
    }
  ]
};
var options = {
  scaleOverride : true,
  scaleSteps : 10,
  scaleStepWidth : 10,
  scaleStartValue : 0
};
new Chart(ctx).Line(data,options);
})();
</script>

<p>横軸は時間の経過、縦軸はUXの満足度を表している。時間の経過とともにUIに「慣れ」ることで、UXも向上していく。良いUIを提供できればこのような満足度の曲線を描くことだろう。</p>

<p>一方悪いUIを提供した場合の曲線はどうなるか。</p>

<canvas id="myChart2" width="300" height="200"></canvas>

<script type="text/javascript">
(function(){
var ctx = document.getElementById("myChart2").getContext("2d");
var data = {
  labels : ["時間の経過", ""],
  datasets : [
    {
      fillColor : "rgba(106,178,202,0.5)",
      strokeColor : "rgba(150,150,150,1)",
      pointColor : "rgba(150,150,150,1)",
      pointStrokeColor : "#fff",
      data : [20,40]
    }
  ]
};
var options = {
  scaleOverride : true,
  scaleSteps : 10,
  scaleStepWidth : 10,
  scaleStartValue : 0
};
new Chart(ctx).Line(data,options);
})();
</script>

<p>たとえ時間の経過とともにユーザーがUIに「慣れ」たとしてもUXはほとんど向上しない。このダメなUIの例としては楽天の各種サービスが挙げられる。楽天のUIのクソさは単純に慣れとかそれ以前の問題だ。いくら使い込もうともUXは上がらない。せいぜい操作を繰り返す内にナビゲーション・リンクの位置を覚えて操作が前より早くなる程度だ。</p>

<p>破壊的なUI変更を行う場合、サービス運営者は基本的に上曲線のようなユーザーの「慣れ」とともにUXが向上するようなUIを目指すべきである<sup id="fnref:nice-ui"><a href="#fn:nice-ui" class="footnote">3</a></sup>。</p>

<h2 id="section-2">「ジャパニーズ・デザイン」の限界</h2>

<p>日本のサービスではヒットしていても欧米と比較してUIがイケていないケースをよく見る。これは日本のデザイン業界が抱える根源的な問題を浮き上がらせている。</p>

<ul>
  <li><a href="http://thebridge.jp/2013/11/why-japanese-web-design-is-so-different">日本のウェブデザインはなぜこんなにも世界と違うのか？</a> (<a href="http://randomwire.com/why-japanese-web-design-is-so-different/">原文</a>)</li>
</ul>

<p>上記事では文化的、歴史的観点から日本のデザインがダサくならざるを得ない状況を述べている。日本人は絵だけでは満足できず文字が必要なこと。日本語という言語特性によりタイポグラフィの表現が乏しいこと（WEBフォントが扱えない）。日本語という文字自体がクールじゃないこと。などなど。</p>

<p><img src="/images/posts/ui/japanese.png" alt="japanese is uncool" /></p>

<p>（via. <a href="http://www.slideshare.net/yuudaitachibana/creators-meetup-8">流行に乗っていいの？フラットデザインの落とし穴</a>）</p>

<p>このような記事を読むと日本という国の文化・社会そのものがUIをクールじゃない方向へと規定しているのではないかとも思う。</p>

<h2 id="section-3">ニコ動はどうすべきか？</h2>

<p>話が飛んだが本来のニコ動の話に戻ってニコ動はどうすべきなのかを私なりに考えてみる。私ならまずはファットなUIをスリムにするところから考え始めるだろう。つまり何の要素を加えるか、または何を変更するかといった足し算ではなく、何の要素を削るかの引き算の発想で始めるのである。</p>

<p>ニコニコ動画に限っていうと、ニコニコ動画のコアな機能は「動画＆コメントを観る」ことと「動画にコメントをする」ことの２つだけだと私は考える。それ以外の機能に関するUIは削るor目立たなくさせて良いだろう。お手本としてはFuluやNetflixが良いだろう。基本は動画視聴サービス。動画を視聴させることに徹底的にUIをフォーカスさせる。ニコニコ動画は動画視聴＋コメント閲覧にフォーカスしたUI作りを考えてスリム化していけばよい。</p>

<p>と、ここまで来た時点でユーザーの不満が噴出することは見え見えである。というのもニコニコ動画というサービス自体がファットな機能に支えられており、ユーザーのニコニコ動画の使い方・楽しみ方も多種多様化してしまっているからだ。コア機能以外を引き算した時点で、その機能を愛用していたユーザーは激おこぷんぷん丸である。</p>

<p>ここでUI変更のディレンマが発生する。「ファットなUIをスリムにしたい」という気持ちと「できるだけ多くのユーザーの声に応えたい」気持ちの間で揺れてしまう。ただ上述したようにクソユーザーにはクールなUIはわからないのだ。そしてもう１つ重要なこととして、<a href="http://fladdict.net/blog/2013/08/client-user-request.html">顧客やユーザーの要望に全て対応すると、アプリは99%破綻する</a>ことも忘れてはならない。</p>

<p>つまり何を言いたいかというと、結局ニコ動はどんなUI変更やっても不満は少なからず絶対来るのだからそんなのいちいち気にするな、ということである。本当に「最高にクール」なUIであれば、慣れとともにユーザー・エクスペリエンスは向上するんだよ。お前らが考えた「最高にクール」なUIだろうが。というかユーザーの声くらいでロールバックしてしまうような変更なら最初からするな、ということである。</p>

<h2 id="section-4">まとめ</h2>

<p>かなり内容が発散してしまったが、無理やりまとめるとこんな感じだ。</p>

<ul>
  <li>UIに対するユーザーの声は「参考」であって「正解」ではない</li>
  <li>UIの進化のためにはユーザーの声を顧みない破壊的変更が必要である</li>
  <li>「本当にクール」なUIならばUXは「慣れ」とともに向上するはずである</li>
  <li>ニコ動は「本当にクール」なUIを今後も自信を持って提供していくべき</li>
</ul>

<h3 id="section-5">追記</h3>

<ul>
  <li>この記事の反応を受けて<a href="/cool-ui-after/">後記</a>を書きました。（2013/11/22　18:05）</li>
</ul>

<div class="footnotes">
  <ol>
    <li id="fn:ios7">
      <p><a href="http://rebuild.fm/21/">Rebuild: 21: On the Launch of iPhone 5s and iOS 7 (Naoya Ito.)</a>　私はちなみに現時点でiOS6を使用。あと私はAppleは好きですがApple信者ではありません。 <a href="#fnref:ios7" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:ui">
      <p>UIとUXははっきり区別すべきものである。詳しくはこちらを参照されたし。<a href="http://blog.btrax.com/jp/2012/09/10/what_is_ux/">「ユーザーエクスペリエンスとは何か？」【インタビュー】ホワイトハウスも注目のUXデザイナーJanice Fraser氏（前編）</a> <a href="#fnref:ui" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:nice-ui">
      <p>では何が「慣れとともにUX満足度が向上する」UIなのかという話になるが、私はUI/UXの専門家ではないのでそこは専門家に譲るとする。 <a href="#fnref:nice-ui" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rakeタスクにエイリアスを付ける]]></title>
    <link href="http://blog.toshimaru.net/rake-alias/"/>
    <updated>2013-11-17T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/rake-alias</id>
    <content type="html"><![CDATA[<p>RubyのRakeタスクにエイリアス付けたいときってありません？</p>

<p>僕はあります。<code>rake create</code>なんていうタスクがあったとしたら、何らかの手癖のせいで<code>rake new</code>とか打っちゃうことがあるんですよ。</p>

<p>そういうときは<code>alias_task</code>なんていう関数を作ってやって、タスク名に別のエイリアス名を割り当ててやればOK。具体的にはこんな感じです。</p>

<pre><code>def alias_task(tasks)
    tasks.each do |new_name, old_name|
        task new_name, [*Rake.application[old_name].arg_names] =&gt; [old_name]
    end
end

alias_task [
    [:new, :create],
    [:dc,  :db_create]
]
</code></pre>

<p>ここでは</p>

<ul>
  <li><code>create</code>タスクに<code>new</code>というエイリアス名を</li>
  <li><code>db_create</code>タスクに<code>dc</code>というエイリアス名を</li>
</ul>

<p>割り当てています。</p>

<h3 id="section">参考</h3>
<ul>
  <li><a href="http://stackoverflow.com/questions/7656541/the-alias-of-task-name-in-rake">The alias of task name in rake</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jekyllでgit pushをフックしてGithubPageへ自動デプロイするようにした]]></title>
    <link href="http://blog.toshimaru.net/autodeploy-jekyll/"/>
    <updated>2013-11-15T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/autodeploy-jekyll</id>
    <content type="html"><![CDATA[<p>本ブログはJekyllを使って構築しているのですが<code>git push</code>したときにTravis-CIと連携してTravis上でビルドしてGithub Pageへとデプロイするように変更してみました。作業にあたっては下記ブログを参考にさせていただきました。</p>

<p><a href="http://pchw.github.io/blog/2013/06/27/octopress-travis/">OctopressとTravis CIを連携させてBlog生成を自動にする</a></p>

<p>上手順において２点、注意点があります。</p>

<ul>
  <li><code>brew install travis</code>でtravisコマンドはインストールできなくなっているっぽいので<code>gem install travis</code>で対応すること。</li>
  <li>上記では公開鍵暗号方式を使っているが、<a href="https://help.github.com/articles/creating-an-access-token-for-command-line-use">OAuth access tokens</a>を使ったほうが手間がかからなくて楽です。</li>
</ul>

<p>ということで公開鍵暗号方式ではなくOAuth Tokenを使うようにします。その場合は下記が参考になります。</p>

<p><a href="http://tricknotes.hateblo.jp/entry/2013/06/17/020229">Middleman で作った web サイトを Travis + GitHub pages でお手軽に運用する</a></p>

<p>デプロイまでの流れとしてはこんな感じです。</p>

<ol>
  <li>githubにエントリをpushする</li>
  <li>pushをフックしてTravisCI起動（事前にService HooksでTravisと連携するように設定してある）</li>
  <li>Travis上でスタティックサイトをビルド</li>
  <li>TravisからgithubへとToken通してpushする</li>
</ol>

<p>結果的に作成した<code>.travis.yml</code>,<code>Rakefile</code>はこんな感じです。</p>

<ul>
  <li><a href="https://github.com/toshimaru/blog.toshimaru.net/blob/master/.travis.yml">.travis.yml</a></li>
  <li><a href="https://github.com/toshimaru/blog.toshimaru.net/blob/master/Rakefile">Rakefile</a></li>
</ul>

<p>このように設定しておけばGithub上だったり<a href="http://prose.io/">prose.io</a>みたいなサービス使ってWEB上でも記事を投稿できてグッドですね。（実際はローカル上のエディタでの編集が慣れているのでWEB編集画面は使わないけど…）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技術的に尖ってないスタートアップ企業は潰れるべき]]></title>
    <link href="http://blog.toshimaru.net/startup-technology/"/>
    <updated>2013-11-14T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/startup-technology</id>
    <content type="html"><![CDATA[<p>海外で仕事探しをする中でいくつかのWEB系スタートアップ企業を見た。「海外のスタートアップ」というと響きだけはとても良いかもしれない。敏腕な経営者がいて優秀なエンジニアたちがアジャイルなスタイルでスピーディにサービスを作っている―こんなイメージだろうか。しかし僕が見た限りでいうとそうでもないようだ。</p>

<h2 id="section">一見しっかりしてそうだが…？</h2>

<p>自分が勤めているスタートアップの環境でいうと、作ってるプロダクトはしっかりしてる。少なくともしっかりしているように見える。PHPのMVCフレームワークを使い、JSコードも少なからず存在する中規模以上のWEBアプリケーションだ。nodejsを使っている跡もあり新しいテクノロジーもそれなりに取り入れようとはしているようだ（だが完全に使いこなせていない）。仕事の進め方もデイリースクラムを取り入れていたりアジャイルな感じだ。</p>

<p>一見全てはうまく回っているように見える。しかし実際の現場視点でコードを覗いてみるとそんなことはなかった。MVC構造になっているものの度重なる機能追加/変更でスパゲッティ化。使っていないコードがgitの管理下に。Githubホストされてるのに使われないプルリクエスト、無いコードレビュー。大幅改善したい欲求はあるものの、テストコードがなくリファクタリングにもなかなか手が出せない。</p>

<p>上記のようなコードが残っているという事実は同時に中のエンジニアもそこまで優秀じゃないということが伺える。もうそれでいいと思考停止している。空気が腐っている。これは良くない。なぜなら腐った環境に優秀なエンジニアは来ないからだ。</p>

<h2 id="section-1">スタートアップはどうエンジニアを誘致すべき？</h2>

<p>ところでスタートアップはどのように優秀なエンジニアを誘致すべきなのか？　僕は以下の観点で考えている。</p>

<ul>
  <li>会社の今後の成長が高い可能性で見込まれる</li>
  <li>金銭的なインセンティブがある（給与高い）</li>
  <li>尖ってる技術を使用している</li>
</ul>

<p>１つ目の「今後の成長が見込まれる」という点はスタートアップであればマストだと思う。誰が成長が見込まれない小さい企業に加わりたいだろうか？　成長・成功こそスタートアップの醍醐味であり、キーワードだと思う。</p>

<p>２つ目の「金銭的インセンティブ」、３つ目の「尖った技術」は両方あればベストだが少なくともどちらか１つは最低限必要だろう。つまり金銭的なインセンティブが無いのであれば尖った技術を使用しているべきだし、尖った技術が無いのであれば金銭的なインセンティブを与えるべきだ。（「尖った技術」が何か、という話は本エントリでは議論しない）</p>

<p>前者の「金無し、技術有り」の場合、「お金はもらえなくともその技術を学ぶことそのものが金銭以上の価値がある」と考えるエンジニアが誘致できる。その場合、使う技術は本当に尖っている必要があると思う。求人市場においてその技術の求人を見つけるのが非常に難しいくらいには希少価値があるべきだ。この場合のエンジニアは会社の成長とともに給与もアップというキャリアパスが本望だろう。</p>

<p>後者の「技術無し、金有り」の場合、単純に金目的のエンジニアが誘致できる。金目的というと響きがなんとなく悪い気もするがこの状況はそんなに悪くないようにも思える。というのも入社してから「自分自身で腐った技術を尖らせていく」ということが可能になるからだ。もしその改善の成果が上がったとしたらそのエンジニアの社内評価も上がるだろうし当該エンジニア自身の満足度も上がるだろう。上記のケースでは味わえない充足感がある。</p>

<p>金銭インセンティブもなく技術的にも尖っていない中で「成長が望めます！」というモチベーションのみで働かせるのは「やりがいの搾取」だろう。これはブラック企業と何ら体質的に変わりがない。彼らにとってエンジニアは使い捨ての労働力なのだろう。</p>

<h2 id="section-2">まとめ</h2>

<p>つまりスタートアップには「成長」を前提とし、それに加え「金銭インセンティブ」「尖った技術」は必要だと思う。なので金銭インセンティブもなく技術レベルも低い会社はエンジニアにとっては潰れるべき会社だ。</p>

<p>また個人的には技術力の低いスタートアップ企業、そしてそれを是とする企業は本当にビジネスを成功させる気があるのか疑ってしまう。スタートアップこそスピーディにビジネスを展開していくべきで、だからこそスピーディな開発が可能なRailsが選ばれてるのであって（そういう意味でスタートアップとRailsの親和性は高い）…。やっぱりまともに技術を扱っていない会社は信用ならない、というのが僕の考えだ。</p>

<hr />

<p>っていうことをPHP4使用、テスト全く無し、クラウド環境使用せず、バージョンコントロールも行わず、そして金払いも悪いスタートアップと話をしながらつらつら考えてた。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2ヶ月間WEBエンジニアとして海外で働いてみて感じたこと]]></title>
    <link href="http://blog.toshimaru.net/my-impression-after-working-2-months/"/>
    <updated>2013-11-05T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/my-impression-after-working-2-months</id>
    <content type="html"><![CDATA[<p>海外（カナダ・バンクーバー）で働き始めて2ヶ月間が経った。2ヶ月間働いてみてなんとなく感じてることを書き綴ってみる。</p>

<h2 id="section">仕事の進め方は緩い</h2>
<p>デッドラインに遅れるのはけっこう平気でしてる。デッドラインが今週中というようなタスクを「あとちょっとで終わる！」「ほぼ完了と言って良い」なんていいながら3週間くらい平気でスケジュール遅延している。そしてそのタスクの担当者はバケーションに入るとかで結局中途半端な感じのタスクを置き土産として長期休暇に入っていった。アッパレである。</p>

<p>さすがに2週くらい遅れた時点でもっと上司がキツく詰め寄ったり、タスク担当者が残業をしたりとかしないのか！？とか思ったがそんなこともなかった。まぁきっとそういうもんなんだろう。</p>

<h2 id="section-1">スピード感</h2>
<p>意思決定が早いのでスピード感がある。例えば自分が今の仕事就く前に軽くかかわったウェブ制作のバイトの話をすると、かかわったのは僅か2ヶ月足らずくらいなんだけど、その短い内に「プロジェクトもっとうまく回したいわー」ってノリで<a href="https://trello.com/">Trello</a>というタスク管理ツールをポンと使い始めたり、その中での管理のやり方がイケてなかったということでやり方をガラッと刷新したり<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup>、素早いトライ＆エラーでさくさく改善していく感じだった。</p>

<p>逆にこのスピード感が裏目に出ることもあって（自分の中では）全くまともにテストできていない機能を、「見た感じ大丈夫っぽいね！よしっ！来週デプロイいこう！」とかいうノリでボスがデプロイを決めて焦った。不具合が出たのは言うまでもない。（幸いにして小さいものだったが）</p>

<p>あと上でTrelloという外部サービスのタスク管理ツールを紹介したけど、サードパーティのサービスを有効活用しているイメージがある。ドキュメントはDropboxやGoogleDocで共有。FAQを<a href="http://www.zendesk.com/">zendesk</a>というサービスで運営してたり。サービスの監視を<a href="http://newrelic.com/">NewRelic</a>で行ってたり。北米にはこういった類の機能の一部だったり開発の面倒くさいところの一部を外部に委譲できちゃうサービスが豊富で良い。</p>

<h2 id="section-2">実力社会</h2>
<p>実力あればたぶん給料もついてくるし、ばんばんリクルーターからGithubやLinkedIn経由で声がかかる。<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup></p>

<p>自分の場合、英語の部分で実力不足を感じたので別に給与とか（こっちで生活できる程度に貰えれば）どーでもいいや、って口だったけど技術スキルの部分で会社に認めてもらって日本にいたときと同じ水準くらいの給与は貰えている。嬉しい誤算だ。</p>

<p>日本にいたときに感じた年功序列的な価値観は当たり前だがない。基本は実力社会だ。もちろん年功序列社会と実力社会、どちらにも良い面悪い面があり人によって向き不向きはあるだろうが、後者を好む僕にとっては今の環境は良い環境だと言える。</p>

<h2 id="section-3">なんだかんだいって英語は壁</h2>
<p>「こういう職業（技術職）だから英語得意じゃないけどイケるっしよ！」ってことで海外来て実際仕事見つけてそれなりに仕事はこなせているわけだけど、それでもやっぱり英語は壁になる。</p>

<p>この辺は自分がジョインした企業がスタートアップ企業だからってのに起因しているのかもしれない。スタートアップのようなあんまり整備されていない環境下では、口頭でのコミュニケーションがコラボレーションの基本になりやすい。だからそこで発言・対話できないと企業への積極的なコミットはなかなか難しい。</p>

<p>プログラミングスキル的な話をすると全くもって問題ない。むしろ未整備な部分を整備していきたい思いがある。しかしその辺は英語が壁になって具体的かつ説得力のあるプロポーザルが出せず、実際にやろうという流れに持っていくまでにはなかなか行けない。なので今はプロジェクトリーダーにある程度の流れを作ってもらって、その流れの中で立ち回るのがやっとな感じ。ボスとの対話の中で一緒に流れを作っていくまでのレベルまでは達していない。</p>

<h2 id="section-4">定時終業…からの自分の時間</h2>
<p>定時あがりがデフォ。6時以降までオフィスに居るとほとんど人が居なくなり、いたたまれない気持ちになる。話には聞いていたが、日本人でハードワークした経験がある僕にとって実際にコレを体験してみると感動モノである。</p>

<p>毎日安定して6時には帰れるので終業後、自分のための＋α（プラスアルファ）の時間が必ず作れる。この時間がとてもとても大きい。</p>

<p>もちろんこの時間をダラダラと過ごしても構わない、ただこの時間を有効活用すればエンジニアはいろいろと捗るのだ。例えば自分がやったこと、あるいはやろうとしていることでいうと、</p>

<ul>
  <li>英語の勉強</li>
  <li>技術を磨くための勉強</li>
  <li>オンラインスクールに通う</li>
  <li>Webサービス作ってみよう！</li>
</ul>

<p>英語ならポッドキャスト聞いたり、Netflixで映画・ドラマを観たりした。技術を勉強するために新たなプログラミング言語を勉強したり、オープンソースにかかわったりするのも良いだろう<sup id="fnref:3"><a href="#fn:3" class="footnote">3</a></sup>。オンラインスクールは僕は<a href="https://www.codeschool.com/">CodeSchool</a>を始めた。<a href="https://www.coursera.org/">coursera</a>でオンラインコースを受講してみるのもアリだ<sup id="fnref:4"><a href="#fn:4" class="footnote">4</a></sup>。何か作りたいものがあるなら自分の時間をじっくり使って作ってみるのが良いだろう。</p>

<p>これは本当に貴重な時間だ。日本だと仕事が優先になってなかなか自分のやりたいことにまで手が行かないのが実情だろう。</p>

<p>そして海外で働く最大のメリットはこの<strong>労働環境の部分</strong>であると思う。実際こっちで会った日本人エンジニアの方々は皆そう言っている。今、1年前の僕を振り返ってみて純粋に不思議に思う。「終電近くまで残業して、なんでそんな頑張ってんの？」</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>プロジェクト別にタスクを分割してたけど2週間くらいやってうまく回らなかったから担当者別にタスクを分割するように変えた。 <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>といっても適当に声掛けまくっているリクルーターもいるのでそこは勘違いしないように。 <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>毎日安定して帰れるので<a href="http://kannokanno.hatenablog.com/entry/2013/10/31/165647">半年休職して勉強する</a>必要もないと思う。 <a href="#fnref:3" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p><a href="http://d.hatena.ne.jp/Chikirin/20131101">学習の高速道路</a>バンザイ！ <a href="#fnref:4" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Composerで始める PHPのライブラリ管理]]></title>
    <link href="http://blog.toshimaru.net/how-to-use-composer-autoload/"/>
    <updated>2013-10-24T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/how-to-use-composer-autoload</id>
    <content type="html"><![CDATA[<p>PHPも<a href="http://getcomposer.org/">Composer</a>の登場によりライブラリのインストール、依存性管理が格段に楽になりました。既にPHPのライブラリ管理のスタンダードになっていますが、改めてComposerの導入手順について紹介してみたいと思います。</p>

<h2 id="composer">Composerのインストール</h2>

<p>PHPのバージョンは5.3以降が必要です。PHP5.2以前はさっさと捨てるべし！</p>

<pre><code>$ curl -s https://getcomposer.org/installer | php
</code></pre>

<p>さてこれで<code>composer.phar</code>が手に入りました。<code>composer</code>コマンドを使えるようにするためにパスの通った場所に<code>composer.phar</code>を移動しましょう。</p>

<pre><code>$ sudo mv composer.phar /usr/local/bin/composer
</code></pre>

<p><code>composer</code>コマンド準備完了です。</p>

<pre><code>$ composer
   ______
  / ____/___  ____ ___  ____  ____  ________  _____
 / /   / __ \/ __ `__ \/ __ \/ __ \/ ___/ _ \/ ___/
/ /___/ /_/ / / / / / / /_/ / /_/ (__  )  __/ /
\____/\____/_/ /_/ /_/ .___/\____/____/\___/_/
                    /_/
Composer version b482ebe0ca18321d9322bd913af73c1c55adebf1 2013-09-23 09:55:49
</code></pre>

<h2 id="section">依存関係の記述</h2>

<p>composerはプロジェクトルートの<code>composer.json</code>ファイルにライブラリを記述することで依存関係の管理を行います。（composer.jsonはnpmにおけるpackage.jsonみたいなものです）早速ファイルを作ってライブラリを記述してみましょう。</p>

<pre><code>$ touch composer.json
</code></pre>

<p><code>composer.json</code>ファイルに下記のように記述します。ここではPHPUnitをインストールしてみます。</p>

<pre><code>{
    "require": {
        "phpunit/phpunit": "3.7.*"
    }
}
</code></pre>

<h2 id="section-1">ライブラリのインストール</h2>

<p><code>composer.json</code>ファイルを記述し終えたら、composerコマンドでライブラリのインストールを行います。</p>

<pre><code>$ composer install
Loading composer repositories with package information
Installing dependencies (including require-dev)
  - Installing symfony/yaml (v2.3.6)
    Loading from cache

  - ..............

  - Installing phpunit/phpunit (3.7.28)
    Loading from cache

phpunit/phpunit suggests installing phpunit/php-invoker (&gt;=1.1.0,&lt;1.2.0)
Writing lock file
Generating autoload files
</code></pre>

<p>うまいこといきました。ライブラリは<code>vendor</code>ディレクトリ下に格納されます。この時同時にバージョン情報が書かれた<code>composer.lock</code>ファイルも生成します。</p>

<h2 id="section-2">ライブラリのアップデート</h2>

<p>ライブラリのアップデートに関しては下記のコマンドでOK.</p>

<pre><code>$ composer update
</code></pre>

<h2 id="section-3">まとめ</h2>

<p>モダンなPHPパッケージ管理であればComposer一択でしょう。PEARとの使い分けに関しては<a href="http://ja.phptherightway.com/#依存関係の管理">PHP Right Way</a>にはこのように書いてあります。</p>

<blockquote>
  <ul>
    <li>Composer を使うのは、ひとつのプロジェクトにおける依存関係を管理するとき。</li>
    <li>PEAR を使うのは、システム全体の PHP 環境の依存関係を管理するとき。</li>
  </ul>
</blockquote>

<p>大抵の場合、後者のようにシステム全体で依存性管理をしなきゃならん理由はないと思うのでComposerで依存管理を行いましょう！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPって言うほど悪い言語じゃない]]></title>
    <link href="http://blog.toshimaru.net/php-is-not-bad-language/"/>
    <updated>2013-10-20T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/php-is-not-bad-language</id>
    <content type="html"><![CDATA[<p><strong>※ただしPHP5.3以降に限る。</strong></p>

<p>PHPってよく「PHP(笑)」って後ろに笑マークが付いたり、Disられたりすることが多い。でも僕には「笑」を付けるほどPHPは悪い言語だとは思えないんだよね。</p>

<h2 id="php">PHPの良いところ</h2>

<p>PHPの良さはなんといってもとっつきやすさだと思う。何も知らない初学者が「WEBページ作りたいよ！WEBプログラミングしたいよ！」といったときにPHPは第一の選択肢となると思う。なんせPHPは「ぴーえっちぴー：はいぱーてきすとぷろせっさー」なんだからな！　HyperText作るための言語、それこそPHPの本質たるところなのです。</p>

<p>逆にその手軽さがイケてないコードを量産していてるとも言えて、結果的にそうやって生まれたイケてないコードのいくつかを見て「PHPダメ」って判断してしまいがちだけど、それは早急だと思う<sup id="fnref:phpway"><a href="#fn:phpway" class="footnote">1</a></sup>。</p>

<p>またPHPの<a href="http://blog.clock-up.jp/entry/2013/09/01/141859">公式リファレンスは他のどの言語よりも情報が充実していると思う</a>。簡潔な良いコード例がたくさん載ってるし、PHPのバージョン情報も明記されている。PHPは日本語情報もたくさんあるので困ったときに日本語で検索して情報も出やすい。</p>

<h2 id="php-1">PHPの悪いところ</h2>

<p>とはいえ、PHPは関数が直感に反していていたり、引数が覚えにくかったり、まぁイケてないところは<a href="http://www.rubyist.net/~matz/20080126.html#p04">たくさんある</a>。それは認めよう。</p>

<p>ただ近年のPHP動向とか知ってる？　けっこう凄いんだぜ？</p>

<h2 id="php-2">近年のPHPの進化</h2>

<p><a href="http://getcomposer.org/">Composer</a>で外部ライブラリのインストール、依存関係管理できる。フレームワークもMVCな<a href="https://github.com/symfony/symfony">Symfony</a>,<a href="https://github.com/cakephp/cakephp">CakePHP</a>,<a href="https://github.com/fuel/fuel">FuelPHP</a>から、SinatraライクのMicroフレームワークな<a href="https://github.com/codeguy/Slim">Slim</a>,<a href="https://github.com/fabpot/Silex">Silex</a>だってある。CakePHPなんかは日本で人気が高く日本語情報がネットに沢山あってググりやすい。<a href="https://github.com/laravel/laravel">Laravel</a>なんかは今グングン成長している注目株のMVCフレームワークだ。<a href="https://github.com/sebastianbergmann/phpunit">PHPUnit</a>でテストも書ける。PHPUnitの書き方がイケてない？　ならモダンな<a href="https://github.com/atoum/atoum">atoum</a>もある。PHPは遅い？　<a href="http://phalconphp.com/en/">The fastest
PHP Framework, Phalcon</a>という選択肢も今ならある。</p>

<h2 id="php-3">PHPのコードは汚い？</h2>

<p>正直5.2以前はけっこう汚いコードが多いと思う。PHP4の書き方の名残があるコードなんて最低だ。ただ5.3以降は綺麗に書けるようになってきてる。</p>

<p>PHP5.3以降からは名前空間がサポートされて、これとComposerのAutoloadの機能を使えば<code>require</code>地獄から解放される。他にも5.3では無名関数がサポートされた。</p>

<p>PHP5.4からは新しいショートArrayシンタックスが追加されてかつてのArray地獄からは解放されそうだし、Traitの導入によりRubyのMix-inみたいなことも可能になった。</p>

<p>PHP5.5ではジェネレータの機能により<code>yield</code>キーワードが使えるようになったり、<code>finally</code>節も追加される（この辺は今更感ありまくりだけど）。</p>

<p>シンタックスとか言語特性上限界がありますけど（PHPは言語特性上、クソコードが書きやすい）、Rubyでもきっとクソなコード書く人はクソなコードを書くだろうし、Ruby on Railsでもレールの乗り方を無視してクソみたいなコードを書く奴もいるだろう。クソコードはPHPに限った話じゃないぜ、たぶん。</p>

<h2 id="phpweb">PHPがWEBを作ってる！</h2>

<p>Googleが無縁であるはずのPHPをGoogle App Engineの言語の一つとして採用したのはなぜか？　<a href="http://agilecatcloud.com/2013/07/04/google-app-engine-%E3%81%8C-php-%E3%82%92%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%99%E3%82%8B%EF%BC%9A-%E3%81%AA%E3%81%9C%E3%81%AA%E3%82%89-75-%E3%81%AE-web-%E3%82%92%E3%82%AB%E3%83%90%E3%83%BC/">PHPがWEBの75％を作っている、とGoogleが判断した</a>からだ。</p>

<p>世界で一番使われているCMSはなにか？　WordPressだ。PHPで作られている<sup id="fnref:wp"><a href="#fn:wp" class="footnote">2</a></sup>。</p>

<p>世界最大のSNS、Facebookで使われている言語はなにか？　PHPだ。さらに彼らは<a href="http://2013.8-p.info/japanese/09-28-languages.html">HipHopというPHPから C++への変換するソフトを作るというかなり頭のイカれたことをやっていたり、Hackという型付のPHP方言を使用していたり</a>するらしい。Facebook、お前のPHP愛が怖い<sup id="fnref:fbd"><a href="#fn:fbd" class="footnote">3</a></sup>。</p>

<h2 id="php-4">PHPを笑うな</h2>

<p>「PHP（笑）」って言っている人がどれだけ上記のような状況を知った上で笑っているのだろうか。僕は上記の状況を鑑みるにもうPHPに「笑」なんて付けることはできない。むしろ軽率に付けててゴメン、とおもった。</p>

<p>正直自分も今まで、PHPの後ろに「笑」が付いていた。技術ブログ界隈でPHPがよくDisられたりするのを見聞きしてたから僕も知らず知らずのうちにPHPをネタにしてたんだ。でも冷静に考えるとその当時、PHPの良さなんて何も知らなかったのだ。</p>

<h2 id="section">なんか見たことある光景？</h2>

<p>この光景、デジャヴじゃね？とも思った。</p>

<p>JavaScriptだって<a href="http://bl.ocks.org/anonymous/raw/6281225/#9">AJAX技術の台頭で持て囃される以前は言語として見放されていた</a>。それがAJAX以降どうだ。どんどん便利なライブラリが誕生し、JSを使ったリッチなUIの提供は当たり前となった。そしてNodeの登場以降は全世界の優秀なエンジニアたちがそのテクノロジーの可能性にこぞって注目した。<a href="http://altjs.org/">AltJS</a>の勢いも強まっている。</p>

<p>PHPはさすがにJSまでの再評価までいかなくとも、少なくともWEB言語の第一位の座に居座り続けてもいいのではないかと思う（そして今後のPHPの進化にも期待したい）。</p>

<h2 id="section-1">最後に</h2>

<p>「PHP（笑）」の時代は終わりを告げた。ぼくはPHPは悪い言語だとは思わないし、お世辞にもすごく良い言語とも言うことはできない。ただ侮れない言語であると思うのです。</p>

<p>PHPはPerlほど真面目じゃないし、Pythonほどスマートじゃないし、Rubyほど垢抜けてないし、JavaScriptほど流行に敏感じゃないけど、そんなPHPが、僕は嫌いじゃない。</p>

<blockquote class="twitter-tweet"><p><a href="http://t.co/oYy20r6aYU">http://t.co/oYy20r6aYU</a> 「ぼくの経験上、一番PHPをバカにし、言語の重要性をうそぶく連中は、大体自分たちが提唱する言語でもロクな仕事ができないことが多い」。これはわからないけれど、自分の経験から語ると、優秀なエンジニアだなと思う人ほどPHPを評価している感じ</p>&mdash; 紀平 拓男（Takuo Kihira） (@tkihira) <a href="https://twitter.com/tkihira/statuses/384552044247257088">September 30, 2013</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<div class="footnotes">
  <ol>
    <li id="fn:phpway">
      <p>「そんなこといってもぉ、どんなコード書いたらイケてるとかわかんないしぃ」というスイーツなそこのあなた。<a href="http://www.phptherightway.com/">PHP The Right Way.</a>を今すぐ嫁。「技術書高ぃしぃ〜、重ぃしぃ〜、いゃ〜」とか「英語とか読めないしぃ〜」とかつべこべ言う前に無料だし<a href="http://ja.phptherightway.com/">日本語版</a>もあるので黙って全部読むべし。 <a href="#fnref:phpway" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:wp">
      <p>と、ここでホンネを言うと、WordPressの作りはかなり<a href="http://mask-legacy.tumblr.com/post/62315583278/in-wordpress-phpcon2013-wctokyo">アレ</a>なので個人的にはさっさと世代交代してほしいのだわ <a href="#fnref:wp" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:fbd">
      <p><a href="http://japan.internet.com/webtech/20131018/5.html">今後はD言語</a>なのか？ <a href="#fnref:fbd" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitのrevertの-m(mainline)オプションについて]]></title>
    <link href="http://blog.toshimaru.net/git-revert-mainline/"/>
    <updated>2013-10-16T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/git-revert-mainline</id>
    <content type="html"><![CDATA[<p><code>git revert</code>しているとこんなエラーに出くわしました。</p>

<pre><code>$ g revert xxxxx
error: Commit xxxxx is a merge but no -m option was given.
fatal: revert failed
</code></pre>

<p>「コミットxxxxxはマージだけど、<code>-m</code>が指定されていないよ！」ってことなんですがどういうことでしょう？</p>

<p>普通に考えてみると当然のことで、マージコミットですから<code>revert</code>といったときにどのブランチ状態に戻るかを指定しなければrevertできないよということです。つまり下記のようなヒストリーがあったときに、</p>

<pre><code>*   1459267 - Merge pull request #4 from branch3
|\
| * 344fd52 - (branch3) Add sentence
| * 2b30235 - add file
* | dbc65f4 - add revert commit2
* | f0b0a91 - add revert commit 1
</code></pre>

<p><code>&lt;1459267&gt;</code>のマージをrevertした場合に、<code>&lt;344fd52&gt;</code>か<code>&lt;dbc65f4&gt;</code>かどっちに戻すかがわかんないっちゅうことです。</p>

<p>このmainlineは1から始まり「1がマージされた側のブランチ」「2がマージする側のブランチ」になるようなので多くの場合、前者に戻したいと思うので1を指定しとけばよいということになります。結果としては下記のコマンド。</p>

<pre><code>$ g revert -m 1 1459267
</code></pre>

<p>以上でした。</p>

<h3 id="section">参考</h3>

<ul>
  <li><a href="http://d.hatena.ne.jp/koba04/20121122/1353512656">gitのmerge-commitをrevertする</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[超簡単なコマンドでローカルにHTTPサーバーを起動]]></title>
    <link href="http://blog.toshimaru.net/simple-command-web-server/"/>
    <updated>2013-10-07T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/simple-command-web-server</id>
    <content type="html"><![CDATA[<p>個人的には<a href="http://php.net/manual/ja/features.commandline.webserver.php">PHPのビルトインウェブサーバー</a>の<code>PHP -S</code>コマンドが使いたいけど、php5.4以降じゃないと使えないのが難点。Macだとデフォルトで入ってるPHPバージョンは5.3なのでこのコマンドは使えない。ということでpythonの力をお借りして簡単にHTTPサーバが起動できる。</p>

<p><code>python -m SimpleHTTPServer</code></p>

<p>これでポート8000でWebサーバが起動。ポート指定したければこう。</p>

<p><code>python -m SimpleHTTPServer 8888</code></p>

<p>スタティックなサイトをサクッと確認したいときに使えます。以上、簡単なTIPSでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【RVM】gem install時に出るSSL_connectエラー解決法]]></title>
    <link href="http://blog.toshimaru.net/fix-rvm-ssl-error/"/>
    <updated>2013-10-06T00:00:00+00:00</updated>
    <id>http://blog.toshimaru.net/fix-rvm-ssl-error</id>
    <content type="html"><![CDATA[<p>RVMを使って<code>gem install</code>をするとこんなエラーが出た</p>

<pre><code>$ gem install rails
ERROR:  Could not find a valid gem 'rails' (&gt;= 0), here is why:
  　　　　Unable to download data from https://rubygems.org/ - SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed (https://s3.amazonaws.com/production.s3.rubygems.org/latest_specs.4.8.gz)
</code></pre>

<p>SSL証明書が古いためらしく下記コマンドで証明書をアップデートする。</p>

<pre><code>$ rvm osx-ssl-certs update all
</code></pre>

<p>これで解決！</p>

<h3 id="section">参考</h3>
<ul>
  <li><a href="http://railsapps.github.io/openssl-certificate-verify-failed.html">OpenSSL Errors and Rails – Certificate Verify Failed</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
