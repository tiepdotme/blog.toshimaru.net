<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="https://blog.toshimaru.net/atom.xml" rel="self" type="application/atom+xml" /><link href="https://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2018-08-12T16:40:26+09:00</updated><id>https://blog.toshimaru.net/</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">Rails E2EテストでpoltergeistからHeadless Chromeへ乗り換える</title><link href="https://blog.toshimaru.net/poltergeist-to-selenium-webdriver/" rel="alternate" type="text/html" title="Rails E2EテストでpoltergeistからHeadless Chromeへ乗り換える" /><published>2018-08-04T00:00:00+09:00</published><updated>2018-08-04T00:00:00+09:00</updated><id>https://blog.toshimaru.net/poltergeist-to-selenium-webdriver</id><content type="html" xml:base="https://blog.toshimaru.net/poltergeist-to-selenium-webdriver/">&lt;p&gt;RailsのCapybaraを使ったE2Eテスト(feature spec)をこの度、&lt;a href=&quot;https://github.com/teampoltergeist/poltergeist&quot;&gt;poltergeist&lt;/a&gt;から&lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/master/headless/README.md&quot;&gt;Headless Chrome&lt;/a&gt;に乗り換えてみたのでそのときのメモ。&lt;/p&gt;

&lt;h2 id=&quot;対応-pull-request&quot;&gt;対応 Pull Request&lt;/h2&gt;

&lt;p&gt;今回対応したPull Requestしてはこちら。&lt;/p&gt;

&lt;p&gt;https://github.com/toshimaru/RailsTwitterClone/pull/211&lt;/p&gt;

&lt;p&gt;思ったよりも差分はコンパクトにまとまった。&lt;/p&gt;

&lt;h2 id=&quot;install-selenium-webdriver&quot;&gt;Install selenium-webdriver&lt;/h2&gt;

&lt;p&gt;まずは&lt;code class=&quot;highlighter-rouge&quot;&gt;poltergeist&lt;/code&gt; gemの代わりに、&lt;code class=&quot;highlighter-rouge&quot;&gt;selenium-webdriver&lt;/code&gt;をインストール。&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;-  gem &quot;poltergeist&quot;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+  gem &quot;selenium-webdriver&quot;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;change-capybarajavascript_driver&quot;&gt;Change Capybara.javascript_driver&lt;/h2&gt;

&lt;p&gt;次に&lt;code class=&quot;highlighter-rouge&quot;&gt;Capybara.javascript_driver&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;:poltergeist&lt;/code&gt;から&lt;code class=&quot;highlighter-rouge&quot;&gt;:selenium_chrome_headless&lt;/code&gt;に変更。&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;- require &quot;capybara/poltergeist&quot;
- Capybara.javascript_driver = :poltergeist
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ require &quot;selenium-webdriver&quot;
+ Capybara.javascript_driver = :selenium_chrome_headless
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ちなみに&lt;code class=&quot;highlighter-rouge&quot;&gt;:selenium_chrome_headless&lt;/code&gt;の設定は下記の変更の中でcapybara内に取り込まれている。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Capybara&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;register_driver&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:selenium_chrome_headless&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;browser_options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Selenium&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;WebDriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Chrome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;browser_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'--headless'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;browser_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'--disable-gpu'&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Capybara&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Selenium&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;browser: :chrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;options: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;browser_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;via. https://github.com/teamcapybara/capybara/commit/0275eab42c610cd1ccde7947b051d0b00857b9ce&lt;/p&gt;

&lt;h2 id=&quot;install-chromedriver&quot;&gt;Install chromedriver&lt;/h2&gt;

&lt;h3 id=&quot;on-mac&quot;&gt;On Mac&lt;/h3&gt;

&lt;p&gt;chromedriverが必要になってくるが、Macの場合はbrewで入れちゃうのが一番ラク。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; brew cask &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;chromedriver
&lt;span class=&quot;go&quot;&gt;Updating Homebrew...
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;==&amp;gt;&lt;/span&gt; Auto-updated Homebrew!
&lt;span class=&quot;go&quot;&gt;Updated 1 tap (homebrew/cask).
No changes to formulae.

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;==&amp;gt;&lt;/span&gt; Satisfying dependencies
&lt;span class=&quot;gp&quot;&gt;==&amp;gt;&lt;/span&gt; Downloading https://chromedriver.storage.googleapis.com/2.41/chromedriver_mac64.zip
&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;####################################################################### 100.0%&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;==&amp;gt;&lt;/span&gt; Verifying checksum &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;Cask chromedriver
&lt;span class=&quot;gp&quot;&gt;==&amp;gt;&lt;/span&gt; Installing Cask chromedriver
&lt;span class=&quot;gp&quot;&gt;==&amp;gt;&lt;/span&gt; Extracting nested container chromedriver
&lt;span class=&quot;gp&quot;&gt;==&amp;gt;&lt;/span&gt; Linking Binary &lt;span class=&quot;s1&quot;&gt;'chromedriver'&lt;/span&gt; to &lt;span class=&quot;s1&quot;&gt;'/usr/local/bin/chromedriver'&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;🍺  chromedriver was successfully installed!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注意事項&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;brew install chromedriver&lt;/code&gt;ではinstallできないので注意（ちょっと古いやり方）。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chromedriver-helper&lt;/code&gt; gemが入っているとうまく動かない場合があるので注意。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;on-circleci&quot;&gt;On CircleCI&lt;/h3&gt;

&lt;p&gt;CircleCI上では、&lt;code class=&quot;highlighter-rouge&quot;&gt;ruby:x.x-node-browsers&lt;/code&gt;のCircleCI公式Ruby Dokcer Imageを使っていればきちんと動作しました。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;na&quot;&gt;docker&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;circleci/ruby:2.5-node-browsers&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上記の設定の場合、Ruby2.5のnode-browsersバージョンをベースイメージとして使用している。&lt;/p&gt;

&lt;h2 id=&quot;on-travisci&quot;&gt;On TravisCI&lt;/h2&gt;

&lt;p&gt;これが今回の対応で一番ハマった設定でした。いろいろ試しましたが下記のエラーがなかなか解決できませんでした。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Failures:

  1) Authentication authorization screenshot
     Failure/Error: before { visit signin_path }

     Selenium::WebDriver::Error::WebDriverError:
        Unable to find Mozilla geckodriver. Please download the server from https://github.com/mozilla/geckodriver/releases and place it somewhere on your PATH. More info at https://developer.mozilla.org/en-US/docs/Mozilla/QA/Marionette/WebDriver.
     # ./spec/features/authentication_pages_spec.rb:9:in `block (3 levels) in &amp;lt;top (required)&amp;gt;'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;本当は&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo: false&lt;/code&gt;の設定で動かしたかったのですがそれだと上手くいかなかったので&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt;で起動させて&lt;code class=&quot;highlighter-rouge&quot;&gt;chromium-chromedriver&lt;/code&gt;をテスト前にInstallしてパスを通すという方法でテストを通しました。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;sudo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;required&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ruby&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;before_install&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sudo apt-get install -y chromium-chromedriver&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ln -s /usr/lib/chromium-browser/chromedriver ~/bin/chromedriver&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(もう少しスマートなやり方をご存知の方は教えていただけると嬉しいです🙏)&lt;/p&gt;

&lt;h2 id=&quot;参考リンク&quot;&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ohbarye.hatenablog.jp/entry/2018/03/10/232300&quot;&gt;PhantomJS + Poltergeist を Selenium + Headless Chrome で置き換える (1) Rails + Capybara による feature spec 編 - valid,invalid&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tech.speee.jp/entry/2017/06/15/135636&quot;&gt;RSpec の feature spec でヘッドレス Chrome を使う - Speee DEVELOPER BLOG&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://y-yagi.tumblr.com/post/166831012790/rails%E9%9B%91%E3%81%ABsystem-test%E3%81%A7headless-chrome%E3%82%92%E4%BD%BF%E3%81%86&quot;&gt;[Rails]雑にSystem TestでHeadless Chromeを使う | 日々雑記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="rails" /><category term="rspec" /><summary type="html">RailsのCapybaraを使ったE2Eテスト(feature spec)をこの度、poltergeistからHeadless Chromeに乗り換えてみたのでそのときのメモ。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/chromedriver.jpg" /></entry><entry><title type="html">VS Code Extensionの公開手順</title><link href="https://blog.toshimaru.net/how-to-publish-vscode-extension/" rel="alternate" type="text/html" title="VS Code Extensionの公開手順" /><published>2018-08-01T00:00:00+09:00</published><updated>2018-08-01T00:00:00+09:00</updated><id>https://blog.toshimaru.net/how-to-publish-vscode-extension</id><content type="html" xml:base="https://blog.toshimaru.net/how-to-publish-vscode-extension/">&lt;p&gt;先日VSCode Extensionを公開しました。公開するにあたっての手順をメモがてら残したいと思います。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Blogged. | はじめてのVS Code Extension、Hybrid Next Plusテーマを公開しました - Hack Your Design! &lt;a href=&quot;https://t.co/2cg3jwnT5q&quot;&gt;https://t.co/2cg3jwnT5q&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1024512092341030912?ref_src=twsrc%5Etfw&quot;&gt;August 1, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;visual-studio-team-servicesアカウントの作成&quot;&gt;Visual Studio Team Servicesアカウントの作成&lt;/h2&gt;

&lt;p&gt;まずVSCode Extensionを公開するためには、&lt;a href=&quot;https://visualstudio.microsoft.com/team-services/&quot;&gt;Visual Studio Team Services&lt;/a&gt;アカウントが必要になります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/vsts/sign-in.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;「MSのメールアカウントを作らなければならないんか！？」と一瞬思っちゃいましたが、手持ちのGmailなどでも登録できるのでご安心を。&lt;/p&gt;

&lt;h2 id=&quot;プロジェクト作成&quot;&gt;プロジェクト作成&lt;/h2&gt;

&lt;p&gt;自分の好きな名前でプロジェクトを作成します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/vsts/create-pj.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;アクセストークンの取得&quot;&gt;アクセストークンの取得&lt;/h2&gt;

&lt;p&gt;作成したプロジェクトページ( &lt;code class=&quot;highlighter-rouge&quot;&gt;https://{youraccount}.visualstudio.com&lt;/code&gt; )でアクセストークンを取得します。 右上メニューのセキュリティからアクセストークンの追加を行ってください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/vsts/security.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/vsts/accesstoken.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下記の内容でアクセストークンを作成します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Description: &lt;strong&gt;vsce&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Expire: &lt;strong&gt;1 year&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Scope: &lt;strong&gt;All&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;※ScopeをAllに設定しないとこのあとの手順がうまくいかないので注意！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/vsts/get-token.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;vsceのダウンロード&quot;&gt;vsceのダウンロード&lt;/h2&gt;

&lt;p&gt;VSCode Extensionの公開に際しては&lt;code class=&quot;highlighter-rouge&quot;&gt;vsce&lt;/code&gt;コマンドを使用します。npmでダウンロードしてください。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install -g vsce
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;publisher作成&quot;&gt;Publisher作成&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/manage&quot;&gt;Marketplace publisher management page&lt;/a&gt; で必要な項目を記入した上でCreate Publisherを行います。&lt;/p&gt;

&lt;h2 id=&quot;vsceログイン&quot;&gt;vsceログイン&lt;/h2&gt;

&lt;p&gt;下記のコマンドでvsceログインします。手順のなかでアクセストークンを聞かれるので上手順で入手したトークンを入力します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vsce login (publisher name)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;公開&quot;&gt;公開！&lt;/h2&gt;

&lt;p&gt;これで公開準備が整ったので、VSCode Extensionのルートで下記のコマンドを打ってExtensionを公開します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vsce publish
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考資料&quot;&gt;参考資料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.visualstudio.com/docs/extensions/publish-extension&quot;&gt;Publishing Visual Studio Code Extensions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/vsts/organizations/accounts/create-organization-msa-or-work-student?view=vsts&quot;&gt;Create a VSTS organization with a Microsoft account or a work account | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="vscode" /><summary type="html">先日VSCode Extensionを公開しました。公開するにあたっての手順をメモがてら残したいと思います。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/vsts/og.png" /></entry><entry><title type="html">はじめてのVS Code Extension、Hybrid Next Plusテーマを公開しました</title><link href="https://blog.toshimaru.net/vscoce-hybrid-next-plus/" rel="alternate" type="text/html" title="はじめてのVS Code Extension、Hybrid Next Plusテーマを公開しました" /><published>2018-07-31T00:00:00+09:00</published><updated>2018-07-31T00:00:00+09:00</updated><id>https://blog.toshimaru.net/vscoce-hybrid-next-plus</id><content type="html" xml:base="https://blog.toshimaru.net/vscoce-hybrid-next-plus/">&lt;p&gt;はじめてのVS code Extensionとしてybrid Next Plusというテーマを公開してみた。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;初めてのVSCode ExtensionとしてThemeを作ってみた（Beta Version）| Hybrid Next Plus - Visual Studio Marketplace &lt;a href=&quot;https://t.co/d8xWeLHQ51&quot;&gt;https://t.co/d8xWeLHQ51&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/1021918426426531840?ref_src=twsrc%5Etfw&quot;&gt;July 25, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;きっかけ&quot;&gt;きっかけ&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;もともとVSCodeのデフォルトのテーマがいまいち好きになれなかった&lt;/li&gt;
  &lt;li&gt;Vimで&lt;a href=&quot;https://github.com/w0ng/vim-hybrid&quot;&gt;hybrid&lt;/a&gt;、Atomで&lt;a href=&quot;https://github.com/kaicataldo/hybrid-next-syntax&quot;&gt;hybrid next&lt;/a&gt;というテーマを気に入っていたのでそのテーマをVSCodeでも使おうと思った&lt;/li&gt;
  &lt;li&gt;公開されている&lt;a href=&quot;https://github.com/wyze/vscode-hybrid-next/&quot;&gt;vscode-hybrid-next&lt;/a&gt;を使おうと思ったが、少々気に食わない設定があった&lt;/li&gt;
  &lt;li&gt;同レポジトリにPRしようかと思ったがテーマのあて方が&lt;a href=&quot;https://www.sublimetext.com/docs/3/color_schemes_tmtheme.html&quot;&gt;tmTheme&lt;/a&gt;形式だったため小回りが効かない感じになってた&lt;/li&gt;
  &lt;li&gt;自分でテーマを作った &lt;a href=&quot;https://github.com/toshimaru/hybrid-next-plus&quot;&gt;hybrid-next-plus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考テーマ&quot;&gt;参考テーマ&lt;/h2&gt;

&lt;p&gt;背景やサイドバーの設定は、&lt;a href=&quot;https://atom.io/themes/one-dark-ui&quot;&gt;Atom One Dark&lt;/a&gt;を参考にした。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.github-camo.com/af4a063b48fb691fb25e664ca8e0680a31f6f1e4/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f3337383032332f32363234363831382f30383235356237362d336364362d313165372d396636642d3661653365313661383961392e706e67&quot; alt=&quot;atom one dark&quot; /&gt;&lt;/p&gt;

&lt;p&gt;:point_up: &lt;strong&gt;【図】Atom One Dark(公式READMEより引用)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;シンタックスハイライトのカラーは、&lt;a href=&quot;https://github.com/w0ng/vim-hybrid&quot;&gt;hybrid&lt;/a&gt;、&lt;a href=&quot;https://github.com/kaicataldo/hybrid-next-syntax&quot;&gt;hybrid next&lt;/a&gt;, &lt;a href=&quot;https://github.com/wyze/vscode-hybrid-next/&quot;&gt;vscode-hybrid-next&lt;/a&gt;を参考にしつつ一番しっくりくる色のあて方を選択した。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/kaicataldo/hybrid-next-syntax/master/screenshots/hybrid-next-screenshot-1.png&quot; alt=&quot;hybrid next&quot; /&gt;&lt;/p&gt;

&lt;p&gt;:point_up: &lt;strong&gt;【図】Atom Hybrid Next(公式READMEより引用)&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;最後に&quot;&gt;最後に&lt;/h2&gt;

&lt;p&gt;一応markdown, Ruby, jsonファイルあたりはちゃんと確認にしていい感じにsyntaxハイライトあたっていることを確認していますが、他の拡張子で不完全なところがあるかもなので何かありましたらPRお願いします 🙏&lt;/p&gt;

&lt;p&gt;手前味噌にはなるけどなかなかいいテーマに仕上がっていると思いますのでよかったら使ってみてください。&lt;/p&gt;

&lt;h2 id=&quot;追記&quot;&gt;追記&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/how-to-publish-vscode-extension/&quot;&gt;VS Code Extensionの公開手順&lt;/a&gt;を書きました。&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="vscode" /><summary type="html">はじめてのVS code Extensionとしてybrid Next Plusというテーマを公開してみた。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/vscode/hybrid.png" /></entry><entry><title type="html">RuboCopチームにgemの名前を譲った話</title><link href="https://blog.toshimaru.net/rubocop-rails-config/" rel="alternate" type="text/html" title="RuboCopチームにgemの名前を譲った話" /><published>2018-07-17T00:00:00+09:00</published><updated>2018-07-17T00:00:00+09:00</updated><id>https://blog.toshimaru.net/rubocop-rails-config</id><content type="html" xml:base="https://blog.toshimaru.net/rubocop-rails-config/">&lt;p&gt;かねてより僕が開発していた&lt;a href=&quot;https://github.com/toshimaru/rubocop-rails&quot;&gt;rubocop-rails&lt;/a&gt;というgemをRuboCop公式チームの要望により譲った。&lt;/p&gt;

&lt;p&gt;僕がこのgemを作った経緯とかは下記の記事の通り。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;つくったやつ | Railsと同じRuboCopの設定が利用できるrubocop-rails gemを作った - Hack Your Design! &lt;a href=&quot;https://t.co/szG0eLPetS&quot;&gt;https://t.co/szG0eLPetS&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/958123075572195331?ref_src=twsrc%5Etfw&quot;&gt;January 29, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;きっかけ&quot;&gt;きっかけ&lt;/h2&gt;

&lt;p&gt;名前を譲ることになったきっかけは下記のIssue。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rubocop-hq/rubocop/issues/5976&quot;&gt;Extract Rails Cops in a separate · Issue #5976 · rubocop-hq/rubocop&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;より正確にいうとこのIssueの前に&lt;a href=&quot;https://rubykaigi.org/2018/&quot;&gt;RubyKaigi 2018&lt;/a&gt;の懇親会でRuboCop作者から僕へ間接的に打診があり、上記のIssueに至る。&lt;/p&gt;

&lt;p&gt;RuboCopチームの要望を要約すると「RuboCop公式にRailsの拡張を作りたい。gem名はrubocop-railsとしたい。名前を頂戴！」と感じ。僕の想いとしては「RuboCop公式チームとして使いたい名前ということであればどうぞどうぞ。わかりやすい名前を付けることはRubyコミュニティ全体の利益にもなるだろうしね！」という感じ。&lt;/p&gt;

&lt;h2 id=&quot;譲るにあたりやったこと&quot;&gt;譲るにあたりやったこと&lt;/h2&gt;

&lt;p&gt;下記のようなIssueを作成して進めていった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/toshimaru/rubocop-rails/issues/31&quot;&gt;[IMPORTANT ANNOUNCEMENT] Transfer rubocop-rails gem to RuboCop Team · Issue #31 · toshimaru/rubocop-rails&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rubocop-rails&lt;/code&gt; に代わる新しいgemを作成: &lt;a href=&quot;https://github.com/toshimaru/rubocop-rails_config&quot;&gt;rubocop-rails_config&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rubocop-rails&lt;/code&gt; の新しいversionを切って、post_install_messageでRenameの旨を周知&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rubocop-rails_config&lt;/code&gt; のほうに簡単にUpdateできるようなUpdate Generator Taskを用意&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rubocop-rails&lt;/code&gt; というgemに新しいOwnerを付与&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rubocop-rails&lt;/code&gt; のRename前の古いバージョンをrubygemsから削除&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一番最後の &lt;strong&gt;古いバージョンをrubygemsから削除&lt;/strong&gt; はIssueでもやり取りしている通り、既存のビルドを壊すことになるので正直苦渋の決断であった。だけれどもRuboCopがdevelopment依存のgemであること、全く違うgemになったら既存のgemユーザーを驚かせてしまうこと、これらを総合的に考えた結果、古いバージョンを消してでもgemのRename周知を優先させようと思い至った。これに関しては正直正解はないと思う。&lt;/p&gt;

&lt;h2 id=&quot;rubocopコミッターのkoicさんが発表してくださいました&quot;&gt;RuboCopコミッターのkoicさんが発表してくださいました&lt;/h2&gt;

&lt;p&gt;本件に関してはRuboCopコミッターの&lt;a href=&quot;https://twitter.com/koic&quot;&gt;@koic&lt;/a&gt;さんも先日の&lt;a href=&quot;https://techplay.jp/event/679666&quot;&gt;Rails Developers Meetup 2018 Day 3 Extreme&lt;/a&gt;にて発表して頂いたようです。:innocent:&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-slide=&quot;57&quot; data-id=&quot;612849c52252464d8a63fc97f90c6091&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;発表エントリ: &lt;a href=&quot;http://koic.hatenablog.com/entry/railsdm-2018-day3-extreme&quot;&gt;Rails Developers Meetup 2018 Day 3 Extreme に登壇した - koicの日記&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;エピソードのご紹介ありがとうございました。:pray:&lt;/p&gt;

&lt;h2 id=&quot;参考資料&quot;&gt;参考資料&lt;/h2&gt;

&lt;p&gt;なお、gemを消す方法に関しては下記を参考にさせてもらった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.s21g.com/articles/1755&quot;&gt;公開した gem を削除する方法 - ヽ( ・∀・)ノくまくまー - s21g&lt;/a&gt;&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="rails" /><category term="rubocop" /><summary type="html">かねてより僕が開発していたrubocop-railsというgemをRuboCop公式チームの要望により譲った。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/rubocop-rail.png" /></entry><entry><title type="html">本ブログが完全https化されました</title><link href="https://blog.toshimaru.net/https-is-now-supported/" rel="alternate" type="text/html" title="本ブログが完全https化されました" /><published>2018-05-06T00:00:00+09:00</published><updated>2018-05-06T00:00:00+09:00</updated><id>https://blog.toshimaru.net/https-is-now-supported</id><content type="html" xml:base="https://blog.toshimaru.net/https-is-now-supported/">&lt;p&gt;本ブログが完全HTTPS化されましたのでお知らせ致します。&lt;/p&gt;

&lt;h2 id=&quot;github-pages-https-support&quot;&gt;GitHub Pages HTTPS Support&lt;/h2&gt;

&lt;p&gt;といっても別に何をやったというわけではなく、朝起きたら突然GitHub PagesがHTTPSをサポートしてくれてました。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-cards=&quot;hidden&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Today, custom domains on GitHub Pages are gaining support for HTTPS via &lt;a href=&quot;https://twitter.com/letsencrypt?ref_src=twsrc%5Etfw&quot;&gt;@letsencrypt&lt;/a&gt;. It&amp;#39;s another step towards making the web more secure for everyone. &lt;a href=&quot;https://t.co/MbB7Jjd3EE&quot;&gt;https://t.co/MbB7Jjd3EE&lt;/a&gt;&lt;/p&gt;&amp;mdash; GitHub (@github) &lt;a href=&quot;https://twitter.com/github/status/991366832421523456?ref_src=twsrc%5Etfw&quot;&gt;May 1, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;HTTPSで配信するために特段こちら側で何か設定が必要というわけではなく、GitHubがよしなに全て設定してくれているので本当に朝起きたらhttpをhttpsに変えてアクセスするただけで大丈夫でした。&lt;/p&gt;

&lt;p&gt;ちなみに僕は数年くらい前から「Github Pagesカスタムドメインでhttps対応してほしい！」とGitHubサポートチームに訴え続けておりましたが、この度はやっと対応してくれたということでありがたい気持ちでいっぱいです。（これでやっと同僚エンジニアから「ブログがセキュアじゃないですね！」と煽られることもなくなる…）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/https/https-github.png&quot; alt=&quot;github config&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;:point_up:GitHubのhttps設定画面&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/https/lets-encrypt.png&quot; alt=&quot;let's encrypt certification&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;:point_up:HTTPS対応に際してはLet’s Encryptの証明書が使われています&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;はてぶurl変わっちゃうよ問題&quot;&gt;はてぶURL変わっちゃうよ問題&lt;/h2&gt;

&lt;p&gt;はてなブックマークではhttpとhttpsをURLとして区別するので、今回のhttps化に伴い今までのはてなブックマーク数がリセットされることになります。ちょっと勿体無い気もしますが致し方ないですね。&lt;/p&gt;

&lt;p&gt;せっかくなので今まで本ブログに蓄積されたはてブ人気エントリ（5user以上）の現時点でのスナップショットを取っておいたので下記に一覧として公開いたします。&lt;/p&gt;

&lt;h3 id=&quot;人気エントリ5user以上一覧&quot;&gt;人気エントリ(5user以上)一覧&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/cool-ui/&quot;&gt;UIの進化を止めるうんこユーザーに我々はどう立ち向かうべ…&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/cool-ui/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/cool-ui/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/rails-frontend/&quot;&gt;Railsフロントエンド技術の今とこれから&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/rails-frontend/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/rails-frontend/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/jquery-ajaxdeferredajax&quot;&gt;jQuery モダンAjaxな書き方を目指して　〜deferredを使ったAJAX〜…&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/jquery-ajaxdeferredajax&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/jquery-ajaxdeferredajax&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/jquery-ajaxdeferredajax/&quot;&gt;jQuery モダンAjaxな書き方を目指して　〜deferredを使ったAJAX〜…&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/jquery-ajaxdeferredajax/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/jquery-ajaxdeferredajax/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/jquery-8-tips/&quot;&gt;jQuery使いが知っておくべき8つのjQueryテクニック &lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/jquery-8-tips/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/jquery-8-tips/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/rails-batch-optimization/&quot;&gt;Rails/ActiveRecord バッチ処理の最適化&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/rails-batch-optimization/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/rails-batch-optimization/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/rails-http-status-symbols/&quot;&gt;RailsのHTTPステータスのシンボル表現まとめ&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/rails-http-status-symbols/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/rails-http-status-symbols/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/git-log-graph/&quot;&gt;美しき git log –graph のエイリアス&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/git-log-graph/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/git-log-graph/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/gunosy-rails-way/&quot;&gt;GunosyでのRails開発フロー&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/gunosy-rails-way/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/gunosy-rails-way/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/scrum-training/&quot;&gt;認定スクラムマスター研修に行ってきました&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/scrum-training/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/scrum-training/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/roppongirb-speeding-up-rails/&quot;&gt;Roppongi.rbで「Rails高速化戦略」を発表しました &lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/roppongirb-speeding-up-rails/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/roppongirb-speeding-up-rails/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/belongs_to-through/&quot;&gt;【Rails】has_many, throughの逆の関連はdelegate, toかhas_one, through&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/belongs_to-through/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/belongs_to-through/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/php-trait/&quot;&gt;PHP5.4のtrait機能を理解する&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/php-trait/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/php-trait/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/git-pushgithub/&quot;&gt;github に git pushした変更の取り消し&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/git-pushgithub/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/git-pushgithub/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/rails-pry-byebug/&quot;&gt;pry-byebug を使ってRailsアプリをステップ実行する &lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/rails-pry-byebug/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/rails-pry-byebug/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/jquery-bottom-scroll/&quot;&gt;jQueryでページ最下部のスクロール時のイベントをキャッチ…&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/jquery-bottom-scroll/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/jquery-bottom-scroll/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/how-to-find-job-in-Vancouver/&quot;&gt;僕が単身海外（バンクーバー）に来て仕事を見つけるまで…&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/how-to-find-job-in-Vancouver/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/how-to-find-job-in-Vancouver/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/play-m3u8-video-in-browser/&quot;&gt;video.js で m3u8 形式の動画ファイルをブラウザで再生する &lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/play-m3u8-video-in-browser/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/play-m3u8-video-in-browser/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/rails-find_each/&quot;&gt;Railsのfind_eachの挙動を調べた&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/rails-find_each/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/rails-find_each/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/job-hunting-6/&quot;&gt;就活日記(6) KAIZEN platform Inc.&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/job-hunting-6/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/job-hunting-6/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/s3-cloudfront-cors-setting/&quot;&gt;AWS S3 + CloudFront のCORS設定手順&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/s3-cloudfront-cors-setting/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/s3-cloudfront-cors-setting/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/jquerydeferred-is-most-important-client/&quot;&gt;DeferredはjQueryにおける最も重要なクライアントサイドツール…&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/jquerydeferred-is-most-important-client/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/jquerydeferred-is-most-important-client/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/Front-end-Developer-Interview-Questions-Japanese/&quot;&gt;「フロントエンドデベロッパー面接時の質問事項」日本語…&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/Front-end-Developer-Interview-Questions-Japanese/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/Front-end-Developer-Interview-Questions-Japanese/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/8/&quot;&gt;ダメエンジニアの8つの特徴&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/8/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/8/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/docker-compose-rails/&quot;&gt;docker-compose で Rails 環境を構築する&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/docker-compose-rails/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/docker-compose-rails/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/css-animation/&quot;&gt;CSS3アニメーションを使ってサイトをリッチに &lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/css-animation/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/css-animation/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/opsworks-rails/&quot;&gt;Amazon OpsWorksでRailsアプリを簡単Chefプロビジョニング &lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/opsworks-rails/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/opsworks-rails/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/active-record-callbacks/&quot;&gt;ActiveRecordのコールバックの順番・コールバック内のロール…&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/active-record-callbacks/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/active-record-callbacks/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/ruby-percent-notation/&quot;&gt;Rubyの%の記法まとめ&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/ruby-percent-notation/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/ruby-percent-notation/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/ruby-standard-error/&quot;&gt;Rubyで独自例外を定義するときはStandardErrorを継承する &lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/ruby-standard-error/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/ruby-standard-error/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/like-a-sponge-as-an-engineer/&quot;&gt;技術者としてスポンジであり続けること　あるいは老害回…&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/like-a-sponge-as-an-engineer/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/like-a-sponge-as-an-engineer/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/linux/&quot;&gt;プロセス毎のメモリ使用量を調べるコマンド&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/linux/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/linux/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/json-schema-collaboration/&quot;&gt;JSON Schemaについて発表した&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/json-schema-collaboration/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/json-schema-collaboration/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/php-is-not-bad-language/&quot;&gt;PHPって言うほど悪い言語じゃない&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/php-is-not-bad-language/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/php-is-not-bad-language/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/job-hunting-fin/&quot;&gt;就活日記(完) 就職&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/job-hunting-fin/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/job-hunting-fin/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/rdm2018-active-record-anti-patterns/&quot;&gt;railsdm2018で「ActiveRecordデータ処理アンチパターン」を発表し…&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/rdm2018-active-record-anti-patterns/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/rdm2018-active-record-anti-patterns/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/cool-ui-after/&quot;&gt;「UIの進化を止めるうんこユーザーに我々はどう立ち向かう…&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/cool-ui-after/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/cool-ui-after/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/phpurl-safe-base64-encode/&quot;&gt;[PHP]URL safe な base64 encode メソッド&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/phpurl-safe-base64-encode/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/phpurl-safe-base64-encode/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/&quot;&gt;Hack Your Design! - Home&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/ruby-immutable-string/&quot;&gt;Ruby2.3 で導入された frozen_string_literal オプションで Immutable St…&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/ruby-immutable-string/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/ruby-immutable-string/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/rails-4-transaction-isolation/&quot;&gt;Rails4 でトランザクション分離レベルを設定する &lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/rails-4-transaction-isolation/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/rails-4-transaction-isolation/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/jqueryhidden-inputjquery/&quot;&gt;【jQuery】hidden inputタグをjQueryで追加&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/jqueryhidden-inputjquery/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/jqueryhidden-inputjquery/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/manage-schema-with-sql-in-rails/&quot;&gt;SQLファイルでRailsのスキーマ情報管理&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/manage-schema-with-sql-in-rails/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/manage-schema-with-sql-in-rails/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/chrome-dev-tool/&quot;&gt;細かすぎて伝わりにくいChrome Developerツールを使いこなそう…&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/chrome-dev-tool/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/chrome-dev-tool/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/git-29764/&quot;&gt;Git のコミットメッセージの書き方&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/git-29764/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/git-29764/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/job-hunting-0/&quot;&gt;就活日記(0) エントリー&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/job-hunting-0/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/job-hunting-0/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/publish-rails-app-in-lan/&quot;&gt;RailsアプリケーションをLAN内に公開する&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/publish-rails-app-in-lan/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/publish-rails-app-in-lan/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/git-revert-mainline/&quot;&gt;Gitのrevertの-m(mainline)オプションについて&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/git-revert-mainline/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/git-revert-mainline/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/vimsublime-text-2&quot;&gt;Vimから３日で乗り換えた、次世代モテエディタ「Sublime Text 2…&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/vimsublime-text-2&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/vimsublime-text-2&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/rfc/&quot;&gt;メールアドレスにはRFC的に使用可能な文字(!#$%&amp;amp;’*+-/=?^_`{|}~)…&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/rfc/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/rfc/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/how-to-use-composer-autoload/&quot;&gt;Composerで始める PHPのライブラリ管理&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/how-to-use-composer-autoload/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/how-to-use-composer-autoload/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/rspec-occasional-fail/&quot;&gt;RSpecが通ったり落ちたりしたときに&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/rspec-occasional-fail/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/rspec-occasional-fail/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/vimsublime-text-2/&quot;&gt;Vimから３日で乗り換えた、次世代モテエディタ「Sublime Text 2…&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/vimsublime-text-2/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/vimsublime-text-2/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/job-hunting-3/&quot;&gt;就活日記(3) Quipper&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/job-hunting-3/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/job-hunting-3/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/yapc-2015/&quot;&gt;YAPC::Asia 2015で心に残ったトーク&amp;amp;スライド #yapcasia &lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/yapc-2015/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/yapc-2015/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/macgiterror-there-was-a-problem-with-the-edit/&quot;&gt;[Mac][git]error: There was a problem with the editor ‘vi’.&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/macgiterror-there-was-a-problem-with-the-edit/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/macgiterror-there-was-a-problem-with-the-edit/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/coverage-with-codeclimate/&quot;&gt;カバレッジ率計測サービスをCoverallsからCodeClimateに乗り換え…&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/coverage-with-codeclimate/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/coverage-with-codeclimate/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/ruby-inject/&quot;&gt;Rubyのinjectを使いこなす&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/ruby-inject/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/ruby-inject/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/windows-s3-sync/&quot;&gt;WindowsコマンドでAmazon S3上にバックアップする &lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/windows-s3-sync/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/windows-s3-sync/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/digital-ocean-vagrant-puppet/&quot;&gt;1円クラウド、DigitalOceanのインスタンスをVagrant upして、puppet…&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/digital-ocean-vagrant-puppet/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/digital-ocean-vagrant-puppet/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/ruby-vs-go/&quot;&gt;Ruby vs Golang でパフォーマンス比較してみた&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/ruby-vs-go/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/ruby-vs-go/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/why-you-should-write-shitty-code/&quot;&gt;ひどいコードを書いてもよいとき&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/why-you-should-write-shitty-code/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/why-you-should-write-shitty-code/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/backbone-learn/&quot;&gt;Backbone.jsをそろそろ学習したい人のための学習リソース集（…&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/backbone-learn/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/backbone-learn/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/git-pushgithub&quot;&gt;github に git pushした変更の取り消し&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/git-pushgithub&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/git-pushgithub&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/ruby-on-google-app-engine/&quot;&gt;Ruby on Rails を Google App Engine 上で動かしてみる&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/ruby-on-google-app-engine/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/ruby-on-google-app-engine/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/rails-new-options/&quot;&gt;rails new するときによく使うオプション&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/rails-new-options/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/rails-new-options/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/job-hunting-2/&quot;&gt;就活日記(2) freee&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/job-hunting-2/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/job-hunting-2/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/php-force-property/&quot;&gt;PHPのプロパティをStrictに定義する&lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/php-force-property/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/php-force-property/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.toshimaru.net/new-xhr-fetch-asyncawait/&quot;&gt;JavaScriptのXHRの送り方いろいろ: XMLHttpRequest, fetch, async/await &lt;/a&gt; &lt;a href=&quot;http://b.hatena.ne.jp/entry/blog.toshimaru.net/new-xhr-fetch-asyncawait/&quot;&gt;&lt;img src=&quot;https://b.hatena.ne.jp/entry/image/http://blog.toshimaru.net/new-xhr-fetch-asyncawait/&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;最後に&quot;&gt;最後に&lt;/h2&gt;

&lt;p&gt;今後とも本ブログにて、有用な情報をぼちぼち発信していけたら良いな〜と思っておりますので引き続きよろしくお願いします。&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="https" /><category term="security" /><summary type="html">本ブログが完全HTTPS化されましたのでお知らせ致します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/https/https.png" /></entry><entry><title type="html">railsdm2018で「ActiveRecordデータ処理アンチパターン」を発表しました</title><link href="https://blog.toshimaru.net/rdm2018-active-record-anti-patterns/" rel="alternate" type="text/html" title="railsdm2018で「ActiveRecordデータ処理アンチパターン」を発表しました" /><published>2018-03-27T00:00:00+09:00</published><updated>2018-03-27T00:00:00+09:00</updated><id>https://blog.toshimaru.net/rdm2018-active-record-anti-patterns</id><content type="html" xml:base="https://blog.toshimaru.net/rdm2018-active-record-anti-patterns/">&lt;p&gt;&lt;a href=&quot;https://railsdm.github.io/2018/&quot;&gt;Rails Developers Meetup 2018&lt;/a&gt;で「ActiveRecordデータ処理アンチパターン」というタイトルで発表してきました。&lt;/p&gt;

&lt;h2 id=&quot;発表資料&quot;&gt;発表資料&lt;/h2&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;2bb9d7ceea4b4987bf4c8618a53a1e68&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;発表概要&quot;&gt;発表概要&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;ActiveRecordはWebエンジニア達が嫌う（？）SQLを書かずとも、Rubyオブジェクトで気軽にデータベースへアクセスできる魔法のようなツールです。しかし便利な反面、何も考えずにゴリゴリActiveRecordを使ってDBアクセスしていると、劇的に重たいクエリが発行されたり非効率的なクエリが量産されたりします。&lt;/p&gt;

  &lt;p&gt;本発表ではそれらActiveRecordで陥りがちな罠をパターン化し、ActiveRecordデータ処理アンチパターンとして発表します。&lt;/p&gt;

  &lt;p&gt;※発表では実際のサンプルコードとともにパフォーマンスの計測結果も紹介します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;事前に公開したエントリ&quot;&gt;事前に公開したエントリ&lt;/h2&gt;

&lt;p&gt;発表資料に出てくる最初の事例はこちらがベースの事例となっています。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;今月末のRails Developer Meetupに先駆けてRailsの遅いバッチ処理を400倍速くする話を書きました  | Rails/ActiveRecord バッチ処理の最適化 - Hack Your Design! &lt;a href=&quot;https://t.co/i7JZnZcuLc&quot;&gt;https://t.co/i7JZnZcuLc&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/970546164725501952?ref_src=twsrc%5Etfw&quot;&gt;March 5, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;ソースコード&quot;&gt;ソースコード&lt;/h2&gt;

&lt;p&gt;実際使ったコード、ベンチマーク結果はこちらに上がってます。コードは&lt;code class=&quot;highlighter-rouge&quot;&gt;lib/tasks/batch.rake&lt;/code&gt;、スキーマは&lt;code class=&quot;highlighter-rouge&quot;&gt;schema.rb&lt;/code&gt;、シードデータは&lt;code class=&quot;highlighter-rouge&quot;&gt;db/*_seed.csv&lt;/code&gt;、ベンチマーク結果はCircleCIをそれぞれ参照ください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/toshimaru/rdm-rails5.1&quot;&gt;https://github.com/toshimaru/rdm-rails5.1&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;発表モチベーション&quot;&gt;発表モチベーション&lt;/h2&gt;

&lt;p&gt;今回の発表に至るモチベーションとしては、僕が実際に踏んだActiveRecordの重い処理とか他のエンジニアが書いたActiveRecordコードのパフォーマンス改善のための修正などをやっている中で、その良くない処理及びそれに対する解決アプローチがパターン化できると思ったからです。&lt;/p&gt;

&lt;p&gt;僕のアタマの中に「こういうアンチパターンがありそう」というアンチパターン候補がある程度リストアップされていたので、今回の発表を機にそれらにそれっぽい名前を付けて、同時に机上の空論にならないようにそれらをコードに落として、聞き手がイメージしやすいように具体的な事例とともに紹介しました。&lt;/p&gt;

&lt;p&gt;結果として、自分の中にあったActiveRecordアンチパターンを命名とともに整理できたことは大変良かったと思っています。またこの資料さえチームに共有しとけば、今後レビューのときとかでもアンチパターンに関するコミュニケーションがしやすくなって個人的に助かりそうです。&lt;/p&gt;

&lt;h2 id=&quot;紹介したアンチパターン&quot;&gt;紹介したアンチパターン&lt;/h2&gt;

&lt;p&gt;発表内で紹介したアンチパターンがこちらです。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;All Each Pattern&lt;/li&gt;
  &lt;li&gt;N+1 Update Queries Pattern&lt;/li&gt;
  &lt;li&gt;Ruby Aggregation Pattern&lt;/li&gt;
  &lt;li&gt;N+1 Queries Pattern&lt;/li&gt;
  &lt;li&gt;Unnecessary Query Pattern&lt;/li&gt;
  &lt;li&gt;Unnecessary Mode Initialization Pattern&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;紹介できなかったアンチパターン&quot;&gt;紹介できなかったアンチパターン&lt;/h2&gt;

&lt;p&gt;何かしらアンチパターン化できそうだけど、時間の都合上しなかったアンチパターンがこちらです。発表しなかったので命名は適当です。&lt;/p&gt;

&lt;h3 id=&quot;なんでもincludesパターン&quot;&gt;なんでもincludesパターン&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;joins&lt;/code&gt;で良いのになんでも&lt;code class=&quot;highlighter-rouge&quot;&gt;includes&lt;/code&gt;で解決しようとしちゃうパターン。このへんは下記の解説に詳しいです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://qiita.com/k0kubun/items/80c5a5494f53bb88dc58&quot;&gt;ActiveRecordのjoinsとpreloadとincludesとeager_loadの違い - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;too-many-find_or_create_by-パターン&quot;&gt;Too many find_or_create_by パターン&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;find_or_create_by&lt;/code&gt;は、オブジェクトが存在する場合は取得、なければ作成って挙動をするやつです。これをループ内で使いまくっちゃうパターン。&lt;/p&gt;

&lt;p&gt;そんなときはSQLのUPSERTの機能を使うのが得策。具体的にはMySQLであれば&lt;code class=&quot;highlighter-rouge&quot;&gt;INSERT...ON DUPLICATE KEY UPDATE&lt;/code&gt;です。&lt;/p&gt;

&lt;p&gt;残念なことにUPSERTはActiveRecordの標準機能では提供されていないので、&lt;a href=&quot;https://github.com/zdennis/activerecord-import&quot;&gt;activerecord-import&lt;/a&gt;などのgemを使って解決する必要があります。&lt;/p&gt;

&lt;h3 id=&quot;has_many関連のcount方法いろいろあるよ問題&quot;&gt;has_many関連のcount方法いろいろあるよ問題&lt;/h3&gt;

&lt;p&gt;ちゃんとパターン化できていませんが、この問題もなかなか難しい問題です。どのメソッド使ったらよいかはケースバイケースで変わってくるので詳しくは下記を参照されたし。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://qiita.com/nay3/items/1cda39fb58569d832203&quot;&gt;ActiveRecord の has_many関連、件数を調べるメソッドはどれを使えばいい？ - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;q--a&quot;&gt;Q &amp;amp; A&lt;/h2&gt;

&lt;h3 id=&quot;アンチパターンの出典は&quot;&gt;アンチパターンの出典は？&lt;/h3&gt;

&lt;p&gt;全部オレです（笑&lt;/p&gt;

&lt;p&gt;一応元ネタというかインスパイアを受けた本としては発表内でも紹介している『SQLアンチパターン』です。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=4873115892&amp;amp;linkId=6903fbe4f4a55cf4f47b4036bf2f350a&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;こちらの本が原著は英語で書かれており、それに倣うかたちで英語でアンチパターンを命名しました。まぁ平たく言うとカッコつけて英語にしました以上の理由はありません :smile:&lt;/p&gt;

&lt;h3 id=&quot;事例１usercreated_atにindex貼らないの&quot;&gt;（事例１）User.created_atにINDEX貼らないの？&lt;/h3&gt;

&lt;p&gt;下記二点の理由により貼りませんでした。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;前提事項としてDBの最適化はしないと述べた&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;User.created_at&lt;/code&gt; にINDEXを貼ってもINDEX効かない&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;User.created_at&lt;/code&gt;にINDEX(&lt;code class=&quot;highlighter-rouge&quot;&gt;index_users_on_created_at&lt;/code&gt;)を貼ったあとの実行計画がこちらになります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; EXPLAIN UPDATE `users` SET point = point + 100 WHERE (created_at &amp;gt;= '2017-01-01') \G
*************************** 1. row ***************************
           id: 1
  select_type: UPDATE
        table: users
   partitions: NULL
         type: index
possible_keys: index_users_on_created_at
          key: PRIMARY
      key_len: 8
          ref: NULL
         rows: 99574
     filtered: 100.00
        Extra: Using where
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;INDEX貼ってても対象範囲が大きいとINDEX効かなくなるんです。そして今回のケースはそれに当たります。（この挙動、実は僕も全然知りませんでした…）&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;mysqlで検索の対象範囲が大きくなりすぎるとindexが効かなくなるの知らなかった | [MYSQL] datetimeカラムのインデックスの使われ方をテストしてみた │ revdev &lt;a href=&quot;https://t.co/2JK7VD7Ttv&quot;&gt;https://t.co/2JK7VD7Ttv&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/974924182369722368?ref_src=twsrc%5Etfw&quot;&gt;March 17, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;テストとして条件の範囲を小さくした実行計画がこちらになります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; EXPLAIN UPDATE `users` SET point = point + 100 WHERE (created_at &amp;gt;= '2018-01-01') \G
*************************** 1. row ***************************
           id: 1
  select_type: UPDATE
        table: users
   partitions: NULL
         type: range
possible_keys: index_users_on_created_at
          key: index_users_on_created_at
      key_len: 5
          ref: const
         rows: 5903
     filtered: 100.00
        Extra: Using where
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;きちんとこちらではINDEXが効いてます。&lt;/p&gt;

&lt;h3 id=&quot;事例２改善１のコードのモデルってロードされている&quot;&gt;（事例２）改善１のコードのモデルってロードされている？&lt;/h3&gt;

&lt;p&gt;会場であった質問です。こちらはRails consoleで実際のコードを動かしてあげれば一目瞭然です。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; Post.group(:user_id).select(&quot;user_id, SUM(like_count) AS like_count&quot;).order(&quot;like_count DESC&quot;) .limit(100)
  Post Load (976.6ms)  SELECT  user_id, SUM(like_count) AS like_count FROM `posts` GROUP BY `posts`.`user_id` ORDER BY like_count DESC LIMIT 11
=&amp;gt; #&amp;lt;ActiveRecord::Relation [#&amp;lt;Post id: nil, user_id: 2632, like_count: 832&amp;gt;, #&amp;lt;Post id: nil, user_id: 51965, like_count: 800&amp;gt;, #&amp;lt;Post id: nil, user_id: 25068, like_count: 783&amp;gt;, ...]&amp;gt;

&amp;gt; Post.group(:user_id).order(&quot;SUM(like_count) DESC&quot;) .limit(3000).pluck(:user_id)
   (668.3ms)  SELECT  `posts`.`user_id` FROM `posts` GROUP BY `posts`.`user_id` ORDER BY SUM(like_count) DESC LIMIT 3000
=&amp;gt; [2632, 51965, 25068, 8515, 84933, 67763, 89631, 69494, 78805, 17541, 53344, 7618, 92652, 13704, 94308, 96778, ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一つ目の&lt;code class=&quot;highlighter-rouge&quot;&gt;.select&lt;/code&gt;を使ったコードはログに&lt;code class=&quot;highlighter-rouge&quot;&gt;Post Load&lt;/code&gt;と出現している通り、Postモデルがロードされている一方、&lt;code class=&quot;highlighter-rouge&quot;&gt;.pluck&lt;/code&gt;のほうでは&lt;code class=&quot;highlighter-rouge&quot;&gt;Post Load&lt;/code&gt;とはなにも出ず単純に走ったクエリのみがログに出力されています。&lt;/p&gt;

&lt;h3 id=&quot;紹介したアンチパターンどれくらいの件数で障害に繋がりそう&quot;&gt;紹介したアンチパターン、どれくらいの件数で障害に繋がりそう？&lt;/h3&gt;

&lt;p&gt;今回紹介した事例は数千件-数十万くらいの程度のデータ量なのでそこまで酷いパフォーマンス結果は出ませんでしたが、例えば事例１でこれがUserレコード数百万件とか、事例３でレコードが数十万件くらいのオーダーになってくるとボトルネックが表出しそうかな、という印象です。&lt;/p&gt;

&lt;p&gt;いずれにせよそこそこの規模のアプリケーションになってくると、数百万レコードを扱うのは当たり前の世界になってくると思うので、そのレコード数をどうActiveRecordの世界で上手に扱うは逃げられないテーマになってくるかなと思います。&lt;/p&gt;

&lt;h2 id=&quot;発表を終えて&quot;&gt;発表を終えて&lt;/h2&gt;

&lt;p&gt;30minsと長めの発表は&lt;a href=&quot;/aws-summit-tokyo-2015/&quot;&gt;AWS Summitぶり&lt;/a&gt;だったので時間配分にやや不安があったけど、当日は発表を巻くこともなく余裕をもって25分くらいで発表を終えられたのでよかったです。&lt;/p&gt;

&lt;h2 id=&quot;その他の資料&quot;&gt;その他の資料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Rails Developer Meetup 2018の全体の発表資料はこちら: &lt;a href=&quot;https://qiita.com/dyoshimitsu/items/20a41ab656d2da80e4d9&quot;&gt;Rails Developers Meetup 2018 スライドまとめ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="presentation" /><category term="activerecord" /><category term="rails" /><summary type="html">Rails Developers Meetup 2018で「ActiveRecordデータ処理アンチパターン」というタイトルで発表してきました。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/railsdm/rdm2018.png" /></entry><entry><title type="html">Rails/ActiveRecord バッチ処理の最適化</title><link href="https://blog.toshimaru.net/rails-batch-optimization/" rel="alternate" type="text/html" title="Rails/ActiveRecord バッチ処理の最適化" /><published>2018-03-05T00:00:00+09:00</published><updated>2018-03-05T00:00:00+09:00</updated><id>https://blog.toshimaru.net/rails-batch-optimization</id><content type="html" xml:base="https://blog.toshimaru.net/rails-batch-optimization/">&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Railsのバッチ処理最適化の記事書いたら需要あるかな&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/936796457931128832?ref_src=twsrc%5Etfw&quot;&gt;December 2, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;ということで今日はRailsバッチ処理の最適化について書いてみたいと思います。&lt;/p&gt;

&lt;h2 id=&quot;検証環境&quot;&gt;検証環境&lt;/h2&gt;

&lt;p&gt;コードの検証に使った環境は下記の通りです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;macOS High Sierra (2.3 GHz Intel Core i5 / メモリ8G)&lt;/li&gt;
  &lt;li&gt;Ruby 2.5&lt;/li&gt;
  &lt;li&gt;Rails 5.1&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;前提条件&quot;&gt;前提条件&lt;/h2&gt;

&lt;p&gt;最適化の前提条件としては下記の通りです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;バッチはrakeタスクとして実行する&lt;/li&gt;
  &lt;li&gt;今回、最適化対象とするのは &lt;strong&gt;Userモデルのバッチ処理&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;使用するUserモデルは&lt;a href=&quot;https://github.com/plataformatec/devise/&quot;&gt;devise&lt;/a&gt;で作られるUserモデル(&lt;code class=&quot;highlighter-rouge&quot;&gt;rails generate devise:install&lt;/code&gt;)を基本として、そのスキーマ定義にint型のpointカラムをつけたもの&lt;/li&gt;
      &lt;li&gt;pointカラムは登録ユーザーが自由につかえるポイントの意&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Userデータとして事前に &lt;strong&gt;50万件のユーザーデータ&lt;/strong&gt; を投入しておく&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dalibornasevic.com/posts/68-processing-large-csv-files-with-ruby&quot;&gt;こちらのコード&lt;/a&gt;を参考に処理の &lt;strong&gt;実行時間&lt;/strong&gt; と &lt;strong&gt;メモリ使用量&lt;/strong&gt; を計測する&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;execute&lt;/code&gt;などによる直接SQL実行はせずにDB操作を行う&lt;/li&gt;
  &lt;li&gt;シンプルにするために、登録日 = &lt;code class=&quot;highlighter-rouge&quot;&gt;User.created_at&lt;/code&gt;とする
    &lt;ul&gt;
      &lt;li&gt;Userのタイムゾーンは無いものとする（すべてUTCとして扱う）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;データベースのトランザクション処理は考慮しない&lt;/li&gt;
  &lt;li&gt;今回行う最適化の対象はアプリケーションコードでありDBの最適化は考えない&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;オリジナルコード&quot;&gt;オリジナルコード&lt;/h2&gt;

&lt;p&gt;さて今回最適化するコードは下記です。処理内容としては &lt;strong&gt;全ユーザーの中から2017年以降の登録ユーザーへ100ポイントを付与する&lt;/strong&gt; というものです。いかにも販促活動の一環としてありそうな話です（&lt;code class=&quot;highlighter-rouge&quot;&gt;2017年以降&lt;/code&gt;のところの条件は別になんでも良かったのですが、処理対象をある程度確保するために今回はそのように設定しました）。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Task: batch:original&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;created_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2017-01-01&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;あなたはこのコードをぱっと見てどこが悪いかすぐにわかりますか？（言うまでもなくこのコードは問題アリアリのコードです!!）&lt;/p&gt;

&lt;p&gt;中級者以上のRailsエンジニアであれば「そんなコードは絶対書かないよ！」と思うかもしれませんが、「RailsでWebプログラミングを初めてまだ一ヶ月です！」みたいな初級エンジニアであれば上記のように書いても全然おかしくはないコードだと思います。&lt;/p&gt;

&lt;h3 id=&quot;ベンチマーク&quot;&gt;ベンチマーク&lt;/h3&gt;

&lt;p&gt;まずはこの問題のあるコードがどれだけ時間がかかっているかを計測してみましょう。&lt;/p&gt;

&lt;p&gt;※ 前提条件で書いた通り、&lt;a href=&quot;https://dalibornasevic.com/posts/68-processing-large-csv-files-with-ruby&quot;&gt;こちらのコード&lt;/a&gt;を参考に時間とメモリ使用量を計測します。また結果は数回実施した上で大きく外れていない平均的なスコア結果を掲載します。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; rake batch:original
&lt;span class=&quot;go&quot;&gt;Time: 339.42 secs
Memory: 2219.72 MB
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;実行時間は340秒、メモリ使用量は2200MB程でした。今回の最適化のゴールは &lt;strong&gt;この処理時間をできるだけ速くして、あわせてメモリ使用量も抑えることです。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;では早速このコードを最適化していきましょう。&lt;/p&gt;

&lt;h2 id=&quot;最適化1-簡単な最適化&quot;&gt;最適化1: 簡単な最適化&lt;/h2&gt;

&lt;p&gt;まずは簡単な最適化から始めましょう。日付の比較は&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;を使うよりも&lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt;クラスを使ったほうが速そうです。また、ループの中で何度も同じ値が使われるのも良くないので定数に切り出しちゃいましょう。結果、下記のコードのようになりました。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Task: batch:improvement1&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;POINT_DATE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2017&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;created_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;POINT_DATE&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ベンチマーク-1&quot;&gt;ベンチマーク&lt;/h3&gt;

&lt;p&gt;さて計測結果です。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; rake batch:improvement1
&lt;span class=&quot;go&quot;&gt;Time: 320.0 secs
Memory: 2244.71 MB
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;メモリ使用量は変わらず、実行時間は10数秒程度速くなったくらいでしょうか。小さな最適化レベルでまだまだ全然速くなったとは言えません。&lt;/p&gt;

&lt;h2 id=&quot;最適化2-where--each-を使う&quot;&gt;最適化2: where &amp;amp; each を使う&lt;/h2&gt;

&lt;p&gt;次はもう少し本格的な最適化を入れていきましょう。&lt;/p&gt;

&lt;p&gt;まずは&lt;code class=&quot;highlighter-rouge&quot;&gt;User.all.each&lt;/code&gt;で全件ユーザーを取得している点が真っ先に気になるところです。これは &lt;strong&gt;全件取得せず2017年以降の登録ユーザーをあらかじめフィルターしてからループさせる&lt;/strong&gt; ほうが良さそうです。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Task: batch:improvement2&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;created_at &amp;gt;= ?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;POINT_DATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;あらかじめ処理対象ユーザーだけをフィルターできているので、ループ内の&lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;も消すことができました。&lt;/p&gt;

&lt;h3 id=&quot;ベンチマーク-2&quot;&gt;ベンチマーク&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; rake batch:improvement2
&lt;span class=&quot;go&quot;&gt;Time: 294.35 secs
Memory: 1623.5 MB
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;実行時間が前の結果より20秒程改善、メモリ消費もユーザーを全件取得する必要がなくなった分、500MB程空きました。良い感じですね。&lt;/p&gt;

&lt;h2 id=&quot;最適化3-find_each-を使う&quot;&gt;最適化3: find_each を使う&lt;/h2&gt;

&lt;p&gt;ちょっと待って下さい、大量データを一度にロードしなくてもいいように、ActiveRecordが&lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveRecord/Batches.html#method-i-find_each&quot;&gt;find_each&lt;/a&gt;という便利メソッドを用意してくれてるのでした。これを使わない手はないでしょう。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Task: batch:improvement3&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;created_at &amp;gt;= ?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;POINT_DATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これで少しつづユーザーをロードして処理してくれるようになり、メモリに優しいコードになったと思います。&lt;/p&gt;

&lt;h3 id=&quot;ベンチマーク-3&quot;&gt;ベンチマーク&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rake batch:improvement3
Time: 290.88 secs
Memory: 31.41 MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;実行時間が前の結果と変わらないこそすれ、&lt;strong&gt;メモリ使用量は前の結果の50分の一となりました。&lt;/strong&gt; 大きな改善と言っていいでしょう。&lt;/p&gt;

&lt;h2 id=&quot;最適化4-in_batches--update_all-を使う&quot;&gt;最適化4: in_batches &amp;amp; update_all を使う&lt;/h2&gt;

&lt;p&gt;ここで一件一件&lt;code class=&quot;highlighter-rouge&quot;&gt;update&lt;/code&gt;が走る点が気になってきました。そこはActiveRecordの&lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveRecord/Relation.html#method-i-update_all&quot;&gt;update_all&lt;/a&gt;を使ってまとめて更新するようにしてあげれば解決できそうです。&lt;/p&gt;

&lt;p&gt;また&lt;code class=&quot;highlighter-rouge&quot;&gt;update_all&lt;/code&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord::Relation&lt;/code&gt;のメソッドですが、&lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord::Relation&lt;/code&gt;を先の&lt;code class=&quot;highlighter-rouge&quot;&gt;find_each&lt;/code&gt;のように返してくれる便利メソッドが&lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveRecord/Batches.html#method-i-in_batches&quot;&gt;in_batches&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;この&lt;code class=&quot;highlighter-rouge&quot;&gt;in_batches&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;update_all&lt;/code&gt;を組み合わせて処理してあげれば効率良く更新できそうな気がします。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Task: batch:improvement4&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;created_at &amp;gt;= ?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;POINT_DATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;in_batches&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;point = point + 100&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ベンチマーク-4&quot;&gt;ベンチマーク&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; rake batch:improvement4
&lt;span class=&quot;go&quot;&gt;Time: 2.46 secs
Memory: 7.26 MB
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;実行時間が100倍速くなりました。&lt;/strong&gt; 劇的な改善と言っていいでしょう。またメモリの使用量も前の結果よりさらに抑えられています。&lt;/p&gt;

&lt;h2 id=&quot;最適化5-where--update_all&quot;&gt;最適化5: where &amp;amp; update_all&lt;/h2&gt;

&lt;p&gt;勘の良い方なら既にお気づきですね。…ハイ、先のコードは&lt;code class=&quot;highlighter-rouge&quot;&gt;in_batches&lt;/code&gt;すら不要です。単純にupdate対象を&lt;code class=&quot;highlighter-rouge&quot;&gt;where&lt;/code&gt;でフィルターした上で&lt;code class=&quot;highlighter-rouge&quot;&gt;update_all&lt;/code&gt;すれば良さそうです。出来上がったコードがこちら。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Task: batch:improvement5&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;created_at &amp;gt;= ?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;POINT_DATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;point = point + 100&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一行のシンプルなコードに仕上がりました。&lt;/p&gt;

&lt;h3 id=&quot;ベンチマーク-5&quot;&gt;ベンチマーク&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rake batch:improvement5
Time: 0.78 secs
Memory: 0.82 MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;実行時間は前の結果より3倍早くなり、メモリ使用量もさらに10分の一まで抑えられました。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;これを今回の最適化コードの最終形としたいと思います。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;追記ここから&lt;/em&gt;&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;これcreated_atにインデックスがあろうがなかろうが全舐めして1秒弱で終わるレコード数ならいいのだけど、そうだとしてもsaveをupdate_allにした時点でcallbackが起きなくなって元と等価ではなくなるから仕事で真似するときは詳しい人にちゃんとレビューしてもらってから投入したほうがよさそう。&lt;/p&gt;&amp;mdash; Ryuta Kamizono (@kamipo) &lt;a href=&quot;https://twitter.com/kamipo/status/970574529452900352?ref_src=twsrc%5Etfw&quot;&gt;March 5, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;kamipoさんからご指摘頂いたとおり、&lt;code class=&quot;highlighter-rouge&quot;&gt;update_all&lt;/code&gt;は通常のActiveRecordの更新とは異なりcallback, validationをスキップするという仕様となっております。よってオリジナルコードとは等価な処理では無くなっているので、実際の現場においては&lt;code class=&quot;highlighter-rouge&quot;&gt;save&lt;/code&gt;から&lt;code class=&quot;highlighter-rouge&quot;&gt;update_all&lt;/code&gt;に変更する際は「本当にcallback, validationスキップしても大丈夫なんだっけ？」ということをしっかり考えてから実施するようにしてください。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;it does not trigger Active Record callbacks or validations&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;http://api.rubyonrails.org/classes/ActiveRecord/Relation.html#method-i-update_all&lt;/p&gt;

&lt;p&gt;なお今回のコード例ではモデルのcallback, validationをスキップしても問題ないコードとして話を進めています。&lt;/p&gt;

&lt;p&gt;加えて、今回データベースの最適化は最適化の範囲外としたので&lt;code class=&quot;highlighter-rouge&quot;&gt;created_at&lt;/code&gt;カラムのindexは貼りませんでした。実際の現場においてはRubyのコードレベルの最適化に加えてデータベースの最適化も考えてINDEXを貼ることも検討したほうがいいでしょう。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;追記ここまで&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;最終結果&quot;&gt;最終結果&lt;/h2&gt;

&lt;p&gt;オリジナルコードと最適化済みの最終コードを比較すると下記の通りの改善が確認できました。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;実行時間&lt;/th&gt;
      &lt;th&gt;メモリ消費&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;オリジナルコード&lt;/td&gt;
      &lt;td&gt;339.42 secs&lt;/td&gt;
      &lt;td&gt;2219.72 MB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;最適化コード&lt;/td&gt;
      &lt;td&gt;0.78 secs&lt;/td&gt;
      &lt;td&gt;0.82 MB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;改善結果&lt;/td&gt;
      &lt;td&gt;:rocket: &lt;strong&gt;435倍高速化&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;:recycle: &lt;strong&gt;約2700分の一まで省メモリ化&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;activerecordデータ処理アンチパターンで発表します&quot;&gt;「ActiveRecordデータ処理アンチパターン」で発表します&lt;/h2&gt;

&lt;p&gt;上述したようなオリジナルコードは極端な例ではありますが、ActiveRecordでデータを扱うときはきちんと遅くならないように意識してバッチ処理を書かないと極端に遅くなってしまうケースがあります。&lt;/p&gt;

&lt;p&gt;そんなActiveRecordデータ処理で陥りがちな罠をパターン化し今月のRails Develper Meetupにて発表する予定です。ご興味あれば是非。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;3月25日に「ActiveRecordアンチパターン」的な内容で発表しますー | Rails Developers Meetup 2018: Day 2｜IT勉強会ならTECH PLAY［テックプレイ］ &lt;a href=&quot;https://t.co/QJgdMF92Sr&quot;&gt;https://t.co/QJgdMF92Sr&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/960340809005506561?ref_src=twsrc%5Etfw&quot;&gt;February 5, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;参考リンク&quot;&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveRecord/Relation.html&quot;&gt;ActiveRecord::Relation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveRecord/Batches.html&quot;&gt;ActiveRecord::Batches&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="rails" /><category term="activerecord" /><summary type="html">Railsのバッチ処理最適化の記事書いたら需要あるかな&amp;mdash; toshimaru (@toshimaru_e) December 2, 2017</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/railsdm/ar-optimization.png" /></entry><entry><title type="html">ヤフーの1on1とシリコンバレー式1on1の本を読んだ</title><link href="https://blog.toshimaru.net/1-on-1-book-memo/" rel="alternate" type="text/html" title="ヤフーの1on1とシリコンバレー式1on1の本を読んだ" /><published>2018-02-10T00:00:00+09:00</published><updated>2018-02-10T00:00:00+09:00</updated><id>https://blog.toshimaru.net/1-on-1-book-memo</id><content type="html" xml:base="https://blog.toshimaru.net/1-on-1-book-memo/">&lt;p&gt;1 on 1 をチームで実施することとなり、勉強がてら『&lt;a href=&quot;http://amzn.to/2GNg6b5&quot;&gt;シリコンバレー式 最強の育て方 ― 人材マネジメントの新しい常識 1 on1ミーティング&lt;/a&gt;』と『&lt;a href=&quot;http://amzn.to/2GKRNu2&quot;&gt;ヤフーの1on1―――部下を成長させるコミュニケーションの技法&lt;/a&gt;』の２冊を読んだ。&lt;/p&gt;

&lt;p&gt;※以下、それぞれをシリコンバレー式1on1本とYahoo 1on1本と表記する&lt;/p&gt;

&lt;h2 id=&quot;両本のちがい&quot;&gt;両本のちがい&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;シリコンバレー式1on1本
    &lt;ul&gt;
      &lt;li&gt;1 on 1の必要性、1 on 1で何を話すべきかが体系的にまとまっている&lt;/li&gt;
      &lt;li&gt;1 on 1の質問・伝え方例一覧が巻末にある&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Yahoo 1on1本
    &lt;ul&gt;
      &lt;li&gt;1 on 1における上司のロールとしてはコーチング的な要素強い&lt;/li&gt;
      &lt;li&gt;1 on 1 での改善事例、サクセスストーリーが漫画・会話形式多く書かれている&lt;/li&gt;
      &lt;li&gt;コミュニケーションの細かなテクニック・Tipsも多く書かれている&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;シリコンバレー式1on1本のほうで体系的に1 on 1の必要性・話すべきことを掴んで、実際に1 on 1の開催イメージを掴んでいくためにYahoo 1on1本を読むと良い。&lt;/p&gt;

&lt;h2 id=&quot;1-on-1とは何か&quot;&gt;1 on 1とは何か？&lt;/h2&gt;

&lt;p&gt;1 on 1とは上司と部下で行われる１対１で話をする場のことである&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。日本語で言うと面談…だが面談というと人事面談や評価面談などのように堅い印象があるので、あえて1 on 1という呼び方をすることが多い。&lt;/p&gt;

&lt;h2 id=&quot;1-on-1の目的&quot;&gt;1 on 1の目的&lt;/h2&gt;

&lt;p&gt;1 on 1 の目的としては下記が挙げられる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;部下との関係性の構築
    &lt;ul&gt;
      &lt;li&gt;業務ではできない質の高いコミュニケーションを行う&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;部下のキャリア開発
    &lt;ul&gt;
      &lt;li&gt;部下の短期的キャリア・中長期のキャリア開発を支援&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;部下のパフォーマンス管理
    &lt;ul&gt;
      &lt;li&gt;目標管理&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;部下のモチベーション向上
    &lt;ul&gt;
      &lt;li&gt;困っていること・業務ブロッカーの排除&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;部下の成長支援
    &lt;ul&gt;
      &lt;li&gt;フィードバック&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そして上司はこれらの1 on 1目的をきちんと部下に説明すること。部下が1 on 1に意義が見いだせなかったり、イヤイヤ開催するような1 on 1であれば1 on 1はすぐに形骸化してしまうので、しっかり上司は目的を伝えて納得してもらった上で1 on 1を開催すること。&lt;/p&gt;

&lt;h2 id=&quot;1-on-1で話すこと&quot;&gt;1 on 1で話すこと&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/1on1/1on1-topics.png&quot; alt=&quot;シリコンバレー式&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;シリコンバレー式1on1本より図を引用&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;プライベート相互理解
    &lt;ul&gt;
      &lt;li&gt;雑談の中から聞きだせるとよい。関係性を構築する上で相手の人となりは知っておくのが基本。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;心身の健康チェック
    &lt;ul&gt;
      &lt;li&gt;心身の状態が問題ないか。業務量が過多になっていたり、業務時間が不規則になっていないか。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;モチベーションアップ
    &lt;ul&gt;
      &lt;li&gt;モチベーションを下げる要因を取り除く
        &lt;ul&gt;
          &lt;li&gt;何か困っていること・業務を行う上でのブロッカーがあるのであればその話をきちんと聞く（傾聴/アクティブリスニング）&lt;/li&gt;
          &lt;li&gt;上司は部下への否定ではなく共感を示す&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;モチベーションを上げる要因を作り出す
        &lt;ul&gt;
          &lt;li&gt;ほめる/承認する&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;業務・組織課題の改善
    &lt;ul&gt;
      &lt;li&gt;業務課題の改善
        &lt;ul&gt;
          &lt;li&gt;課題を聞くとともに将来起こりうるリスクも確認しておくと良い&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;チーム/組織課題の改善&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;目標設定・評価
    &lt;ul&gt;
      &lt;li&gt;マネージャーは正しい評価をするのではなく、部下が納得できる評価が必要
        &lt;ul&gt;
          &lt;li&gt;納得感を持てなければ部下が建設的に目標に向き合えない&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;能力開発・キャリア支援
    &lt;ul&gt;
      &lt;li&gt;経験学習のサイクルを回す&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;戦略・方針の伝達
    &lt;ul&gt;
      &lt;li&gt;経営陣などの上層部の戦略・方針をその背景も含めて適切に部下に伝達する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;1-on-1は部下のための時間&quot;&gt;1 on 1は部下のための時間&lt;/h2&gt;

&lt;p&gt;1 on 1は会社のための時間でもなく上司のための時間ではなく &lt;strong&gt;部下のための時間&lt;/strong&gt; だ。&lt;/p&gt;

&lt;p&gt;1 on 1で話すトピックは基本的には上司が決めてファシリテートしていくものであるが、部下が話したいトピックがある場合はそちらを優先する。&lt;/p&gt;

&lt;p&gt;1 on 1 内で話している時間も7-8割くらいが部下が話す時間になるようにするのが理想的である。&lt;/p&gt;

&lt;h2 id=&quot;1-on-1メモを作ろう&quot;&gt;1 on 1メモを作ろう&lt;/h2&gt;

&lt;p&gt;1 on 1 で話した内容を忘れないように、きちんと話したことをメモとして書き残しておく。&lt;/p&gt;

&lt;p&gt;メモを残すならば今ならグーグルDocsなどのクラウドサービスを使うのが良いだろう。上司・部下だけが閲覧できるような設定にしておき、メモは共同編集しておけるようにしておくと良い。&lt;/p&gt;

&lt;p&gt;上司は共有用のドキュメントとは別に部下の個人データを残すドキュメントも用意しておくとよい。そうすることで話が進めやすくなったり担当が変わったときの情報の引き継ぎがやりやすくなる。&lt;/p&gt;

&lt;h2 id=&quot;心理的安全性の確保&quot;&gt;心理的安全性の確保&lt;/h2&gt;

&lt;p&gt;1 on 1は部下が率直に、気兼ねなく上司と話をできる場でなければならない。言い換えると上司は部下の心理的安全性を確保するように気をつけなければならない。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;心理的安全性とは、自分の言動が他者に与える影響を強く意識することなく感じたままの想いを素直に伝えることのできる環境や雰囲気のことです。&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://bizhint.jp/keyword/101187&quot;&gt;心理的安全性とは？googleが発見したチーム生産性を高める唯一の方法 | BizHint HR&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;心理的安全性を確保するにはどうすればよいか。&lt;/p&gt;

&lt;p&gt;まず、上司は部下一人ひとりときちんと向き合い話を傾聴する姿勢が求められる。部下の話を先取ったり途中で遮ることはやめること。&lt;/p&gt;

&lt;p&gt;また、上司は部下の話を頭ごなしに否定するのではなく共感を示す必要がある。否定する必要があるときはニュートラルな上手な言い回しをすること。&lt;/p&gt;

&lt;p&gt;そして目標設定・評価や業務アサインはきちんと部下が納得感を持てるような説明が上司に求められる。上司から部下への一方的な設定は命令感が強くなり部下が発言しにくくなる可能性がある&lt;/p&gt;

&lt;h2 id=&quot;1-on-1の頻度について&quot;&gt;1 on 1の頻度について&lt;/h2&gt;

&lt;p&gt;Yahoo社の場合だと週一回、30分の1 on 1ミーティングを実施しているとのことだ。フィードバックループを素早く回していくためにはそれくらいの頻度が丁度良いらしい。&lt;/p&gt;

&lt;p&gt;とはいえ現実問題としてマネージャーは忙しいのでなかなかそこまでの時間がとれないかもしれない。であれば隔週、最低でも月一回は1 on 1を実施する。1 on 1 において重要なのは定期的に継続して実践することだ。&lt;/p&gt;

&lt;h2 id=&quot;次のアクションを決める&quot;&gt;次のアクションを決める&lt;/h2&gt;

&lt;p&gt;1 on 1 の中でタスクや確認事項が生じた場合はきちんと &lt;strong&gt;次のアクション（宿題）&lt;/strong&gt; として残しておく。&lt;/p&gt;

&lt;p&gt;そのアクションがきちんと達成できているかは、次回の1 on 1時に必ず確認する。積み残した宿題があるのであれば出来なかった理由をしっかり確認して次回のアクションに繋げる。&lt;/p&gt;

&lt;h2 id=&quot;1-on-1を通して成長を支援する&quot;&gt;1 on 1を通して成長を支援する&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/1on1/cycle.png&quot; alt=&quot;経験学習サイクル&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;シリコンバレー式1on1本より図を引用&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;どちらの本も1 on 1での成長を促すために &lt;strong&gt;経験学習サイクル&lt;/strong&gt; を回すことが推奨されている。&lt;/p&gt;

&lt;p&gt;1 on 1ではこのサイクルが上手に回るようにサポートする。上司は1 on 1のやり取りの中で上図の2(振り返り),3(教訓・学びの気づき),4(計画)を部下の口から引き出せるようにうまく働きかけをおこなう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/1on1/coaching.png&quot; alt=&quot;コーチング&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Yahoo 1on1本より図を引用&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;所感&quot;&gt;所感&lt;/h2&gt;

&lt;p&gt;業務上のコミュニケーションだけでは、業務外の困っていることであったりその人がキャリアプランをどう考えているかなどのトピックまでは拾えない。人々のワークスタイル・ライフスタイルの多様化にともない人々の仕事に対する価値観、仕事に求めることも多様化してきている中、その領域を拾える1 on 1は職場環境を改善するために非常に有効な手段だと感じることができた。&lt;/p&gt;

&lt;p&gt;1 on 1制度はシリコンバレーは当たり前のプラクティスとなっていると聞く。日本企業でも1 on 1制度の導入事例が増えていって社会全体の労働環境が改善されると良いなーと思った。&lt;/p&gt;

&lt;p&gt;1 on 1導入後も単純に1 on 1を開催して満足というわけではなく、上手な1 on 1にしていくには上司側の1 on 1スキルの向上も必要となってくる。本書を読んでその辺の細かなテクニックとか言い回しのポイントなども知ることができてよかった。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=4761272864&amp;amp;linkId=fa0dbf5e7d684ec5864efa0436add116&quot;&gt;&lt;/iframe&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=4478069786&amp;amp;linkId=ea9f3d4a7b14fcc644075add70c9b61e&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;その他のweb上の参考資料&quot;&gt;その他のWeb上の参考資料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/satoshiyoshinaga/1on1-80798455&quot;&gt;生産性を高める 1on1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@tumada/%E5%8A%B9%E6%9E%9C%E7%9A%84%E3%81%AA-1-on-1-%E3%83%9F%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AB%E3%83%9E%E3%83%8D%E3%83%BC%E3%82%B8%E3%83%A3%E3%81%8C%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%93%E3%81%A8-6d5c03a3383&quot;&gt;効果的な 1 on 1 ミーティングのためにマネージャができること – Taka Umada – Medium&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/higepon/20150728/1438080621&quot;&gt;1 on 1 で 何を話すのか？ マネージャ/ソフトウェアエンジニアの立場から - サンフランシスコではたらくソフトウェアエンジニア - Higepon’s blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;上司と部下という呼称は上下関係が色濃く現れる日本語なのであまり好きではないのだが、便宜上使うこととする &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="management" /><category term="読書" /><category term="tech" /><summary type="html">1 on 1 をチームで実施することとなり、勉強がてら『シリコンバレー式 最強の育て方 ― 人材マネジメントの新しい常識 1 on1ミーティング』と『ヤフーの1on1―――部下を成長させるコミュニケーションの技法』の２冊を読んだ。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/1on1/og.jpg" /></entry><entry><title type="html">Railsと同じRuboCopの設定が利用できるrubocop-rails gemを作った</title><link href="https://blog.toshimaru.net/rubocop-rails/" rel="alternate" type="text/html" title="Railsと同じRuboCopの設定が利用できるrubocop-rails gemを作った" /><published>2018-01-30T00:00:00+09:00</published><updated>2018-01-30T00:00:00+09:00</updated><id>https://blog.toshimaru.net/rubocop-rails</id><content type="html" xml:base="https://blog.toshimaru.net/rubocop-rails/">&lt;p&gt;【追記】本記事で紹介しているgem, rubocop-railsは公式RuboCopチームの要望により、&lt;a href=&quot;https://github.com/toshimaru/rubocop-rails_config&quot;&gt;rubocop-rails_config&lt;/a&gt;というgemにRenameされました。&lt;/p&gt;

&lt;p&gt;本gemご利用の方は下記のrubocop-rails_configでのご利用お願いします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/toshimaru/rubocop-rails_config&quot;&gt;toshimaru/rubocop-rails_config&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Railsとほとんど同じRuboCopの設定が利用できる&lt;a href=&quot;https://github.com/toshimaru/rubocop-rails&quot;&gt;rubocop-rails&lt;/a&gt;というgemを作りましたので紹介します。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Railsのrubocopと同じ設定を簡単に適用できるgemを作ったよ&lt;br /&gt;toshimaru/rubocop-rails: Code style checking for Ruby on Rails project &lt;a href=&quot;https://t.co/DnTRKtJc9j&quot;&gt;https://t.co/DnTRKtJc9j&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/819931180304715776?ref_src=twsrc%5Etfw&quot;&gt;January 13, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;モチベーション&quot;&gt;モチベーション&lt;/h2&gt;

&lt;p&gt;Rubyの静的コード解析の定番といえば&lt;a href=&quot;https://github.com/bbatsov/rubocop&quot;&gt;RuboCop&lt;/a&gt;ですよね。ですがRuboCopの設定ファイル&lt;code class=&quot;highlighter-rouge&quot;&gt;rubocop.yml&lt;/code&gt;の設定作業って結構大変じゃないですか？&lt;/p&gt;

&lt;p&gt;RuboCopはデフォルトだと結構うるさすぎることが多いのでプロジェクト・チームに応じて何かしら設定はカスタマイズすると思います。しかし１つ１つ設定項目毎にチームのコンセンサスを取るのは非常にダルい。チームの一人が持ち込んだ＜俺の考える最強のRuboCop設定＞に従うという手もありますが「誰がお前の作った設定に従うか！」という気持ちも無くはない。&lt;/p&gt;

&lt;p&gt;「何かしらRuboCop設定のレールが欲しいよね〜〜〜 :railway_car:」というところで閃き:bulb:、「だったら公式railsチームの用意した&lt;code class=&quot;highlighter-rouge&quot;&gt;rubocop.yml&lt;/code&gt;を使えばいいじゃない」ということで冒頭のRailsとほぼ同じ設定を持った&lt;a href=&quot;https://github.com/toshimaru/rubocop-rails&quot;&gt;rubocop-rails&lt;/a&gt; gemを作りました。&lt;/p&gt;

&lt;h2 id=&quot;使い方&quot;&gt;使い方&lt;/h2&gt;

&lt;p&gt;使い方はrubocop-railsをinstallした後に、下記の設定を記述した&lt;code class=&quot;highlighter-rouge&quot;&gt;rubocop.yml&lt;/code&gt;を用意する。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;inherit_gem&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;rubocop-rails&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;config/rails.yml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;オーバーライドしたい設定、追加したい設定があれば、適宜同じ&lt;code class=&quot;highlighter-rouge&quot;&gt;rubocop.yml&lt;/code&gt;内に設定を追加していく。&lt;/p&gt;

&lt;h2 id=&quot;実際使ってみてどうか&quot;&gt;実際使ってみてどうか&lt;/h2&gt;

&lt;p&gt;実際使ってみるとうるさすぎず、しかしコードスタイルとしてきっちり統一させたいところは統一されており、使い心地はなかなか悪くないです。&lt;/p&gt;

&lt;p&gt;また副次効果として、Railsにコントリビュートするときに普段からこのgemの設定に慣れておくと、Rails公式rubocop設定違反にならないコードを書けて便利。 :innocent:&lt;/p&gt;

&lt;h2 id=&quot;こんなrubocop設定もあるよ&quot;&gt;こんなRuboCop設定もあるよ&lt;/h2&gt;

&lt;p&gt;他の＜いい感じ＞に設定されたRuboCop設定も紹介してみます。これらの設定はきちんとチーム・会社でディスカッションされた上で作られたものだと思いますので信頼できるものかと思います。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GitHubの場合: &lt;a href=&quot;https://github.com/github/rubocop-github&quot;&gt;github/rubocop-github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;SideCIでお馴染みのActcatの場合: &lt;a href=&quot;https://github.com/sideci/meowcop&quot;&gt;sideci/meowcop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="rails" /><category term="rubocop" /><summary type="html">【追記】本記事で紹介しているgem, rubocop-railsは公式RuboCopチームの要望により、rubocop-rails_configというgemにRenameされました。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/rubocop-rail.png" /></entry><entry><title type="html">railsdm2017で「「Railsでまだ消耗しているの？」─僕らがRailsで戦い続ける理由─」を発表しました</title><link href="https://blog.toshimaru.net/why-we-use-ruby-on-rails/" rel="alternate" type="text/html" title="railsdm2017で「「Railsでまだ消耗しているの？」─僕らがRailsで戦い続ける理由─」を発表しました" /><published>2017-12-11T00:00:00+09:00</published><updated>2017-12-11T00:00:00+09:00</updated><id>https://blog.toshimaru.net/why-we-use-ruby-on-rails</id><content type="html" xml:base="https://blog.toshimaru.net/why-we-use-ruby-on-rails/">&lt;p&gt;&lt;a href=&quot;https://techplay.jp/event/631431&quot;&gt;Rails Developers Meetup 2017&lt;/a&gt;でLT枠をいただき、「「Railsでまだ消耗しているの？」─僕らがRailsで戦い続ける理由（ワケ）─」と題して発表してきました。ざっくり発表内容をこちらにもまとめてみたいと思います。&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;68db83f9e02946f08a45817d8fb25b09&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;※公開用に一部スライドを編集してあります:wink:&lt;/p&gt;

&lt;h2 id=&quot;テーマ設定について&quot;&gt;テーマ設定について&lt;/h2&gt;

&lt;p&gt;Web開発においてGoやPython、PHP、Node.js、Scala、Elixirなど様々な選択肢がある中で「なぜ今、Ruby/Railsを使うのか？」というテーマを個人的に掘り下げてみたかったのでこの機会に発表してみることにしてみました。&lt;/p&gt;

&lt;h2 id=&quot;railsの2つの哲学&quot;&gt;Railsの2つの哲学&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;DRY&lt;/strong&gt; (Don’t Repeat Yourself): 同じことを繰り返さない&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CoC&lt;/strong&gt; (Convention over Configuration): 設定より規約&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Railsの哲学は上記の２つがありますが、個人的にはDRYよりもCoCがずっと重要だと思ってます。なぜならDRYはプログラミング行為において普遍的な考え方である一方、CoCはRailsが定めたRails独自の規約だからです。&lt;/p&gt;

&lt;h2 id=&quot;ruby-on-railsの本質&quot;&gt;Ruby on Railsの本質&lt;/h2&gt;

&lt;p&gt;Ruby on Railsの本質は、&lt;strong&gt;センスの良い規約（=Rail）によって設定および設計の手間を最小限にした&lt;/strong&gt; ことだと考えます。&lt;/p&gt;

&lt;p&gt;この規約により我々は設定にまつわるコードを数百行書いたりとかする必要もなくなりましたし、設計工程で生じがちな＜俺の考える最強のアプリケーション設計バトル＞や＜俺の考える最強のデータベース設計選手権＞を緩和しコミュニケーションコストを大幅にカットすることができました（とはいえその規約に規定されていない部分の設計はどうするんだという問題は残りますが…）。&lt;/p&gt;

&lt;p&gt;この規約によって我々はRuby on Railsで &lt;strong&gt;圧倒的コード量の少なさと生産性の高さを実現&lt;/strong&gt; できました。&lt;/p&gt;

&lt;h2 id=&quot;rails批判〇〇の方が速いよ&quot;&gt;Rails批判:「〇〇の方が速いよ」&lt;/h2&gt;

&lt;p&gt;パフォーマンス要件がマストでないときにRailsを使いましょう。パフォーマンス要件がマストのケースにおいては（e.g. 広告サーバー）そもそもRubyという言語選択はするべきでないです。&lt;/p&gt;

&lt;p&gt;「速い」の定義をどこにおくかも重要なポイントです。この速さを「処理系の速さ」としたらRubyはGoなどには負けますが、「開発の速さ」とした場合はどうでしょうか？　我々にとって価値のある速さはどちらでしょうか？　例えばスタートアップなどにおいて1日でも1時間でも早くPDCAサイクルを回したい場合にRailsのほうが最適ではないでしょうか。&lt;/p&gt;

&lt;p&gt;またエンドユーザーにとっての速さは必ずしも処理系の速さとは一致しない点も気をつけてください。かの超絶高速なサイト&lt;a href=&quot;https://dev.to/&quot;&gt;dev.to&lt;/a&gt;はRails製であるという事実を忘れないでください。&lt;/p&gt;

&lt;h3 id=&quot;devtoはrails製であるという事実&quot;&gt;dev.toはRails製であるという事実&lt;/h3&gt;

&lt;p&gt;この事実から言えることは &lt;strong&gt;サービス特性と要素技術を正しく理解・把握した上で最適なアーキテクチャを選択する&lt;/strong&gt; ことが重要ということです。&lt;/p&gt;

&lt;p&gt;例えば&lt;a href=&quot;https://dev.to/&quot;&gt;dev.to&lt;/a&gt; の場合、キャッシュしやすいというサービス特性を利用して、Railsで生成されるコンテンツを爆速CDNであるFastlyに載せて配信させました。これにより結果的に最高の爆速UXを提供できているのです。&lt;/p&gt;

&lt;p&gt;つまり速さという点において問題になるレイヤーはアプリケーションサーバーのレイヤーだけではないということです。&lt;/p&gt;

&lt;h2 id=&quot;rubyrailsが遅いという前に&quot;&gt;Ruby/Railsが遅いという前に&lt;/h2&gt;

&lt;p&gt;「Ruby/Railsが遅い!」という前に下記はしっかり確認していただきたいものです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;自分のアプリケーション設計やテーブル設計の失敗の責任を、言語やフレームワークに押し付けてはいないか&lt;/li&gt;
  &lt;li&gt;するべき最適化をする前に遅いと斬り捨ててはいないか&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;僕の経験上、Railsで”ちゃんと”作ることができれば、爆速ではないかもしれませんがまぁまぁ速いくらいのサイトは実現可能だと思います。&lt;/p&gt;

&lt;h2 id=&quot;高速化の努力&quot;&gt;高速化の努力&lt;/h2&gt;

&lt;p&gt;とはいえ高速化の努力はあって、Ruby3に向けてのRuby高速化（いわゆる&lt;a href=&quot;http://gihyo.jp/news/report/01/rubykaigi2017/0003&quot;&gt;Ruby3x3&lt;/a&gt;）や、&lt;a href=&quot;https://github.com/Shopify/bootsnap&quot;&gt;bootsnap&lt;/a&gt;のようなRailsの起動高速などの努力があります。&lt;/p&gt;

&lt;h2 id=&quot;2018年ruby-on-railsという選択&quot;&gt;2018年、Ruby on Railsという選択&lt;/h2&gt;

&lt;p&gt;小〜中規模のWebアプリケーション（言い換えるとマイクロサービス化を考えなくても済むような規模）であればRailsで十分戦えると考えています。&lt;/p&gt;

&lt;p&gt;なので2018年もRuby on Railsは有効なWebアプリケーションフレームワークの選択肢であり続けでしょう。少なくとも、Ruby on Railsを超えるようなベターオルタナティブが出現しない限りはそうでしょう。&lt;/p&gt;

&lt;h2 id=&quot;発表を終えて&quot;&gt;発表を終えて&lt;/h2&gt;

&lt;p&gt;本発表を聞いた人には「じゃあ一生Ruby/Railsを使い続けるのか？」と思われるかもしれませんが、今後Railsくらいの生産性を発揮できてRailsより速いフレームワークが出現するのであれば全然乗り換える準備はあります。&lt;/p&gt;

&lt;p&gt;ただドキュメント・ライブラリ・運用実績などの周辺環境も含めてRuby/Rails並みに整うのは相当厳しいように思われますので、あと３年位はRailsの寿命は続くのかなという印象です。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;誰か日本でRubyKaigiじゃなくてRailsKaigiをオーガナイズしてくれる人はいないものか（チラッ&lt;br /&gt;めちゃくちゃ人集まることは絶対間違いないと思うのだけど。。。&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/841439645011394564?ref_src=twsrc%5Etfw&quot;&gt;March 14, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;以前書いたこれ、現場の知見の共有という意味では &lt;a href=&quot;https://twitter.com/hashtag/railsdm?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#railsdm&lt;/a&gt; がやっていってくれてる感ある &lt;a href=&quot;https://t.co/XLGDEEKooR&quot;&gt;https://t.co/XLGDEEKooR&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/940369828451303424?ref_src=twsrc%5Etfw&quot;&gt;December 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;その他の発表スライドなどはこちら &lt;a href=&quot;https://railsdm.github.io/2017/&quot;&gt;Rails Developers Meetup 2017&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;当日のTweetまとめ &lt;a href=&quot;https://togetter.com/li/1179895&quot;&gt;Rails Developers Meetup 2017 #railsdm - Togetter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="rails" /><category term="presentation" /><summary type="html">Rails Developers Meetup 2017でLT枠をいただき、「「Railsでまだ消耗しているの？」─僕らがRailsで戦い続ける理由（ワケ）─」と題して発表してきました。ざっくり発表内容をこちらにもまとめてみたいと思います。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.toshimaru.net/images/posts/railsdm/rdm2017.png" /></entry></feed>