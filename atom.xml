<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Hack Your Design!]]></title>
  <link href="http://blog.toshimaru.net/atom.xml" rel="self"/>
  <link href="http://blog.toshimaru.net/"/>
  <updated>2013-07-29T00:48:45-07:00</updated>
  <id>http://blog.toshimaru.net/</id>
  <author>
    <name><![CDATA[Toshimaru]]></name>
  </author>

  
  <entry>
    <title type="html"><![CDATA[jQueryでページ最下部のスクロール時のイベントをキャッチする]]></title>
    <link href="http://blog.toshimaru.net/jquery-bottom-scroll/"/>
    <updated>2013-07-29T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/jquery-bottom-scroll</id>
    <content type="html"><![CDATA[<p>ユースケースとしては、twitterのタイムライン表示ページのように最下部までスクロールしたら、そのイベントをキャッチして次ページのツイートを表示させたい！みたいなとき。</p>

<script src="https://gist.github.com/toshimaru/6102647.js"></script>

<p>上コードでは、ウインドウのスクロール時にスクロール位置が今どれだけなのかを差分を見て計算してる。それが0以下になったら次ページを表示させるようなコードを書けばよい。</p>

<p>上記の例では「最下部」をイベントの発火ポイントにしたけど、「下記○○％に入ったら」とかでもよさそう。</p>

<h2 id="section">参考</h2>
<ul>
  <li><a href="http://www.softel.co.jp/blogs/jquery/archives/742">ページの下までスクロールしたときに何らかの処理を実行する例</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[語学学校を卒業しました]]></title>
    <link href="http://blog.toshimaru.net/graduate-from-langschool/"/>
    <updated>2013-07-28T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/graduate-from-langschool</id>
    <content type="html"><![CDATA[<p>今月上旬にバンクーバーにて２ヶ月間通っていた語学学校を卒業しました。少し振り返ってみたいと思います。</p>

<h2 id="section">勉強漬け生活</h2>
<p>自分が選択したコースは２ヶ月間（8 weeks）のスピーキング強化コースで、短期集中型のコースということもあってかなりハードな勉強期間でした。</p>

<p>毎週個人プレゼンテーションがあるのでその暗記と練習。あわせてグループグループプレゼンテーションも毎週あるのでグループメンバーと内容を擦り合わせ。基本的に毎日なんらかの宿題が課されるので家に帰って宿題。週末の課題も出されるので土日も勉強。と、こんだけ勉強したのは大学受験期ぶりってくらいの内容でした。むしろそれ以上だったかもしれません。</p>

<h2 id="section-1">英語レベルについて</h2>
<p>ハードな勉強に必死に付いていったお陰か、「来て２ヶ月にしては（英語）喋れるほうだね」くらいには言われるレベルにはなりました。またクラス内で自分の英語レベルはかなり低いほうでしたが、なんとか他のクラスメートと同じくらい、またはそれ以上の英語レベルまでにはいくことができました。</p>

<p>自分の弱点はスピーキング、リスニングでしたが、どちらもかなり伸びたと思います。スピーキングは最初、よく喋りながら止まってしまうことが多々ありましたが、今はだいぶ減りました。リスニングもよく聞き取れない部分が減りました。</p>

<p>といってもまだまだネイティブに付いていけるレベルではないので、もっと伸ばしていこうと思います。</p>

<h2 id="section-2">スピーチ賞をゲット！</h2>
<p>終わってみるとあっという間で、気づいたら通常のDiploma(卒業証書)に加えてスピーチ賞をいただきました！！　自分の努力が報われたようで非常に嬉しかったです。</p>

<h2 id="section-3">これから</h2>
<p>身に付けた英語を使って、仕事探しを本格的に始めていこうと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DeferredはjQueryにおける最も重要なクライアントサイドツール]]></title>
    <link href="http://blog.toshimaru.net/jquerydeferred-is-most-important-client/"/>
    <updated>2013-05-08T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/jquerydeferred-is-most-important-client</id>
    <content type="html"><![CDATA[<p><a href="http://blog.toshimaru.net/jquery-ajaxdeferredajax/">jQuery モダンAjaxな書き方を目指して　〜deferredを使ったAJAX〜</a>が結構読んでもらっているみたいなので、今回はdeferred第二弾として、<a href="http://eng.wealthfront.com/2012/12/jquerydeferred-is-most-important-client.html">jQuery.Deferred is the most important client-side tool you have</a>の翻訳をしました。</p>

<hr />

<p>jQueryのdeferredの導入は、近年のjQueryの歴史における最もパワフルな拡張だ。jQuery自体はとくに新しい概念ではないが、deferredの導入は多くのクライアントサイド開発者にとってメリットがある。非同期プロセスにおいてdeferredパターンはシンプルでありながらも、パワフルなツールだ。皆さんご承知の通り、クライアントサイドの開発においてそういった非同期を使う状況は数多く存在する。</p>

<p>ここでは、deferredおよびjQueryによって提供されるAPIについて概観する。読者が理解できるよう多くの例を掲載した。あなたはこの記事を読み終わる頃にはdeferredとは何か、いつ使うべきものかが知ることができよう。</p>

<h2 id="section">概要</h2>

<p>“Deferred”パターンとは、完了するかもしれない、あるいは完了しないかもしれない処理単位のプロキシのように振る舞うオブジェクトを表す。このパターンはどんな非同期処理にでも適応することができる。少し例をあげると、Ajaxリクエスト、アニメーション、Webワーカーだ。ユーザの行動さえも「遅延処理(delayed computation)」の対象とみなすことができるのである。</p>

<p>deferredの最もシンプルな使い方は、処理が終わったときあるいは失敗したときに何が起こるかを明示できるようにすることだ。jQueryの実装だと、deferedがうまく解決(resolve)したとき、あるいはエラーで拒否(reject)されたとき、あるいはいくつかの進行中の処理から解決状態だと通知(notify)されたとき（後述）に走るであろうコールバック関数の登録が可能となる。</p>

<p>おそらく既に皆さんは、このdefrredパターンを使っているだろう。なぜならjQuery Ajax関数はdeferredインターフェースを実装したオブジェクトを返すからだ。それらはAjaxリクエストが成功したときにresolveされ、HTTPリクエストが失敗したときにrejectされる。</p>

<h2 id="section-1">理解すべき１つの重要なこと</h2>
<p>deferredは非同期処理における「いつ」を抽象化する。deferredは無制限に繰り返すことができる。この挙動のポイントは、もしdeferredが既にresolveならば、直ちに登録されているコールバックを実行することだ。あなたは処理単位(たとえばAjaxリクエスト)が終わっているかどうかは気にする必要がない。単純にコールバックをdeferredにバインドし、それが既にresolveであれば実行し、あるいはそれが未来にresolveになったときに実行する。</p>

<h2 id="jquerydeferred">jQueryでdeferredを使ってみる</h2>

<h3 id="resolution--rejection">解決(resolution) &amp; 拒否(rejection)</h3>
<p>jQuery deferred関数の中核は、deferredの解決(resolve)/拒否(reject)を処理することだ。<code>$.Deferred().</code>でdeferredオブジェクトを作成できる。deferredオブジェクトの<code>done()</code>、<code>fail()</code>はそれぞれオブジェクトのresolveされたとき、rejectされたときに実行される関数を登録できる。</p>

<p>deferredをresolve/rejectすることは実際、<code>resolve()</code>,<code>reject()</code>を使うことで実現できる。<code>jQuery.ajax()</code>メソッドは内部的には、リクエストが正常に完了したときにdeferredの<code>resolve()</code>をコールし、リクエストが失敗したとき（例えばhttpステータスコードの404）に<code>reject()</code>をコールする。</p>

<h3 id="deferred-notifyprogress">deferredへ通知する: notify()とprogress()</h3>
<p>jQuery1.7からresolve/rejectに加えて、<code>progress</code>が導入された。、<code>progress()</code>により、deferred内で<code>notify()</code>がコールされたときに実行されるコールバック関数を登録することができ、resolved状態に対する「進捗(progress)」を表現できるようになった。<code>notify()</code>で事前にコールバックを登録しておくことで例えば、ロードに時間がかかるリソースを持つdeferredオブジェクトの定期的に更新されるプログレスバーを描画できる。deferredはロード中に通知(notify)され、ロード完了時に解決(resolve)される。</p>

<h3 id="promise">promise()を返す</h3>
<p>deferred利用時のほとんどの場合、deferredの利用者にresolve/rejectを決めてほしくはないだろう。きっとあなたはそれをあなた自身で管理したいと思うはずだ。そのような場合には、<code>promise()</code>を返すのがよい。</p>

<p>jQuery用語的にいうと、promiseは「read-only deferred」だ。promiseはコールバック登録、deferred状態への問い合わせを可能にするが、状態の変更は不可だ(たとえばresolve/reject状態の変更)。 <code>jQuery.ajax()</code>メソッドはpromise()を返す。なぜならAJAXリクエストが成功したか失敗したかを決定するのは、その内部のコードで完結する話だからだ。</p>

<h3 id="when">非同期イベントの同期化：when()</h3>

<p><code>$.when()</code>は１つ以上のdeferredを受け入れ可能で、それら全てのdeferredオブジェクトが正常に完了(resove)したときにのみresolve状態となる新たなdeferredを作り出す。つまり<code>when()</code>により、非同期イベントを一つに統合することが可能になるのだ。</p>

<p>下記の例を考えてみよう。</p>

<blockquote>
  <p>ある1つのUI表現に対して、2つの分割されたAJAXリクエストのデータが必要であり、UIのレンダリングには、それら２つのリクエストのデータが必須である。</p>
</blockquote>

<p><code>when()</code>がないと、レンダリング前にどちらのリクエストも終わっていることを保証するために、コールバックをネストすることを強要されてしまう。さらに悪いことに、２つのAJAXリクエストが失敗時のエラーハンドリングコードが下記URLに示す通り２つに分散されてしまう。</p>

<iframe width="100%" height="300" src="http://jsfiddle.net/mattbaker/2s4Mg/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>この代替案として、<code>when()</code>が使用可能なのだ。2つのAJAXリクエストによって分割されてしまったdeferredオブジェクトを1つに統合できる。<code>when()</code>はこれら2つの両リクエストが完了したときにのみresolveとなる。成功時のコールバックとしてUI要素のレンダリング処理を登録することができる。さらに、失敗時の処理は1つの箇所にまとめることができる（下記URL参照）。</p>

<iframe width="100%" height="300" src="http://jsfiddle.net/mattbaker/wJ4bm/1/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h3 id="section-2">人間もまた非同期だ</h3>

<p>Webサイトやアプリーケーション上の数多くのモノは非同期である。これにはあなたユーザ自信も含まれてさえいる。考えてみよう、あなたのサイトはユーザにプロフィールを作成するように依頼する。プロフィールを十分にユーザに埋めさせるよう、あなたはどれくらい入力が完了しているかプログレスバーを表示させる。それらが入力が完了するとプログレスバーを変更させ、全て入力し終えたときには「ありがとうございます」というメッセージを表示させるだろう。
この状況では、プロフィールの遅延入力完了という点でdeferredが現れている。プロフィールを作成、「計算」している本質は実際のところ、人間である。このケースは「非同期である」と見做せる状況とはいえないかもしれないが、まさにdeferredが使える有効な状況である。</p>

<p>ユーザーアクション（これは解決への進捗率を示している）によるdeferredを通知するために、<code>notify()</code>が使える。そして<code>resolve()</code>がプロフィール入力完了によるdeferredを通知するのに使える。プログレスバーを更新するには<code>progress()</code>を使ってコールバックをバインドし、ありがとうメッセージを表示するコールバックをバインドするのには<code>done()</code>を使う。</p>

<p>下記に例を示そう。</p>

<iframe width="100%" height="300" src="http://jsfiddle.net/TTUrQ/10/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h3 id="section-3">最後に（訳者より）</h3>

<p>原文にはdeferredの面白い使い方、<code>pipe()</code>も紹介されています。是非こちらも参照してみてください。</p>

<p><a href="http://eng.wealthfront.com/2012/12/jquerydeferred-is-most-important-client.html">jQuery.Deferred is the most important client-side tool you have</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[仕事のデキる人の７つのポイント]]></title>
    <link href="http://blog.toshimaru.net/good-worker/"/>
    <updated>2013-04-21T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/good-worker</id>
    <content type="html"><![CDATA[<p><a href="http://blog.sixapart.jp/2013-04/nine-moments.html">「あ、この人、仕事できるんだろうな」って思う9つの瞬間</a>を受けて僕も「仕事のデキる人」を考えてみた。 (元記事を先に読むことをお薦めします)</p>

<h2 id="section">1.レスポンスが早い</h2>

<p>デキる人はレスポンスが早いです。</p>

<p>まずはメール。メールであればスキマ時間（例えば移動時間）を使って返信できるものなので、デキる人はそれらの時間を有効活用して返信をささっと書いてしまうので、メールのレスポンスが基本的に早い。</p>

<p>デキる人はメール以外にも仕事の返事も早いです。締切りのあるタスクを頼まれた時、現状、タスク全体の何％まで進んでいるのか、遅延はあるか、作業を進める上で何か問題点はないのか、などの一次報告・中間報告をしっかり共有します。これにより上司はタスクの状況を把握できますし、安心して仕事を任せていられます。</p>

<h2 id="section-1">2.時間・締切りを守る</h2>
<p>時間を守る、締切りを守るなんて社会人にとって当然すぎることですが、世の中で出来ていない人の多いこと。</p>

<p>Time is Money、時は金なり、その予定のためにみなが大切な時間を割いているわけです。その時間を守らない人がどうして人から信用されるでしょうか。</p>

<p>彼らはまた、締切りも守ります。その締切りがとりあえず設定した締切りであろうと、マストな締切りであろうと守ります。時間と同じく、締切りを守る人は他から信用が厚いものです。</p>

<h2 id="section-2">3.先読みして行動する</h2>

<p>先読み力とでもいいでしょうか。一般的なワードでいうなら想像力と言ってもいいかもしれません。</p>

<p>話者と聞き手の関係であれば聞き手が反論したくなるようなところを予想して事前にロジックを準備しておく。書き手と読み手の関係であれば読み手が疑問を持ちそうなところに説明、注釈を書き加えておく。といった具合にデキる人は先読みして事前に打てる対策を講じています。</p>

<blockquote>
  <p>僕が断るであろう理由を先回りしてすべて解決した資料が別途用意されている。
外堀を全部埋めた上で、「ほかに断る理由はありますか?」と聞いてくるわけだ。</p>

  <p>こういう人は、仕事がデキる。と思う</p>

  <p><a href="http://d.hatena.ne.jp/shi3z/20101104/1288835347">「仕事がデキる人」と「仕事をする人」の違いと習慣</a></p>
</blockquote>

<h2 id="section-3">4.タスク管理を自分なりの方法で出来ている</h2>

<p>evernote、iPhoneのタスク管理アプリ、ホワイトボード、付箋、なんでも構いません。デキる人は自分なりのタスク管理方法をもっています。デキる人はこれらのツールを駆使することで自分のタスクを一覧化し、優先度付けを行い、優先度の高いものから効率的にタスクを消化しています。</p>

<p>人間のメモリ領域なんてすぐに限界がくるものなので、これらのツールを使ってデキる人は日々のタスクを整理、消化しています。</p>

<h2 id="section-4">5.ゴールを明確化し、それに向かって行動する</h2>

<p>仕事をする中でゴールを見失ってしまうことはよくあることです。例えばあなたが新製品の開発のため××という作業をやっていたとしましょう。××という作業をするあまり、いつの間にか「新製品の開発」という目的を忘れて、その作業自体が目的化してしまう―こんなことってありませんか？</p>

<p>デキる人はゴールを明確に持っています。ゴールを忘れることはありません。ゴールを見据えているのでそれに合わせた行動ができます。先の例でいうならば××という作業の中でも、「製品のためにこんな機能も必要じゃないだろうか」「製品の品質を保つためにこうしたらどうだろう」という発想が生まれます。</p>

<p>デキる人の目標を見据えた行動、これがチームをうまく回し、全体の成果を改善させます。</p>

<h2 id="section-5">6.楽観的である</h2>

<p>楽観的すぎるのも問題ですが、デキる人は基本、楽観的です。</p>

<p>悲観的な人によくあるパターンとして、まずは否定から入る、があげられます。例えば新しい事業案に対して「それはリスクがある」「現実的でない」「時期が早い」などといろいろと理由をつらねあげて＜否定＞をします。</p>

<p>デキる人は違います。まずは＜肯定＞から入ります。「出来るのではないか」から入り、なぜそれが出来るのかを考えます。出発点は「出来ないのではないか」という否定ではなく、肯定です。出来る理由を考えた上で、問題のある部分も考え、それら２つの側面を天秤にかけてジャッジします。</p>

<p>このようにデキる人は＜肯定＞から考える、楽観的な側面を兼ね備えています。だからこそ新しいチャレンジにも積極的になれるのです。</p>

<h2 id="section-6">7.冗談も言える</h2>

<p>一見、仕事のできる人というと、無駄な時間を一切作らずに仕事をしてそうです。だけどそのイメージは違うと僕は思ってます。デキる人は時には冗談も言えるような、ある種の＜軽さ＞みたいなものを持っています。</p>

<p>このことは社外の人、社内の人、どちらにとってもプラスになります。例えば初対面で少し固い空気の場面において、冗談が言えると場が和みます。これによりお互いのコミュニケーションが活発化します。いわゆるアイスブレークってやつですね。  </p>

<p>デキる人はそこまで高い笑いのセンスがあるとまでは言いません。しかし、ひたすら仕事をするのではなく、そういう＜軽さ＞でみんなの雰囲気がプラスになることが自然に出来る人は、デキる人だなぁと思います。</p>

<h2 id="section-7">最後に</h2>
<p>なんとなくリストアップしてみると、結果的に元記事に書いてあることと半分くらいはカブっています。つまりデキる人は誰が見ても「デキる！」と思わせるような共通点があるとも言えます。デキる人のそういう共通点を見習って自分も＜デキる人＞と見られるよう精進したいと思います！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows コマンドでAmazon S3上にバックアップする]]></title>
    <link href="http://blog.toshimaru.net/windows-s3-sync/"/>
    <updated>2013-04-19T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/windows-s3-sync</id>
    <content type="html"><![CDATA[<p>Windows PCを処分するにあたり、音楽、写真、動画などのデータ郡をamazon S3に置き管理することにしました。S3のGUIツールはコレといった定番がないようで（あったら教えてください）、挙動にもやや不安が残る感じでした。よって今回はコマンドラインツールを使ってローカルとS3をsync、同期することにしました。</p>

<p>使ったツールは<a href="http://www.dragondisk.com/">Dragon Disk</a>。トップにパッケージの写真があってやや有料の匂いがするが、無料なのでご安心を。</p>

<h2 id="section">手順</h2>

<ol>
  <li><a href="http://www.dragondisk.com/download-amazon-s3-client-google-cloud-storage-client.html">ダウンロードページ</a>からコマンドラインツールをダウンロード</li>
  <li>展開してその中に<code>dgsync.bat</code>ファイルを作成し、下記のようなバッチファイルを作成してください。
<script src="https://gist.github.com/toshimaru/5415149.js"></script>
    <ul>
      <li><code>DGTOOLS_ACCESS_KEY</code>、<code>DGTOOLS_SECRET_KEY</code>を適宜編集。</li>
      <li>ファイルの削除も同期をとりたい場合は<code>--dont-delete</code>オプションを外してください。</li>
      <li>S3上のフォルダはあらかじめ作成しておく。</li>
    </ul>
  </li>
  <li>２で作成したバッチを実行する。</li>
</ol>

<p>以上です。amazon S3を使って安全、安価にデータを保管しましょう！</p>

<h2 id="section-1">参考</h2>
<p><a href="http://www.tdn.co.jp/techblog/201206/52/">Amazon S3のクライアント「DragonDisk」に付属の「dgsync」が便利な件</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[開発者がfacebook「いいね！」ボタン設置時に注意すべきこと]]></title>
    <link href="http://blog.toshimaru.net/facebook/"/>
    <updated>2013-04-16T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/facebook</id>
    <content type="html"><![CDATA[<p>Facebookの<a href="https://developers.facebook.com/docs/reference/plugins/like/">いいね！ボタン</a>設置をする際に、いくつか注意すべき点がありますのでまとめます。</p>

<h2 id="section">設置方法について</h2>

<p>設置方法に関してはいろんなページで紹介されているので、その手順に従えばOKです。</p>

<p><a href="http://www.facebook-japan.com/iine.html">「いいね！」ボタンを設置しよう</a></p>

<p>注意すべきはhtml5の設置コードだとIEの古いブラウザで動かない場合があるので、Iframeを使うところでしょうか。（ただし機能に制限あり）</p>

<h2 id="share">Shareボタンとはなんだ?</h2>
<p>もうほとんどのサイトで見かけませんが一部の古いサイトでは、Likeボタンではなく、Shareボタンというのを見かけました。ですが本ボタンはもう<strong>廃止予定なので使わないでください。</strong>公式ページでも「We deprecated the Share Button when we launched the Like button」（いいねボタンを作ったときにシェアボタンは廃止したよ！）と説明されています。</p>

<h2 id="og">OGタグとはなんだ？</h2>
<p>OGタグ、つまりオープングラフタグとはウェブページがオープングラフの情報を持つために付加されるメタデータです。オープングラフとは、例えば「太郎さんが◯◯というウェブページでいいねボタンを押した」といったときの、◯◯に入る規格化された情報を示します。オープングラフについては詳しくは公式の「<a href="http://ogp.me/">The Open Graph protocol</a>」を見てみてください。</p>

<p>OGタグとは具体的に下記のようにhtmlのheadタグ内のmetaタグとして表現されます。</p>

<pre><code>&lt;head&gt;
&lt;title&gt;The Rock (1996)&lt;/title&gt;
&lt;meta property="og:title" content="The Rock" /&gt;
&lt;meta property="og:type" content="video.movie" /&gt;
&lt;meta property="og:url" content="http://www.imdb.com/title/tt0117500/" /&gt;
&lt;meta property="og:image" content="http://ia.media-imdb.com/images/rock.jpg" /&gt;
...
&lt;/head&gt;
</code></pre>

<h2 id="section-1">いいねボタンのデバッグツールを使おう！</h2>
<p>開発者おなじみだと思いますが。こちらを使ってOGタグのテストをしましょう。</p>

<p><a href="https://developers.facebook.com/tools/debug">Debugger</a></p>

<p>※私が設置したサイトはたまたま海外IP判定を行なっていたのでFacebook側がうまくOGタグを認識してくれませんでした。FacebookサーバからOGタグが読み込めるように海外facebook IPは許可しておきましょう。</p>

<h2 id="section-2">ボタンのテストにはテストユーザを使おう！</h2>

<p>テストの度に自分のプライベートアカウントを使うのはイヤですよね。そんなときは公式で提供されているテストユーザ作成サービスを使いましょう。詳しくは下記。</p>

<p><a href="http://www.koikikukan.com/archives/2011/09/11-013333.php">Facebookがテストユーザー作成・編集画面をリリース</a></p>

<h2 id="section-3">ボタン押したときに「承認」が出てきた</h2>
<p>いいねをテストしまっくてたら「承認」ボタンが表示されるようになりました。この例は下記でレポートされているようにけっこう根が深い問題です。</p>

<blockquote>
  <p>その「承認」ボタンは、最近の導入した「いいね」ボタンに対する”like-jacking attack” への対応の一環です。ボタンの使われ方などを基準に、ボタンの設置ページで”like-jacking”が発生してることが推測された場合に、「承認」のステップが入ることになります。</p>

  <p><a href="http://blog.bricoleur.in/archives/1216">facebookの「いいね」ボタンに「承認」が必要となるケースについて</a></p>
</blockquote>

<p>facebook側は”like-jacking attack”が発生している可能性があるサイトをプログラムで自動検出して、「承認」ボタンを表示させているようです。</p>

<p>そしてこの「承認」ボタンはマニュアルでの解除依頼は受け付けていないようです。つまり「うちのサイトはスパムじゃないから承認ボタンは消してくれ！」とfacebookに依頼しても取り合ってはくれない、ということです。</p>

<p>上記でテストユーザを使えばいくらテストしても大丈夫なんでしょうか。それともいいねを取り消せばOKなのでしょうか。いずれにしても”like-jacking attack”と判定されうるような行動は避けたほうがよさそうです。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[会社を退職しました。]]></title>
    <link href="http://blog.toshimaru.net/why-resignation/"/>
    <updated>2013-04-15T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/why-resignation</id>
    <content type="html"><![CDATA[<p>今まで務めてきた会社を４月で退職しました（正式には最終出社日を終えました）。新卒で入社してから、ちょうど３年になります。せっかくいいきっかけなのでこれまでの道のりを振り返ってみようと思います。</p>

<h2 id="itweb">IT/WEB業界に飛び込むまで</h2>

<p>IT、もっというとWEB業界に興味を持ち仕事にしてみたいと思うようになったのは、梅田望夫さん著『Web進化論』を読んだことがきっかけだったように思います。それまでは１ユーザとしてインターネットを楽しんでいただけでした。本書を読むことでWEBのこれまでの進化、そしてこれからの進化の可能性を強く感じました。（今改めて読み返すとWEBをユートピア的に捉えすぎている嫌いはあるけれども、当時にしてはWEBの潮流をうまく整理した良書だったと思います。）</p>

<p>僕もWEB業界に身を投じてその進化の一端を担いたい、そう思ったのがこの業界に入ったきっかけです。</p>

<h2 id="section">エンジニアになるまで</h2>
<p>会社ではエンジニアとしてバリバリコードも書いてきたわけですが、自分の出自は文系なので入社当時、本気でエンジニアになる気はありませんでした。ただ学生時代からそれなりに興味はあったので、趣味でhtml/cssをマークアップしたり、自由選択科目の範囲を利用してプログラミングの授業をとったりしてました。</p>

<p>会社入社後は研修の一環として、文系であろうと理系であろうとプログラミング研修をすることになっていました。そこで初めて基礎からがっちりプログラミングを学びました。研修後はOJT形式で現場のプログラミングを覚えました。</p>

<p>「好きこそものの上手なれ」とはよく言ったもので、それなりにWEBプログラミングに興味を持っていた自分としては、その中ですんなりプログラミングに馴染めました。そしてその仕事を楽しめました。</p>

<p>そうこうやっているうちに気づくと自分は他のエンジニアに囲まれながら現場でバリバリコードを書いていました。</p>

<h2 id="section-1">なぜ辞めたのか</h2>

<p>まず退職を考えるきっかけとなったのは、他の会社の方から仕事のお誘いをいただけたことでした。結果的にはそのお話はお断りしたのですが、自分の市場価値がどれだけあるかは僕自身ではわからなかったので、お話をいただけただけでもそれは嬉しい経験でした。それがきっかけとなって「今の世界ではない他の世界も見てみたい」と思うようになりました。</p>

<p>そこからしばらく会社にいましたが、辞めるならタイミング的に今が最良だと考えました。よく「仕事は３年は続けろ」と言われますが、自分にとってもこの＜三年＞という期間はとても良い時期でした。仕事がそれなりに板に付き、問題を独力で解決できるようになっていました。プロジェクト的にも自分の関わっていた大きなプロジェクトが落ち着いた頃でした。</p>

<p>また自分のやりたいこともだんだんと見えてきていて、＜自分がやりたいこと＞と＜会社がやりたいこと＞にズレが少なからず生じていました。このタイミングで＜自分がやりたいこと＞を積極的に追求してみてもよいのではないだろうか、そんなわけで辞めることを決意しました。</p>

<p>ただ今の自分があるのは会社がここまで育ててくれたお陰ですし会社には本当に感謝してます。</p>

<h2 id="section-2">これから</h2>
<p>海外行きます。語学を学びつつ、現地で働くことを目標に頑張りたいと思います。</p>

<p><strong>「いつ行くか？　今でしょ！」</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[いま、大学の社会における意義ってなんなんだろう？]]></title>
    <link href="http://blog.toshimaru.net/university/"/>
    <updated>2013-04-13T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/university</id>
    <content type="html"><![CDATA[<p>最近、大学の社会における意義を改めて考えています。</p>

<blockquote>
  <p>大学（だいがく、英: college、university）は、学術研究および教育の最高機関である。</p>

  <p><a href="http://ja.wikipedia.org/wiki/%E5%A4%A7%E5%AD%A6">大学 - Wikipedia</a></p>
</blockquote>

<p>大学がもはや学術研究の場ではなく、単なる<a href="http://himasoku.com/archives/51492587.html">就職予備校化している</a>という話を散見します（おそらくこの話は文系においてのみ）。</p>

<p>自分も一文系学生を体験た実感として、確かに文系学生にとって大学時代の最終ゴールは「就職活動を成功すること」のように見えます。であれば企業側が特に大学の成果を求めない以上、「就職予備校化」してしまうのも当然なような気がします。</p>

<p>だけれども大学は就職予備校なんかじゃあありません。</p>

<blockquote>
  <p>大学は、そもそも学問をするところであって、就職活動の準備をする施設ではない。会社に入ってから役に立つことを教える義務は大学にはない。「大学では、社会に出てから役に立つことを教えてもらえない」というのは、「蕎麦屋では、ラーメンを注文しても出てこない」と言っているのと同じで、当たり前すぎて批判になっていない。
（中略）
大学生は、在学中は会社に入ってからのことなんて考えずに、本来の目的である学問にもっと時間を割くべきだ。</p>

  <p><a href="http://dennou-kurage.hatenablog.com/entry/2012/09/08/192535">大学は就職予備校ではない</a></p>
</blockquote>

<p>でもそこで「本来の目的の学問に時間を割いているの？」というとそれはNOだと僕は思っている。</p>

<p><a href="http://toyokeizai.net/articles/-/13446">小学生より勉強しない日本の大学生</a></p>

<p>上記事のように「小学生より勉強しない」のは誇張ではなく事実だと思ってます。自分の経験からいうとこんな感じ。</p>

<ul>
  <li>出席すれば単位がとれる授業をとる。もしくは出席せずともレポートだけ書けば単位がとれる授業をとる。</li>
  <li>テスト前はちゃんと授業を聞いている友人のノートのコピー&amp;まとめをもらって対策。</li>
  <li>レポートはネットのマイナーな論文を盗用…までひどくなくともWikipediaなどの情報を巧みに構成して提出。あるいは過去に作成したレポートを再構成して提出。</li>
  <li>大教室の一番後ろの席に座り、睡眠orスマホいじり。</li>
</ul>

<p>学生は学問してるか？NO。では就職予備校として就職の準備をしているか？NO。というわけで大学生活中何もしていない学生が大量生産されるわけである。</p>

<p>その結果が就職活動のエントリーシート、ないしは面接に端的に現れている。自分が就活生として周囲をみてて、あるいは自分が面接官をしていて、「大学時代一番がんばったことはなんですか？」という問いに対する回答。サークル、バイトの２つが多くを占めていました。ほとんど学問をまともに答える人はいなかったように記憶しています（それが企業に受けが悪いから意図的に避けていたというのもあると思うけど）。</p>

<p>大学生活は単なる「モラトリアム期間」として好きなことをやっているのが過ごしかたなんだろうか。それもそれでいいと思うけど、ならば大学の社会における意義って何なのだろう、</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iphone天気アプリの新定番, forecast.io]]></title>
    <link href="http://blog.toshimaru.net/forecast.io/"/>
    <updated>2013-04-11T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/forecast.io</id>
    <content type="html"><![CDATA[<p>iPhoneお天気アプリとしてウェザーニュースを使っていましたが<a href="http://matome.naver.jp/odai/2134468812585377601">改悪されて</a>以降、いまいちいい天気アプリがなかったが最近シンプルでかっこいいお天気アプリを見つけたのでご紹介。</p>

<p>その名も<a href="http://forecast.io/">forecast.io</a>。</p>

<p><img src="/images/posts/forecast/1.png" alt="forecast.io" /></p>

<p>アプリ登録方法などは下記参照。</p>

<p><a href="http://m.designbits.jp/13040213/">iPhoneでも使いやすいWeb版お天気アプリ「Forecast.io」</a></p>

<hr />

<p><img src="/images/posts/forecast/2.png" alt="forecast.io" />
<img src="/images/posts/forecast/3.png" alt="forecast.io" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jekyllマークダウンはデフォルトではなく kramdown を使おう]]></title>
    <link href="http://blog.toshimaru.net/jekyll-markdown/"/>
    <updated>2013-04-10T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/jekyll-markdown</id>
    <content type="html"><![CDATA[<p>jekyllにおいて日本語リストがうまくhtmlに変換してくれないなーって調べてたら、どうやらデフォルトのmarkdownレンダラーではダメらしい。  </p>

<blockquote>
  <p>Jekyll がデフォルトの markdown レンダラーとして採用している maruku は、どうも Unicode の扱いが怪しいらしい。日本語を使っているとフォーマットが崩れることがある。オプションとして選択可能な kramdown に入れ替えることをおすすめする。 _config.yml に次の1行を足すだけでいい。</p>

  <p><a href="http://radiumsoftware.tumblr.com/post/10543406778">GitHub Pagesを使うにあたって</a></p>
</blockquote>

<p>_config.ymlに下記を追記。</p>

<pre><code>markdown: kramdown
</code></pre>

<p>これで日本語リスト変換もうまくいきました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[メンテナビリティの高いコードを書くメリット]]></title>
    <link href="http://blog.toshimaru.net/mentenability/"/>
    <updated>2013-04-09T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/mentenability</id>
    <content type="html"><![CDATA[<p><a href="http://careerhack.en-japan.com/report/detail/66">コードは汚くていい。「アイツがいれば勝てる」と言わせろ。</a>に対するあるはてな匿名ダイアリー記事を読んでいて考えたこと。</p>

<h2 id="section">良いコードはエンドユーザにとってはどうでもいい</h2>
<blockquote>
  <p>非エンジニアを騙して手抜きするのは簡単。余程のヘタレでない限り手抜きをしても絶対にばれない。コードにコメントがなくてもモジュール化されてなくてもコピペ満載でもマジックナンバーだらけでも動いてさえいればユーザーは気にしない。</p>

  <p><a href="http://anond.hatelabo.jp/20121201025247">会社潰すのは簡単、アイツがいれば勝てる、と思った人間を雇えば良い</a></p>
</blockquote>

<p>そう、単純に速く作るのは難しくはない。なんにも考えずにただ思いつくままに上から下に書いていけばいい。そうして出来上がったコードは大抵はひどいものだ。要らないコードがコメントアウトされて残り、バージョン管理されたコミットログもまともに書かれず、ネストが深く、関数化もまともにされていない、こんなコードだ。</p>

<p>無論、「良いコード」「綺麗なコード」の多くはユーザにとっては無意味なものであり、どうでもいいものである。 ユーザにとっての最大の関心事はそのアプリケーションが面白いか面白くないか、正しく動くかどうか、バグがないかどうかであり、コードが良いか悪いかなんてアウトオブ眼中である。</p>

<h2 id="section-1">悪いコードは生産性を下げる？</h2>
<p>じゃあ悪い手抜きコードでいいのか？　というとそんなことはないはず。</p>

<blockquote>
  <p>手抜きコードをメンテさせられるプログラマの生産性は落ちる</p>

  <p>手抜きコードのメンテはプログラマにとって最悪の仕事。綺麗なコードで数十分でできる仕事が２週間かかることもしばしば。最悪の仕事をさせられ、「仕事が遅い」と評価され、モチベーションが下がって更に仕事が遅くなる。</p>

  <p><a href="http://anond.hatelabo.jp/20121201025247">会社潰すのは簡単、アイツがいれば勝てる、と思った人間を雇えば良い</a></p>
</blockquote>

<p>このことは「悪い」コードをメンテナンスさせられた経験のある人にとっては当然なことだと思う。</p>

<p>悪いコードは３行で書けることをきっと10行で書くだろう。また、悪いコードは5メソッドに分けるべきところを1メソッドに書くだろう。ときに悪いコードは3ファイルに分けるところを1ファイルに集約するだろう。悪いコードはオブジェクト指向をうまく利用できていないだろう。</p>

<p>このようなコードのメンテナンスは大変骨の折れる作業で、メンテナンスコストは高くつく。このメンテナンスコストも含めてトータルでコスト計算すると結局、コストは手抜きコードのほうが高くつくのではないだろうか。つまり数式にするとこのようになるだろう。</p>

<p><strong>手抜きコードを書くコスト＋そのメンテナンスコスト　＞　ちゃんと考えて書いた良いコード＋そのメンテナンスコスト</strong></p>

<p>ただ問題は前者がイニシャルコストが安いので、一見「トータルコストも安く済むのでは？」と思えてしまうところだ。悪いコードをメンテナンスしたことのない非プログラマにとっては当然とも言えるが・・・。</p>

<h2 id="section-2">メンテナビリティの高いコードを書くメリットは何か</h2>
<p>メンテナビリティの高いコードを書くメリットは何だろうか。まず上記にあげたように「メンテナンス時のコストが下がりトータルコストが下がる」ことである。</p>

<p>例えばあるソーシャルゲームを考えてみよう。それが使い捨てのゲームアプリであればひどいコードでいいかもしれない。だが中長期的にそのアプリを運用していくのであれば、メンテナビリティの高いコードを書くべきだ。それにより、保守コストは下がり、トータルコストは低くなる。</p>

<blockquote>
  <p>ソースコードの理解に時間を要したり、最悪の場合、なぜそういうコードになっているのか最後までわからず、「触ると危ないコード」&gt; になってしまうようなら、例え機能的に要件を満たせていても、中長期のメンテナンスの観点から言えば、そのソースコードはコミットしない方がプロジェクトのためになります。</p>

  <p><a href="http://blog.livedoor.jp/lalha/archives/50435614.html">メンテナビリティの高いソースコードを目指して</a></p>
</blockquote>

<p>またコードに気を使っている会社には「優秀なプログラマが集まる」だろう。言い換えるならば、コードに気を使う会社にはコードに気を使う優秀なプログラマが集まるし、そうでなければコードに無頓着なプログラマが集まるだろう。</p>

<p>こんな要望に対して優秀なプログラマはどう思うだろうか？ 「アプリ作って。期限は◯◯までで、ヨロシク。え？テスト書くかって？　あー要らない要らない。ちゃんと動いていればいいから。」きっと気持ちが萎えてしまうだろう。</p>

<h2 id="section-3">まとめ</h2>
<ul>
  <li>メンテナンス時のコストが下がる→トータルコストが下がる</li>
  <li>優秀なプログラマが集まる</li>
</ul>

<p>上述した理由により、基本的に私は「いかなる場合でもメンテナビリティを意識したコードを書くべきだ」という姿勢だ。</p>

<h2 id="section-4">コードを書くことが目的ではない</h2>
<p>ただ最後に記しておきたいのはコードを書くこと自体は目的ではないということだ。会社のビジネスを成功に導くためにコード/プログラムがあるのであり、そのことはプログラマが忘れてはならないことである。</p>

<blockquote>
  <p>綺麗に書くのなんて当たり前、そしてその先で実現できるモノづくりに全力を尽くす。</p>

  <p><a href="http://kyuns.hatenablog.com/entry/2012/11/30/143037">コードの綺麗さの先にあるもの</a></p>
</blockquote>

<blockquote>
  <p>まつもと氏は、美しいコードというものがあるという。それはアートで、「プログラマはアーティストだ」と言い切る。（中略）アートだと言ってもプログラムは飾るのが目的ではない。「実用に供してなんぼ。日本では用の美というらしいですが、どのぐらい目的に合致しつつ美しいかが重要」</p>

  <p><a href="http://www.atmarkit.co.jp/news/200904/10/matz.html">「ソフトウェアは工業製品ではない」、Rubyのまつもと氏が講演</a></p>
</blockquote>

<h2 id="section-5">関連エントリ</h2>
<ul>
  <li><a href="http://blog.toshimaru.net/8/">ダメプログラマの8つの特徴</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[レスポンシブサイト構築にあたり参考にしたレスポンシブデザイン１０選]]></title>
    <link href="http://blog.toshimaru.net/responsive-designs/"/>
    <updated>2013-04-08T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/responsive-designs</id>
    <content type="html"><![CDATA[<p><a href="http://blog.toshimaru.net/posterous-to-jekyll/">ブログを移行</a>するにあたって、デザインをフルスクラッチで組み直しました。以前はブログシステム側でモバイル版、PC版の出し分けを行なっておりましたが、今回は流行りの<a href="http://blog.toshimaru.net/responsive-web-design/">レスポンシブWebデザイン</a>で構築してみました。 </p>

<p>デザインをレスポンシブにするために私が参考にしたサイト群をピックアップしたいと思います。</p>

<h2 id="twitter-bootstrap">1 Twitter Bootstrap</h2>
<p><a href="http://twitter.github.io/bootstrap/"><img src="/images/posts/responsive-designs/1.png" alt="Twitter Bootstrap" /></a></p>

<p>言わずと知れたtwitter bootstrap. 本サイトはbootstrapを使わずに構築していますが、レイアウトの組み方、CSSのコーディング手法などはこちらが大変参考になりました。</p>

<h2 id="rockaway-relief">2 Rockaway Relief</h2>
<p><a href="http://rockawayrelief.com/"><img src="/images/posts/responsive-designs/2.png" alt="Rockaway" /></a></p>

<p>ブルーが良い感じに映えるデザインです。</p>

<h2 id="creasty">3 Creasty</h2>
<p><a href="http://www.creasty.com/"><img src="/images/posts/responsive-designs/3.png" alt="Creasty" /></a></p>

<p>若手デザイナ/デベロッパのクリスティさんのWEBサイト。モバイル時のメニューの表示のさせ方がかっこいい。</p>

<h2 id="anthony-calzadilla">4 ANTHONY CALZADILLA</h2>
<p><a href="http://www.anthonycalzadilla.com/"><img src="/images/posts/responsive-designs/4.png" alt="CALZADILLA" /></a></p>

<p>シンプル&amp;クール。</p>

<h2 id="manos">5 Manos</h2>
<p><a href="http://manoscrafted.com/"><img src="/images/posts/responsive-designs/5.png" alt="Manos" /></a></p>

<p>スクロール途中でFIXされるナビゲーションが印象的（PC閲覧時）。</p>

<h2 id="gin-lane-media">6 Gin Lane Media</h2>
<p><a href="http://www.ginlanemedia.com/"><img src="/images/posts/responsive-designs/6.png" alt="Gin Lane Media" /></a></p>

<p>上同様、途中でFIXされるナビゲーション。</p>

<h2 id="fear-the-grizzly">7 Fear the Grizzly</h2>
<p><a href="http://www.fearthegrizzly.com/"><img src="/images/posts/responsive-designs/7.png" alt="Grizzly" /></a></p>

<p>白を基調とした美麗デザイン。</p>

<h2 id="buffalo">8 Buffalo</h2>
<p><a href="http://builtbybuffalo.com/"><img src="/images/posts/responsive-designs/8.png" alt="Buffalo" /></a></p>

<p>PC時とモバイル時のレイアウトの変化のさせ方がイケてます。  </p>

<h2 id="squarespace">9 Squarespace</h2>
<p><a href="http://www.squarespace.com/"><img src="/images/posts/responsive-designs/9.png" alt="Squarespace" /></a></p>

<p>用意されているサイトのテンプレートもすごくかっこいいSquarespaceさん。そちらも覗いてみてください。 </p>

<h2 id="muriel-labro">10 Muriel Labro</h2>
<p><a href="http://www.muriel-labro.fr/"><img src="/images/posts/responsive-designs/10.png" alt="Muriel Labro" /></a></p>

<p>パリの美容室のページ。かっこいい美容師さんの紹介です。 </p>

<h2 id="section">参考</h2>
<ul>
  <li><a href="http://responsive-jp.com/">Responsive Web Design JP 日本国内の秀逸なレスポンシブWebデザインを集めたギャラリーサイト</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jekyllならここまでできる！ ブログをjekyllで移行するにあたって考えるべきこと]]></title>
    <link href="http://blog.toshimaru.net/new-blog-concept/"/>
    <updated>2013-04-07T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/new-blog-concept</id>
    <content type="html"><![CDATA[<p>昨日、<a href="http://blog.toshimaru.net/posterous-to-jekyll/">ブログをposterouからjekyllに移行</a>しました。jekyllに移行するにあたっていろいろ考えたことを残しておきます。</p>

<h2 id="section">前提</h2>
<p>移行にあたりまず、前提を洗い出しました。自分の場合、こんな感じでした。</p>

<ul>
  <li>無料であること</li>
  <li>移行元記事の移行ツールがあること</li>
  <li>独自ドメインが使用できること</li>
  <li>デザインがある程度自由度のあるかたちでカスタマイズできること。</li>
  <li>信頼できるサーバであること。(ざっくり言い換えると大手有名サービスであること）</li>
</ul>

<p>ちょっと優先度が下がる前提は下記のような感じ。</p>

<ul>
  <li>JSが自由に使えたら嬉しい</li>
  <li>CMSなどが直感的でかっこいいこと</li>
  <li>広告とかウザいのはやめていただきたい </li>
</ul>

<h2 id="section-1">類似サービスの検討</h2>
<p>今回の場合、ブログサービスの閉鎖に伴い、ブログ移行を与儀なくされたのでまずは類似ブログサービスを検討しました。 検討したのはこんな感じ。</p>

<ul>
  <li><a href="http://www.squarespace.com/">squarespace</a></li>
  <li><a href="http://www.tumblr.com/">tumblr</a></li>
  <li><a href="http://wordpress.com/">wordpress</a></li>
  <li><a href="http://hatenablog.com/">Hatena Blog</a></li>
</ul>

<p>正直公式でも薦められているsquarespaceをとても使いたいと思ったが、有料。そして自分的にsquarespaceの価格設定が少し高く感じた。</p>

<p>無料でやるならtumblr一択、って感じでしょうが、tumblrは5年以上前に触って手に馴染まず使わなかったサービスで、やっぱり今使ってみてもなんとなく見た目とかCMSが馴染まなかったので乗り気はしない。</p>

<h2 id="section-2">ドメインはどうするか？</h2>
<p>ブログは自ドメイン(blog.toshimaru.net)で運用していました。移行に伴って、ドメインに結びついたリンクがリンク切れを起こしてしまうのをなるだけ避けたい。となるとURLが柔軟にコントロールが効く必要がありますが、上記に挙げたサービスのどれもがそのような機能は提供していませんでした。</p>

<h2 id="jekyll">Jekyll、君に決めた！</h2>
<p>ということで、いろいろと柔軟にやるためにもハッカーの間で人気の高いJekyllという静的サイトジェネレータを使ってみることにしました（<a href="https://help.github.com/articles/using-jekyll-with-pages">Github Pagesでもサポートされてます</a>）。</p>

<p>調べてみると自分の前提条件がほとんどクリアできることがわかった。</p>

<ul>
  <li>Github Pages使って無料</li>
  <li><a href="https://github.com/mojombo/jekyll/wiki/blog-migrations#posterous">移行ツール</a>があった</li>
  <li>独自ドメインが使用できる(CNAME)</li>
  <li>デザインはもちろん自由</li>
  <li>Githubサーバなのでたぶん大丈夫だろう</li>
  <li>JSもバリバリ使える</li>
  <li>urlも301リダイレクトだが保てるようだ (_config.ymlにて設定)</li>
</ul>

<p>他にもこんないいことが。</p>

<ul>
  <li>markdownで記事かける</li>
  <li>Rubyの勉強になる！</li>
</ul>

<h2 id="section-3">コメント欄は設置するか？</h2>
<p>SNSのプラットフォームが十分に成熟している昨今ですから、そもそもコメント欄を設置すること自体がなんとなく時代遅れになってきているのでは？と感じるのですが、Jekyllを使われている皆さんは<a href="http://disqus.com/">DISQUS</a>を使ってコメント欄を設置されているようなのでそれに倣って設置。</p>

<p>なんか昔はDISQUSのデザインとかがうるさくて好きになれなかったのですが、今はサイトに馴染むように大人しめに設置できるようになったので、安心して設置できました。</p>

<h2 id="jekylljekyll">Jekyllブログ構築にあたり参考にしたJekyllサイト</h2>
<ul>
  <li><a href="http://webtech-walker.com/">webtech-walker.com</a> - <a href="https://github.com/hokaccha/webtech-walker">(ソース)</a></li>
  <li><a href="http://fingaholic.github.io/">fingaholic.github.io</a> - <a href="https://github.com/FiNGAHOLiC/fingaholic.github.com">(ソース)</a></li>
</ul>

<p>とくにhokacchaさんのjekyll運用の仕方は大変参考になりました！</p>

<h2 id="section-4">総評</h2>
<p>あなたがハッカーならばJekyll(+Github)はまっさきに検討すべきブログサービスです。現在別のブログサービスを使って書かれている方も、現在ブログを書いていない方も、ハッカーならばJekyllを初めてみてはいかが？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blogをposterousからjekyll(with github page)に移行しました]]></title>
    <link href="http://blog.toshimaru.net/posterous-to-jekyll/"/>
    <updated>2013-04-06T00:00:00-07:00</updated>
    <id>http://blog.toshimaru.net/posterous-to-jekyll</id>
    <content type="html"><![CDATA[<p>本ブログ（blog.toshimaru.net）は<a href="https://posterous.com/">Posterous</a>にて運用してきましたが、<a href="http://techcrunch.com/2013/02/15/posterous-will-shut-down-on-april-30th-co-founder-garry-tan-launches-posthaven-to-save-your-sites/">Posterous閉鎖</a>に伴い、ブログを新たに<a href="https://github.com/mojombo/jekyll">Jekyll</a>（Githubでホスティング）で構築しなおしました。</p>

<p>一応自分で試せる環境でひと通り確認しましたが、もしレイアウト崩れなど問題等ございましたらフィードバックいただけると幸いです。</p>

<p>今後ともよろしくお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[npm install -g yo => npm ERR! error rolling back Error: ENOTEMPTY　の解決方法]]></title>
    <link href="http://blog.toshimaru.net/npm-install-g-yo-npm-err-error-rolling-back-e/"/>
    <updated>2013-02-18T00:00:00-08:00</updated>
    <id>http://blog.toshimaru.net/npm-install-g-yo-npm-err-error-rolling-back-e</id>
    <content type="html"><![CDATA[<p><a href="http://yeoman.io/index.html">yeoman</a>の1.0Betaがリリースされました。さっそく使ってみようとインストール。</p>

<div class="CodeRay">
  <div class="code"><pre>npm install -g yo</pre></div>
</div>

<p>するとエラーでこけます。</p>
<div class="CodeRay">
  <div class="code"><pre>npm ERR! error rolling back Error: ENOTEMPTY, rmdir '/usr/local/lib/node_modules/yo/node_modules/yeoman-generator/node_modules/glob'
npm ERR! error rolling back yeoman-generator@0.10.0 { [Error: ENOTEMPTY, rmdir '/usr/local/lib/node_modules/yo/node_modules/yeoman-generator/node_modules/glob']
npm ERR! error rolling back errno: 53,
npm ERR! error rolling back code: 'ENOTEMPTY',
………</pre></div>
</div>

<p>via <a href="https://github.com/yeoman/yeoman/issues/929">Yeoman install errors</a></p>
<p>どうやらbrewなどで下記の環境だと問題が出る。</p>
<ul>
<li>OS: Mac OS X 10.8.2</li>
<li>Node: v0.8.20</li>
<li>npm: 1.2.11</li>
</ul>
<p>一時的な解決方法としては、バージョンダウンすること。</p>
<div class="CodeRay">
  <div class="code"><pre>npm install -g npm@1.2.10</pre></div>
</div>

<p>これでOKでした。まだまだnode周りはバギーだなぁ。</p>
<hr />
<p>ところでこのyeomanすごく良い感じ。「モダンアプリケーションのためのモダンなワークフロー」と歌っているだけあって、かなり強力なJSの運用ソリューションになりそう。</p>
<ul>
<li>yo でアプリケーションをscaffold</li>
<li>bower でJSのパッケージ管理</li>
<li>grunt でビルド</li>
</ul>
<p>まさに「モダン」って感じ。今後に期待！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Qiita 2-day Hackathon に参加してきました！]]></title>
    <link href="http://blog.toshimaru.net/qiita-2-day-hackathon/"/>
    <updated>2013-02-06T00:00:00-08:00</updated>
    <id>http://blog.toshimaru.net/qiita-2-day-hackathon</id>
    <content type="html"><![CDATA[<p><a href="http://qiitahackathon03.peatix.com/">Qiita 2-day Hackathon</a>に参加してきました。</p>
<p>僕にとっての初めてのハッカソン参加となりました。残念ながら入賞はなりませんでしたがとてもいい経験になりました。</p>
<h2>開発テーマ</h2>
<p>ハッカソンのテーマは「GitHub APIを用いた開発+プログラマの問題を解決するサービス」でした。僕がそれでつくったのはこちら。</p>
<p><a href="http://github-tl.toshimaru.net/" target="_blank">Github Timeline</a></p>
<p><img src="/images/2013/02/github-timeline.png"></p>
<h2>動機</h2>
<p>githubのNews Feedを僕はよく見るのだけど、もっとキャッチーにTwitterのように見れたらよくない？</p>
<h2>アーキテクチャ</h2>
<ul>
<li>backend     
<ul>
<li>sinatra</li>
<li>heroku</li>
</ul>
</li>
<li>frontend     
<ul>
<li>jQuery</li>
<li>hogan.js</li>
<li>less.js</li>
</ul>
</li>
</ul>
<p>frontendの実装については、以前作った<a href="http://blog.toshimaru.net/twitter-search-api-js">twitterの検索</a>の経験が生きた。あと、微妙に以前書いた<a href="http://blog.toshimaru.net/jquery-ajaxdeferredajax">jQuery deferred のテク</a>を使ったり。</p>
<h2>発表スライド</h2>
<p>ハッカソンの発表で使った発表スライドはこちらです。</p>
<p><a href="http://toshimaru.net/slides/github_hackathon/#/">http://toshimaru.net/slides/github_hackathon/#/</a></p>
<p><a href="http://toshimaru.net/slides/github_hackathon/#/"><img src="/images/2013/02/gtimeline-slide.png"></a></p>
<p>ちなみにこちらのプレゼンテーションはWEBで動いてますが、JSプレゼンテーションフレームワークには<a href="http://lab.hakim.se/reveal-js/">reveal.js</a>を使わせてもらいました。プレゼンには<a href="http://bartaz.github.com/impress.js/#/bored">impress.js</a><a>&nbsp;</a><a href="http://flowtime-js.marcolago.com/">flowtime.js</a> <a href="http://imakewebthings.com/deck.js/">deck.js</a>を検討しましたが、パッと見て一番簡単に作れそうなrevealを採用させてもらいました。</p>
<h2>審査基準</h2>
<p>実際に作ったものに対する審査基準は下記でした。こんな感じでハッカソンの成果物が評価されるんですね。</p>
<ul>
<li>実際にプログラマの問題を解決 できそうか</li>
<li>多くのプログラマが幸せになれそうか</li>
<li>アイデアはよいか</li>
<li>完成度</li>
</ul>
<h2>ハッカソンを終えてみて</h2>
<p>開発時間は二日間のうち、1日目13:00~2日目15:00の26時間くらいありました。僕は朝までぶっ通しで開発して、朝になって三時間ほど睡眠してまた開発、という感じでやりました。</p>
<p>今回のバックエンド・アーキテクチャで使用したRubyアプリケーション(sinatra)、herokuへのデプロイ、両方ともに初めてでした。なので1日目の間にこの辺のやり方はケリをつけておきたくて、それらを朝までに集中してやって目処をつけておきました。目処はついたタイミングで休んだのでそのあと発表までは、かなり余裕をもって望むことができました。このへんの時間配分に関してはよかったと思ってます。</p>
<p>ちょっと残念だったこととしては、僕はNews Feedをよくチェックするので本アプリケーションを作ったわけですが、周囲の反応を見てると他の開発者の方々はそこまでNews Feedをチェックしていないようで、そこまで同意を得られなかったことでしょうか。たくさんの開発者が「これは便利！すぐ使いたい！」となるようなアイディアを発案できなかったのは残念です。最優秀賞をとった方はやはり、みんなすぐに「いいね！」という反応が得られるアイデアでした。</p>
<p>今回のハッカソンは個人参加でしたが、今度はチーム参加もしてみたいと思いました。</p>
<h2>PJ(Github COO)と話す！</h2>
<p>Github COO の<a href="https://github.com/pjhyett">PJ</a>とも僕の拙い英語ですが話すことができました。「Githubにおいて重要なことって何ですか？」と聞くと、「オープンソースだ。自分のプロジェクトを公開する、それが何より重要だ。」と答えたので、「なるほど。そういう意味じゃGithubはオープンソースしたい開発者にとっては最高な場所だよね！」というとPJがすごく嬉しそうに微笑んでたのが印象的でした。</p>
<p>僕が作ったモノに対しても聞いてみると、「Coolなアプリケーションだったぜ」といってくれたのが（お世辞だとしても）嬉しかったです。</p>
<h2>最後に</h2>
<p>入賞を目指すべく、APIについてしっかり予習して当日望んだわけですが、入賞ならず残念。。。だたPJと話せたりいろんなプログラマの「ハック」も見れて良い経験になりました。最終的に動くものを公開できたことも良かったです。</p>
<p>イベント最後にはGithubからMicroプラン１年無料券をいただけるという粋なプレゼントもあり、素晴らしいハッカソンでした。開催していただいたQiitaおよびスタッフの皆様、ありがとうございました。</p>
<p>そして2日間のハッカソンを走りきった開発者の皆様、お疲れ様でした！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[mac]mkmf.rb can't find header files for ruby]]></title>
    <link href="http://blog.toshimaru.net/macmkmfrb-cant-find-header-files-for-ruby/"/>
    <updated>2013-01-18T00:00:00-08:00</updated>
    <id>http://blog.toshimaru.net/macmkmfrb-cant-find-header-files-for-ruby</id>
    <content type="html"><![CDATA[<p>Macでrailsをインストールしようとしたときにこんなエラー。</p>
<div class="CodeRay">
  <div class="code"><pre>$ sudo gem install rails
Building native extensions. This could take a while…
ERROR: Error installing rails:
 ERROR: Failed to build gem native extension.

/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby extconf.rb
mkmf.rb can't find header files for ruby at /System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/ruby.h</pre></div>
</div>

<p>いろいろ調べたところ結局macのCommand line toolsがインストールされていないことが原因のよう。XcodeからそれをインストールしてOK（下記参照）.</p>
<p><a href="http://nantekottai.com/2012/03/31/xcode-command-line-tools/">XcodeのCommand Line Tools</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【jQuery】hidden inputタグをjQueryで追加]]></title>
    <link href="http://blog.toshimaru.net/jqueryhidden-inputjquery/"/>
    <updated>2013-01-17T00:00:00-08:00</updated>
    <id>http://blog.toshimaru.net/jqueryhidden-inputjquery</id>
    <content type="html"><![CDATA[<p><code>document.createElement</code>で要素をJS内でhiddenフィールドを動的に生成しているコードを見てjQueryで簡潔に書けないかと調べた。</p>
<p><script src="https://gist.github.com/1044d12b5de8d920cdd9.js"></script></p>
<p><code>document.createElement</code> よりは直感的にスッキリかけていいかな。</p>
<h3>参考</h3>
<ul>
<li><a href="http://stackoverflow.com/questions/2408043/jquery-create-hidden-form-element-on-the-fly">Jquery - Create hidden form element on the fly</a></li>
<li><a href="http://stackoverflow.com/questions/268490/jquery-document-createelement-equivalent">jQuery document.createElement equivalent?</a></li>
</ul>
<p>&nbsp;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「たった一行でもっと高画質の画像を集める方法」のシェルスクリプトコード解説]]></title>
    <link href="http://blog.toshimaru.net/sh3iz/"/>
    <updated>2012-12-24T00:00:00-08:00</updated>
    <id>http://blog.toshimaru.net/sh3iz</id>
    <content type="html"><![CDATA[<p><a href="http://d.hatena.ne.jp/shi3z/20121217/1355695824">たった一行でもっと高画質の画像を集める方法</a>にあったシェルスクリプトのコード。</p>
<div class="CodeRay">
  <div class="code"><pre>matome_url=$1;cnt=0;
for j in {1..10}; do
for i in `curl $matome_url\?page=$j| grep '_jWidgetData' | sed s/\&amp;quot\;/\&quot;/g|grep -o &quot;url\&quot;\:\&quot;[^\&quot;]*&quot; | cut -d \&quot; -f 3 `; do
  curl -o $2_$cnt.jpg $i;
  cnt=`expr $cnt + 1 `;
done
done</pre></div>
</div>

<p>その中の１行、このコードの意味がよくわからなかったので調べてみた。</p>
<div class="CodeRay">
  <div class="code"><pre>curl $matome_url\?page=$j| grep '_jWidgetData' | sed s/\&amp;quot\;/\&quot;/g|grep -o &quot;url\&quot;\:\&quot;[^\&quot;]*&quot; | cut -d \&quot; -f 3</pre></div>
</div>

<p><script src="https://gist.github.com/b1be508f03999ba8fbbe.js"></script></p>
<p>いやぁ、この「◯◯で水着画像を集める」系のネタ元はphpでしたが、シェルでもいけちゃうんですね。奥深い・・・</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vimから３日で乗り換えた、次世代モテエディタ「Sublime Text 2」の魅力]]></title>
    <link href="http://blog.toshimaru.net/vimsublime-text-2/"/>
    <updated>2012-12-18T00:00:00-08:00</updated>
    <id>http://blog.toshimaru.net/vimsublime-text-2</id>
    <content type="html"><![CDATA[<p>本エントリは<a href="http://www.adventar.org/calendars/20">Sublime Text 2 Advent Calendar 2012</a>の19日目の記事として書きます。</p>
<p>前回の<a href="http://blog.toshimaru.net/jquery-ajaxdeferredajax">軽めのjQuery Advent Calendar 2012</a>に続いて2012年２回目のAdvent Calendar参加となります！</p>
<hr />
<p>クリスマス直前だのにこんな記事を読んでいる<span style="text-decoration: line-through;">モテない</span>勉強熱心な開発者の皆様、こんにちわ。クリスマスが近い今日は次世代「モテ」エディタと名高い（ソースは俺）、Sublime Text 2の魅力について大いに語ってみたいと思う。</p>
<p><img src="/images/2012/12/sublime1.png"></p>
<h3>暗黒Vim時代</h3>
<p>Sublime前はVimを使っていたけど、イマイチぱっとしない（モテない）。モテなそうなところというと、、、</p>
<ul>
<li><strong>環境毎の違い。</strong> VimといえばOS、環境を選ばず使えるエディタだ！なんてことよく聞くけどその微妙な環境ごとの挙動の差異がきになる。CUIとGUIじゃ全然使い勝手違うし、WindowsとMacでも微妙に違う（文字選択とかヤンクとか）。TPOに応じて適切に振る舞えるオトコがモテるというものです。</li>
<li><strong>嵩む設定ファイル。</strong> よくVimは自分専用にカスタマイズできる！とか言ってゴテゴテのガチャガチャにカスタマイズをしている（薦めている）人を見かけますが、逆にいうとカスタマイズしなければ使いにくいということ。一生懸命着飾って良くなろうとすることも重要ですが、ナチュラルに良いのならそれに越したことはないでしょう？</li>
<li><strong>オタク系キーバインド（俺命名）。</strong> 一般人にEmacsやVimを使わせてみてください。ドン引きです。jkでカーソルが移動するとか意味不明です。あなたがJK好きのロリ変態に間違われる危険性もあります。また、真っ黒な画面に白文字でドヤ顔でEnterキーを打鍵しているあなた。それを後ろで見ている一般人はドン引きです。１つのモノゴトに集中するのはけっこうですが、一般人の理解の範疇に留めておきましょう。</li>
<li><strong>Vim Scriptェ。</strong>まるで宇宙語。モテる男ならやっぱruby,pythonとか高級言語を使いたいよね〜。</li>
</ul>
<h3>Sublimeとの出会い - when I fell in love</h3>
<p>そんな感じで「新しいイケてるナウでヤングなエディタないかな〜」と探してた折、海外で人気っぽいエディタがあるという噂を聞きつけ試用したのが<a href="http://www.sublimetext.com/2">Sublime Text 2</a>でした。１日使ってその魅力に取り憑かれ、二日目にライセンス購入し、３日目にはもうお前しかいない！となりました。</p>
<p>日本でも最近よく耳にしたりするようになったので、ジワジワとSublime Text 2の魅力が認知され始めているようです。</p>
<p>それではそんなSublime Text 2の魅力を語ってみたいと思う。</p>
<h2>魅力１　クールなデザイン</h2>
<p>Sublime Text 2のデザインは超クール。パッと見はChromeのような洗練されたシンプルさを感じます。</p>
<p><img src="/images/2012/12/sublime2.png"></p>
<p>またデフォルトで用意されているColor Scheme もイケてるものばかり。流行りの<a href="http://ethanschoonover.com/solarized">Solarized</a> もありますし、ダーク系なMonokai、ライト系のLAZYのようなColor Schemeもあります。どれか１つでも気に入ったものが見つかるでしょう。</p>
<p>もしなかったとしても<a href="http://tmtheme-editor.herokuapp.com/">Color Scheme Editor for Sublime</a>で自分好みのモノを作ってもいいですし、後述するパッケージマネージャからお好きなものを入れてもいい。</p>
<p>※Color Scheme Editor for Sublimeについては<a href="http://d.hatena.ne.jp/pikotea/20121204/1354613192">本Advent Calendar１日目の記事</a>で書かれています！</p>
<p>全体的な見た目が気に食わなければ Theme を好みのモノに入れ替えてやればよいです。</p>
<p><img src="/images/2012/12/sublime3.png"></p>
<h2>魅力２　無限に広がるコマンドパレット</h2>
<p>Vimでいうところの<code>:</code>でしょうか。<code>Ctrl + Shift + P</code> で展開するコマンドパレット。ここからgitのコマンドを実行したり（要 Git Package）、Syntaxを設定したり、各種プラグインを実行したり、各種設定ファイルを開いたりできます。</p>
<p>他にも</p>
<ul>
<li><code>⌘ + P</code> でのファイルオープン(eclipse でいうところの <code>Ctrl + Shift + R</code>) </li>
<li><code>⌘ + R</code> での関数ジャンプ (vimでいうところの <code>]]</code> <code>[[</code>&nbsp;)</li>
</ul>
<p>なんかが便利です。</p>
<h2>魅力３　パッケージマネージャ</h2>
<p>Sublime Text 2の一番の魅力かもしれないところ。プラグインをコマンドパレットでさくさくインストール・アンインストールできます。プラグインはpythonで書くことができ、Sublime Textを愛用する開発者が、活発にプラグインをgithub上に公開しています。</p>
<p>パッケージマネージャの導入は簡単。<code>ctrl+`</code>でコンソールを開いてこれを実行するだけ。</p>
<div class="CodeRay">
  <div class="code"><pre>import urllib2,os; pf='Package Control.sublime-package'; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read()); print 'Please restart Sublime Text to finish installation'</pre></div>
</div>

<p><a href="http://wbond.net/sublime_packages/package_control/installation">Sublime Package Control</a></p>
<p>あとはコマンドパレットで<code>Install Package</code> を選択してお好きなものをどうぞ。</p>
<h2>魅力４　わかりやすい操作感</h2>
<p>冒頭にオタク系キーバインドとか言いましたが、Sublime Textは直感的でわかりやすい操作感です。Mac/Windows それぞれに最適化されたショートカットが用意されています。</p>
<p>英語だけどこのへんよくまとまってます。(新しいGistってtextile表現できないん&hellip;??)</p>
<ul>
<li>Mac版：<a href="https://gist.github.com/1207002">Sublime Text 2 - Useful Shortcuts</a></li>
<li>Win版：<a href="https://gist.github.com/1736542">Sublime Text 2 - Useful Shortcuts</a></li>
</ul>
<h2>魅力５　Json Configuration</h2>
<p>もっと自分好みに設定したいあなたも安心、Json形式のシンプルな設定ファイルがあります。コマンドパレットで  <code>Preferences: Settings - User</code> を選択。そこでいろいろ設定できます。たとえばこんなん。</p>
<div class="CodeRay">
  <div class="code"><pre>{
     //フォントサイズ
     &quot;font_size&quot;: 13,
     //行間
     &quot;line_padding_top&quot;: 5,
     //タブサイズ
     &quot;tab_size&quot;: 4,
     //空白の削除
     &quot;trim_trailing_white_space_on_save&quot;: true,
     //タブやスペースなどの不過視文字を表示(お好みで)
     &quot;draw_white_space&quot;: &quot;all&quot;,
     //現在の選択行をハイライト表示(お好みで)
     &quot;highlight_line&quot;:true,
     //自動改行
     &quot;word_wrap&quot;: true
}</pre></div>
</div>

<p><a href="http://mnemoniqs.com/web/sublimetext2/">Sublime Text 2ってエディタがすごくイイ。Dreamweaverから乗り換えた時の初期設定とか使い方とかをメモ</a></p>
<p>え？ Sublime Textのキーバインドが気に入らない？　そんなあなたは <code>Preferences: Key Bindings - User</code> .</p>
<p>こちらでお好きにどうぞ。</p>
<h2>まとめ</h2>
<p>今年のIT系女子へのクリスマスプレゼントは、Sublime Text 2のライセンスでキマり！　Sublime Text 2は「恋に落ちるエディタ」いや、「恋に落としいれるエディタ」だったのだ！！！</p>
<p>（全然まとめじゃない）</p>
<hr />
<p>では次の方どうぞ〜</p>
]]></content>
  </entry>
  
</feed>
