<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://blog.toshimaru.net/atom.xml" rel="self" type="application/atom+xml" /><link href="http://blog.toshimaru.net/" rel="alternate" type="text/html" /><updated>2018-03-27T09:05:28+09:00</updated><id>http://blog.toshimaru.net/</id><title type="html">Hack Your Design!</title><subtitle>toshimaruの技術系なブログ</subtitle><author><name>Toshimaru</name></author><entry><title type="html">railsdm2018で「ActiveRecordデータ処理アンチパターン」を発表しました</title><link href="http://blog.toshimaru.net/rdm2018-active-record-anti-patterns/" rel="alternate" type="text/html" title="railsdm2018で「ActiveRecordデータ処理アンチパターン」を発表しました" /><published>2018-03-27T00:00:00+09:00</published><updated>2018-03-27T00:00:00+09:00</updated><id>http://blog.toshimaru.net/rdm2018-active-record-anti-patterns</id><content type="html" xml:base="http://blog.toshimaru.net/rdm2018-active-record-anti-patterns/">&lt;p&gt;&lt;a href=&quot;https://railsdm.github.io/2018/&quot;&gt;Rails Developers Meetup 2018&lt;/a&gt;で「ActiveRecordデータ処理アンチパターン」というタイトルで発表してきました。&lt;/p&gt;

&lt;h2 id=&quot;発表資料&quot;&gt;発表資料&lt;/h2&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;2bb9d7ceea4b4987bf4c8618a53a1e68&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;事前に公開したエントリ&quot;&gt;事前に公開したエントリ&lt;/h2&gt;

&lt;p&gt;発表資料に出てくる最初の事例はこちらがベースの事例となっています。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;今月末のRails Developer Meetupに先駆けてRailsの遅いバッチ処理を400倍速くする話を書きました  | Rails/ActiveRecord バッチ処理の最適化 - Hack Your Design! &lt;a href=&quot;https://t.co/i7JZnZcuLc&quot;&gt;https://t.co/i7JZnZcuLc&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/970546164725501952?ref_src=twsrc%5Etfw&quot;&gt;March 5, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;紹介したアンチパターン&quot;&gt;紹介したアンチパターン&lt;/h2&gt;

&lt;p&gt;発表内で紹介したアンチパターンがこちらです。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;All Each Pattern&lt;/li&gt;
  &lt;li&gt;N+1 Update Queries Pattern&lt;/li&gt;
  &lt;li&gt;Ruby Aggregation Pattern&lt;/li&gt;
  &lt;li&gt;N+1 Queries Pattern&lt;/li&gt;
  &lt;li&gt;Unnecessary Query Pattern&lt;/li&gt;
  &lt;li&gt;Unnecessary Mode Initialization Pattern&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;紹介できなかったアンチパターン&quot;&gt;紹介できなかったアンチパターン&lt;/h2&gt;

&lt;p&gt;何かしらアンチパターン化できそうだけど、時間の都合上しなかったアンチパターンがこちらです。発表しなかったので命名は適当です。&lt;/p&gt;

&lt;h3 id=&quot;なんでもincludesパターン&quot;&gt;なんでもincludesパターン&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;joins&lt;/code&gt;で良いのになんでも&lt;code class=&quot;highlighter-rouge&quot;&gt;includes&lt;/code&gt;で解決しようとしちゃうパターン。このへんは下記の解説に詳しいです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://qiita.com/k0kubun/items/80c5a5494f53bb88dc58&quot;&gt;ActiveRecordのjoinsとpreloadとincludesとeager_loadの違い - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;too-many-find_or_create_by-パターン&quot;&gt;Too many find_or_create_by パターン&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;find_or_create_by&lt;/code&gt;は、オブジェクトが存在する場合は取得、なければ作成って挙動をするやつです。これをループ内で使いまくるパターン。&lt;/p&gt;

&lt;p&gt;そんなときはSQLのUPSERTの機能を使うのが得策。具体的にはMySQLであれば&lt;code class=&quot;highlighter-rouge&quot;&gt;INSERT...ON DUPLICATE KEY UPDATE&lt;/code&gt;です。&lt;/p&gt;

&lt;p&gt;残念なことにこれはActiveRecordの標準機能では提供されていないので&lt;a href=&quot;https://github.com/zdennis/activerecord-import&quot;&gt;activerecord-import&lt;/a&gt;などのgemを使って解決する必要があります。&lt;/p&gt;

&lt;h3 id=&quot;has_many関連のcount方法いろいろあるよ問題&quot;&gt;has_many関連のcount方法いろいろあるよ問題&lt;/h3&gt;

&lt;p&gt;ちゃんとパターン化できていませんが、この問題もなかなか難しい問題です。どのメソッド使ったらよいかはケースバイケースで変わってくるので詳しくは下記を参照されたし。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://qiita.com/nay3/items/1cda39fb58569d832203&quot;&gt;ActiveRecord の has_many関連、件数を調べるメソッドはどれを使えばいい？ - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;q--a&quot;&gt;Q &amp;amp; A&lt;/h2&gt;

&lt;h3 id=&quot;アンチパターンの出典は&quot;&gt;アンチパターンの出典は？&lt;/h3&gt;

&lt;p&gt;全部オレです（笑&lt;/p&gt;

&lt;p&gt;一応元ネタというかインスパイアを受けた本としては発表内でも紹介している『SQLアンチパターン』です。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=4873115892&amp;amp;linkId=6903fbe4f4a55cf4f47b4036bf2f350a&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;こちらの本が原著は英語で書かれており、それに倣うかたちで英語でアンチパターンを命名しました。まぁ平たく言うとカッコつけて英語にしました以上の理由はありません :smile:&lt;/p&gt;

&lt;h3 id=&quot;事例１usercreated_atにindex貼らないの&quot;&gt;（事例１）User.created_atにINDEX貼らないの？&lt;/h3&gt;

&lt;p&gt;下記二点の理由により貼りませんでした。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;前提事項としてDBの最適化はしないと述べた&lt;/li&gt;
  &lt;li&gt;User.created_atにINDEXを貼ってもINDEX効かない&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;User.created_atにINDEX(&lt;code class=&quot;highlighter-rouge&quot;&gt;index_users_on_created_at&lt;/code&gt;)を貼ったあとの実行計画がこちらになります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; EXPLAIN UPDATE `users` SET point = point + 100 WHERE (created_at &amp;gt;= '2017-01-01') \G
*************************** 1. row ***************************
           id: 1
  select_type: UPDATE
        table: users
   partitions: NULL
         type: index
possible_keys: index_users_on_created_at
          key: PRIMARY
      key_len: 8
          ref: NULL
         rows: 99574
     filtered: 100.00
        Extra: Using where
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;INDEX貼ってても対象範囲が大きいとINDEX効かなくなるんです。そして今回のケースはそれに当たります。（この挙動、実は僕も全然知りませんでした…）&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;mysqlで検索の対象範囲が大きくなりすぎるとindexが効かなくなるの知らなかった | [MYSQL] datetimeカラムのインデックスの使われ方をテストしてみた │ revdev &lt;a href=&quot;https://t.co/2JK7VD7Ttv&quot;&gt;https://t.co/2JK7VD7Ttv&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/974924182369722368?ref_src=twsrc%5Etfw&quot;&gt;March 17, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;テストとして条件の範囲を小さくした実行計画がこちらになります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; EXPLAIN UPDATE `users` SET point = point + 100 WHERE (created_at &amp;gt;= '2018-01-01') \G
*************************** 1. row ***************************
           id: 1
  select_type: UPDATE
        table: users
   partitions: NULL
         type: range
possible_keys: index_users_on_created_at
          key: index_users_on_created_at
      key_len: 5
          ref: const
         rows: 5903
     filtered: 100.00
        Extra: Using where
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;きちんとこちらではINDEXが効いてます。&lt;/p&gt;

&lt;h3 id=&quot;事例２改善１のコードのモデルってロードされている&quot;&gt;（事例２）改善１のコードのモデルってロードされている？&lt;/h3&gt;

&lt;p&gt;会場であった質問です。こちらはRails consoleで実際のコードを動かしてあげれば一目瞭然です。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; Post.group(:user_id).select(&quot;user_id, SUM(like_count) AS like_count&quot;).order(&quot;like_count DESC&quot;) .limit(100)
  Post Load (976.6ms)  SELECT  user_id, SUM(like_count) AS like_count FROM `posts` GROUP BY `posts`.`user_id` ORDER BY like_count DESC LIMIT 11
=&amp;gt; #&amp;lt;ActiveRecord::Relation [#&amp;lt;Post id: nil, user_id: 2632, like_count: 832&amp;gt;, #&amp;lt;Post id: nil, user_id: 51965, like_count: 800&amp;gt;, #&amp;lt;Post id: nil, user_id: 25068, like_count: 783&amp;gt;, ...]&amp;gt;

&amp;gt; Post.group(:user_id).order(&quot;SUM(like_count) DESC&quot;) .limit(3000).pluck(:user_id)
   (668.3ms)  SELECT  `posts`.`user_id` FROM `posts` GROUP BY `posts`.`user_id` ORDER BY SUM(like_count) DESC LIMIT 3000
=&amp;gt; [2632, 51965, 25068, 8515, 84933, 67763, 89631, 69494, 78805, 17541, 53344, 7618, 92652, 13704, 94308, 96778, ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;発表を終えて&quot;&gt;発表を終えて&lt;/h2&gt;

&lt;p&gt;30minsと長めの発表は&lt;a href=&quot;/aws-summit-tokyo-2015/&quot;&gt;AWS Summitぶり&lt;/a&gt;だったので時間配分にやや不安があったけど、当日は発表を巻くこともなく余裕をもって25分くらいで発表を終えられたのでよかった。&lt;/p&gt;</content><author><name>Toshimaru</name></author><category term="presentation" /><category term="activerecord" /><category term="rails" /><summary type="html">Rails Developers Meetup 2018で「ActiveRecordデータ処理アンチパターン」というタイトルで発表してきました。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.toshimaru.net/images/posts/railsdm/rdm2018.png" /></entry><entry><title type="html">Rails/ActiveRecord バッチ処理の最適化</title><link href="http://blog.toshimaru.net/rails-batch-optimization/" rel="alternate" type="text/html" title="Rails/ActiveRecord バッチ処理の最適化" /><published>2018-03-05T00:00:00+09:00</published><updated>2018-03-05T00:00:00+09:00</updated><id>http://blog.toshimaru.net/rails-batch-optimization</id><content type="html" xml:base="http://blog.toshimaru.net/rails-batch-optimization/">&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Railsのバッチ処理最適化の記事書いたら需要あるかな&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/936796457931128832?ref_src=twsrc%5Etfw&quot;&gt;December 2, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;ということで今日はRailsバッチ処理の最適化について書いてみたいと思います。&lt;/p&gt;

&lt;h2 id=&quot;検証環境&quot;&gt;検証環境&lt;/h2&gt;

&lt;p&gt;コードの検証に使った環境は下記の通りです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;macOS High Sierra (2.3 GHz Intel Core i5 / メモリ8G)&lt;/li&gt;
  &lt;li&gt;Ruby 2.5&lt;/li&gt;
  &lt;li&gt;Rails 5.1&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;前提条件&quot;&gt;前提条件&lt;/h2&gt;

&lt;p&gt;最適化の前提条件としては下記の通りです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;バッチはrakeタスクとして実行する&lt;/li&gt;
  &lt;li&gt;今回、最適化対象とするのは &lt;strong&gt;Userモデルのバッチ処理&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;使用するUserモデルは&lt;a href=&quot;https://github.com/plataformatec/devise/&quot;&gt;devise&lt;/a&gt;で作られるUserモデル(&lt;code class=&quot;highlighter-rouge&quot;&gt;rails generate devise:install&lt;/code&gt;)を基本として、そのスキーマ定義にint型のpointカラムをつけたもの&lt;/li&gt;
      &lt;li&gt;pointカラムは登録ユーザーが自由につかえるポイントの意&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Userデータとして事前に &lt;strong&gt;50万件のユーザーデータ&lt;/strong&gt; を投入しておく&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dalibornasevic.com/posts/68-processing-large-csv-files-with-ruby&quot;&gt;こちらのコード&lt;/a&gt;を参考に処理の &lt;strong&gt;実行時間&lt;/strong&gt; と &lt;strong&gt;メモリ使用量&lt;/strong&gt; を計測する&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;execute&lt;/code&gt;などによる直接SQL実行はせずにDB操作を行う&lt;/li&gt;
  &lt;li&gt;シンプルにするために、登録日 = &lt;code class=&quot;highlighter-rouge&quot;&gt;User.created_at&lt;/code&gt;とする
    &lt;ul&gt;
      &lt;li&gt;Userのタイムゾーンは無いものとする（すべてUTCとして扱う）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;データベースのトランザクション処理は考慮しない&lt;/li&gt;
  &lt;li&gt;今回行う最適化の対象はアプリケーションコードでありDBの最適化は考えない&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;オリジナルコード&quot;&gt;オリジナルコード&lt;/h2&gt;

&lt;p&gt;さて今回最適化するコードは下記です。処理内容としては &lt;strong&gt;全ユーザーの中から2017年以降の登録ユーザーへ100ポイントを付与する&lt;/strong&gt; というものです。いかにも販促活動の一環としてありそうな話です（&lt;code class=&quot;highlighter-rouge&quot;&gt;2017年以降&lt;/code&gt;のところの条件は別になんでも良かったのですが、処理対象をある程度確保するために今回はそのように設定しました）。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Task: batch:original&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;created_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2017-01-01&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;あなたはこのコードをぱっと見てどこが悪いかすぐにわかりますか？（言うまでもなくこのコードは問題アリアリのコードです!!）&lt;/p&gt;

&lt;p&gt;中級者以上のRailsエンジニアであれば「そんなコードは絶対書かないよ！」と思うかもしれませんが、「RailsでWebプログラミングを初めてまだ一ヶ月です！」みたいな初級エンジニアであれば上記のように書いても全然おかしくはないコードだと思います。&lt;/p&gt;

&lt;h3 id=&quot;ベンチマーク&quot;&gt;ベンチマーク&lt;/h3&gt;

&lt;p&gt;まずはこの問題のあるコードがどれだけ時間がかかっているかを計測してみましょう。&lt;/p&gt;

&lt;p&gt;※ 前提条件で書いた通り、&lt;a href=&quot;https://dalibornasevic.com/posts/68-processing-large-csv-files-with-ruby&quot;&gt;こちらのコード&lt;/a&gt;を参考に時間とメモリ使用量を計測します。また結果は数回実施した上で大きく外れていない平均的なスコア結果を掲載します。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; rake batch:original
&lt;span class=&quot;go&quot;&gt;Time: 339.42 secs
Memory: 2219.72 MB
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;実行時間は340秒、メモリ使用量は2200MB程でした。今回の最適化のゴールは &lt;strong&gt;この処理時間をできるだけ速くして、あわせてメモリ使用量も抑えることです。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;では早速このコードを最適化していきましょう。&lt;/p&gt;

&lt;h2 id=&quot;最適化1-簡単な最適化&quot;&gt;最適化1: 簡単な最適化&lt;/h2&gt;

&lt;p&gt;まずは簡単な最適化から始めましょう。日付の比較は&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;を使うよりも&lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt;クラスを使ったほうが速そうです。また、ループの中で何度も同じ値が使われるのも良くないので定数に切り出しちゃいましょう。結果、下記のコードのようになりました。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Task: batch:improvement1&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;POINT_DATE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2017&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;created_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;POINT_DATE&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ベンチマーク-1&quot;&gt;ベンチマーク&lt;/h3&gt;

&lt;p&gt;さて計測結果です。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; rake batch:improvement1
&lt;span class=&quot;go&quot;&gt;Time: 320.0 secs
Memory: 2244.71 MB
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;メモリ使用量は変わらず、実行時間は10数秒程度速くなったくらいでしょうか。小さな最適化レベルでまだまだ全然速くなったとは言えません。&lt;/p&gt;

&lt;h2 id=&quot;最適化2-where--each-を使う&quot;&gt;最適化2: where &amp;amp; each を使う&lt;/h2&gt;

&lt;p&gt;次はもう少し本格的な最適化を入れていきましょう。&lt;/p&gt;

&lt;p&gt;まずは&lt;code class=&quot;highlighter-rouge&quot;&gt;User.all.each&lt;/code&gt;で全件ユーザーを取得している点が真っ先に気になるところです。これは &lt;strong&gt;全件取得せず2017年以降の登録ユーザーをあらかじめフィルターしてからループさせる&lt;/strong&gt; ほうが良さそうです。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Task: batch:improvement2&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;created_at &amp;gt;= ?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;POINT_DATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;あらかじめ処理対象ユーザーだけをフィルターできているので、ループ内の&lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;も消すことができました。&lt;/p&gt;

&lt;h3 id=&quot;ベンチマーク-2&quot;&gt;ベンチマーク&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; rake batch:improvement2
&lt;span class=&quot;go&quot;&gt;Time: 294.35 secs
Memory: 1623.5 MB
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;実行時間が前の結果より20秒程改善、メモリ消費もユーザーを全件取得する必要がなくなった分、500MB程空きました。良い感じですね。&lt;/p&gt;

&lt;h2 id=&quot;最適化3-find_each-を使う&quot;&gt;最適化3: find_each を使う&lt;/h2&gt;

&lt;p&gt;ちょっと待って下さい、大量データを一度にロードしなくてもいいように、ActiveRecordが&lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveRecord/Batches.html#method-i-find_each&quot;&gt;find_each&lt;/a&gt;という便利メソッドを用意してくれてるのでした。これを使わない手はないでしょう。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Task: batch:improvement3&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;created_at &amp;gt;= ?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;POINT_DATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これで少しつづユーザーをロードして処理してくれるようになり、メモリに優しいコードになったと思います。&lt;/p&gt;

&lt;h3 id=&quot;ベンチマーク-3&quot;&gt;ベンチマーク&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rake batch:improvement3
Time: 290.88 secs
Memory: 31.41 MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;実行時間が前の結果と変わらないこそすれ、&lt;strong&gt;メモリ使用量は前の結果の50分の一となりました。&lt;/strong&gt; 大きな改善と言っていいでしょう。&lt;/p&gt;

&lt;h2 id=&quot;最適化4-in_batches--update_all-を使う&quot;&gt;最適化4: in_batches &amp;amp; update_all を使う&lt;/h2&gt;

&lt;p&gt;ここで一件一件&lt;code class=&quot;highlighter-rouge&quot;&gt;update&lt;/code&gt;が走る点が気になってきました。そこはActiveRecordの&lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveRecord/Relation.html#method-i-update_all&quot;&gt;update_all&lt;/a&gt;を使ってまとめて更新するようにしてあげれば解決できそうです。&lt;/p&gt;

&lt;p&gt;また&lt;code class=&quot;highlighter-rouge&quot;&gt;update_all&lt;/code&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord::Relation&lt;/code&gt;のメソッドですが、&lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord::Relation&lt;/code&gt;を先の&lt;code class=&quot;highlighter-rouge&quot;&gt;find_each&lt;/code&gt;のように返してくれる便利メソッドが&lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveRecord/Batches.html#method-i-in_batches&quot;&gt;in_batches&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;この&lt;code class=&quot;highlighter-rouge&quot;&gt;in_batches&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;update_all&lt;/code&gt;を組み合わせて処理してあげれば効率良く更新できそうな気がします。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Task: batch:improvement4&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;created_at &amp;gt;= ?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;POINT_DATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;in_batches&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;point = point + 100&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ベンチマーク-4&quot;&gt;ベンチマーク&lt;/h3&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; rake batch:improvement4
&lt;span class=&quot;go&quot;&gt;Time: 2.46 secs
Memory: 7.26 MB
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;実行時間が100倍速くなりました。&lt;/strong&gt; 劇的な改善と言っていいでしょう。またメモリの使用量も前の結果よりさらに抑えられています。&lt;/p&gt;

&lt;h2 id=&quot;最適化5-where--update_all&quot;&gt;最適化5: where &amp;amp; update_all&lt;/h2&gt;

&lt;p&gt;勘の良い方なら既にお気づきですね。…ハイ、先のコードは&lt;code class=&quot;highlighter-rouge&quot;&gt;in_batches&lt;/code&gt;すら不要です。単純にupdate対象を&lt;code class=&quot;highlighter-rouge&quot;&gt;where&lt;/code&gt;でフィルターした上で&lt;code class=&quot;highlighter-rouge&quot;&gt;update_all&lt;/code&gt;すれば良さそうです。出来上がったコードがこちら。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Task: batch:improvement5&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;created_at &amp;gt;= ?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;POINT_DATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;point = point + 100&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一行のシンプルなコードに仕上がりました。&lt;/p&gt;

&lt;h3 id=&quot;ベンチマーク-5&quot;&gt;ベンチマーク&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rake batch:improvement5
Time: 0.78 secs
Memory: 0.82 MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;実行時間は前の結果より3倍早くなり、メモリ使用量もさらに10分の一まで抑えられました。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;これを今回の最適化コードの最終形としたいと思います。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;追記ここから&lt;/em&gt;&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;これcreated_atにインデックスがあろうがなかろうが全舐めして1秒弱で終わるレコード数ならいいのだけど、そうだとしてもsaveをupdate_allにした時点でcallbackが起きなくなって元と等価ではなくなるから仕事で真似するときは詳しい人にちゃんとレビューしてもらってから投入したほうがよさそう。&lt;/p&gt;&amp;mdash; Ryuta Kamizono (@kamipo) &lt;a href=&quot;https://twitter.com/kamipo/status/970574529452900352?ref_src=twsrc%5Etfw&quot;&gt;March 5, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;kamipoさんからご指摘頂いたとおり、&lt;code class=&quot;highlighter-rouge&quot;&gt;update_all&lt;/code&gt;は通常のActiveRecordの更新とは異なりcallback, validationをスキップするという仕様となっております。よってオリジナルコードとは等価な処理では無くなっているので、実際の現場においては&lt;code class=&quot;highlighter-rouge&quot;&gt;save&lt;/code&gt;から&lt;code class=&quot;highlighter-rouge&quot;&gt;update_all&lt;/code&gt;に変更する際は「本当にcallback, validationスキップしても大丈夫なんだっけ？」ということをしっかり考えてから実施するようにしてください。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;it does not trigger Active Record callbacks or validations&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;http://api.rubyonrails.org/classes/ActiveRecord/Relation.html#method-i-update_all&lt;/p&gt;

&lt;p&gt;なお今回のコード例ではモデルのcallback, validationをスキップしても問題ないコードとして話を進めています。&lt;/p&gt;

&lt;p&gt;加えて、今回データベースの最適化は最適化の範囲外としたので&lt;code class=&quot;highlighter-rouge&quot;&gt;created_at&lt;/code&gt;カラムのindexは貼りませんでした。実際の現場においてはRubyのコードレベルの最適化に加えてデータベースの最適化も考えてINDEXを貼ることも検討したほうがいいでしょう。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;追記ここまで&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;最終結果&quot;&gt;最終結果&lt;/h2&gt;

&lt;p&gt;オリジナルコードと最適化済みの最終コードを比較すると下記の通りの改善が確認できました。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;実行時間&lt;/th&gt;
      &lt;th&gt;メモリ消費&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;オリジナルコード&lt;/td&gt;
      &lt;td&gt;339.42 secs&lt;/td&gt;
      &lt;td&gt;2219.72 MB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;最適化コード&lt;/td&gt;
      &lt;td&gt;0.78 secs&lt;/td&gt;
      &lt;td&gt;0.82 MB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;改善結果&lt;/td&gt;
      &lt;td&gt;:rocket: &lt;strong&gt;435倍高速化&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;:recycle: &lt;strong&gt;約2700分の一まで省メモリ化&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;activerecordデータ処理アンチパターンで発表します&quot;&gt;「ActiveRecordデータ処理アンチパターン」で発表します&lt;/h2&gt;

&lt;p&gt;上述したようなオリジナルコードは極端な例ではありますが、ActiveRecordでデータを扱うときはきちんと遅くならないように意識してバッチ処理を書かないと極端に遅くなってしまうケースがあります。&lt;/p&gt;

&lt;p&gt;そんなActiveRecordデータ処理で陥りがちな罠をパターン化し今月のRails Develper Meetupにて発表する予定です。ご興味あれば是非。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;3月25日に「ActiveRecordアンチパターン」的な内容で発表しますー | Rails Developers Meetup 2018: Day 2｜IT勉強会ならTECH PLAY［テックプレイ］ &lt;a href=&quot;https://t.co/QJgdMF92Sr&quot;&gt;https://t.co/QJgdMF92Sr&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/960340809005506561?ref_src=twsrc%5Etfw&quot;&gt;February 5, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;参考リンク&quot;&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveRecord/Relation.html&quot;&gt;ActiveRecord::Relation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveRecord/Batches.html&quot;&gt;ActiveRecord::Batches&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="rails" /><category term="activerecord" /><summary type="html">Railsのバッチ処理最適化の記事書いたら需要あるかな&amp;mdash; toshimaru (@toshimaru_e) December 2, 2017</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.toshimaru.net/images/posts/railsdm/ar-optimization.png" /></entry><entry><title type="html">ヤフーの1on1とシリコンバレー式1on1の本を読んだ</title><link href="http://blog.toshimaru.net/1-on-1-book-memo/" rel="alternate" type="text/html" title="ヤフーの1on1とシリコンバレー式1on1の本を読んだ" /><published>2018-02-10T00:00:00+09:00</published><updated>2018-02-10T00:00:00+09:00</updated><id>http://blog.toshimaru.net/1-on-1-book-memo</id><content type="html" xml:base="http://blog.toshimaru.net/1-on-1-book-memo/">&lt;p&gt;1 on 1 をチームで実施することとなり、勉強がてら『&lt;a href=&quot;http://amzn.to/2GNg6b5&quot;&gt;シリコンバレー式 最強の育て方 ― 人材マネジメントの新しい常識 1 on1ミーティング&lt;/a&gt;』と『&lt;a href=&quot;http://amzn.to/2GKRNu2&quot;&gt;ヤフーの1on1―――部下を成長させるコミュニケーションの技法&lt;/a&gt;』の２冊を読んだ。&lt;/p&gt;

&lt;p&gt;※以下、それぞれをシリコンバレー式1on1本とYahoo 1on1本と表記する&lt;/p&gt;

&lt;h2 id=&quot;両本のちがい&quot;&gt;両本のちがい&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;シリコンバレー式1on1本
    &lt;ul&gt;
      &lt;li&gt;1 on 1の必要性、1 on 1で何を話すべきかが体系的にまとまっている&lt;/li&gt;
      &lt;li&gt;1 on 1の質問・伝え方例一覧が巻末にある&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Yahoo 1on1本
    &lt;ul&gt;
      &lt;li&gt;1 on 1における上司のロールとしてはコーチング的な要素強い&lt;/li&gt;
      &lt;li&gt;1 on 1 での改善事例、サクセスストーリーが漫画・会話形式多く書かれている&lt;/li&gt;
      &lt;li&gt;コミュニケーションの細かなテクニック・Tipsも多く書かれている&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;シリコンバレー式1on1本のほうで体系的に1 on 1の必要性・話すべきことを掴んで、実際に1 on 1の開催イメージを掴んでいくためにYahoo 1on1本を読むと良い。&lt;/p&gt;

&lt;h2 id=&quot;1-on-1とは何か&quot;&gt;1 on 1とは何か？&lt;/h2&gt;

&lt;p&gt;1 on 1とは上司と部下で行われる１対１で話をする場のことである&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。日本語で言うと面談…だが面談というと人事面談や評価面談などのように堅い印象があるので、あえて1 on 1という呼び方をすることが多い。&lt;/p&gt;

&lt;h2 id=&quot;1-on-1の目的&quot;&gt;1 on 1の目的&lt;/h2&gt;

&lt;p&gt;1 on 1 の目的としては下記が挙げられる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;部下との関係性の構築
    &lt;ul&gt;
      &lt;li&gt;業務ではできない質の高いコミュニケーションを行う&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;部下のキャリア開発
    &lt;ul&gt;
      &lt;li&gt;部下の短期的キャリア・中長期のキャリア開発を支援&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;部下のパフォーマンス管理
    &lt;ul&gt;
      &lt;li&gt;目標管理&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;部下のモチベーション向上
    &lt;ul&gt;
      &lt;li&gt;困っていること・業務ブロッカーの排除&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;部下の成長支援
    &lt;ul&gt;
      &lt;li&gt;フィードバック&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そして上司はこれらの1 on 1目的をきちんと部下に説明すること。部下が1 on 1に意義が見いだせなかったり、イヤイヤ開催するような1 on 1であれば1 on 1はすぐに形骸化してしまうので、しっかり上司は目的を伝えて納得してもらった上で1 on 1を開催すること。&lt;/p&gt;

&lt;h2 id=&quot;1-on-1で話すこと&quot;&gt;1 on 1で話すこと&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/1on1/1on1-topics.png&quot; alt=&quot;シリコンバレー式&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;シリコンバレー式1on1本より図を引用&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;プライベート相互理解
    &lt;ul&gt;
      &lt;li&gt;雑談の中から聞きだせるとよい。関係性を構築する上で相手の人となりは知っておくのが基本。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;心身の健康チェック
    &lt;ul&gt;
      &lt;li&gt;心身の状態が問題ないか。業務量が過多になっていたり、業務時間が不規則になっていないか。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;モチベーションアップ
    &lt;ul&gt;
      &lt;li&gt;モチベーションを下げる要因を取り除く
        &lt;ul&gt;
          &lt;li&gt;何か困っていること・業務を行う上でのブロッカーがあるのであればその話をきちんと聞く（傾聴/アクティブリスニング）&lt;/li&gt;
          &lt;li&gt;上司は部下への否定ではなく共感を示す&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;モチベーションを上げる要因を作り出す
        &lt;ul&gt;
          &lt;li&gt;ほめる/承認する&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;業務・組織課題の改善
    &lt;ul&gt;
      &lt;li&gt;業務課題の改善
        &lt;ul&gt;
          &lt;li&gt;課題を聞くとともに将来起こりうるリスクも確認しておくと良い&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;チーム/組織課題の改善&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;目標設定・評価
    &lt;ul&gt;
      &lt;li&gt;マネージャーは正しい評価をするのではなく、部下が納得できる評価が必要
        &lt;ul&gt;
          &lt;li&gt;納得感を持てなければ部下が建設的に目標に向き合えない&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;能力開発・キャリア支援
    &lt;ul&gt;
      &lt;li&gt;経験学習のサイクルを回す&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;戦略・方針の伝達
    &lt;ul&gt;
      &lt;li&gt;経営陣などの上層部の戦略・方針をその背景も含めて適切に部下に伝達する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;1-on-1は部下のための時間&quot;&gt;1 on 1は部下のための時間&lt;/h2&gt;

&lt;p&gt;1 on 1は会社のための時間でもなく上司のための時間ではなく &lt;strong&gt;部下のための時間&lt;/strong&gt; だ。&lt;/p&gt;

&lt;p&gt;1 on 1で話すトピックは基本的には上司が決めてファシリテートしていくものであるが、部下が話したいトピックがある場合はそちらを優先する。&lt;/p&gt;

&lt;p&gt;1 on 1 内で話している時間も7-8割くらいが部下が話す時間になるようにするのが理想的である。&lt;/p&gt;

&lt;h2 id=&quot;1-on-1メモを作ろう&quot;&gt;1 on 1メモを作ろう&lt;/h2&gt;

&lt;p&gt;1 on 1 で話した内容を忘れないように、きちんと話したことをメモとして書き残しておく。&lt;/p&gt;

&lt;p&gt;メモを残すならば今ならグーグルDocsなどのクラウドサービスを使うのが良いだろう。上司・部下だけが閲覧できるような設定にしておき、メモは共同編集しておけるようにしておくと良い。&lt;/p&gt;

&lt;p&gt;上司は共有用のドキュメントとは別に部下の個人データを残すドキュメントも用意しておくとよい。そうすることで話が進めやすくなったり担当が変わったときの情報の引き継ぎがやりやすくなる。&lt;/p&gt;

&lt;h2 id=&quot;心理的安全性の確保&quot;&gt;心理的安全性の確保&lt;/h2&gt;

&lt;p&gt;1 on 1は部下が率直に、気兼ねなく上司と話をできる場でなければならない。言い換えると上司は部下の心理的安全性を確保するように気をつけなければならない。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;心理的安全性とは、自分の言動が他者に与える影響を強く意識することなく感じたままの想いを素直に伝えることのできる環境や雰囲気のことです。&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://bizhint.jp/keyword/101187&quot;&gt;心理的安全性とは？googleが発見したチーム生産性を高める唯一の方法 | BizHint HR&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;心理的安全性を確保するにはどうすればよいか。&lt;/p&gt;

&lt;p&gt;まず、上司は部下一人ひとりときちんと向き合い話を傾聴する姿勢が求められる。部下の話を先取ったり途中で遮ることはやめること。&lt;/p&gt;

&lt;p&gt;また、上司は部下の話を頭ごなしに否定するのではなく共感を示す必要がある。否定する必要があるときはニュートラルな上手な言い回しをすること。&lt;/p&gt;

&lt;p&gt;そして目標設定・評価や業務アサインはきちんと部下が納得感を持てるような説明が上司に求められる。上司から部下への一方的な設定は命令感が強くなり部下が発言しにくくなる可能性がある&lt;/p&gt;

&lt;h2 id=&quot;1-on-1の頻度について&quot;&gt;1 on 1の頻度について&lt;/h2&gt;

&lt;p&gt;Yahoo社の場合だと週一回、30分の1 on 1ミーティングを実施しているとのことだ。フィードバックループを素早く回していくためにはそれくらいの頻度が丁度良いらしい。&lt;/p&gt;

&lt;p&gt;とはいえ現実問題としてマネージャーは忙しいのでなかなかそこまでの時間がとれないかもしれない。であれば隔週、最低でも月一回は1 on 1を実施する。1 on 1 において重要なのは定期的に継続して実践することだ。&lt;/p&gt;

&lt;h2 id=&quot;次のアクションを決める&quot;&gt;次のアクションを決める&lt;/h2&gt;

&lt;p&gt;1 on 1 の中でタスクや確認事項が生じた場合はきちんと &lt;strong&gt;次のアクション（宿題）&lt;/strong&gt; として残しておく。&lt;/p&gt;

&lt;p&gt;そのアクションがきちんと達成できているかは、次回の1 on 1時に必ず確認する。積み残した宿題があるのであれば出来なかった理由をしっかり確認して次回のアクションに繋げる。&lt;/p&gt;

&lt;h2 id=&quot;1-on-1を通して成長を支援する&quot;&gt;1 on 1を通して成長を支援する&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/1on1/cycle.png&quot; alt=&quot;経験学習サイクル&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;シリコンバレー式1on1本より図を引用&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;どちらの本も1 on 1での成長を促すために &lt;strong&gt;経験学習サイクル&lt;/strong&gt; を回すことが推奨されている。&lt;/p&gt;

&lt;p&gt;1 on 1ではこのサイクルが上手に回るようにサポートする。上司は1 on 1のやり取りの中で上図の2(振り返り),3(教訓・学びの気づき),4(計画)を部下の口から引き出せるようにうまく働きかけをおこなう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/1on1/coaching.png&quot; alt=&quot;コーチング&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Yahoo 1on1本より図を引用&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;所感&quot;&gt;所感&lt;/h2&gt;

&lt;p&gt;業務上のコミュニケーションだけでは、業務外の困っていることであったりその人がキャリアプランをどう考えているかなどのトピックまでは拾えない。人々のワークスタイル・ライフスタイルの多様化にともない人々の仕事に対する価値観、仕事に求めることも多様化してきている中、その領域を拾える1 on 1は職場環境を改善するために非常に有効な手段だと感じることができた。&lt;/p&gt;

&lt;p&gt;1 on 1制度はシリコンバレーは当たり前のプラクティスとなっていると聞く。日本企業でも1 on 1制度の導入事例が増えていって社会全体の労働環境が改善されると良いなーと思った。&lt;/p&gt;

&lt;p&gt;1 on 1導入後も単純に1 on 1を開催して満足というわけではなく、上手な1 on 1にしていくには上司側の1 on 1スキルの向上も必要となってくる。本書を読んでその辺の細かなテクニックとか言い回しのポイントなども知ることができてよかった。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=4761272864&amp;amp;linkId=fa0dbf5e7d684ec5864efa0436add116&quot;&gt;&lt;/iframe&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=4478069786&amp;amp;linkId=ea9f3d4a7b14fcc644075add70c9b61e&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;その他のweb上の参考資料&quot;&gt;その他のWeb上の参考資料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/satoshiyoshinaga/1on1-80798455&quot;&gt;生産性を高める 1on1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@tumada/%E5%8A%B9%E6%9E%9C%E7%9A%84%E3%81%AA-1-on-1-%E3%83%9F%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AB%E3%83%9E%E3%83%8D%E3%83%BC%E3%82%B8%E3%83%A3%E3%81%8C%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%93%E3%81%A8-6d5c03a3383&quot;&gt;効果的な 1 on 1 ミーティングのためにマネージャができること – Taka Umada – Medium&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/higepon/20150728/1438080621&quot;&gt;1 on 1 で 何を話すのか？ マネージャ/ソフトウェアエンジニアの立場から - サンフランシスコではたらくソフトウェアエンジニア - Higepon’s blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;上司と部下という呼称は上下関係が色濃く現れる日本語なのであまり好きではないのだが、便宜上使うこととする &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="management" /><category term="読書" /><category term="tech" /><summary type="html">1 on 1 をチームで実施することとなり、勉強がてら『シリコンバレー式 最強の育て方 ― 人材マネジメントの新しい常識 1 on1ミーティング』と『ヤフーの1on1―――部下を成長させるコミュニケーションの技法』の２冊を読んだ。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.toshimaru.net/images/posts/1on1/og.jpg" /></entry><entry><title type="html">Railsと同じRuboCopの設定が利用できるrubocop-rails gemを作った</title><link href="http://blog.toshimaru.net/rubocop-rails/" rel="alternate" type="text/html" title="Railsと同じRuboCopの設定が利用できるrubocop-rails gemを作った" /><published>2018-01-30T00:00:00+09:00</published><updated>2018-01-30T00:00:00+09:00</updated><id>http://blog.toshimaru.net/rubocop-rails</id><content type="html" xml:base="http://blog.toshimaru.net/rubocop-rails/">&lt;p&gt;Railsとほとんど同じRuboCopの設定が利用できる&lt;a href=&quot;https://github.com/toshimaru/rubocop-rails&quot;&gt;rubocop-rails&lt;/a&gt;というgemを作りましたので紹介します。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Railsのrubocopと同じ設定を簡単に適用できるgemを作ったよ&lt;br /&gt;toshimaru/rubocop-rails: Code style checking for Ruby on Rails project &lt;a href=&quot;https://t.co/DnTRKtJc9j&quot;&gt;https://t.co/DnTRKtJc9j&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/819931180304715776?ref_src=twsrc%5Etfw&quot;&gt;January 13, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;モチベーション&quot;&gt;モチベーション&lt;/h2&gt;

&lt;p&gt;Rubyの静的コード解析の定番といえば&lt;a href=&quot;https://github.com/bbatsov/rubocop&quot;&gt;RuboCop&lt;/a&gt;ですよね。ですがRuboCopの設定ファイル&lt;code class=&quot;highlighter-rouge&quot;&gt;rubocop.yml&lt;/code&gt;の設定作業って結構大変じゃないですか？&lt;/p&gt;

&lt;p&gt;RuboCopはデフォルトだと結構うるさすぎることが多いのでプロジェクト・チームに応じて何かしら設定はカスタマイズすると思います。しかし１つ１つ設定項目毎にチームのコンセンサスを取るのは非常にダルい。チームの一人が持ち込んだ＜俺の考える最強のRuboCop設定＞に従うという手もありますが「誰がお前の作った設定に従うか！」という気持ちも無くはない。&lt;/p&gt;

&lt;p&gt;「何かしらRuboCop設定のレールが欲しいよね〜〜〜 :railway_car:」というところで閃き:bulb:、「だったら公式railsチームの用意した&lt;code class=&quot;highlighter-rouge&quot;&gt;rubocop.yml&lt;/code&gt;を使えばいいじゃない」ということで冒頭のRailsとほぼ同じ設定を持った&lt;a href=&quot;https://github.com/toshimaru/rubocop-rails&quot;&gt;rubocop-rails&lt;/a&gt; gemを作りました。&lt;/p&gt;

&lt;h2 id=&quot;使い方&quot;&gt;使い方&lt;/h2&gt;

&lt;p&gt;使い方はrubocop-railsをinstallした後に、下記の設定を記述した&lt;code class=&quot;highlighter-rouge&quot;&gt;rubocop.yml&lt;/code&gt;を用意する。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;inherit_gem&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;rubocop-rails&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;config/rails.yml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;オーバーライドしたい設定、追加したい設定があれば、適宜同じ&lt;code class=&quot;highlighter-rouge&quot;&gt;rubocop.yml&lt;/code&gt;内に設定を追加していく。&lt;/p&gt;

&lt;h2 id=&quot;実際使ってみてどうか&quot;&gt;実際使ってみてどうか&lt;/h2&gt;

&lt;p&gt;実際使ってみるとうるさすぎず、しかしコードスタイルとしてきっちり統一させたいところは統一されており、使い心地はなかなか悪くないです。&lt;/p&gt;

&lt;p&gt;また副次効果として、Railsにコントリビュートするときに普段からこのgemの設定に慣れておくと、Rails公式rubocop設定違反にならないコードを書けて便利。 :innocent:&lt;/p&gt;

&lt;h2 id=&quot;こんなrubocop設定もあるよ&quot;&gt;こんなRuboCop設定もあるよ&lt;/h2&gt;

&lt;p&gt;他の＜いい感じ＞に設定されたRuboCop設定も紹介してみます。これらの設定はきちんとチーム・会社でディスカッションされた上で作られたものだと思いますので信頼できるものかと思います。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GitHubの場合: &lt;a href=&quot;https://github.com/github/rubocop-github&quot;&gt;github/rubocop-github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;SideCIでお馴染みのActcatの場合: &lt;a href=&quot;https://github.com/sideci/meowcop&quot;&gt;sideci/meowcop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="rails" /><category term="rubocop" /><summary type="html">Railsとほとんど同じRuboCopの設定が利用できるrubocop-railsというgemを作りましたので紹介します。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.toshimaru.net/images/posts/rubocop-rail.png" /></entry><entry><title type="html">railsdm2017で「「Railsでまだ消耗しているの？」─僕らがRailsで戦い続ける理由─」を発表しました</title><link href="http://blog.toshimaru.net/why-we-use-ruby-on-rails/" rel="alternate" type="text/html" title="railsdm2017で「「Railsでまだ消耗しているの？」─僕らがRailsで戦い続ける理由─」を発表しました" /><published>2017-12-11T00:00:00+09:00</published><updated>2017-12-11T00:00:00+09:00</updated><id>http://blog.toshimaru.net/why-we-use-ruby-on-rails</id><content type="html" xml:base="http://blog.toshimaru.net/why-we-use-ruby-on-rails/">&lt;p&gt;&lt;a href=&quot;https://techplay.jp/event/631431&quot;&gt;Rails Developers Meetup 2017&lt;/a&gt;でLT枠をいただき、「「Railsでまだ消耗しているの？」─僕らがRailsで戦い続ける理由（ワケ）─」と題して発表してきました。ざっくり発表内容をこちらにもまとめてみたいと思います。&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;68db83f9e02946f08a45817d8fb25b09&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;※公開用に一部スライドを編集してあります:wink:&lt;/p&gt;

&lt;h2 id=&quot;テーマ設定について&quot;&gt;テーマ設定について&lt;/h2&gt;

&lt;p&gt;Web開発においてGoやPython、PHP、Node.js、Scala、Elixirなど様々な選択肢がある中で「なぜ今、Ruby/Railsを使うのか？」というテーマを個人的に掘り下げてみたかったのでこの機会に発表してみることにしてみました。&lt;/p&gt;

&lt;h2 id=&quot;railsの2つの哲学&quot;&gt;Railsの2つの哲学&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;DRY&lt;/strong&gt; (Don’t Repeat Yourself): 同じことを繰り返さない&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CoC&lt;/strong&gt; (Convention over Configuration): 設定より規約&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Railsの哲学は上記の２つがありますが、個人的にはDRYよりもCoCがずっと重要だと思ってます。なぜならDRYはプログラミング行為において普遍的な考え方である一方、CoCはRailsが定めたRails独自の規約だからです。&lt;/p&gt;

&lt;h2 id=&quot;ruby-on-railsの本質&quot;&gt;Ruby on Railsの本質&lt;/h2&gt;

&lt;p&gt;Ruby on Railsの本質は、&lt;strong&gt;センスの良い規約（=Rail）によって設定および設計の手間を最小限にした&lt;/strong&gt; ことだと考えます。&lt;/p&gt;

&lt;p&gt;この規約により我々は設定にまつわるコードを数百行書いたりとかする必要もなくなりましたし、設計工程で生じがちな＜俺の考える最強のアプリケーション設計バトル＞や＜俺の考える最強のデータベース設計選手権＞を緩和しコミュニケーションコストを大幅にカットすることができました（とはいえその規約に規定されていない部分の設計はどうするんだという問題は残りますが…）。&lt;/p&gt;

&lt;p&gt;この規約によって我々はRuby on Railsで &lt;strong&gt;圧倒的コード量の少なさと生産性の高さを実現&lt;/strong&gt; できました。&lt;/p&gt;

&lt;h2 id=&quot;rails批判〇〇の方が速いよ&quot;&gt;Rails批判:「〇〇の方が速いよ」&lt;/h2&gt;

&lt;p&gt;パフォーマンス要件がマストでないときにRailsを使いましょう。パフォーマンス要件がマストのケースにおいては（e.g. 広告サーバー）そもそもRubyという言語選択はするべきでないです。&lt;/p&gt;

&lt;p&gt;「速い」の定義をどこにおくかも重要なポイントです。この速さを「処理系の速さ」としたらRubyはGoなどには負けますが、「開発の速さ」とした場合はどうでしょうか？　我々にとって価値のある速さはどちらでしょうか？　例えばスタートアップなどにおいて1日でも1時間でも早くPDCAサイクルを回したい場合にRailsのほうが最適ではないでしょうか。&lt;/p&gt;

&lt;p&gt;またエンドユーザーにとっての速さは必ずしも処理系の速さとは一致しない点も気をつけてください。かの超絶高速なサイト&lt;a href=&quot;https://dev.to/&quot;&gt;dev.to&lt;/a&gt;はRails製であるという事実を忘れないでください。&lt;/p&gt;

&lt;h3 id=&quot;devtoはrails製であるという事実&quot;&gt;dev.toはRails製であるという事実&lt;/h3&gt;

&lt;p&gt;この事実から言えることは &lt;strong&gt;サービス特性と要素技術を正しく理解・把握した上で最適なアーキテクチャを選択する&lt;/strong&gt; ことが重要ということです。&lt;/p&gt;

&lt;p&gt;例えば&lt;a href=&quot;https://dev.to/&quot;&gt;dev.to&lt;/a&gt; の場合、キャッシュしやすいというサービス特性を利用して、Railsで生成されるコンテンツを爆速CDNであるFastlyに載せて配信させました。これにより結果的に最高の爆速UXを提供できているのです。&lt;/p&gt;

&lt;p&gt;つまり速さという点において問題になるレイヤーはアプリケーションサーバーのレイヤーだけではないということです。&lt;/p&gt;

&lt;h2 id=&quot;rubyrailsが遅いという前に&quot;&gt;Ruby/Railsが遅いという前に&lt;/h2&gt;

&lt;p&gt;「Ruby/Railsが遅い!」という前に下記はしっかり確認していただきたいものです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;自分のアプリケーション設計やテーブル設計の失敗の責任を、言語やフレームワークに押し付けてはいないか&lt;/li&gt;
  &lt;li&gt;するべき最適化をする前に遅いと斬り捨ててはいないか&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;僕の経験上、Railsで”ちゃんと”作ることができれば、爆速ではないかもしれませんがまぁまぁ速いくらいのサイトは実現可能だと思います。&lt;/p&gt;

&lt;h2 id=&quot;高速化の努力&quot;&gt;高速化の努力&lt;/h2&gt;

&lt;p&gt;とはいえ高速化の努力はあって、Ruby3に向けてのRuby高速化（いわゆる&lt;a href=&quot;http://gihyo.jp/news/report/01/rubykaigi2017/0003&quot;&gt;Ruby3x3&lt;/a&gt;）や、&lt;a href=&quot;https://github.com/Shopify/bootsnap&quot;&gt;bootsnap&lt;/a&gt;のようなRailsの起動高速などの努力があります。&lt;/p&gt;

&lt;h2 id=&quot;2018年ruby-on-railsという選択&quot;&gt;2018年、Ruby on Railsという選択&lt;/h2&gt;

&lt;p&gt;小〜中規模のWebアプリケーション（言い換えるとマイクロサービス化を考えなくても済むような規模）であればRailsで十分戦えると考えています。&lt;/p&gt;

&lt;p&gt;なので2018年もRuby on Railsは有効なWebアプリケーションフレームワークの選択肢であり続けでしょう。少なくとも、Ruby on Railsを超えるようなベターオルタナティブが出現しない限りはそうでしょう。&lt;/p&gt;

&lt;h2 id=&quot;発表を終えて&quot;&gt;発表を終えて&lt;/h2&gt;

&lt;p&gt;本発表を聞いた人には「じゃあ一生Ruby/Railsを使い続けるのか？」と思われるかもしれませんが、今後Railsくらいの生産性を発揮できてRailsより速いフレームワークが出現するのであれば全然乗り換える準備はあります。&lt;/p&gt;

&lt;p&gt;ただドキュメント・ライブラリ・運用実績などの周辺環境も含めてRuby/Rails並みに整うのは相当厳しいように思われますので、あと３年位はRailsの寿命は続くのかなという印象です。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;誰か日本でRubyKaigiじゃなくてRailsKaigiをオーガナイズしてくれる人はいないものか（チラッ&lt;br /&gt;めちゃくちゃ人集まることは絶対間違いないと思うのだけど。。。&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/841439645011394564?ref_src=twsrc%5Etfw&quot;&gt;March 14, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;以前書いたこれ、現場の知見の共有という意味では &lt;a href=&quot;https://twitter.com/hashtag/railsdm?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#railsdm&lt;/a&gt; がやっていってくれてる感ある &lt;a href=&quot;https://t.co/XLGDEEKooR&quot;&gt;https://t.co/XLGDEEKooR&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/940369828451303424?ref_src=twsrc%5Etfw&quot;&gt;December 11, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;その他の発表スライドなどはこちら &lt;a href=&quot;https://railsdm.github.io/2017/&quot;&gt;Rails Developers Meetup 2017&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;当日のTweetまとめ &lt;a href=&quot;https://togetter.com/li/1179895&quot;&gt;Rails Developers Meetup 2017 #railsdm - Togetter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="rails" /><category term="presentation" /><summary type="html">Rails Developers Meetup 2017でLT枠をいただき、「「Railsでまだ消耗しているの？」─僕らがRailsで戦い続ける理由（ワケ）─」と題して発表してきました。ざっくり発表内容をこちらにもまとめてみたいと思います。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.toshimaru.net/images/posts/railsdm/rdm2017.png" /></entry><entry><title type="html">技術者としてスポンジであり続けること　あるいは老害回避戦略の話</title><link href="http://blog.toshimaru.net/like-a-sponge-as-an-engineer/" rel="alternate" type="text/html" title="技術者としてスポンジであり続けること　あるいは老害回避戦略の話" /><published>2017-12-04T00:00:00+09:00</published><updated>2017-12-04T00:00:00+09:00</updated><id>http://blog.toshimaru.net/like-a-sponge-as-an-engineer</id><content type="html" xml:base="http://blog.toshimaru.net/like-a-sponge-as-an-engineer/">&lt;h2 id=&quot;エンジニアリングとは常に学習し続けることである&quot;&gt;エンジニアリングとは常に学習し続けることである&lt;/h2&gt;

&lt;p&gt;エンジニアリングとは常に学習し続けることである。僕がWeb技術者として生計を立てる上で大切にしているモットーだ。&lt;/p&gt;

&lt;p&gt;ドッグイヤーな変化の激しいIT業界、変化に取り残されないためには常に学習が必要だ。今僕たちがデファクト・スタンダートとしている技術は一年後もスタンダートであり続けるだろうか？　一年くらいなら大丈夫？　じゃあ三年後は？　五年後は？ 十年後はどうだろう？ 自信をもって技術トレンドは今と変わっていないと言えるだろうか。&lt;/p&gt;

&lt;h2 id=&quot;変化する技術トレンド&quot;&gt;変化する技術トレンド&lt;/h2&gt;

&lt;p&gt;Web業界の技術トレンド変化を見るにしてもその変化が激しいことは明らかだ。古くは掲示板を動かしていたPerl CGIの時代から、最強のPHP製CMS・Wordpress、継続的にバージョンアップを重ね進化を続けるWebアプリケーションフレームワーク・Ruby on Rails…。近年だとサーバーサイドJavaScirpt・Node.js、Erlang VM上で動くRubyライクなシンタックスを持つElixir、Twitterでも運用実績を持つScala、Googleが作った爆速言語Go、Mozillaの開発したRustなどもよく聞く。お硬い感じなところだとJavaのSpring Frameworkであったり（最近はKotlin対応もしたと聞く）オープンソース化もされているMicrosoftの.NETなど。&lt;/p&gt;

&lt;p&gt;サーバーサイド技術だけじゃなく、フロントエンド技術の変化も大きい。HTMLはHTML5になり、CSSはCSS3になってWebでリッチな表現が可能になった。貧弱な言語であったJavaScriptはES6(ES2015),ES7(ES2016)へと進化し言語として洗練されてきている（Bebelなどのトランスパイラーの進化の力も大きい）。便利な関数群を多く含みブラウザ間の挙動の差異を吸収してくれるjQueryはそこそこ長い間フロントエンドのデファクト・ライブラリだったが、フロントエンドコードの複雑化・巨大化に伴いその座をReactやAngularへと譲りつつある（React/Angularにたどり着くまでの紆余曲折はここでは省略）。&lt;/p&gt;

&lt;p&gt;開発ワークフローもずいぶん進化した。開発者にとって一番大きかったのはGitHubの台頭だ。OSSを加速度的に推し進めエンジニアリング業界にソーシャルコーディングという概念を普及させた。これによりVCSはGitを利用しRemoteにはGithub（あるいはGithubライクなプロダクト）を使うのが当たり前となった。&lt;/p&gt;

&lt;p&gt;テストももちろん書く。テストを書くと次はCIがしたくなる。Jenkins？ 今ならTravisCI、CircleCIなどのCIサービス使ったほうが良さそうだ。&lt;/p&gt;

&lt;p&gt;アプリケーションのデプロイ先となるインフラはどうだ。オンプレ？ いや、今はクラウドの時代だ。IaaS業者ならAWS（Amazon Web Service）か。いや、GCP（Google Cloud Platform）も最近頑張っているようだ。そこまでインフラ面倒見る余裕なんてない？ならばHerokuなどのPaaSを選択することもできる。&lt;/p&gt;

&lt;p&gt;モバイルアプリ開発はどうだろう？ iOS？ Objective-Cじゃなくて今はSwiftなんだっけ。Android？ 古き良きJava…ではなく最近はKotlinで書けるらしい。最近はReact Nativeという技術もあるらしい。Reactに慣れたWeb開発者にとって取っ付きやすそうだ。&lt;/p&gt;

&lt;h2 id=&quot;我々は学習し続けられるか&quot;&gt;我々は学習し続けられるか？&lt;/h2&gt;

&lt;p&gt;Web技術に限定してザッと思いつくだけ列挙してもこれだけあるのだ。これでもなお「１つの技術だけで今後も戦い続けることができる！」と自信を持って言えるだろうか。&lt;/p&gt;

&lt;p&gt;あなたは言う。いいや、俺はこの技術一筋で勝負するんだ！なるほど、けっこうけっこう。あなたが変わらなくても世界は変わる。世界はあなたを待ってはくれない&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;学習を止めた時から変化の波に取り残され、気付いた頃にはもう手遅れ…、そんな事態は避けなければならない。&lt;/p&gt;

&lt;p&gt;では問おう。&lt;strong&gt;我々は学習し続けられるのか？&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;学習の壁&quot;&gt;学習の壁&lt;/h2&gt;

&lt;p&gt;我々に立ちはだかる学習の壁。この学習の壁を乗り越える続けることは難しい。&lt;/p&gt;

&lt;p&gt;そしてこれは歳を重ねれば重ねるほどに難しくなっていく。一般的に記憶力や集中力は年齢とともに衰えていくと言われるからだ&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;一方で学習能力は年齢とは関係ないとする説もある&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;。記憶力そのものに年齢は関係なく、老化とともに記憶力が低下したと感じる理由は＜学習意欲の低下＞に起因しているとする説だ。&lt;/p&gt;

&lt;p&gt;僕の考えとしては前者の説も後者の説もどちらも支持したい。我々の学習能力は年齢とともに衰えていくし、学習意欲もまた年齢とともに低下する。&lt;/p&gt;

&lt;h2 id=&quot;スポンジであるということ&quot;&gt;スポンジであるということ&lt;/h2&gt;

&lt;p&gt;では我々はこれにどう抗ったらよいだろうか？　&lt;/p&gt;

&lt;p&gt;前者の年齢とともに不可避的に衰える能力は仕方がないにせよ、せめて後者の学習意欲は高く保ち続けようではないか。新しいものを進んで吸収できるスポンジであろう。弾力を失ってはいけない。柔軟にしなやかであろう。硬直化する脳に抗おう。&lt;/p&gt;

&lt;p&gt;スポンジであるということ。これによって学習という困難も楽しみとして享受できるようになるのではないだろうか。&lt;/p&gt;

&lt;h2 id=&quot;老害になってはいないか&quot;&gt;老害になってはいないか&lt;/h2&gt;

&lt;p&gt;学習し続ける姿勢、これは老害化するのを防ぐ上でも大切な心がけだと思う。&lt;/p&gt;

&lt;p&gt;そもそも老害とはどういう人なのか？ 僕が思う老害とは下記の通りだ。&lt;/p&gt;

&lt;p&gt;老害とは自分の過去の栄光や成功体験を元にして自分の価値観ややり方を周囲（主に若者がターゲットにされやすい）に押し付けるような人のこと。その結果、チーム/個人のパフォーマンスを低下させる。&lt;/p&gt;

&lt;p&gt;こういうタイプの人は過去の成功を根拠としてロジックを展開するので、その成功が現代では通用しない時代錯誤なものであったとしても気にせず押し通そうとする。そして新しいことに関しては「よくわからない」などと言って斬り捨てる。&lt;/p&gt;

&lt;p&gt;そんな老害にはなりたくないと思う。きっとこの文章を読んでいるあなたもそうだろう。だがあなたは &lt;strong&gt;自分が老害になっていないとハッキリ言えるだろうか？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一般的に、歳を取ると価値観は固まっていき保守的になってゆく。あなたは自分の気づかないレベルで無意識に新しいことを拒絶していないだろうか。自分の考えを無意識に他者に押し付けてはいないだろうか。職場で気づいたら老害になってはいないだろうか。&lt;/p&gt;

&lt;h2 id=&quot;老害回避戦略&quot;&gt;老害回避戦略&lt;/h2&gt;

&lt;p&gt;エンジニアとして老害にならないための僕なりの老害回避戦略を考えてみたのでまとめてみる。&lt;/p&gt;

&lt;h3 id=&quot;マサカリを投げるな&quot;&gt;マサカリを投げるな&lt;/h3&gt;

&lt;p&gt;技術的な厳しい指摘をよく「マサカリを投げる」と表現したりするが&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;、マサカリを投げるのは止めよう。&lt;/p&gt;

&lt;p&gt;そのマサカリが本当に意味のあるものか今一度考えてみよう。あなたの飛ばしたマサカリは周囲を萎縮させチームの空気を悪くしパフォーマンスを下げている可能性が高い。&lt;/p&gt;

&lt;p&gt;あなたがどんなに優れたエンジニアだとしてもそれをマサカリという形で誇示する必要は無い。あなたの優秀さはマサカリではなくコードで示せるはずだ。&lt;/p&gt;

&lt;p&gt;剣ではなく弁を。攻撃ではなく教育を。&lt;/p&gt;

&lt;h3 id=&quot;技術に素直でいよう&quot;&gt;技術に素直でいよう&lt;/h3&gt;

&lt;p&gt;コンピュータの内部が0か1のバイナリで構成されているの同様に、プログラミングという行為も0か1のように正誤がハッキリするものが多いように感じる。&lt;/p&gt;

&lt;p&gt;バグがある挙動、バグが無い挙動であればバグが無い挙動が正しいし、速いコードと遅いコードであれば速いコードが良いし、DRYなコード、そうじゃないコードがあればDRYなコードを選択すべきだし、テストがないコードよりもテストがあるコードが信頼性は高い。&lt;/p&gt;

&lt;p&gt;老害であれば技術的正しさを無視して自説を展開するかもしれないが、それではダメだ。常に技術的に正しい世界を目指そう。技術にたいして素直でいよう。&lt;/p&gt;

&lt;p&gt;僕たちが持っている知識は変化する技術の流れの中で明日には変わっているかもしれない。今に凝り固まるのではなく、常に技術的正しさを求めて学習しよう。&lt;/p&gt;

&lt;h3 id=&quot;フラットでいよう&quot;&gt;フラットでいよう&lt;/h3&gt;

&lt;p&gt;GitHubのOSSコミュニティで人種・性別・年齢関係なくコラボレーションするように、我々も技術の文脈においてフラットなコミュニケーションを目指そう。&lt;/p&gt;

&lt;p&gt;この世界、どんなに自分より歳をとっていてもかなわないなというエンジニアもいるし、逆に自分よりずっと若くても優秀なエンジニアはたくさんいる。「俺の方が人生経験が長いから」「私の方が年齢が高いから」という理由では奢れない（もしそんな理由でエラそうにしているのであればそれは老害だ）。&lt;/p&gt;

&lt;p&gt;実際のところ、先輩後輩・上下関係を重んじる日本社会においてこれを実現するのは容易ではないわけだが、技術コミュニケーションにおいてできるだけフラットなコミュニケーションを心がけよう。この姿勢は前述の&lt;技術に素直でいる&gt;ことにも繋がることだと思う。&lt;/技術に素直でいる&gt;&lt;/p&gt;

&lt;h3 id=&quot;次の世代を育てる&quot;&gt;次の世代を育てる&lt;/h3&gt;

&lt;p&gt;老害でないということは同時に若手とうまく付き合うということでもある。今まで述べてきたような老害的な態度を取らなければ、若手が伸び伸びと働ける職場環境にできるのではないだろうか。&lt;/p&gt;

&lt;p&gt;次の世代を育てよう。そして彼らが伸び伸びと活躍できるような雰囲気作りを目指そう。&lt;/p&gt;

&lt;p&gt;こんなことを言うとたまに「若手に自分のポジションを脅かせれる」「自分の仕事が奪われる」と言って拒否反応を示す人をたまに見かける。その考え方も分からなくはないが、僕はそれは自己保身的で一面的な考え方だと感じる。&lt;/p&gt;

&lt;p&gt;次の世代を育てることで得られるメリットは数多くあると思う。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;次の世代を育てる過程で自分も育つ: 育てている過程の中で自分もちゃんと理解できていなかった部分が理解できるようになったり、自分の理解が深まる&lt;/li&gt;
  &lt;li&gt;次の世代が育つことでチームひいては会社の生産性が高まり自分自身の仕事が相対的に減る&lt;/li&gt;
  &lt;li&gt;次の世代が育つと自分一人ではできなかったことが出来るようになるかもしれない: 切磋琢磨出来る仲間が増えるとチームとしてもう一段上のレベルへと上がり、一人では思いつかなかったアイディアやソリューションが発案されるかもしれない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;自分の立場ばかり考える保身的な老害にはならないようにしよう。どんどん次の世代を育てていき、次の世代とともにステップアップを目指そう。&lt;/p&gt;

&lt;h2 id=&quot;35歳定年説は嘘&quot;&gt;「35歳定年説」は嘘&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://tech-camp.in/note/engineer/30204/&quot;&gt;35歳定年説&lt;/a&gt;的な言説を技術界隈で聞くことがある。&lt;/p&gt;

&lt;p&gt;この35歳の35の数字の部分は38でも40でもなんだって良いのだが、僕は基本的にこのn歳定年説は間違っていると思う。&lt;/p&gt;

&lt;p&gt;これを反証することは簡単で、40歳でバリバリ現役でコードを書き続けている技術者を見つければ良い。僕は40歳でバリバリ前線で頑張っている技術者を知っている。なのでこの説は間違っているとハッキリ言える。&lt;/p&gt;

&lt;p&gt;思うに、&lt;strong&gt;コードを書かず学習意欲を失ってしまった35歳のおじさんたちが自分がコードが書けないこと・学ばないことの言い訳として言い出し始めたのがこの「35歳定年説」の真実じゃないだろうか。&lt;/strong&gt; 20歳の技術者は35歳定年説なんて言い出さない。それを言い出すのは35を過ぎて自身のパフォーマンスが出なくなったと感じている技術者たちだけだ。もし本当にそんな理由で言っているのであればハッキリ言ってダサすぎだと思う。&lt;/p&gt;

&lt;p&gt;年齢を言い訳にするのは止めよう。学習するのに遅すぎるなんてことはないはずだ。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You’re never too old to learn&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;最後に&quot;&gt;最後に&lt;/h2&gt;

&lt;p&gt;この文章は僕自身が若手とは言えない年齢となり今後シニアな立場へとなっていく中で「自分は老害化していくのではないか」という危機感から自戒も込めて書いたものである。願わくば五年後十年後自分がここに書いたような老害になっていないことを祈る。&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;もちろん１つのことに特化して高度な専門性を武器に戦っている技術者もいる。しかしトレンドは常に追っているべきだ。なぜならブレークスルーが起こってその技術が死んだときに自分の食い扶持がなくなるからだ（それでもすぐにその技術がなくなるわけではないのでその技術を使う古い現場で細々と食い扶持を得るのも戦略としてありえるが）。 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.businessinsider.jp/post-100550&quot;&gt;集中力は43歳！ 人間の脳のピーク年齢は、能力ごとに違っていた | BUSINESS INSIDER JAPAN&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.fukuishimbun.co.jp/articles/-/62618&quot;&gt;「加齢で記憶力が低下」は誤解 知能も低下せず、問題は前頭葉老化 | 東洋経済ONLINE | 福井新聞ONLINE&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://qiita.com/kaityo256/items/d7d8f7a0e522895c8f5d&quot;&gt;マサカリの起源について - Qiita&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="tech" /><summary type="html">エンジニアリングとは常に学習し続けることである</summary></entry><entry><title type="html">ISUCON7に参加してきました</title><link href="http://blog.toshimaru.net/isucon7/" rel="alternate" type="text/html" title="ISUCON7に参加してきました" /><published>2017-10-28T00:00:00+09:00</published><updated>2017-10-28T00:00:00+09:00</updated><id>http://blog.toshimaru.net/isucon7</id><content type="html" xml:base="http://blog.toshimaru.net/isucon7/">&lt;p&gt;isuconに参加してきました。結果は&lt;a href=&quot;http://isucon.net/archives/50961437.html&quot;&gt;400組中154位&lt;/a&gt;で予選敗退。予選敗退となりましたが初めてのisucon参加にしては中の上に食い込めてまぁまぁだったのではないでしょうか。&lt;/p&gt;

&lt;p&gt;※使用言語はRubyでした。&lt;/p&gt;

&lt;h2 id=&quot;事前準備&quot;&gt;事前準備&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;isuconの練習時間は取れなかったので、参加ブログや過去問を読み漁りました
    &lt;ul&gt;
      &lt;li&gt;使えそうな設定・ブログエントリなどはgistにまとめて秘伝のタレとして準備しておきました&lt;/li&gt;
      &lt;li&gt;また協議中に使えそうなツール・コマンドもさらっと触っておきました&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;当日の開発用レポジトリは事前にGitHub上にプライベートレポジトリを作成しておきチームメンバーを招待しておきました&lt;/li&gt;
  &lt;li&gt;ボトルネック把握用にカジュアルに導入できるisucon用NewRelicのアカウントも作成しておきました&lt;/li&gt;
  &lt;li&gt;コミュニケーションツールとしてはSlackに専用のチャンネルを用意しておきました（今考えると新規にSlackチームを作ってもよかったかもしれません）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;方針&quot;&gt;方針&lt;/h2&gt;

&lt;p&gt;上述の事前準備のなかで当日の競技の流れをイメトレしてなんとなくの方針を決めました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;作業がバッティングしないようにどの領域（App, WebServer, DB, CacheStore）を誰が見るかを決めてから作業する&lt;/li&gt;
  &lt;li&gt;競技開始1時間くらいは全員でマニュアル読み、アプリケーション触ってアプリケーション把握、なんとなくのボトルネックのあたりを付ける&lt;/li&gt;
  &lt;li&gt;競技終了1時間前にはコードをフリーズして再起動試験に備える&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;当日の立ち回り&quot;&gt;当日の立ち回り&lt;/h2&gt;

&lt;p&gt;今回は同僚の redfit と s-jcs [敬称略]の三人と出たのですが僕含め三人ともに業務ではアプリケーションを主に担当しているので今回はチーム的にインフラ・ミドルウェアチューニングが弱いチーム構成になってました。&lt;/p&gt;

&lt;p&gt;なので当日の立ち回りとしては、わりとインフラ業務経験がそこまで深くない s-jcs がアプリケーションを中心に担当してもらい、僕はインフラ・ミドルウェア周りを中心に攻めることにして、redfit には全般的に見てもらおうということになりました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/isucon/isucon7-photo.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;やったこと&quot;&gt;やったこと&lt;/h2&gt;

&lt;h3 id=&quot;mysql&quot;&gt;MySQL&lt;/h3&gt;

&lt;p&gt;まず僕はMySQLの設定をしました。遅いクエリを特定して、インデックスを貼ればすぐに高速化が実現すること、また吐かれているクエリからAppの特性が透けてみえてくるのでは？という意図からMySQLから着手することにしました。&lt;/p&gt;

&lt;p&gt;まずはスロークエリとしてクエリログを全部吐くように設定。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;slow_query_log                = 1
slow_query_log_file           = /var/lib/mysql/mysqld-slow.log
long_query_time               = 0
log-queries-not-using-indexes = 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;吐かれたクエリをざっとみてインデックス貼れそうな部分を貼ります。&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INDEX&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx_channel_id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INDEX&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx_image_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;my.cnf&lt;/code&gt;の設定は後に&lt;code class=&quot;highlighter-rouge&quot;&gt;too many connection&lt;/code&gt;を観測していたので、&lt;code class=&quot;highlighter-rouge&quot;&gt;max_connections&lt;/code&gt;を少しいじったくらいでそれ以外はいじってません。&lt;/p&gt;

&lt;p&gt;吐かれるクエリをザッと見て同じタイプのクエリが複数吐かれているのを観測できたので、アプリで複数のN+1の問題があることは想像がつきました。一方、例えば10秒とかかかるような激遅クエリが走っているわけではないので、何かしらの激遅クエリがボトルネックにはなってなさそうであることがわかりました。&lt;/p&gt;

&lt;h3 id=&quot;app&quot;&gt;App&lt;/h3&gt;

&lt;p&gt;上記の作業の裏でアプリケーションのチューニングをメンバーがやってたのですが劇的に得点が伸びません。上位陣の点数を見てここから抜けるには何かしらのブレークスルーが必要であろうと思い、ここでicons問題を解決しなければどーにもならなそうということに気づきます。&lt;/p&gt;

&lt;p&gt;ここで僕はミドルウェア関係を手を止めicons問題の解決のためにアプリに手を出すことにしました（この時点で16時位だったと思います）。まずはDBに入った icons を書き出して NGINXでサーブするところまでをやりました。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;w&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;というコードでDBの画像を書き出していたのですが、ベンチが互換性チェックで落ちることに気づきます。&lt;/p&gt;

&lt;p&gt;最初は画像がぶっ壊れてるのかと思ったのですが、見かけ上は全く同じ画像になっています。cmpを使ってバイナリのdiffをとってもこれといった差分は出ません。しかし画像のmd5を見てみると確かに値が違う。&lt;/p&gt;

&lt;p&gt;うーん…となり違うとしたら画像のメタデータかファイル末尾のなにかだろうと思い、viのxxdを使ってhexdump形式でファイルを確認してみました。ここでRubyの &lt;code class=&quot;highlighter-rouge&quot;&gt;file.puts&lt;/code&gt; で画像ファイル末尾に改行が余計に入ってしまう点に気づけました。&lt;/p&gt;

&lt;p&gt;この問題で30分以上は時間を潰してしまいました。最初からシンプルに &lt;code class=&quot;highlighter-rouge&quot;&gt;File.write&lt;/code&gt; あたりを使っておけばよかったなぁと後悔。&lt;/p&gt;

&lt;h3 id=&quot;nginx&quot;&gt;NGINX&lt;/h3&gt;

&lt;p&gt;Iconsは書き出せた、では次はそのファイルの効率的な配信だ、ということでassets関連のファイルがキャッシャブルな状態で配信されているかを確認しました。&lt;/p&gt;

&lt;p&gt;ここでCacheControlヘッダーあたりが怪しいということには気づけたのですがうまく設定を煮詰めることができずタイムアップ。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location /fonts/ {
    add_header Cache-Control &quot;public&quot;;
}
location /js/ {
    add_header Cache-Control &quot;public&quot;;
}
location /css/ {
    add_header Cache-Control &quot;public&quot;;
}
location /icons/ {
    add_header Cache-Control &quot;public&quot;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;普段仕事でこのへんのNginxのconfは触る機会がないので設定がスムーズに進まず時間を浪費してしまいました。（実際作業時間の半分以上はああでもないこうでもないと言いながら適当な情報をクグる時間になっていたと思います）&lt;/p&gt;

&lt;h2 id=&quot;問題について&quot;&gt;問題について&lt;/h2&gt;

&lt;p&gt;今までのisucon の傾向を考慮しつつ、事前にある程度どんな構成で出題されそうか予測を立てていました。予想とその結果は以下の通り。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;App
    &lt;ul&gt;
      &lt;li&gt;予想候補: Rails/Sinatra&lt;/li&gt;
      &lt;li&gt;予想: Sinatra&lt;/li&gt;
      &lt;li&gt;結果: Sinatra  → 的中&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;App Server
    &lt;ul&gt;
      &lt;li&gt;予想候補: Unicorn/Puma&lt;/li&gt;
      &lt;li&gt;予想: Unicorn&lt;/li&gt;
      &lt;li&gt;結果: Puma → 外れ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DB
    &lt;ul&gt;
      &lt;li&gt;予想候補: MySQL/Postgres&lt;/li&gt;
      &lt;li&gt;予想: MySQL&lt;/li&gt;
      &lt;li&gt;結果: MySQL  → 的中&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WebServer
    &lt;ul&gt;
      &lt;li&gt;予想候補: NGINX /Apache&lt;/li&gt;
      &lt;li&gt;予想: NGINX&lt;/li&gt;
      &lt;li&gt;結果: NGINX  → 的中&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;メモリストア
    &lt;ul&gt;
      &lt;li&gt;予想候補: Memcache/ Redis&lt;/li&gt;
      &lt;li&gt;予想: Memcache&lt;/li&gt;
      &lt;li&gt;結果: 無し → ハズレ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;サーバー構成
    &lt;ul&gt;
      &lt;li&gt;予想候補: Web+DB一体型の小さいサーバー一台 / WebとDBを分離した小さいサーバー二台&lt;/li&gt;
      &lt;li&gt;予想: Web+DB 一体型のサーバー一台&lt;/li&gt;
      &lt;li&gt;結果: Web2台 DB1台の三台構成  → 大外れ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;App, DB, Webは概ね予想の通りでしたがまさか複数台構成、それも三台出くるとは思いもしませんでした（運営様お疲れ様です）。&lt;/p&gt;

&lt;p&gt;複数台を想定していなかったので競技中はサーバー間のプロキシ戦略とか分散戦略とか全然ぱっと思い浮かばなかったです。これは大きな敗因だったと思います。&lt;/p&gt;

&lt;p&gt;またAWS脳の僕としては画像の扱いは「はぁ？ AWS におくやろ普通（少なくともファイル配信サーバーおくやろ）」と思考停止しており、画像をDBに保存するなんて発想はとうの昔に忘れてしまっておりました。なのでicons問題に対してぱっとスマートなソリューションを頭に浮かべられなかったのは甘かったところでした。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;今回のISUSON、3台なのでweb x2 db x1 で予選通過できるんだけどこれが5台や10台だったらより帯域を有効利用するアーキテクチャが強くなるし、一台にファイル書き込みを寄せる奴には負けないと思ってる&lt;/p&gt;&amp;mdash; fujiwara (@fujiwara) &lt;a href=&quot;https://twitter.com/fujiwara/status/923533843520413697?ref_src=twsrc%5Etfw&quot;&gt;October 26, 2017&lt;/a&gt;
&lt;/blockquote&gt;

&lt;p&gt;今回は２台のWebだったけどこれが10台だったらという思考実験をやってみるのも面白そうです。&lt;/p&gt;

&lt;h2 id=&quot;反省点まとめ&quot;&gt;反省点まとめ&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;systemd 慣れてなさすぎてダメだった
    &lt;ul&gt;
      &lt;li&gt;最近業務でコマンドでサーバー操作することもめっきりなくなってるし systemd を使っていないので使って覚えるしかなさそう&lt;/li&gt;
      &lt;li&gt;参考情報: &lt;a href=&quot;https://qiita.com/tukiyo3/items/092fc32318bd3d1a0846&quot;&gt;CentOS7で使われているsystemctlについて少しまとめた - Qiita&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;サーバー作業中、&lt;code class=&quot;highlighter-rouge&quot;&gt;vim&lt;/code&gt;という存在しないコマンドを叩いて何度エラーになったかわからないので大人しくサーバーにはvimを入れよう&lt;/li&gt;
  &lt;li&gt;nginx力が低く効率的なサーバー構成を組めなかった
    &lt;ul&gt;
      &lt;li&gt;今回の敗因は何と言ってもicons問題を解決できずボトルネックをiconsからアプリケーションに移せなかったこと&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/941/8c64842b71995a2d448315e2594f62c2&quot;&gt;マニュアル&lt;/a&gt;ちゃんと読んでおこう
    &lt;ul&gt;
      &lt;li&gt;sleep の値変えてスコア変わって一喜一憂していたけどマニュアルにはこう書いてあった -&amp;gt;「GET /fetch へのアクセスには点数が加算されません。」&lt;/li&gt;
      &lt;li&gt;304加点に関する記述もされており、そこで静的ファイルに関してピンと来てればもっと早い段階でスコア伸ばせていたと思う&lt;/li&gt;
      &lt;li&gt;次は一番最初に声に出して読み合わせとかすると良いかもしれない&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;業務でサーバー作業全然しないので作業時間の半分くらいはGoogleでああでもないこうでもないと調べる時間だった感覚
    &lt;ul&gt;
      &lt;li&gt;サーバー作業もっとスラスラできるようになりたい&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Nginxのログをalpで解析するのができなかった
    &lt;ul&gt;
      &lt;li&gt;Nginxのログをベンチマーカーの気持ちになりながら目グレップする必要あった&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;アプリケーションのデータベースconnection 閉じ忘れ気づけなかった。これで too many connectionが発生してたっぽい&lt;/li&gt;
  &lt;li&gt;デプロイスクリプト用意する予定だったけどちゃんと用意できなかった
    &lt;ul&gt;
      &lt;li&gt;これにより再起動漏れとかが発生した&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;confファイルのrepo管理が徹底できず雑管理してしまった&lt;/li&gt;
  &lt;li&gt;複数台でそれぞれのホスト間の名前解決どうしてるかを見るのに &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; はすぐに確認しておいてよかった&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/hosts
&lt;span class=&quot;go&quot;&gt;127.0.0.1       localhost
192.168.101.1   app1011
192.168.101.2   app1012
192.168.101.3   app1013 db
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;良かったこと&quot;&gt;良かったこと&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Discord良い&lt;/li&gt;
  &lt;li&gt;MacのGUIは有効に使えたと思う。MacのGUI便利。
    &lt;ul&gt;
      &lt;li&gt;DBはSequel Proでカジュアルに覗くのが良い&lt;/li&gt;
      &lt;li&gt;FileはforkLift使ってカジュアルに転送できたのが良い(今回DBのdumpファイルとか持ってきた)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;同僚と出場したので、会社利用させてもらったのでWiFiも快適だったしホワイトボード・ディスプレイなどの設備も使えて良かった&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;運営の方へ&quot;&gt;運営の方へ&lt;/h2&gt;

&lt;p&gt;ベンチマーカーの結果が安定しなかったり、開催日両日共に開始時間が遅れたりもしましたが、参加を終えてその不満も忘れるくらい準備が大変だったろうなぁとお察しします。あれだけのサーバー台数を参加者全員に用意するのは本当にすごい！&lt;/p&gt;

&lt;p&gt;出題についでですが、&lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Controle: Public, max-age&lt;/code&gt;に関して何か色々物申す方がいらっしゃるようですが、これに関しては気づける人はちゃんと気づけたし特段奇問という印象は僕は受けなかったです。&lt;/p&gt;

&lt;p&gt;コンテスト規模は年々拡大する一方ですが、今年も開催してくださりありがとうございました！&lt;/p&gt;

&lt;h2 id=&quot;最後に&quot;&gt;最後に&lt;/h2&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;エンジョイ勢です &lt;a href=&quot;https://twitter.com/hashtag/isucon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#isucon&lt;/a&gt;&lt;/p&gt;&amp;mdash; toshimaru (@toshimaru_e) &lt;a href=&quot;https://twitter.com/toshimaru_e/status/921933892780568576?ref_src=twsrc%5Etfw&quot;&gt;October 22, 2017&lt;/a&gt;
&lt;/blockquote&gt;

&lt;p&gt;今回のisuconはエンジョイ勢として臨んだのですがずっと出たかったisuconだったので実際参加してみてとてもエンジョイできました。&lt;/p&gt;

&lt;p&gt;とはいえ圧倒的なスコア差を上位陣に見せられて悔しさはかなり残りました。今年なんとなくの雰囲気を掴めたので来年も出場し、上位陣に食い込めるように精進していきたいと思います。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;問題: &lt;a href=&quot;https://github.com/isucon/isucon7-qualify&quot;&gt;isucon/isucon7-qualify: ISUCON7 予選問題の参照実装とベンチマーカー&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;今回の出題に関してキャッシュコントロールに関してこちらが参考になります: &lt;a href=&quot;http://landau.jp/blog/10/&quot;&gt;静的ファイルのキャッシュコントロールについて ISUCON7 – そろそろちゃんとやります&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;学びが多い関連エントリ(特に上位陣のは参考になる) &lt;a href=&quot;http://isucon.net/archives/50949740.html&quot;&gt;ISUCON7 オンライン予選 関連エントリまとめ : ISUCON公式Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;過去問: &lt;a href=&quot;https://github.com/matsuu/vagrant-isucon&quot;&gt;https://github.com/matsuu/vagrant-isucon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="isucon" /><summary type="html">isuconに参加してきました。結果は400組中154位で予選敗退。予選敗退となりましたが初めてのisucon参加にしては中の上に食い込めてまぁまぁだったのではないでしょうか。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.toshimaru.net/images/posts/isucon/isucon7.png" /></entry><entry><title type="html">Goの日付フォーマット ―2006年1月2日の謎―</title><link href="http://blog.toshimaru.net/go-time-format/" rel="alternate" type="text/html" title="Goの日付フォーマット ―2006年1月2日の謎―" /><published>2017-09-15T00:00:00+09:00</published><updated>2017-09-15T00:00:00+09:00</updated><id>http://blog.toshimaru.net/go-time-format</id><content type="html" xml:base="http://blog.toshimaru.net/go-time-format/">&lt;p&gt;Goの現在時刻は&lt;code class=&quot;highlighter-rouge&quot;&gt;time.Now()&lt;/code&gt;で取得することができるがフォーマットされた現在日時はどのように取得すればよいだろうか。&lt;/p&gt;

&lt;h2 id=&quot;今日の日付の取得&quot;&gt;今日の日付の取得&lt;/h2&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2006-01-02&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これで今日の日付を取得することができる。&lt;/p&gt;

&lt;h2 id=&quot;2006年1月2日の謎&quot;&gt;2006年1月2日の謎&lt;/h2&gt;

&lt;p&gt;ここで１つの疑問が残る。&lt;code class=&quot;highlighter-rouge&quot;&gt;Format()&lt;/code&gt;の引数として与えられる &lt;strong&gt;2006年1月2日&lt;/strong&gt; は何故なのだろうか。2001年2月3日でもダメだし1234年5月6日でもダメだ。きっちり &lt;strong&gt;2006年1月2日&lt;/strong&gt; でなければならない。&lt;/p&gt;

&lt;p&gt;この理由については下記記事にて解説されている。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;では一体この2006年1月2日という特別な日は、なんの日なのか？&lt;/p&gt;

  &lt;p&gt;最初は1970年1月1日（エポック）から特定の時間が経過した日だとか、あるいはGoが最初に作られた日ではないかと思ったが、それは考えすぎだった。&lt;/p&gt;

  &lt;p&gt;答えは単純だ。これはアメリカ式の時刻の順番なのだ。”1月2日午後3時4分5秒2006年”（つまり「自然な順番」で1, 2, 3, 4, 5, 6）を指しているのである。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;via. &lt;a href=&quot;http://qiita.com/ruiu/items/5936b4c3bd6eb487c182&quot;&gt;Goのtimeパッケージのリファレンスタイム（2006年1月2日）は何の日？ - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;考えてみるとなんてことはない、アメリカ式の時刻の順番で考えたときのインクリメンタルな整数であった。&lt;/p&gt;

&lt;h2 id=&quot;goの内部実装&quot;&gt;Goの内部実装&lt;/h2&gt;

&lt;p&gt;Goでどのように実装されているかを覗いてみる。それぞれの&lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt;がどの数値とマッピングするかがコメントで表現されている。&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                        &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;iota&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdLongMonth&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;             &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;iota&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdNeedDate&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;January&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdMonth&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                       &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;Jan&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdNumMonth&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;1&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdZeroMonth&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                   &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;01&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdLongWeekDay&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                 &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;Monday&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdWeekDay&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                     &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;Mon&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdDay&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                         &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;2&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdUnderDay&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;_2&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdZeroDay&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                     &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;02&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdHour&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;iota&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdNeedClock&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;15&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdHour12&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                      &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;3&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdZeroHour12&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;03&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdMinute&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                      &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;4&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdZeroMinute&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;04&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdSecond&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                      &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;5&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdZeroSecond&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;05&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdLongYear&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;              &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;iota&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdNeedDate&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;2006&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdYear&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                        &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;06&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdPM&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;iota&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdNeedClock&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;PM&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdpm&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                          &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;pm&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdTZ&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;iota&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;MST&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdISO8601TZ&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                   &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;Z0700&quot;  // prints Z for UTC&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdISO8601SecondsTZ&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                            &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;Z070000&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdISO8601ShortTZ&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                              &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;Z07&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdISO8601ColonTZ&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                              &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;Z07:00&quot; // prints Z for UTC&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdISO8601ColonSecondsTZ&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                       &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;Z07:00:00&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdNumTZ&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                       &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;-0700&quot;  // always numeric&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdNumSecondsTz&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;-070000&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdNumShortTZ&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;-07&quot;    // always numeric&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdNumColonTZ&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;-07:00&quot; // always numeric&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdNumColonSecondsTZ&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                           &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;-07:00:00&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdFracSecond0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                 &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;.0&quot;, &quot;.00&quot;, ... , trailing zeros included&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdFracSecond9&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                                 &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// &quot;.9&quot;, &quot;.99&quot;, ..., trailing zeros omitted&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdNeedDate&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;             &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// need month, day, year&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdNeedClock&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;             &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// need hour, minute, second&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdArgShift&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;                 &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// extra argument in high bits, above low stdArgShift&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdMask&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdArgShift&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// mask out argument&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/golang/go/blob/master/src/time/format.go&quot;&gt;https://github.com/golang/go/blob/master/src/time/format.go&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これをみると &lt;code class=&quot;highlighter-rouge&quot;&gt;2006-01-02&lt;/code&gt; は &lt;code class=&quot;highlighter-rouge&quot;&gt;stdLongYear-stdZeroMonth-stdZeroDay&lt;/code&gt; であることがわかる。&lt;/p&gt;

&lt;h2 id=&quot;標準フォーマットrfcなど&quot;&gt;標準フォーマット（RFCなど）&lt;/h2&gt;

&lt;p&gt;RFCなどの標準的な時刻フォーマットもgoが用意してくれている。&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ANSIC&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Mon Jan _2 15:04:05 2006&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UnixDate&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Mon Jan _2 15:04:05 MST 2006&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RubyDate&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Mon Jan 02 15:04:05 -0700 2006&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RFC822&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;02 Jan 06 15:04 MST&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RFC822Z&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;02 Jan 06 15:04 -0700&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// RFC822 with numeric zone&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RFC850&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Monday, 02-Jan-06 15:04:05 MST&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RFC1123&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Mon, 02 Jan 2006 15:04:05 MST&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RFC1123Z&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Mon, 02 Jan 2006 15:04:05 -0700&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// RFC1123 with numeric zone&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RFC3339&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2006-01-02T15:04:05Z07:00&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RFC3339Nano&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2006-01-02T15:04:05.999999999Z07:00&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Kitchen&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3:04PM&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// Handy time stamps.&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Jan _2 15:04:05&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StampMilli&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Jan _2 15:04:05.000&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StampMicro&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Jan _2 15:04:05.000000&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StampNano&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Jan _2 15:04:05.000000000&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これを使って下記のように書くことができる。&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RFC822Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="go" /><summary type="html">Goの現在時刻はtime.Now()で取得することができるがフォーマットされた現在日時はどのように取得すればよいだろうか。</summary></entry><entry><title type="html">Rubyのヒアドキュメントの書き方いろいろ</title><link href="http://blog.toshimaru.net/ruby-heredoc/" rel="alternate" type="text/html" title="Rubyのヒアドキュメントの書き方いろいろ" /><published>2017-08-04T00:00:00+09:00</published><updated>2017-08-04T00:00:00+09:00</updated><id>http://blog.toshimaru.net/ruby-heredoc</id><content type="html" xml:base="http://blog.toshimaru.net/ruby-heredoc/">&lt;p&gt;Rubyの覚えてそうで覚えられないヒアドキュメントの書き方をまとめてみたいと思います。&lt;/p&gt;

&lt;h2 id=&quot;識別子&quot;&gt;&amp;lt;&amp;lt;識別子&lt;/h2&gt;

&lt;p&gt;これがRubyのヒアドキュメントの基本型となります。識別子である&lt;code class=&quot;highlighter-rouge&quot;&gt;EOS&lt;/code&gt;の始点の&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;EOS&lt;/code&gt;から次に出てくる&lt;code class=&quot;highlighter-rouge&quot;&gt;EOS&lt;/code&gt;までの囲まれている部分が文字列となります。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOS&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
    Hello,

    World!
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOS&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#    Hello,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#    World!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上記のコードのコメントアウトされている箇所が定義した&lt;code class=&quot;highlighter-rouge&quot;&gt;hello&lt;/code&gt;メソッドの出力結果となります。&lt;/p&gt;

&lt;h2 id=&quot;-識別子&quot;&gt;&amp;lt;&amp;lt;-識別子&lt;/h2&gt;

&lt;p&gt;上記のコードは終端の&lt;code class=&quot;highlighter-rouge&quot;&gt;EOS&lt;/code&gt;の位置が気に食わないですか？　たしかにdef~endの中で一段ネストさせたいですね。&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;（ダッシュ）を識別子の手前に置けば、こんな書き方が可能です。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOS&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
    Hello,

    World!
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;  EOS&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#    Hello,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#    World!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これで終端の&lt;code class=&quot;highlighter-rouge&quot;&gt;EOS&lt;/code&gt;がメソッドの内部でネストされて可読性が上がりましたね。&lt;/p&gt;

&lt;h2 id=&quot;識別子-1&quot;&gt;&amp;lt;&amp;lt;~識別子&lt;/h2&gt;

&lt;p&gt;でもちょっと待って下さい。本当にほしい文字列は先頭に空白のない文字列だったんです。でも安心してください、Ruby2.3以降は&lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt;（チルダ）を識別子の手前に置いてこう書けるんです。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOS&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
    Hello,

    World!
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;  EOS&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#Hello,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#World!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これでHelloという文字列の手前にあるネストの空白も消してくれました。&lt;/p&gt;

&lt;h2 id=&quot;豆知識-github-syntax-highlight&quot;&gt;豆知識. GitHub Syntax Highlight&lt;/h2&gt;

&lt;p&gt;下記のようにGitHub上にてヒアドキュメントの識別子にsyntaxの指定をすると、GitHub syntax highlightが効くようになります。&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RUBY&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
    def hello
      puts &quot;Hello World!&quot;
    end
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;  RUBY&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/heredoc_rb.png&quot; alt=&quot;heredoc&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.ruby-lang.org/ja/latest/doc/spec=2fliteral.html#here&quot;&gt;リテラル (Ruby 2.4.0) ヒアドキュメント (行指向文字列リテラル)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/Linda_pp/items/32fddbbe117cf03fef0f&quot;&gt;Ruby のヒアドキュメントすごい - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Toshimaru</name></author><category term="ruby" /><summary type="html">Rubyの覚えてそうで覚えられないヒアドキュメントの書き方をまとめてみたいと思います。</summary></entry><entry><title type="html">『達人プログラマー（新装版）』 読んだ</title><link href="http://blog.toshimaru.net/the-pragmatic-programmer/" rel="alternate" type="text/html" title="『達人プログラマー（新装版）』 読んだ" /><published>2017-07-13T00:00:00+09:00</published><updated>2017-07-13T00:00:00+09:00</updated><id>http://blog.toshimaru.net/the-pragmatic-programmer</id><content type="html" xml:base="http://blog.toshimaru.net/the-pragmatic-programmer/">&lt;p&gt;きっかけは&lt;a href=&quot;https://rebuild.fm/&quot;&gt;Rebuild.fm&lt;/a&gt;。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;169: Your Blog Can Be Generated By Neural Networks (&lt;a href=&quot;https://twitter.com/omo2009&quot;&gt;@omo2009&lt;/a&gt;) &lt;a href=&quot;https://t.co/OPtfjQuKQK&quot;&gt;https://t.co/OPtfjQuKQK&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/rebuildfm?src=hash&quot;&gt;#rebuildfm&lt;/a&gt;&lt;/p&gt;&amp;mdash; Rebuild Podcast (@rebuildfm) &lt;a href=&quot;https://twitter.com/rebuildfm/status/812963280134115328&quot;&gt;December 25, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;話されている内容としては&lt;a href=&quot;https://twitter.com/omo2009&quot;&gt;omo&lt;/a&gt;さんがひたすら巷で良本と名高い『&lt;a href=&quot;https://www.amazon.co.jp/dp/427421933X/ref=as_li_ss_il?ie=UTF8&amp;amp;linkCode=li3&amp;amp;tag=toshimaru-22&amp;amp;linkId=d4315939a647434d71937a28ec97f0a6&quot;&gt;達人プログラマー&lt;/a&gt;』をブッタ切るというものだ。omoさんが一時間かけてじっくりディスる対象となる本ということで逆に気になって手に取った本が本書である。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.co.jp/dp/427421933X/ref=as_li_ss_il?ie=UTF8&amp;amp;linkCode=li3&amp;amp;tag=toshimaru-22&amp;amp;linkId=d4315939a647434d71937a28ec97f0a6&quot; target=&quot;_blank&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=427421933X&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=JP&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=toshimaru-22&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;https://ir-jp.amazon-adsystem.com/e/ir?t=toshimaru-22&amp;amp;l=li3&amp;amp;o=9&amp;amp;a=427421933X&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;でどうだったの&quot;&gt;で、どうだったの？&lt;/h2&gt;

&lt;p&gt;一読した感想としては、たいへんに良本であった。1999年出版された本ということもあり、一部古い記述があるもののそれを差し引いても良い本だった。&lt;/p&gt;

&lt;p&gt;本書はざっくり言うと大きく２つの内容が書かれている。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;達人プログラマ&gt;のメンタルモデルの話
&lt;/達人プログラマ&gt;
  &lt;/li&gt;
  &lt;li&gt;技術的なアプローチ・実装の話&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2の部分はさすがに古い本であることもあり今に比べるとかなり時代遅れな印象を受けた。よって本書のそういった箇所は「ふーん」という感じで読み流してしまってもいいだろう&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;では本書の良いところはどこだったのかというと1の部分である。古い本であるにかかわらず書いてあることが全然古びていない。むしろ今エンジニア界隈で言われているあんなことやこんなことが「これほどまで昔から言われていたのか！」という驚きとともに感動があった。&lt;/p&gt;

&lt;p&gt;本書で紹介されているTipsを僕なりの説明・解説とともに紹介してみよう（それぞれのTipsは本書からの引用）。&lt;/p&gt;

&lt;h2 id=&quot;tip-3-いい加減な言い訳よりも対策を用意すること&quot;&gt;Tip 3 いい加減な言い訳よりも対策を用意すること&lt;/h2&gt;

&lt;p&gt;達人プログラマは御託を並べない。Shut the fuck up and write some code（グタグタ言ってないでコード書け）. さっさとバグ・障害に対する対策・ソリューション・再発防止策を練ること。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/pragmatic-programmer/shut.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;via. &lt;a href=&quot;http://stfuawsc.com/&quot;&gt;http://stfuawsc.com/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;関連tips&quot;&gt;関連Tips&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tip 24 避難するのではなく、問題を修復すること&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;バグの原因が誰であるかは関係ない。自分自身の問題として向き合うこと。&lt;/p&gt;

&lt;h2 id=&quot;tip-4-割れた窓を放置しないこと&quot;&gt;Tip 4 割れた窓を放置しないこと&lt;/h2&gt;

&lt;p&gt;まず最初に窓を割らないことが重要。とはいえスピード・納期重視の開発だとどうしても割れた窓を作ってしまう場面もあるだろう。しかしその窓を放置しないこと。放置するとさらに悪い結果を招く。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;「建物の窓が壊れているのを放置すると、誰も注意を払っていないという象徴になり、やがて他の窓もまもなく全て壊される」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;via. &lt;a href=&quot;https://ja.wikipedia.org/wiki/%E5%89%B2%E3%82%8C%E7%AA%93%E7%90%86%E8%AB%96&quot;&gt;割れ窓理論 - Wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;tip-7-品質要求を明確にする&quot;&gt;Tip 7 品質要求を明確にする&lt;/h2&gt;

&lt;p&gt;顧客の品質要求を明確にして、「どこまでやるか」を決めること。開発速度と品質はトレードオフの関係にあることを理解すること。多くの場合、３年かかかって完璧なプロダクトを作るより、３ヶ月でそこそこ動くプロダクトが好まれることが多い。&lt;/p&gt;

&lt;h3 id=&quot;関連tips-1&quot;&gt;関連Tips&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tip 51 要求は拾い集めるものではなく、掘り起こすものである&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最終的な目標は、顧客の要求どおりのものを作るのではなく、ビジネス上の問題を解決するということ。要求の裏に隠れている理由をきちんと把握しておくこと。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/pragmatic-programmer/require.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;via. &lt;a href=&quot;http://dic.nicovideo.jp/a/%E9%A1%A7%E5%AE%A2%E3%81%8C%E6%9C%AC%E5%BD%93%E3%81%AB%E5%BF%85%E8%A6%81%E3%81%A0%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE&quot;&gt;顧客が本当に必要だったものとは - ニコニコ大百科&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;tip-8-あなたの知識ポートフォリオに対して定期的な投資を行うこと&quot;&gt;Tip 8 あなたの知識ポートフォリオに対して定期的な投資を行うこと&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;毎年１つの言語を学習&lt;/li&gt;
  &lt;li&gt;四半期毎に何らかの技術書を読む&lt;/li&gt;
  &lt;li&gt;勉強会・ミートアップに顔を出す&lt;/li&gt;
  &lt;li&gt;インターネットで情報収集し、常に最先端を追う努力をする&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tip-9-見聞きしたものごとを批判的な目で分析すること&quot;&gt;Tip 9 見聞きしたものごとを批判的な目で分析すること&lt;/h2&gt;

&lt;p&gt;例えばブログにそう書いてあったから正しいとか、上司からそのように習ったから正しいとか、みんなそうしているから正しいとか、そんなのは正しいとは言えない。物事を批判的な目で捉え直し、技術的探究心を深めること。&lt;/p&gt;

&lt;h2 id=&quot;tip-10-伝える事柄と伝える方法は車の両輪だと考えること&quot;&gt;Tip 10 伝える事柄と、伝える方法は車の両輪だと考えること&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;自分の言いたいことを明確に&lt;/li&gt;
  &lt;li&gt;聞き手のことを思いやる&lt;/li&gt;
  &lt;li&gt;話すタイミング・スタイルを考える&lt;/li&gt;
  &lt;li&gt;自分も良い聞き手になること&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これはとても興味深かった。これらを端的に言い換えるならば「プログラマにはコミュ力も必要」ということ。きちんと物事を適切な方法で伝えること。&lt;/p&gt;

&lt;h2 id=&quot;tip-11-dry&quot;&gt;Tip 11 DRY&lt;/h2&gt;

&lt;p&gt;Don’t Repeat Yourself. これは説明するまでもないだろう。重複を避ける。同じコードのコピーを３回以上行ったら共通化、同じ作業を三回以上行ったら自動化。&lt;/p&gt;

&lt;h2 id=&quot;tip-13-関係ないもの同士の影響を小さく&quot;&gt;Tip 13 関係ないもの同士の影響を小さく&lt;/h2&gt;

&lt;p&gt;疎結合なコンポーネントを設計すること。このようなコード設計を行うことで下記のメリットが得られる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;生産性が向上&lt;/li&gt;
  &lt;li&gt;再利用性が向上&lt;/li&gt;
  &lt;li&gt;（各コンポーネントが独立しているので）問題を局所化できる&lt;/li&gt;
  &lt;li&gt;堅牢なコードとなる&lt;/li&gt;
  &lt;li&gt;テストがしやすい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;じゃあどうコードを切り分けていけばいいかというと、DDDでいうところの&lt;a href=&quot;https://www.ogis-ri.co.jp/otc/hiroba/technical/DDDEssence/chap2.html&quot;&gt;レイヤードアーキテクチャ&lt;/a&gt;的な設計が推薦されている。またはRails的なMVCアーキテクチャも紹介されている。&lt;/p&gt;

&lt;p&gt;コードの設計をきっちり考えるのとともに、下記もしっかりやっていくように推奨されている。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;コードのリファクタリング&lt;/li&gt;
  &lt;li&gt;コードのテスト&lt;/li&gt;
  &lt;li&gt;ドキュメンテーション&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;関連tips-2&quot;&gt;関連Tips&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tip 36 モジュール間の結合度を最小にすること&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tip 42 モデルからビューを分離する&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;tip-15-目標を見つけるには曳光弾を使うこと&quot;&gt;Tip 15 目標を見つけるには曳光弾を使うこと&lt;/h2&gt;

&lt;p&gt;プロトタイプ vs 曳光弾という対比で出てくる話（個人的にはこの曳光弾という例えはあまり日常的に出てくる言葉ではないのでわかりにくい）。説明すると、プロトタイプ実装は実装が捨てる前提で作られるものである（コンセプト実装）一方、曳光弾開発はそのコードを捨て去るのではなくその後も使われる前提での初期実装を行うことである。メリットは下記の通り。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;早いうちからユーザーにものを提示できる&lt;/li&gt;
  &lt;li&gt;開発者のモチベーションアップ&lt;/li&gt;
  &lt;li&gt;テスト用のプラットフォームが用意される&lt;/li&gt;
  &lt;li&gt;デモが可能になる&lt;/li&gt;
  &lt;li&gt;進捗が明確に&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今風の言葉で言うとアジャイル。まとまったものを丁寧に作るのではなく、さっさと動くものを作ってそれをBeta公開してフィードバックをもらったほうがうまく回るよねという話。今ではわりと常識ですかね。&lt;/p&gt;

&lt;h2 id=&quot;tip-22-１つのエディタを熟知&quot;&gt;Tip 22 １つのエディタを熟知&lt;/h2&gt;

&lt;p&gt;現代の開発では１つのエディタに固執するよりは、開発内容によって適切なエディタ/IDEを選ぶ時代だと個人的に思っているので、開発物に応じた複数のエディタ/IDEを使いこなせるほうが良いと思う。&lt;/p&gt;

&lt;p&gt;と思う一方で、それでもなお１つのエディタに習熟することは大事だと思っている。なぜなら1つのエディアを熟知することでアナロジー的に他のエディタの慣れも早くなるし（「Aエディタでできるあの操作をBエディタではどうやるのだろう」という具合）、熟知しているエディタのパワフルな機能を駆使することで、汎用的なテキストエディット作業時にグンと生産性が向上する場合もあるからだ。&lt;/p&gt;

&lt;h2 id=&quot;tip-23-常にソースコード管理を使用&quot;&gt;Tip 23 常にソースコード管理を使用&lt;/h2&gt;

&lt;p&gt;言うまでもなく、Gitを使うのは当たり前の時代になったし、GitHub（GitLab）でソースコードレビューするのも当たり前となった。&lt;/p&gt;

&lt;h2 id=&quot;tip-27-仮定せずに証明すること&quot;&gt;Tip 27 仮定せずに、証明すること&lt;/h2&gt;

&lt;p&gt;「このバグはこれがきっと原因だろうから、こうすれば直るだろう」「なんかわかんないけど動いた」「この対応で問題は解決しました（未検証）」はやめる。&lt;/p&gt;

&lt;p&gt;バグが発生したならなぜそのようなバグが発生したのかを考えること。そしてそれはテストコードで再発は防止できるのか。同種の問題が他にもないのか。将来同じバグを踏まないためにはどうしたらよいか。そのバグの内容はきちんとチームで共有されているのか。&lt;/p&gt;

&lt;p&gt;エンジニアであれば、「きっと〜だろう」という仮定ではなく、ロジカルに/テクニカルに物事に白黒付けよう。&lt;/p&gt;

&lt;h3 id=&quot;関連tips-3&quot;&gt;関連Tips&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tip 44 偶発的なプログラミングはしない&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;実行するタイミングによって動いたり動かなかったりするようなプログラムは書かない。&lt;/p&gt;

&lt;h2 id=&quot;tip-29-コードを生成するコードを作成すること&quot;&gt;Tip 29 コードを生成するコードを作成すること&lt;/h2&gt;

&lt;p&gt;銀の弾丸はない。が&lt;code class=&quot;highlighter-rouge&quot;&gt;rails new&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;rails generate&lt;/code&gt;のような便利なコードジェネレータが予めフレームワーク側で用意されてある場合も多いので、積極的に使っていこう。&lt;/p&gt;

&lt;h2 id=&quot;tip-30-あなたは完璧なソフトウェアを作れない&quot;&gt;Tip 30 あなたは完璧なソフトウェアを作れない&lt;/h2&gt;

&lt;p&gt;あなたがどんなに優れた開発者であろうと完璧なソフトウェアを作るのは不可能だ。ソフトウェアには多かれ少なかれ必ず何かしらの問題はあるものだ。&lt;/p&gt;

&lt;p&gt;対抗する手段として本書で紹介されているのが、&lt;strong&gt;防衛的コーディング&lt;/strong&gt;や&lt;strong&gt;表明プログラミング&lt;/strong&gt;、&lt;strong&gt;契約による設計&lt;/strong&gt; だが内容は割愛。興味があれば調べてみてほしい。&lt;/p&gt;

&lt;h3 id=&quot;関連tips-4&quot;&gt;関連Tips&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tip 32 早めにクラッシュさせる&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tip 34 例外は例外的な問題のみに使用すること&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;tip41-並列性を意識した設計を行うこと&quot;&gt;Tip41 並列性を意識した設計を行うこと&lt;/h2&gt;

&lt;p&gt;GoのGoroutineのような軽量スレッド的な仕組みで並列処理もかつてよりはとてもやりやすくなったように思う。きちんと並列性を考慮してアプリケーションを設計し、高いパフォーマンス要求にも応えられる作りにしておくこと。&lt;/p&gt;

&lt;h2 id=&quot;tip-45-アルゴリズムのオーダーを見積もること&quot;&gt;Tip 45 アルゴリズムのオーダーを見積もること&lt;/h2&gt;

&lt;p&gt;あるコストのかかる処理があったとして、そのオーダーを見積もってみること。それによってその処理がソフトウェアのパフォーマンスに与える影響度も想像できるはずだ。&lt;/p&gt;

&lt;h3 id=&quot;tip-46-見積もりの検証を行う&quot;&gt;Tip 46 見積もりの検証を行う&lt;/h3&gt;

&lt;p&gt;単純に見積もりだけでは終わらせない。仮定するのではなく、きちんと計測すること。&lt;/p&gt;

&lt;p&gt;早まった最適化にも注意が必要。アルゴリズムの改良はそれが本当にボトルネックになっていることを確認していから行うもの。さもなければただの時間の無駄遣いに終わる。&lt;/p&gt;

&lt;h2 id=&quot;tip-47-早めにリファクタリングこまめにリファクタリング&quot;&gt;Tip 47 早めにリファクタリング、こまめにリファクタリング&lt;/h2&gt;

&lt;p&gt;Tip4の割窓にもつながってくる話。リファクタリングを継続的に行いコードの健全性を保つ。そうすることで達人プログラマの精神衛生も保たれる。&lt;/p&gt;

&lt;p&gt;リファクタリングの対象となるコード例としては下記の通り。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DRY原則に反しているコード&lt;/li&gt;
  &lt;li&gt;時代遅れのコード&lt;/li&gt;
  &lt;li&gt;パフォーマンス悪化しているコード&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;リファクタリングを止めない&quot;&gt;リファクタリングを止めない&lt;/h3&gt;

&lt;p&gt;上司は納期が厳しくリファクタリングに使っている時間はないというかもしれない。しかしそれはリファクタリングを止める理由にはならない。将来問題が発生したときに生じるであろう大量の時間投資のことを考慮にいれること。開発者はときに上司を説得する必要があるかもしれない。&lt;/p&gt;

&lt;h3 id=&quot;リファクタリングのコツ&quot;&gt;リファクタリングのコツ&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;リファクタリングと機能の追加を同時にやらない&lt;/li&gt;
  &lt;li&gt;リファクタリングを始める前にテストをしっかり用意&lt;/li&gt;
  &lt;li&gt;リファクタリングの各作業は小さな単位にまとめ、慎重にすすめること&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;tip-48-テスト設計を行う&quot;&gt;Tip 48 テスト設計を行う&lt;/h2&gt;

&lt;p&gt;これもかつてよりも当たり前になってきてますがテストをきちんと書くこと。テストフレームワーク、CIサービスなどでかつてよりテストは書きやすくなっている時代だ。&lt;/p&gt;

&lt;h3 id=&quot;関連tips-5&quot;&gt;関連Tips&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tip 49 ソフトウェアをテストすること、さもなければユーザーにテストを強いることになる&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tip 62 早めにテスト、何度もテスト、自動でテスト&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;テストは自動化して何度もテストできるようにしておくこと。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tip 63 テストがすべて終わるまでコーディングは終わらない&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;テストが完了してコーディングは終わったといえる。何をテストするかというと下記の通り。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;単体テスト&lt;/li&gt;
  &lt;li&gt;結合テスト&lt;/li&gt;
  &lt;li&gt;妥当性確認・検証&lt;/li&gt;
  &lt;li&gt;リソース消費、エラー、リカバリ&lt;/li&gt;
  &lt;li&gt;パフォーマンステスト&lt;/li&gt;
  &lt;li&gt;ユーザビリティテスト&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tip-54-プロジェクト用語集を作ること&quot;&gt;Tip 54 プロジェクト用語集を作ること&lt;/h2&gt;

&lt;p&gt;DDD的にいうとユビキタス言語。プロジェクトによってはもしかしたら「クライアント」と「顧客」を使い分けているかもしれない。きちんとチーム内で用語に対する定義の共通認識を持っておくこと。&lt;/p&gt;

&lt;h2 id=&quot;tip-55-枠にとらわれずに考えるのではなく枠を見つけること&quot;&gt;Tip 55 枠にとらわれずに考えるのではなく、枠を見つけること&lt;/h2&gt;

&lt;p&gt;手に負えない問題に直面したらすべての手段を列挙して考えてみる。下記を自問してみよう。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;もっと簡単な手段はないか？&lt;/li&gt;
  &lt;li&gt;本当の問題を解決しようとしているか？ それとも末端の技術的問題に引っかかっているのか？&lt;/li&gt;
  &lt;li&gt;それがなぜ問題なのか？&lt;/li&gt;
  &lt;li&gt;解決を難しくしている原因は何なのか？&lt;/li&gt;
  &lt;li&gt;この手段でやり遂げなければならないのか？&lt;/li&gt;
  &lt;li&gt;そもそもそれは解決しなければならない問題なのか？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この問いの中でなにかひらめきが出てくるかもしれない。&lt;/p&gt;

&lt;h2 id=&quot;tip-61-手作業は危険&quot;&gt;Tip 61 手作業は危険&lt;/h2&gt;

&lt;p&gt;最大の敵はプログラムのバグではなく、人間かもしれない。手動オペレーションによりヒューマンエラーを経験した開発者は少なからずいるのではないだろうか。人間は繰り返し作業は得意ではないので、そういう作業は自動化してプログラムにやらせよう。&lt;/p&gt;

&lt;h2 id=&quot;tip-67-日本語をもう一つのプログラミング言語として扱う&quot;&gt;Tip 67 日本語をもう一つのプログラミング言語として扱う&lt;/h2&gt;

&lt;p&gt;つまりソースコード上に書かれた日本語も含めてソースコードということである。&lt;/p&gt;

&lt;p&gt;ソースコード自体がHowを表しているのでコメントにはWhy（目的・ゴール）を記述すること&lt;/p&gt;

&lt;h2 id=&quot;tip-69-ユーザーの期待を少しだけ上回ること&quot;&gt;Tip 69 ユーザーの期待を少しだけ上回ること&lt;/h2&gt;

&lt;p&gt;ユーザーの期待以上の良いものを作れるように心がけよう。&lt;/p&gt;

&lt;h2 id=&quot;さいごに&quot;&gt;さいごに&lt;/h2&gt;

&lt;p&gt;古典だけど良書なので一読する価値はアリ。古きを知りて、今を自戒しよう。&lt;/p&gt;

&lt;iframe style=&quot;width:120px;height:240px;&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;amp;bc1=000000&amp;amp;IS2=1&amp;amp;bg1=FFFFFF&amp;amp;fc1=000000&amp;amp;lc1=0000FF&amp;amp;t=toshimaru-22&amp;amp;o=9&amp;amp;p=8&amp;amp;l=as4&amp;amp;m=amazon&amp;amp;f=ifr&amp;amp;ref=as_ss_li_til&amp;amp;asins=427421933X&amp;amp;linkId=a7988a09a6227e01b89aaf8e7125e0ef&quot;&gt;&lt;/iframe&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;当時の技術水準に照らし合わせて本書のアプローチがどれだけ先進的だったか想像してみるのも面白いかもしれない &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Toshimaru</name></author><category term="tech" /><category term="読書" /><summary type="html">きっかけはRebuild.fm。</summary></entry></feed>